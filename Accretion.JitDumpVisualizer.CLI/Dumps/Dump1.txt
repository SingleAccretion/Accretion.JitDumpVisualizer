****** START compiling HotkeyedMusicPlayer.ArgsTransport:EnqueueArgs(System.String[]) (MethodHash=1effab26)
Generating code for Windows x64
OPTIONS: compCodeOpt = BLENDED_CODE
OPTIONS: compDbgCode = false
OPTIONS: compDbgInfo = true
OPTIONS: compDbgEnC  = false
OPTIONS: compProcedureSplitting   = false
OPTIONS: compProcedureSplittingEH = false
IL to import:
IL_0000  28 05 00 00 06    call         0x6000005
IL_0005  28 04 00 00 06    call         0x6000004
IL_000a  72 01 00 00 70    ldstr        0x70000001
IL_000f  72 73 00 00 70    ldstr        0x70000073
IL_0014  02                ldarg.0     
IL_0015  28 12 00 00 0a    call         0xA000012
IL_001a  74 02 00 00 1b    castclass    0x1B000002
IL_001f  25                dup         
IL_0020  8e                ldlen       
IL_0021  69                conv.i4     
IL_0022  17                ldc.i4.1    
IL_0023  58                add         
IL_0024  8d 32 00 00 01    newarr       0x1000032
IL_0029  0a                stloc.0     
IL_002a  02                ldarg.0     
IL_002b  28 07 00 00 06    call         0x6000007
IL_0030  0b                stloc.1     
IL_0031  06                ldloc.0     
IL_0032  16                ldc.i4.0    
IL_0033  6f 13 00 00 0a    callvirt     0xA000013
IL_0038  06                ldloc.0     
IL_0039  25                dup         
IL_003a  8e                ldlen       
IL_003b  69                conv.i4     
IL_003c  17                ldc.i4.1    
IL_003d  59                sub         
IL_003e  07                ldloc.1     
IL_003f  a2                stelem.ref  
IL_0040  72 01 00 00 70    ldstr        0x70000001
IL_0045  72 73 00 00 70    ldstr        0x70000073
IL_004a  06                ldloc.0     
IL_004b  28 14 00 00 0a    call         0xA000014
IL_0050  28 06 00 00 06    call         0x6000006
IL_0055  2a                ret         

lvaSetClass: setting class for V00 to (00000000D1FFAB1E) System.String[] 
Arg #0    passed in register(s) rcx

lvaSetClass: setting class for V01 to (00000000D1FFAB1E) System.String[] 

lvaSetClass: setting class for V02 to (00000000D1FFAB1E) System.String 

lvaGrabTemp returning 3 (V03 tmp0) (a long lifetime temp) called for OutgoingArgSpace.
; Initial local variable assignments
;
;  V00 arg0              ref  class-hnd
;  V01 loc0              ref  class-hnd
;  V02 loc1              ref  class-hnd
;  V03 OutArgs        lclBlk <na>  "OutgoingArgSpace"
*************** In compInitDebuggingInfo() for HotkeyedMusicPlayer.ArgsTransport:EnqueueArgs(System.String[])
getVars() returned cVars = 0, extendOthers = true
info.compVarScopesCount = 3
    	VarNum 	LVNum 	      Name 	Beg 	End
 0: 	00h 	00h 	  V00 arg0 	000h   	056h
 1: 	01h 	01h 	  V01 loc0 	000h   	056h
 2: 	02h 	02h 	  V02 loc1 	000h   	056h
info.compStmtOffsetsCount    = 0
info.compStmtOffsetsImplicit = 0005h ( STACK_EMPTY CALL_SITE )
*************** In fgFindBasicBlocks() for HotkeyedMusicPlayer.ArgsTransport:EnqueueArgs(System.String[])
Marked V01 as a single def local
Marked V02 as a single def local
Jump targets:
  none
New Basic Block BB01 [0000] created.
BB01 [000..056)
IL Code Size,Instr   86,  34, Basic Block count   1, Local Variable Num,Ref count   4,  8 for method HotkeyedMusicPlayer.ArgsTransport:EnqueueArgs(System.String[])
OPTIONS: opts.MinOpts() == false
Basic block list for 'HotkeyedMusicPlayer.ArgsTransport:EnqueueArgs(System.String[])'

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..056)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

*************** Starting PHASE Pre-import

*************** Finishing PHASE Pre-import

*************** Starting PHASE Importation
*************** In impImport() for HotkeyedMusicPlayer.ArgsTransport:EnqueueArgs(System.String[])

impImportBlockPending for BB01

Importing BB01 (PC=000) of 'HotkeyedMusicPlayer.ArgsTransport:EnqueueArgs(System.String[])'
    [ 0]   0 (0x000) call 06000005
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0


STMT00000 (IL 0x000...  ???)
               [000000] I-C-G-------              *  CALL      void   HotkeyedMusicPlayer.ArgsTransport.AcquireRegistryLock (exactContextHnd=0x00000000D1FFAB1E)

    [ 0]   5 (0x005) call 06000004
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0


STMT00001 (IL 0x005...  ???)
               [000001] I-C-G-------              *  CALL      void   HotkeyedMusicPlayer.ArgsTransport.EnsureRootKeyExists (exactContextHnd=0x00000000D1FFAB1E)

    [ 0]  10 (0x00a) ldstr 70000001
    [ 1]  15 (0x00f) ldstr 70000073
    [ 2]  20 (0x014) ldarg.0
    [ 3]  21 (0x015) call 0A000012
In Compiler::impImportCall: opcode is call, kind=0, callRetType is ref, structSize is 0
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'has exception handling' for 'HotkeyedMusicPlayer.ArgsTransport:EnqueueArgs(System.String[])' calling 'Microsoft.Win32.Registry:GetValue(System.String,System.String,System.Object):System.Object'

INLINER: Marking Microsoft.Win32.Registry:GetValue(System.String,System.String,System.Object):System.Object as NOINLINE because of has exception handling
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'has exception handling'

    [ 1]  26 (0x01a) castclass 1B000002
Considering optimization of castclass from 00000000D1FFAB1E (System.Object) to 00000000D1FFAB1E (System.String[])
Can't optimize since fromClass is inexact

Expanding castclass as call because inline expansion not legal

    [ 1]  31 (0x01f) dup
lvaGrabTemp returning 4 (V04 tmp1) called for dup spill.


STMT00002 (IL 0x00A...  ???)
               [000009] -ACXG-------              *  ASG       ref   
               [000008] D------N----              +--*  LCL_VAR   ref    V04 tmp1         
               [000007] --CXG-------              \--*  CALL help ref    HELPER.CORINFO_HELP_CHKCASTARRAY
               [000006] H------N---- arg0            +--*  CNS_INT(h) long   0xd1ffab1e class
               [000005] --C-G------- arg1            \--*  CALL      ref    Microsoft.Win32.Registry.GetValue
               [000002] ------------ arg0               +--*  CNS_STR   ref   <string constant>
               [000003] ------------ arg1               +--*  CNS_STR   ref   <string constant>
               [000004] ------------ arg2               \--*  LCL_VAR   ref    V00 arg0         
Marked V04 as a single def local

lvaSetClass: setting class for V04 to (00000000D1FFAB1E) System.String[] 

    [ 2]  32 (0x020) ldlen
    [ 2]  33 (0x021) conv.i4
    [ 2]  34 (0x022) ldc.i4.1 1
    [ 3]  35 (0x023) add
    [ 2]  36 (0x024) newarr 01000032
    [ 2]  41 (0x029) stloc.0
lvaUpdateClass: Updating class for V01 from (00000000D1FFAB1E) System.String[] to (00000000D1FFAB1E) System.String[] [exact]


STMT00003 (IL   ???...  ???)
               [000019] -ACXG-------              *  ASG       ref   
               [000018] D------N----              +--*  LCL_VAR   ref    V01 loc0         
               [000017] --CXG-------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWARR_1_OBJ
               [000015] H----------- arg0            +--*  CNS_INT(h) long   0xd1ffab1e class
               [000016] ---X-------- arg1            \--*  CAST      long <- int
               [000014] ---X--------                    \--*  ADD       int   
               [000012] ---X--------                       +--*  ARR_LENGTH int   
               [000011] ------------                       |  \--*  LCL_VAR   ref    V04 tmp1         
               [000013] ------------                       \--*  CNS_INT   int    1

    [ 1]  42 (0x02a) ldarg.0
    [ 2]  43 (0x02b) call 06000007
In Compiler::impImportCall: opcode is call, kind=0, callRetType is ref, structSize is 0


STMT00004 (IL   ???...  ???)
               [000021] I-C-G-------              *  CALL      ref    HotkeyedMusicPlayer.ArgsTransport.EncodeArgs (exactContextHnd=0x00000000D1FFAB1E)
               [000020] ------------ arg0         \--*  LCL_VAR   ref    V00 arg0         

    [ 2]  48 (0x030) stloc.1Named Intrinsic HotkeyedMusicPlayer.ArgsTransport.EncodeArgs: Not recognized


STMT00005 (IL   ???...  ???)
               [000024] -AC---------              *  ASG       ref   
               [000023] D------N----              +--*  LCL_VAR   ref    V02 loc1         
               [000022] --C---------              \--*  RET_EXPR  ref   (inl return from call [000021])

    [ 1]  49 (0x031) ldloc.0
    [ 2]  50 (0x032) ldc.i4.0 0
    [ 3]  51 (0x033) callvirt 0A000013
In Compiler::impImportCall: opcode is callvirt, kind=0, callRetType is void, structSize is 0


STMT00006 (IL   ???...  ???)
               [000027] I-C-G-------              *  CALL nullcheck void   System.Array.CopyTo (exactContextHnd=0x00000000D1FFAB1E)
               [000010] ------------ this in rcx  +--*  LCL_VAR   ref    V04 tmp1         
               [000025] ------------ arg1         +--*  LCL_VAR   ref    V01 loc0         
               [000026] ------------ arg2         \--*  CNS_INT   int    0

    [ 0]  56 (0x038) ldloc.0
    [ 1]  57 (0x039) dup
    [ 2]  58 (0x03a) ldlen
    [ 2]  59 (0x03b) conv.i4
    [ 2]  60 (0x03c) ldc.i4.1 1
    [ 3]  61 (0x03d) sub
    [ 2]  62 (0x03e) ldloc.1
    [ 3]  63 (0x03f) stelem.ref
stelem to T[] with T exact: skipping covariant store check


STMT00007 (IL 0x038...  ???)
               [000035] -A-XG-------              *  ASG       ref   
               [000034] ---XG--N----              +--*  INDEX     ref   
               [000028] ------------              |  +--*  LCL_VAR   ref    V01 loc0         
               [000032] ---X--------              |  \--*  SUB       int   
               [000030] ---X--------              |     +--*  ARR_LENGTH int   
               [000029] ------------              |     |  \--*  LCL_VAR   ref    V01 loc0         
               [000031] ------------              |     \--*  CNS_INT   int    1
               [000033] ------------              \--*  LCL_VAR   ref    V02 loc1         

    [ 0]  64 (0x040) ldstr 70000001
    [ 1]  69 (0x045) ldstr 70000073
    [ 2]  74 (0x04a) ldloc.0
    [ 3]  75 (0x04b) call 0A000014
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0


STMT00008 (IL 0x040...  ???)
               [000039] I-C-G-------              *  CALL      void   Microsoft.Win32.Registry.SetValue (exactContextHnd=0x00000000D1FFAB1E)
               [000036] ------------ arg0         +--*  CNS_STR   ref   <string constant>
               [000037] ------------ arg1         +--*  CNS_STR   ref   <string constant>
               [000038] ------------ arg2         \--*  LCL_VAR   ref    V01 loc0         

    [ 0]  80 (0x050) call 06000006 (Implicit Tail call: prefixFlags |= PREFIX_TAILCALL_IMPLICIT)
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0

GTF_CALL_M_IMPLICIT_TAILCALL set for call [000040]


STMT00009 (IL 0x050...  ???)
               [000040] I-C-G-------              *  CALL      void   HotkeyedMusicPlayer.ArgsTransport.ReleaseRegistryLock (exactContextHnd=0x00000000D1FFAB1E)

    [ 0]  85 (0x055) ret

STMT00010 (IL 0x055...  ???)
               [000041] ------------              *  RETURN    void  

*************** Finishing PHASE Importation
Trees after Importation

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..056)        (return)                     i idxlen new[] 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..056) (return), preds={} succs={}

***** BB01
STMT00000 (IL 0x000...0x029)
               [000000] I-C-G-------              *  CALL      void   HotkeyedMusicPlayer.ArgsTransport.AcquireRegistryLock (exactContextHnd=0x00000000D1FFAB1E)

***** BB01
STMT00001 (IL 0x005...  ???)
               [000001] I-C-G-------              *  CALL      void   HotkeyedMusicPlayer.ArgsTransport.EnsureRootKeyExists (exactContextHnd=0x00000000D1FFAB1E)

***** BB01
STMT00002 (IL 0x00A...  ???)
               [000009] -ACXG-------              *  ASG       ref   
               [000008] D------N----              +--*  LCL_VAR   ref    V04 tmp1         
               [000007] --CXG-------              \--*  CALL help ref    HELPER.CORINFO_HELP_CHKCASTARRAY
               [000006] H------N---- arg0            +--*  CNS_INT(h) long   0xd1ffab1e class
               [000005] --C-G------- arg1            \--*  CALL      ref    Microsoft.Win32.Registry.GetValue
               [000002] ------------ arg0               +--*  CNS_STR   ref   <string constant>
               [000003] ------------ arg1               +--*  CNS_STR   ref   <string constant>
               [000004] ------------ arg2               \--*  LCL_VAR   ref    V00 arg0         

***** BB01
STMT00003 (IL   ???...  ???)
               [000019] -ACXG-------              *  ASG       ref   
               [000018] D------N----              +--*  LCL_VAR   ref    V01 loc0         
               [000017] --CXG-------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWARR_1_OBJ
               [000015] H----------- arg0            +--*  CNS_INT(h) long   0xd1ffab1e class
               [000016] ---X-------- arg1            \--*  CAST      long <- int
               [000014] ---X--------                    \--*  ADD       int   
               [000012] ---X--------                       +--*  ARR_LENGTH int   
               [000011] ------------                       |  \--*  LCL_VAR   ref    V04 tmp1         
               [000013] ------------                       \--*  CNS_INT   int    1

***** BB01
STMT00004 (IL   ???...0x030)
               [000021] I-C-G-------              *  CALL      ref    HotkeyedMusicPlayer.ArgsTransport.EncodeArgs (exactContextHnd=0x00000000D1FFAB1E)
               [000020] ------------ arg0         \--*  LCL_VAR   ref    V00 arg0         

***** BB01
STMT00005 (IL   ???...  ???)
               [000024] -AC---------              *  ASG       ref   
               [000023] D------N----              +--*  LCL_VAR   ref    V02 loc1         
               [000022] --C---------              \--*  RET_EXPR  ref   (inl return from call [000021])

***** BB01
STMT00006 (IL   ???...0x03F)
               [000027] I-C-G-------              *  CALL nullcheck void   System.Array.CopyTo (exactContextHnd=0x00000000D1FFAB1E)
               [000010] ------------ this in rcx  +--*  LCL_VAR   ref    V04 tmp1         
               [000025] ------------ arg1         +--*  LCL_VAR   ref    V01 loc0         
               [000026] ------------ arg2         \--*  CNS_INT   int    0

***** BB01
STMT00007 (IL 0x038...  ???)
               [000035] -A-XG-------              *  ASG       ref   
               [000034] ---XG--N----              +--*  INDEX     ref   
               [000028] ------------              |  +--*  LCL_VAR   ref    V01 loc0         
               [000032] ---X--------              |  \--*  SUB       int   
               [000030] ---X--------              |     +--*  ARR_LENGTH int   
               [000029] ------------              |     |  \--*  LCL_VAR   ref    V01 loc0         
               [000031] ------------              |     \--*  CNS_INT   int    1
               [000033] ------------              \--*  LCL_VAR   ref    V02 loc1         

***** BB01
STMT00008 (IL 0x040...0x055)
               [000039] I-C-G-------              *  CALL      void   Microsoft.Win32.Registry.SetValue (exactContextHnd=0x00000000D1FFAB1E)
               [000036] ------------ arg0         +--*  CNS_STR   ref   <string constant>
               [000037] ------------ arg1         +--*  CNS_STR   ref   <string constant>
               [000038] ------------ arg2         \--*  LCL_VAR   ref    V01 loc0         

***** BB01
STMT00009 (IL 0x050...  ???)
               [000040] I-C-G-------              *  CALL      void   HotkeyedMusicPlayer.ArgsTransport.ReleaseRegistryLock (exactContextHnd=0x00000000D1FFAB1E)

***** BB01
STMT00010 (IL 0x055...  ???)
               [000041] ------------              *  RETURN    void  

-------------------------------------------------------------------------------------------------------------------

*************** Starting PHASE Indirect call transform

 -- no candidates to transform

*************** Finishing PHASE Indirect call transform [no changes]

*************** Starting PHASE Expand patchpoints

 -- no patchpoints to transform

*************** Finishing PHASE Expand patchpoints [no changes]

*************** Starting PHASE Post-import

*************** Finishing PHASE Post-import

*************** Starting PHASE Morph - Init

New BlockSet epoch 1, # of blocks (including unused BB00): 2, bitset array size: 1 (short)

*************** In fgRemoveEmptyBlocks

*************** Finishing PHASE Morph - Init
*************** In fgDebugCheckBBlist

*************** Starting PHASE Morph - Inlining
Expanding INLINE_CANDIDATE in statement STMT00000 in BB01:
STMT00000 (IL 0x000...0x029)
               [000000] I-C-G-------              *  CALL      void   HotkeyedMusicPlayer.ArgsTransport.AcquireRegistryLock (exactContextHnd=0x00000000D1FFAB1E)
INLINER: inlineInfo.tokenLookupContextHandle for HotkeyedMusicPlayer.ArgsTransport:AcquireRegistryLock() set to 0x00000000D1FFAB1E:

Invoking compiler for the inlinee method HotkeyedMusicPlayer.ArgsTransport:AcquireRegistryLock() :
IL to import:
IL_0000  7e 05 00 00 04    ldsfld       0x4000005
IL_0005  6f 18 00 00 0a    callvirt     0xA000018
IL_000a  26                pop         
IL_000b  2a                ret         

INLINER impTokenLookupContextHandle for HotkeyedMusicPlayer.ArgsTransport:AcquireRegistryLock() is 0x00000000D1FFAB1E.
*************** In fgFindBasicBlocks() for HotkeyedMusicPlayer.ArgsTransport:AcquireRegistryLock()
Jump targets:
  none
Computing inlinee profile scale:
   ... call site not profiled
New Basic Block BB02 [0001] created.
BB02 [000..00C)
Basic block list for 'HotkeyedMusicPlayer.ArgsTransport:AcquireRegistryLock()'

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB02 [0001]  1                             1       [000..00C)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

*************** Inline @[000000] Starting PHASE Pre-import

*************** Inline @[000000] Finishing PHASE Pre-import

*************** Inline @[000000] Starting PHASE Importation
*************** In impImport() for HotkeyedMusicPlayer.ArgsTransport:AcquireRegistryLock()

impImportBlockPending for BB02

Importing BB02 (PC=000) of 'HotkeyedMusicPlayer.ArgsTransport:AcquireRegistryLock()'
    [ 0]   0 (0x000) ldsfld 04000005
    [ 1]   5 (0x005) callvirt 0A000018
In Compiler::impImportCall: opcode is callvirt, kind=4, callRetType is bool, structSize is 0
Querying runtime about current class of field HotkeyedMusicPlayer.ArgsTransport._registryLock (declared as System.Threading.Mutex)
Field's current class not available

impDevirtualizeCall: Trying to devirtualize virtual call:
    class for 'this' is System.Threading.Mutex [final] (attrib 21000010)
    base method is System.Threading.WaitHandle::WaitOne
    devirt to System.Threading.WaitHandle::WaitOne -- final class
               [000048] --CXG-------              *  CALLV ind int    System.Threading.WaitHandle.WaitOne
               [000047] --CXG------- this in rcx  \--*  COMMA     ref   
               [000046] H-CXG-------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
               [000044] ------------ arg0            |  +--*  CNS_INT   long   0x7ffc7e4c17a0
               [000045] ------------ arg1            |  \--*  CNS_INT   int    1
               [000042] ----G-------                 \--*  FIELD     ref    _registryLock
    final class; can devirtualize
... after devirt...
               [000048] --CXG-------              *  CALL nullcheck int    System.Threading.WaitHandle.WaitOne
               [000047] --CXG------- this in rcx  \--*  COMMA     ref   
               [000046] H-CXG-------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
               [000044] ------------ arg0            |  +--*  CNS_INT   long   0x7ffc7e4c17a0
               [000045] ------------ arg1            |  \--*  CNS_INT   int    1
               [000042] ----G-------                 \--*  FIELD     ref    _registryLock


               [000048] I-CXG-------              *  CALL nullcheck int    System.Threading.WaitHandle.WaitOne (exactContextHnd=0x00000000D1FFAB1E)
               [000047] --CXG------- this in rcx  \--*  COMMA     ref   
               [000046] H-CXG-------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
               [000044] ------------ arg0            |  +--*  CNS_INT   long   0x7ffc7e4c17a0
               [000045] ------------ arg1            |  \--*  CNS_INT   int    1
               [000042] ----G-------                 \--*  FIELD     ref    _registryLock

    [ 1]  10 (0x00a) pop

               [000051] --C---------              *  COMMA     void  
               [000049] --C---------              +--*  RET_EXPR  int   (inl return from call [000048])
               [000050] ------------              \--*  NOP       void  

    [ 0]  11 (0x00b) ret
*************** Inline @[000000] Finishing PHASE Importation
Trees after Importation

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB02 [0001]  1                             1       [000..00C)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB02 [000..00C) (return), preds={} succs={}

***** BB02
               [000048] I-CXG-------              *  CALL nullcheck int    System.Threading.WaitHandle.WaitOne (exactContextHnd=0x00000000D1FFAB1E)
               [000047] --CXG------- this in rcx  \--*  COMMA     ref   
               [000046] H-CXG-------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
               [000044] ------------ arg0            |  +--*  CNS_INT   long   0x7ffc7e4c17a0
               [000045] ------------ arg1            |  \--*  CNS_INT   int    1
               [000042] ----G-------                 \--*  FIELD     ref    _registryLock

***** BB02
               [000051] --C---------              *  COMMA     void  
               [000049] --C---------              +--*  RET_EXPR  int   (inl return from call [000048])
               [000050] ------------              \--*  NOP       void  

-------------------------------------------------------------------------------------------------------------------

*************** Inline @[000000] Starting PHASE Indirect call transform

 -- no candidates to transform

*************** Inline @[000000] Finishing PHASE Indirect call transform [no changes]

*************** Inline @[000000] Starting PHASE Expand patchpoints

 -- no patchpoints to transform

*************** Inline @[000000] Finishing PHASE Expand patchpoints [no changes]

*************** Inline @[000000] Starting PHASE Post-import

*************** In fgRemoveEmptyBlocks

*************** Inline @[000000] Finishing PHASE Post-import


----------- Statements (and blocks) added due to the inlining of call [000000] -----------

Inlinee method body:
STMT00011 (IL 0x000...  ???)
               [000048] I-CXG-------              *  CALL nullcheck int    System.Threading.WaitHandle.WaitOne (exactContextHnd=0x00000000D1FFAB1E)
               [000047] --CXG------- this in rcx  \--*  COMMA     ref   
               [000046] H-CXG-------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
               [000044] ------------ arg0            |  +--*  CNS_INT   long   0x7ffc7e4c17a0
               [000045] ------------ arg1            |  \--*  CNS_INT   int    1
               [000042] ----G-------                 \--*  FIELD     ref    _registryLock


STMT00012 (IL 0x000...  ???)
               [000051] --C---------              *  COMMA     void  
               [000049] --C---------              +--*  RET_EXPR  int   (inl return from call [000048])
               [000050] ------------              \--*  NOP       void  

fgInlineAppendStatements: no gc ref inline locals.
Successfully inlined HotkeyedMusicPlayer.ArgsTransport:AcquireRegistryLock() (12 IL bytes) (depth 1) [below ALWAYS_INLINE size]
--------------------------------------------------------------------------------------------

INLINER: during 'fgInline' result 'success' reason 'below ALWAYS_INLINE size' for 'HotkeyedMusicPlayer.ArgsTransport:EnqueueArgs(System.String[])' calling 'HotkeyedMusicPlayer.ArgsTransport:AcquireRegistryLock()'
INLINER: during 'fgInline' result 'success' reason 'below ALWAYS_INLINE size'
Expanding INLINE_CANDIDATE in statement STMT00011 in BB01:
STMT00011 (IL 0x000...  ???)
               [000048] I-CXG-------              *  CALL nullcheck int    System.Threading.WaitHandle.WaitOne (exactContextHnd=0x00000000D1FFAB1E)
               [000047] --CXG------- this in rcx  \--*  COMMA     ref   
               [000046] H-CXG-------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
               [000044] ------------ arg0            |  +--*  CNS_INT   long   0x7ffc7e4c17a0
               [000045] ------------ arg1            |  \--*  CNS_INT   int    1
               [000042] ----G-------                 \--*  FIELD     ref    _registryLock
thisArg: has global refs has side effects
               [000047] --CXG-------              *  COMMA     ref   
               [000046] H-CXG-------              +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
               [000044] ------------ arg0         |  +--*  CNS_INT   long   0x7ffc7e4c17a0
               [000045] ------------ arg1         |  \--*  CNS_INT   int    1
               [000042] ----G-------              \--*  FIELD     ref    _registryLock

INLINER: inlineInfo.tokenLookupContextHandle for System.Threading.WaitHandle:WaitOne():bool:this set to 0x00000000D1FFAB1E:

Invoking compiler for the inlinee method System.Threading.WaitHandle:WaitOne():bool:this :
IL to import:
IL_0000  02                ldarg.0     
IL_0001  15                ldc.i4.m1   
IL_0002  28 61 27 00 06    call         0x6002761
IL_0007  2a                ret         

INLINER impTokenLookupContextHandle for System.Threading.WaitHandle:WaitOne():bool:this is 0x00000000D1FFAB1E.
*************** In fgFindBasicBlocks() for System.Threading.WaitHandle:WaitOne():bool:this
Jump targets:
  none
Computing inlinee profile scale:
   ... call site not profiled
New Basic Block BB03 [0002] created.
BB03 [000..008)
Basic block list for 'System.Threading.WaitHandle:WaitOne():bool:this'

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB03 [0002]  1                             1       [000..008)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

*************** Inline @[000048] Starting PHASE Pre-import

*************** Inline @[000048] Finishing PHASE Pre-import

*************** Inline @[000048] Starting PHASE Importation
*************** In impImport() for System.Threading.WaitHandle:WaitOne():bool:this

impImportBlockPending for BB03

Importing BB03 (PC=000) of 'System.Threading.WaitHandle:WaitOne():bool:this'
    [ 0]   0 (0x000) ldarg.0
lvaGrabTemp returning 5 (V05 tmp2) called for Inlining Arg.
Marked V05 as a single def temp
Querying runtime about current class of field HotkeyedMusicPlayer.ArgsTransport._registryLock (declared as System.Threading.Mutex)
Field's current class not available

lvaSetClass: setting class for V05 to (00000000D1FFAB1E) System.Threading.Mutex 

    [ 1]   1 (0x001) ldc.i4.m1 -1
    [ 2]   2 (0x002) call 06002761
In Compiler::impImportCall: opcode is call, kind=0, callRetType is bool, structSize is 0
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'has exception handling' for 'System.Threading.WaitHandle:WaitOne():bool:this' calling 'System.Threading.WaitHandle:WaitOneNoCheck(int):bool:this'

INLINER: Marking System.Threading.WaitHandle:WaitOneNoCheck(int):bool:this as NOINLINE because of has exception handling
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'has exception handling'

    [ 1]   7 (0x007) ret

    Inlinee Return expression (before normalization)  =>
               [000055] --C-G-------              *  CALL      int    System.Threading.WaitHandle.WaitOneNoCheck
               [000053] ------------ this in rcx  +--*  LCL_VAR   ref    V05 tmp2         
               [000054] ------------ arg1         \--*  CNS_INT   int    -1


    Inlinee Return expression (after normalization) =>
               [000055] --C-G-------              *  CALL      int    System.Threading.WaitHandle.WaitOneNoCheck
               [000053] ------------ this in rcx  +--*  LCL_VAR   ref    V05 tmp2         
               [000054] ------------ arg1         \--*  CNS_INT   int    -1

** Note: inlinee IL was partially imported -- imported 0 of 8 bytes of method IL

*************** Inline @[000048] Finishing PHASE Importation
Trees after Importation

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB03 [0002]  1                             1       [000..008)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB03 [000..008) (return), preds={} succs={}

-------------------------------------------------------------------------------------------------------------------

*************** Inline @[000048] Starting PHASE Indirect call transform

 -- no candidates to transform

*************** Inline @[000048] Finishing PHASE Indirect call transform [no changes]

*************** Inline @[000048] Starting PHASE Expand patchpoints

 -- no patchpoints to transform

*************** Inline @[000048] Finishing PHASE Expand patchpoints [no changes]

*************** Inline @[000048] Starting PHASE Post-import

*************** In fgRemoveEmptyBlocks

*************** Inline @[000048] Finishing PHASE Post-import


----------- Statements (and blocks) added due to the inlining of call [000048] -----------

Arguments setup:
STMT00013 (IL 0x000...  ???)
               [000059] -ACXG-------              *  ASG       ref   
               [000058] D------N----              +--*  LCL_VAR   ref    V05 tmp2         
               [000047] --CXG-------              \--*  COMMA     ref   
               [000046] H-CXG-------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
               [000044] ------------ arg0            |  +--*  CNS_INT   long   0x7ffc7e4c17a0
               [000045] ------------ arg1            |  \--*  CNS_INT   int    1
               [000042] ----G-------                 \--*  FIELD     ref    _registryLock

Inlinee method body:fgInlineAppendStatements: no gc ref inline locals.

Return expression for call at [000048] is
               [000055] --C-G-------              *  CALL      int    System.Threading.WaitHandle.WaitOneNoCheck
               [000053] ------------ this in rcx  +--*  LCL_VAR   ref    V05 tmp2         
               [000054] ------------ arg1         \--*  CNS_INT   int    -1
Successfully inlined System.Threading.WaitHandle:WaitOne():bool:this (8 IL bytes) (depth 2) [below ALWAYS_INLINE size]
--------------------------------------------------------------------------------------------

INLINER: during 'fgInline' result 'success' reason 'below ALWAYS_INLINE size' for 'HotkeyedMusicPlayer.ArgsTransport:EnqueueArgs(System.String[])' calling 'System.Threading.WaitHandle:WaitOne():bool:this'
INLINER: during 'fgInline' result 'success' reason 'below ALWAYS_INLINE size'
Querying runtime about current class of field HotkeyedMusicPlayer.ArgsTransport._registryLock (declared as System.Threading.Mutex)
Field's current class not available

Replacing the return expression placeholder [000049] with [000055]
               [000049] --C---------              *  RET_EXPR  int   (inl return from call [000055])

Inserting the inline return expression
               [000055] --C-G-------              *  CALL      int    System.Threading.WaitHandle.WaitOneNoCheck
               [000053] ------------ this in rcx  +--*  LCL_VAR   ref    V05 tmp2         
               [000054] ------------ arg1         \--*  CNS_INT   int    -1

Expanding INLINE_CANDIDATE in statement STMT00001 in BB01:
STMT00001 (IL 0x005...  ???)
               [000001] I-C-G-------              *  CALL      void   HotkeyedMusicPlayer.ArgsTransport.EnsureRootKeyExists (exactContextHnd=0x00000000D1FFAB1E)
INLINER: inlineInfo.tokenLookupContextHandle for HotkeyedMusicPlayer.ArgsTransport:EnsureRootKeyExists() set to 0x00000000D1FFAB1E:

Invoking compiler for the inlinee method HotkeyedMusicPlayer.ArgsTransport:EnsureRootKeyExists() :
IL to import:
IL_0000  72 01 00 00 70    ldstr        0x70000001
IL_0005  72 73 00 00 70    ldstr        0x70000073
IL_000a  7e 04 00 00 04    ldsfld       0x4000004
IL_000f  28 12 00 00 0a    call         0xA000012
IL_0014  2d 14             brtrue.s     20 (IL_002a)
IL_0016  72 01 00 00 70    ldstr        0x70000001
IL_001b  72 73 00 00 70    ldstr        0x70000073
IL_0020  7e 04 00 00 04    ldsfld       0x4000004
IL_0025  28 14 00 00 0a    call         0xA000014
IL_002a  2a                ret         

INLINER impTokenLookupContextHandle for HotkeyedMusicPlayer.ArgsTransport:EnsureRootKeyExists() is 0x00000000D1FFAB1E.
*************** In fgFindBasicBlocks() for HotkeyedMusicPlayer.ArgsTransport:EnsureRootKeyExists()
weight= 66 : state 102 [ ldstr ]
weight= 66 : state 102 [ ldstr ]
weight=159 : state 112 [ ldsfld ]
weight= 79 : state  40 [ call ]
weight= 25 : state  45 [ brtrue.s ]
weight= 66 : state 102 [ ldstr ]
weight= 66 : state 102 [ ldstr ]
weight=159 : state 112 [ ldsfld ]
weight= 79 : state  40 [ call ]
weight= 19 : state  42 [ ret ]

Inline candidate looks like a wrapper method.  Multiplier increased to 1.
Inline candidate callsite is boring.  Multiplier increased to 2.3.
calleeNativeSizeEstimate=784
callsiteNativeSizeEstimate=55
benefit multiplier=2.3
threshold=126
Native estimate for function size exceeds threshold for inlining 78.4 > 12.6 (multiplier = 2.3)


Inline expansion aborted, inline not profitable
INLINER: during 'fgInline' result 'failed this call site' reason 'unprofitable inline' for 'HotkeyedMusicPlayer.ArgsTransport:EnqueueArgs(System.String[])' calling 'HotkeyedMusicPlayer.ArgsTransport:EnsureRootKeyExists()'
INLINER: during 'fgInline' result 'failed this call site' reason 'unprofitable inline'
Expanding INLINE_CANDIDATE in statement STMT00004 in BB01:
STMT00004 (IL   ???...0x030)
               [000021] I-C-G-------              *  CALL      ref    HotkeyedMusicPlayer.ArgsTransport.EncodeArgs (exactContextHnd=0x00000000D1FFAB1E)
               [000020] ------------ arg0         \--*  LCL_VAR   ref    V00 arg0         

Argument #0: is a local var
               [000020] ------------              *  LCL_VAR   ref    V00 arg0         

INLINER: inlineInfo.tokenLookupContextHandle for HotkeyedMusicPlayer.ArgsTransport:EncodeArgs(System.String[]):System.String set to 0x00000000D1FFAB1E:

Invoking compiler for the inlinee method HotkeyedMusicPlayer.ArgsTransport:EncodeArgs(System.String[]):System.String :
IL to import:
IL_0000  1f 7c             ldc.i4.s     0x7C
IL_0002  02                ldarg.0     
IL_0003  28 1a 00 00 0a    call         0xA00001A
IL_0008  2a                ret         

INLINER impTokenLookupContextHandle for HotkeyedMusicPlayer.ArgsTransport:EncodeArgs(System.String[]):System.String is 0x00000000D1FFAB1E.
*************** In fgFindBasicBlocks() for HotkeyedMusicPlayer.ArgsTransport:EncodeArgs(System.String[]):System.String
Jump targets:
  none
Computing inlinee profile scale:
   ... call site not profiled
New Basic Block BB04 [0003] created.
BB04 [000..009)
Basic block list for 'HotkeyedMusicPlayer.ArgsTransport:EncodeArgs(System.String[]):System.String'

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB04 [0003]  1                             1       [000..009)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

*************** Inline @[000021] Starting PHASE Pre-import

*************** Inline @[000021] Finishing PHASE Pre-import

*************** Inline @[000021] Starting PHASE Importation
*************** In impImport() for HotkeyedMusicPlayer.ArgsTransport:EncodeArgs(System.String[]):System.String

impImportBlockPending for BB04

Importing BB04 (PC=000) of 'HotkeyedMusicPlayer.ArgsTransport:EncodeArgs(System.String[]):System.String'
    [ 0]   0 (0x000) ldc.i4.s 124
    [ 1]   2 (0x002) ldarg.0
    [ 2]   3 (0x003) call 0A00001A
In Compiler::impImportCall: opcode is call, kind=0, callRetType is ref, structSize is 0


               [000062] I-C-G-------              *  CALL      ref    System.String.Join (exactContextHnd=0x00000000D1FFAB1E)
               [000063] ------------ arg0         +--*  PUTARG_TYPE ushort
               [000061] ------------              |  \--*  CNS_INT   int    124
               [000020] ------------ arg1         \--*  LCL_VAR   ref    V00 arg0         

    [ 1]   8 (0x008) ret

    Inlinee Return expression (before normalization)  =>
               [000064] --C---------              *  RET_EXPR  ref   (inl return from call [000062])


    Inlinee Return expression (after normalization) =>
               [000064] --C---------              *  RET_EXPR  ref   (inl return from call [000062])

*************** Inline @[000021] Finishing PHASE Importation
Trees after Importation

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB04 [0003]  1                             1       [000..009)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB04 [000..009) (return), preds={} succs={}

***** BB04
               [000062] I-C-G-------              *  CALL      ref    System.String.Join (exactContextHnd=0x00000000D1FFAB1E)
               [000063] ------------ arg0         +--*  PUTARG_TYPE ushort
               [000061] ------------              |  \--*  CNS_INT   int    124
               [000020] ------------ arg1         \--*  LCL_VAR   ref    V00 arg0         

-------------------------------------------------------------------------------------------------------------------

*************** Inline @[000021] Starting PHASE Indirect call transform

 -- no candidates to transform

*************** Inline @[000021] Finishing PHASE Indirect call transform [no changes]

*************** Inline @[000021] Starting PHASE Expand patchpoints

 -- no patchpoints to transform

*************** Inline @[000021] Finishing PHASE Expand patchpoints [no changes]

*************** Inline @[000021] Starting PHASE Post-import

*************** In fgRemoveEmptyBlocks

*************** Inline @[000021] Finishing PHASE Post-import


----------- Statements (and blocks) added due to the inlining of call [000021] -----------

Arguments setup:

Inlinee method body:
STMT00015 (IL   ???...  ???)
               [000062] I-C-G-------              *  CALL      ref    System.String.Join (exactContextHnd=0x00000000D1FFAB1E)
               [000063] ------------ arg0         +--*  PUTARG_TYPE ushort
               [000061] ------------              |  \--*  CNS_INT   int    124
               [000020] ------------ arg1         \--*  LCL_VAR   ref    V00 arg0         

fgInlineAppendStatements: no gc ref inline locals.

Return expression for call at [000021] is
               [000064] --C---------              *  RET_EXPR  ref   (inl return from call [000062])
Successfully inlined HotkeyedMusicPlayer.ArgsTransport:EncodeArgs(System.String[]):System.String (9 IL bytes) (depth 1) [below ALWAYS_INLINE size]
--------------------------------------------------------------------------------------------

INLINER: during 'fgInline' result 'success' reason 'below ALWAYS_INLINE size' for 'HotkeyedMusicPlayer.ArgsTransport:EnqueueArgs(System.String[])' calling 'HotkeyedMusicPlayer.ArgsTransport:EncodeArgs(System.String[]):System.String'
INLINER: during 'fgInline' result 'success' reason 'below ALWAYS_INLINE size'
Expanding INLINE_CANDIDATE in statement STMT00015 in BB01:
STMT00015 (IL   ???...  ???)
               [000062] I-C-G-------              *  CALL      ref    System.String.Join (exactContextHnd=0x00000000D1FFAB1E)
               [000063] ------------ arg0         +--*  PUTARG_TYPE ushort
               [000061] ------------              |  \--*  CNS_INT   int    124
               [000020] ------------ arg1         \--*  LCL_VAR   ref    V00 arg0         

Argument #0: is a constant
               [000061] ------------              *  CNS_INT   int    124


Argument #1: is a local var
               [000020] ------------              *  LCL_VAR   ref    V00 arg0         


Folding operator with constant nodes into a constant:
               [000066] ------------              *  CAST      int <- ushort <- int
               [000061] ------------              \--*  CNS_INT   int    124
Bashed to int constant:
               [000066] ------------              *  CNS_INT   int    124
INLINER: inlineInfo.tokenLookupContextHandle for System.String:Join(ushort,System.String[]):System.String set to 0x00000000D1FFAB1E:

Invoking compiler for the inlinee method System.String:Join(ushort,System.String[]):System.String :
IL to import:
IL_0000  03                ldarg.1     
IL_0001  2d 06             brtrue.s     6 (IL_0009)
IL_0003  1d                ldc.i4.7    
IL_0004  28 53 18 00 06    call         0x6001853
IL_0009  0f 00             ldarga.s     0x0
IL_000b  17                ldc.i4.1    
IL_000c  28 ca 00 00 2b    call         0x2B0000CA
IL_0011  03                ldarg.1     
IL_0012  73 40 00 00 0a    newobj       0xA000040
IL_0017  28 36 07 00 06    call         0x6000736
IL_001c  2a                ret         

INLINER impTokenLookupContextHandle for System.String:Join(ushort,System.String[]):System.String is 0x00000000D1FFAB1E.
*************** In fgFindBasicBlocks() for System.String:Join(ushort,System.String[]):System.String
weight= 16 : state   4 [ ldarg.1 ]
weight= 25 : state  45 [ brtrue.s ]
weight= 56 : state  30 [ ldc.i4.7 ]
weight= 79 : state  40 [ call ]
weight= 55 : state 188 [ ldarga.s.normed ]
weight= 28 : state  24 [ ldc.i4.1 ]
weight= 79 : state  40 [ call ]
weight= 16 : state   4 [ ldarg.1 ]
weight=227 : state 103 [ newobj ]
weight= 79 : state  40 [ call ]
weight= 19 : state  42 [ ret ]

Inline candidate looks like a wrapper method.  Multiplier increased to 1.
Inline candidate has an arg that feeds a constant test.  Multiplier increased to 2.
Inline candidate callsite is boring.  Multiplier increased to 3.3.
calleeNativeSizeEstimate=679
callsiteNativeSizeEstimate=115
benefit multiplier=3.3
threshold=379
Native estimate for function size exceeds threshold for inlining 67.9 > 37.9 (multiplier = 3.3)


Inline expansion aborted, inline not profitable
Inlining [000062] failed, so bashing STMT00015 to NOP

INLINER: during 'fgInline' result 'failed this call site' reason 'unprofitable inline' for 'HotkeyedMusicPlayer.ArgsTransport:EnqueueArgs(System.String[])' calling 'System.String:Join(ushort,System.String[]):System.String'
INLINER: during 'fgInline' result 'failed this call site' reason 'unprofitable inline'

Replacing the return expression placeholder [000022] with [000062]
               [000022] --C---------              *  RET_EXPR  ref   (inl return from call [000064])

Inserting the inline return expression
               [000062] --C-G-------              *  CALL      ref    System.String.Join
               [000063] ------------ arg0         +--*  PUTARG_TYPE ushort
               [000066] ------------              |  \--*  CNS_INT   int    124
               [000020] ------------ arg1         \--*  LCL_VAR   ref    V00 arg0         

Expanding INLINE_CANDIDATE in statement STMT00006 in BB01:
STMT00006 (IL   ???...0x03F)
               [000027] I-C-G-------              *  CALL nullcheck void   System.Array.CopyTo (exactContextHnd=0x00000000D1FFAB1E)
               [000010] ------------ this in rcx  +--*  LCL_VAR   ref    V04 tmp1         
               [000025] ------------ arg1         +--*  LCL_VAR   ref    V01 loc0         
               [000026] ------------ arg2         \--*  CNS_INT   int    0
thisArg: is a local var
               [000010] ------------              *  LCL_VAR   ref    V04 tmp1         


Argument #1: is a local var
               [000025] ------------              *  LCL_VAR   ref    V01 loc0         


Argument #2: is a constant
               [000026] ------------              *  CNS_INT   int    0

INLINER: inlineInfo.tokenLookupContextHandle for System.Array:CopyTo(System.Array,int):this set to 0x00000000D1FFAB1E:

Invoking compiler for the inlinee method System.Array:CopyTo(System.Array,int):this :
IL to import:
IL_0000  03                ldarg.1     
IL_0001  2c 0f             brfalse.s    15 (IL_0012)
IL_0003  03                ldarg.1     
IL_0004  6f 13 01 00 06    callvirt     0x6000113
IL_0009  17                ldc.i4.1    
IL_000a  2e 06             beq.s        6 (IL_0012)
IL_000c  1d                ldc.i4.7    
IL_000d  28 50 18 00 06    call         0x6001850
IL_0012  02                ldarg.0     
IL_0013  02                ldarg.0     
IL_0014  16                ldc.i4.0    
IL_0015  28 16 01 00 06    call         0x6000116
IL_001a  03                ldarg.1     
IL_001b  04                ldarg.2     
IL_001c  02                ldarg.0     
IL_001d  28 11 01 00 06    call         0x6000111
IL_0022  28 01 01 00 06    call         0x6000101
IL_0027  2a                ret         

INLINER impTokenLookupContextHandle for System.Array:CopyTo(System.Array,int):this is 0x00000000D1FFAB1E.
*************** In fgFindBasicBlocks() for System.Array:CopyTo(System.Array,int):this
weight= 16 : state   4 [ ldarg.1 ]
weight= 27 : state  44 [ brfalse.s ]
weight= 16 : state   4 [ ldarg.1 ]
weight= 83 : state  99 [ callvirt ]
weight= 28 : state  24 [ ldc.i4.1 ]
weight=  6 : state  46 [ beq.s ]
weight= 56 : state  30 [ ldc.i4.7 ]
weight= 79 : state  40 [ call ]
weight= 10 : state   3 [ ldarg.0 ]
weight= 10 : state   3 [ ldarg.0 ]
weight= 15 : state  23 [ ldc.i4.0 ]
weight= 79 : state  40 [ call ]
weight= 16 : state   4 [ ldarg.1 ]
weight= 35 : state   5 [ ldarg.2 ]
weight= 10 : state   3 [ ldarg.0 ]
weight= 79 : state  40 [ call ]
weight= 79 : state  40 [ call ]
weight= 19 : state  42 [ ret ]

Inline candidate looks like a wrapper method.  Multiplier increased to 1.
Inline candidate has an arg that feeds a constant test.  Multiplier increased to 2.
Inline candidate callsite is boring.  Multiplier increased to 3.3.
calleeNativeSizeEstimate=663
callsiteNativeSizeEstimate=145
benefit multiplier=3.3
threshold=478
Native estimate for function size exceeds threshold for inlining 66.3 > 47.8 (multiplier = 3.3)


Inline expansion aborted, inline not profitable
INLINER: during 'fgInline' result 'failed this call site' reason 'unprofitable inline' for 'HotkeyedMusicPlayer.ArgsTransport:EnqueueArgs(System.String[])' calling 'System.Array:CopyTo(System.Array,int):this'
INLINER: during 'fgInline' result 'failed this call site' reason 'unprofitable inline'
Expanding INLINE_CANDIDATE in statement STMT00008 in BB01:
STMT00008 (IL 0x040...0x055)
               [000039] I-C-G-------              *  CALL      void   Microsoft.Win32.Registry.SetValue (exactContextHnd=0x00000000D1FFAB1E)
               [000036] ------------ arg0         +--*  CNS_STR   ref   <string constant>
               [000037] ------------ arg1         +--*  CNS_STR   ref   <string constant>
               [000038] ------------ arg2         \--*  LCL_VAR   ref    V01 loc0         

Argument #0: is a constant
               [000036] ------------              *  CNS_STR   ref   <string constant>


Argument #1: is a constant
               [000037] ------------              *  CNS_STR   ref   <string constant>


Argument #2: is a local var
               [000038] ------------              *  LCL_VAR   ref    V01 loc0         

INLINER: inlineInfo.tokenLookupContextHandle for Microsoft.Win32.Registry:SetValue(System.String,System.String,System.Object) set to 0x00000000D1FFAB1E:

Invoking compiler for the inlinee method Microsoft.Win32.Registry:SetValue(System.String,System.String,System.Object) :
IL to import:
IL_0000  02                ldarg.0     
IL_0001  03                ldarg.1     
IL_0002  04                ldarg.2     
IL_0003  16                ldc.i4.0    
IL_0004  28 5e 00 00 06    call         0x600005E
IL_0009  2a                ret         

INLINER impTokenLookupContextHandle for Microsoft.Win32.Registry:SetValue(System.String,System.String,System.Object) is 0x00000000D1FFAB1E.
*************** In fgFindBasicBlocks() for Microsoft.Win32.Registry:SetValue(System.String,System.String,System.Object)
Jump targets:
  none
Computing inlinee profile scale:
   ... call site not profiled
New Basic Block BB05 [0004] created.
BB05 [000..00A)
Basic block list for 'Microsoft.Win32.Registry:SetValue(System.String,System.String,System.Object)'

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB05 [0004]  1                             1       [000..00A)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

*************** Inline @[000039] Starting PHASE Pre-import

*************** Inline @[000039] Finishing PHASE Pre-import

*************** Inline @[000039] Starting PHASE Importation
*************** In impImport() for Microsoft.Win32.Registry:SetValue(System.String,System.String,System.Object)

impImportBlockPending for BB05

Importing BB05 (PC=000) of 'Microsoft.Win32.Registry:SetValue(System.String,System.String,System.Object)'
    [ 0]   0 (0x000) ldarg.0
    [ 1]   1 (0x001) ldarg.1
    [ 2]   2 (0x002) ldarg.2
    [ 3]   3 (0x003) ldc.i4.0 0
    [ 4]   4 (0x004) call 0600005E
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'has exception handling' for 'Microsoft.Win32.Registry:SetValue(System.String,System.String,System.Object)' calling 'Microsoft.Win32.Registry:SetValue(System.String,System.String,System.Object,int)'

INLINER: Marking Microsoft.Win32.Registry:SetValue(System.String,System.String,System.Object,int) as NOINLINE because of has exception handling
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'has exception handling'


               [000071] --C-G-------              *  CALL      void   Microsoft.Win32.Registry.SetValue
               [000068] ------------ arg0         +--*  CNS_STR   ref   <string constant>
               [000069] ------------ arg1         +--*  CNS_STR   ref   <string constant>
               [000038] ------------ arg2         +--*  LCL_VAR   ref    V01 loc0         
               [000070] ------------ arg3         \--*  CNS_INT   int    0

    [ 0]   9 (0x009) ret
*************** Inline @[000039] Finishing PHASE Importation
Trees after Importation

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB05 [0004]  1                             1       [000..00A)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB05 [000..00A) (return), preds={} succs={}

***** BB05
               [000071] --C-G-------              *  CALL      void   Microsoft.Win32.Registry.SetValue
               [000068] ------------ arg0         +--*  CNS_STR   ref   <string constant>
               [000069] ------------ arg1         +--*  CNS_STR   ref   <string constant>
               [000038] ------------ arg2         +--*  LCL_VAR   ref    V01 loc0         
               [000070] ------------ arg3         \--*  CNS_INT   int    0

-------------------------------------------------------------------------------------------------------------------

*************** Inline @[000039] Starting PHASE Indirect call transform

 -- no candidates to transform

*************** Inline @[000039] Finishing PHASE Indirect call transform [no changes]

*************** Inline @[000039] Starting PHASE Expand patchpoints

 -- no patchpoints to transform

*************** Inline @[000039] Finishing PHASE Expand patchpoints [no changes]

*************** Inline @[000039] Starting PHASE Post-import

*************** In fgRemoveEmptyBlocks

*************** Inline @[000039] Finishing PHASE Post-import


----------- Statements (and blocks) added due to the inlining of call [000039] -----------

Arguments setup:

Inlinee method body:
STMT00016 (IL 0x040...  ???)
               [000071] --C-G-------              *  CALL      void   Microsoft.Win32.Registry.SetValue
               [000068] ------------ arg0         +--*  CNS_STR   ref   <string constant>
               [000069] ------------ arg1         +--*  CNS_STR   ref   <string constant>
               [000038] ------------ arg2         +--*  LCL_VAR   ref    V01 loc0         
               [000070] ------------ arg3         \--*  CNS_INT   int    0

fgInlineAppendStatements: no gc ref inline locals.
Successfully inlined Microsoft.Win32.Registry:SetValue(System.String,System.String,System.Object) (10 IL bytes) (depth 1) [below ALWAYS_INLINE size]
--------------------------------------------------------------------------------------------

INLINER: during 'fgInline' result 'success' reason 'below ALWAYS_INLINE size' for 'HotkeyedMusicPlayer.ArgsTransport:EnqueueArgs(System.String[])' calling 'Microsoft.Win32.Registry:SetValue(System.String,System.String,System.Object)'
INLINER: during 'fgInline' result 'success' reason 'below ALWAYS_INLINE size'
Expanding INLINE_CANDIDATE in statement STMT00009 in BB01:
STMT00009 (IL 0x050...  ???)
               [000040] I-C-G-------              *  CALL      void   HotkeyedMusicPlayer.ArgsTransport.ReleaseRegistryLock (exactContextHnd=0x00000000D1FFAB1E)
Note: candidate is implicit tail call
INLINER: inlineInfo.tokenLookupContextHandle for HotkeyedMusicPlayer.ArgsTransport:ReleaseRegistryLock() set to 0x00000000D1FFAB1E:

Invoking compiler for the inlinee method HotkeyedMusicPlayer.ArgsTransport:ReleaseRegistryLock() :
IL to import:
IL_0000  7e 05 00 00 04    ldsfld       0x4000005
IL_0005  6f 19 00 00 0a    callvirt     0xA000019
IL_000a  2a                ret         

INLINER impTokenLookupContextHandle for HotkeyedMusicPlayer.ArgsTransport:ReleaseRegistryLock() is 0x00000000D1FFAB1E.
*************** In fgFindBasicBlocks() for HotkeyedMusicPlayer.ArgsTransport:ReleaseRegistryLock()
Jump targets:
  none
Computing inlinee profile scale:
   ... call site not profiled
New Basic Block BB06 [0005] created.
BB06 [000..00B)
Basic block list for 'HotkeyedMusicPlayer.ArgsTransport:ReleaseRegistryLock()'

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB06 [0005]  1                             1       [000..00B)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

*************** Inline @[000040] Starting PHASE Pre-import

*************** Inline @[000040] Finishing PHASE Pre-import

*************** Inline @[000040] Starting PHASE Importation
*************** In impImport() for HotkeyedMusicPlayer.ArgsTransport:ReleaseRegistryLock()

impImportBlockPending for BB06

Importing BB06 (PC=000) of 'HotkeyedMusicPlayer.ArgsTransport:ReleaseRegistryLock()'
    [ 0]   0 (0x000) ldsfld 04000005
    [ 1]   5 (0x005) callvirt 0A000019 (Inline Implicit Tail call: prefixFlags |= PREFIX_TAILCALL_IMPLICIT)
In Compiler::impImportCall: opcode is callvirt, kind=0, callRetType is void, structSize is 0

GTF_CALL_M_IMPLICIT_TAILCALL set for call [000079]


               [000079] I-CXG-------              *  CALL nullcheck void   System.Threading.Mutex.ReleaseMutex (exactContextHnd=0x00000000D1FFAB1E)
               [000078] --CXG------- this in rcx  \--*  COMMA     ref   
               [000077] H-CXG-------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
               [000075] ------------ arg0            |  +--*  CNS_INT   long   0x7ffc7e4c17a0
               [000076] ------------ arg1            |  \--*  CNS_INT   int    1
               [000073] ----G-------                 \--*  FIELD     ref    _registryLock

    [ 0]  10 (0x00a) ret
*************** Inline @[000040] Finishing PHASE Importation
Trees after Importation

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB06 [0005]  1                             1       [000..00B)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB06 [000..00B) (return), preds={} succs={}

***** BB06
               [000079] I-CXG-------              *  CALL nullcheck void   System.Threading.Mutex.ReleaseMutex (exactContextHnd=0x00000000D1FFAB1E)
               [000078] --CXG------- this in rcx  \--*  COMMA     ref   
               [000077] H-CXG-------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
               [000075] ------------ arg0            |  +--*  CNS_INT   long   0x7ffc7e4c17a0
               [000076] ------------ arg1            |  \--*  CNS_INT   int    1
               [000073] ----G-------                 \--*  FIELD     ref    _registryLock

-------------------------------------------------------------------------------------------------------------------

*************** Inline @[000040] Starting PHASE Indirect call transform

 -- no candidates to transform

*************** Inline @[000040] Finishing PHASE Indirect call transform [no changes]

*************** Inline @[000040] Starting PHASE Expand patchpoints

 -- no patchpoints to transform

*************** Inline @[000040] Finishing PHASE Expand patchpoints [no changes]

*************** Inline @[000040] Starting PHASE Post-import

*************** In fgRemoveEmptyBlocks

*************** Inline @[000040] Finishing PHASE Post-import


----------- Statements (and blocks) added due to the inlining of call [000040] -----------

Inlinee method body:
STMT00017 (IL 0x050...  ???)
               [000079] I-CXG-------              *  CALL nullcheck void   System.Threading.Mutex.ReleaseMutex (exactContextHnd=0x00000000D1FFAB1E)
               [000078] --CXG------- this in rcx  \--*  COMMA     ref   
               [000077] H-CXG-------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
               [000075] ------------ arg0            |  +--*  CNS_INT   long   0x7ffc7e4c17a0
               [000076] ------------ arg1            |  \--*  CNS_INT   int    1
               [000073] ----G-------                 \--*  FIELD     ref    _registryLock

fgInlineAppendStatements: no gc ref inline locals.
Successfully inlined HotkeyedMusicPlayer.ArgsTransport:ReleaseRegistryLock() (11 IL bytes) (depth 1) [below ALWAYS_INLINE size]
--------------------------------------------------------------------------------------------

INLINER: during 'fgInline' result 'success' reason 'below ALWAYS_INLINE size' for 'HotkeyedMusicPlayer.ArgsTransport:EnqueueArgs(System.String[])' calling 'HotkeyedMusicPlayer.ArgsTransport:ReleaseRegistryLock()'
INLINER: during 'fgInline' result 'success' reason 'below ALWAYS_INLINE size'
Expanding INLINE_CANDIDATE in statement STMT00017 in BB01:
STMT00017 (IL 0x050...  ???)
               [000079] I-CXG-------              *  CALL nullcheck void   System.Threading.Mutex.ReleaseMutex (exactContextHnd=0x00000000D1FFAB1E)
               [000078] --CXG------- this in rcx  \--*  COMMA     ref   
               [000077] H-CXG-------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
               [000075] ------------ arg0            |  +--*  CNS_INT   long   0x7ffc7e4c17a0
               [000076] ------------ arg1            |  \--*  CNS_INT   int    1
               [000073] ----G-------                 \--*  FIELD     ref    _registryLock
Note: candidate is implicit tail call
thisArg: has global refs has side effects
               [000078] --CXG-------              *  COMMA     ref   
               [000077] H-CXG-------              +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
               [000075] ------------ arg0         |  +--*  CNS_INT   long   0x7ffc7e4c17a0
               [000076] ------------ arg1         |  \--*  CNS_INT   int    1
               [000073] ----G-------              \--*  FIELD     ref    _registryLock

INLINER: inlineInfo.tokenLookupContextHandle for System.Threading.Mutex:ReleaseMutex():this set to 0x00000000D1FFAB1E:

Invoking compiler for the inlinee method System.Threading.Mutex:ReleaseMutex():this :
IL to import:
IL_0000  02                ldarg.0     
IL_0001  28 5a 27 00 06    call         0x600275A
IL_0006  28 95 00 00 06    call         0x6000095
IL_000b  2d 0b             brtrue.s     11 (IL_0018)
IL_000d  28 94 14 00 06    call         0x6001494
IL_0012  73 3b 0a 00 06    newobj       0x6000A3B
IL_0017  7a                throw       
IL_0018  2a                ret         

INLINER impTokenLookupContextHandle for System.Threading.Mutex:ReleaseMutex():this is 0x00000000D1FFAB1E.
*************** In fgFindBasicBlocks() for System.Threading.Mutex:ReleaseMutex():this
weight= 10 : state   3 [ ldarg.0 ]
weight= 79 : state  40 [ call ]
weight= 79 : state  40 [ call ]
weight= 25 : state  45 [ brtrue.s ]
weight= 79 : state  40 [ call ]
weight=227 : state 103 [ newobj ]
weight=210 : state 108 [ throw ]
weight= 19 : state  42 [ ret ]

Inline candidate has an arg that feeds a constant test.  Multiplier increased to 1.
Inline candidate callsite is boring.  Multiplier increased to 2.3.
calleeNativeSizeEstimate=728
callsiteNativeSizeEstimate=85
benefit multiplier=2.3
threshold=195
Native estimate for function size exceeds threshold for inlining 72.8 > 19.5 (multiplier = 2.3)


Inline expansion aborted, inline not profitable
INLINER: during 'fgInline' result 'failed this call site' reason 'unprofitable inline' for 'HotkeyedMusicPlayer.ArgsTransport:EnqueueArgs(System.String[])' calling 'System.Threading.Mutex:ReleaseMutex():this'
INLINER: during 'fgInline' result 'failed this call site' reason 'unprofitable inline'
**************** Inline Tree
Inlines into 06000001 [via DefaultPolicy] HotkeyedMusicPlayer.ArgsTransport:EnqueueArgs(System.String[])
  [1 IL=0000 TR=000000 06000005] [below ALWAYS_INLINE size] HotkeyedMusicPlayer.ArgsTransport:AcquireRegistryLock()
    [2 IL=0005 TR=000048 0600276A] [below ALWAYS_INLINE size devirt] System.Threading.WaitHandle:WaitOne():bool:this
  [0 IL=0005 TR=000001 06000004] [FAILED: unprofitable inline] HotkeyedMusicPlayer.ArgsTransport:EnsureRootKeyExists()
  [0 IL=0021 TR=000005 0600005C] [FAILED: has exception handling] Microsoft.Win32.Registry:GetValue(System.String,System.String,System.Object):System.Object
  [3 IL=0043 TR=000021 06000007] [below ALWAYS_INLINE size] HotkeyedMusicPlayer.ArgsTransport:EncodeArgs(System.String[]):System.String
    [0 IL=0003 TR=000062 0600072A] [FAILED: unprofitable inline] System.String:Join(ushort,System.String[]):System.String
  [0 IL=0051 TR=000027 06000145] [FAILED: unprofitable inline] System.Array:CopyTo(System.Array,int):this
  [4 IL=0075 TR=000039 0600005D] [below ALWAYS_INLINE size] Microsoft.Win32.Registry:SetValue(System.String,System.String,System.Object)
    [0 IL=0004 TR=000071 0600005E] [FAILED: has exception handling] Microsoft.Win32.Registry:SetValue(System.String,System.String,System.Object,int)
  [5 IL=0080 TR=000040 06000006] [below ALWAYS_INLINE size] HotkeyedMusicPlayer.ArgsTransport:ReleaseRegistryLock()
    [0 IL=0005 TR=000079 0600289D] [FAILED: unprofitable inline] System.Threading.Mutex:ReleaseMutex():this
Budget: initialTime=318, finalTime=332, initialBudget=3180, currentBudget=3180
Budget: initialSize=2092, finalSize=2092

*************** Finishing PHASE Morph - Inlining
Trees after Morph - Inlining

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..056)        (return)                     i idxlen new[] nullcheck 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..056) (return), preds={} succs={}

***** BB01
STMT00013 (IL 0x000...  ???)
               [000059] -ACXG-------              *  ASG       ref   
               [000058] D------N----              +--*  LCL_VAR   ref    V05 tmp2         
               [000047] --CXG-------              \--*  COMMA     ref   
               [000046] H-CXG-------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
               [000044] ------------ arg0            |  +--*  CNS_INT   long   0x7ffc7e4c17a0
               [000045] ------------ arg1            |  \--*  CNS_INT   int    1
               [000042] ----G-------                 \--*  FIELD     ref    _registryLock

***** BB01
STMT00014 (IL 0x000...  ???)
               [000057] ---X--------              *  NULLCHECK byte  
               [000056] ------------              \--*  LCL_VAR   ref    V05 tmp2         

***** BB01
STMT00012 (IL 0x000...  ???)
               [000055] --C-G-------              *  CALL      int    System.Threading.WaitHandle.WaitOneNoCheck
               [000053] ------------ this in rcx  +--*  LCL_VAR   ref    V05 tmp2         
               [000054] ------------ arg1         \--*  CNS_INT   int    -1

***** BB01
STMT00001 (IL 0x005...  ???)
               [000001] --C-G-------              *  CALL      void   HotkeyedMusicPlayer.ArgsTransport.EnsureRootKeyExists

***** BB01
STMT00002 (IL 0x00A...  ???)
               [000009] -ACXG-------              *  ASG       ref   
               [000008] D------N----              +--*  LCL_VAR   ref    V04 tmp1         
               [000007] --CXG-------              \--*  CALL help ref    HELPER.CORINFO_HELP_CHKCASTARRAY
               [000006] H------N---- arg0            +--*  CNS_INT(h) long   0xd1ffab1e class
               [000005] --C-G------- arg1            \--*  CALL      ref    Microsoft.Win32.Registry.GetValue
               [000002] ------------ arg0               +--*  CNS_STR   ref   <string constant>
               [000003] ------------ arg1               +--*  CNS_STR   ref   <string constant>
               [000004] ------------ arg2               \--*  LCL_VAR   ref    V00 arg0         

***** BB01
STMT00003 (IL   ???...  ???)
               [000019] -ACXG-------              *  ASG       ref   
               [000018] D------N----              +--*  LCL_VAR   ref    V01 loc0         
               [000017] --CXG-------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWARR_1_OBJ
               [000015] H----------- arg0            +--*  CNS_INT(h) long   0xd1ffab1e class
               [000016] ---X-------- arg1            \--*  CAST      long <- int
               [000014] ---X--------                    \--*  ADD       int   
               [000012] ---X--------                       +--*  ARR_LENGTH int   
               [000011] ------------                       |  \--*  LCL_VAR   ref    V04 tmp1         
               [000013] ------------                       \--*  CNS_INT   int    1

***** BB01
STMT00005 (IL   ???...  ???)
               [000024] -AC---------              *  ASG       ref   
               [000023] D------N----              +--*  LCL_VAR   ref    V02 loc1         
               [000062] --C-G-------              \--*  CALL      ref    System.String.Join
               [000063] ------------ arg0            +--*  PUTARG_TYPE ushort
               [000066] ------------                 |  \--*  CNS_INT   int    124
               [000020] ------------ arg1            \--*  LCL_VAR   ref    V00 arg0         

***** BB01
STMT00006 (IL   ???...0x03F)
               [000027] --C-G-------              *  CALL nullcheck void   System.Array.CopyTo
               [000010] ------------ this in rcx  +--*  LCL_VAR   ref    V04 tmp1         
               [000025] ------------ arg1         +--*  LCL_VAR   ref    V01 loc0         
               [000026] ------------ arg2         \--*  CNS_INT   int    0

***** BB01
STMT00007 (IL 0x038...  ???)
               [000035] -A-XG-------              *  ASG       ref   
               [000034] ---XG--N----              +--*  INDEX     ref   
               [000028] ------------              |  +--*  LCL_VAR   ref    V01 loc0         
               [000032] ---X--------              |  \--*  SUB       int   
               [000030] ---X--------              |     +--*  ARR_LENGTH int   
               [000029] ------------              |     |  \--*  LCL_VAR   ref    V01 loc0         
               [000031] ------------              |     \--*  CNS_INT   int    1
               [000033] ------------              \--*  LCL_VAR   ref    V02 loc1         

***** BB01
STMT00016 (IL 0x040...  ???)
               [000071] --C-G-------              *  CALL      void   Microsoft.Win32.Registry.SetValue
               [000068] ------------ arg0         +--*  CNS_STR   ref   <string constant>
               [000069] ------------ arg1         +--*  CNS_STR   ref   <string constant>
               [000038] ------------ arg2         +--*  LCL_VAR   ref    V01 loc0         
               [000070] ------------ arg3         \--*  CNS_INT   int    0

***** BB01
STMT00017 (IL 0x050...  ???)
               [000079] --CXG-------              *  CALL nullcheck void   System.Threading.Mutex.ReleaseMutex
               [000078] --CXG------- this in rcx  \--*  COMMA     ref   
               [000077] H-CXG-------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
               [000075] ------------ arg0            |  +--*  CNS_INT   long   0x7ffc7e4c17a0
               [000076] ------------ arg1            |  \--*  CNS_INT   int    1
               [000073] ----G-------                 \--*  FIELD     ref    _registryLock

***** BB01
STMT00010 (IL 0x055...  ???)
               [000041] ------------              *  RETURN    void  

-------------------------------------------------------------------------------------------------------------------

*************** Starting PHASE Allocate Objects
no newobjs in this method; punting

*************** Finishing PHASE Allocate Objects [no changes]

*************** Starting PHASE Morph - Add internal blocks

*************** After fgAddInternal()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..056)        (return)                     i idxlen new[] nullcheck 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table is empty

*************** Finishing PHASE Morph - Add internal blocks

*************** Starting PHASE Remove empty try

*************** In fgRemoveEmptyTry()
No EH in this method, nothing to remove.

*************** Finishing PHASE Remove empty try [no changes]

*************** Starting PHASE Remove empty finally
No EH in this method, nothing to remove.

*************** Finishing PHASE Remove empty finally [no changes]

*************** Starting PHASE Merge callfinally chains
No EH in this method, nothing to merge.

*************** Finishing PHASE Merge callfinally chains [no changes]

*************** Starting PHASE Clone finally
No EH in this method, no cloning.

*************** Finishing PHASE Clone finally [no changes]

*************** Starting PHASE Compute preds

Renumbering the basic blocks for fgComputePred

*************** Before renumbering the basic blocks

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..056)        (return)                     i idxlen new[] nullcheck 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table is empty

*************** After renumbering the basic blocks
=============== No blocks renumbered!

New BlockSet epoch 2, # of blocks (including unused BB00): 2, bitset array size: 1 (short)

*************** In fgComputePreds()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..056)        (return)                     i idxlen new[] nullcheck 
-----------------------------------------------------------------------------------------------------------------------------------------


*************** After fgComputePreds()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..056)        (return)                     i label target idxlen new[] nullcheck 
-----------------------------------------------------------------------------------------------------------------------------------------


*************** Finishing PHASE Compute preds

*************** Starting PHASE Merge throw blocks

*************** In fgTailMergeThrows
Method does not have multiple noreturn calls.

*************** Finishing PHASE Merge throw blocks [no changes]

*************** Starting PHASE Update flow graph early pass

*************** In fgUpdateFlowGraph()
Before updating the flow graph:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..056)        (return)                     i label target idxlen new[] nullcheck 
-----------------------------------------------------------------------------------------------------------------------------------------

*************** In fgDebugCheckBBlist

*************** Finishing PHASE Update flow graph early pass

*************** Starting PHASE Morph - Promote Structs

*************** In fgResetImplicitByRefRefCount()
*************** In fgPromoteStructs()

lvaTable before fgPromoteStructs
; Initial local variable assignments
;
;  V00 arg0              ref  class-hnd
;  V01 loc0              ref  class-hnd exact
;  V02 loc1              ref  class-hnd
;  V03 OutArgs        lclBlk <na>  "OutgoingArgSpace"
;  V04 tmp1              ref  class-hnd "dup spill"
;  V05 tmp2              ref  class-hnd "Inlining Arg"

lvaTable after fgPromoteStructs
; Initial local variable assignments
;
;  V00 arg0              ref  class-hnd
;  V01 loc0              ref  class-hnd exact
;  V02 loc1              ref  class-hnd
;  V03 OutArgs        lclBlk <na>  "OutgoingArgSpace"
;  V04 tmp1              ref  class-hnd "dup spill"
;  V05 tmp2              ref  class-hnd "Inlining Arg"

*************** Finishing PHASE Morph - Promote Structs

*************** Starting PHASE Morph - Structs/AddrExp

*************** In fgMarkAddressExposedLocals()
LocalAddressVisitor visiting statement:
STMT00013 (IL 0x000...  ???)
               [000059] -ACXG-------              *  ASG       ref   
               [000058] D------N----              +--*  LCL_VAR   ref    V05 tmp2         
               [000047] --CXG-------              \--*  COMMA     ref   
               [000046] H-CXG-------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
               [000044] ------------ arg0            |  +--*  CNS_INT   long   0x7ffc7e4c17a0
               [000045] ------------ arg1            |  \--*  CNS_INT   int    1
               [000042] ----G-------                 \--*  FIELD     ref    _registryLock

LocalAddressVisitor visiting statement:
STMT00014 (IL 0x000...  ???)
               [000057] ---X--------              *  NULLCHECK byte  
               [000056] ------------              \--*  LCL_VAR   ref    V05 tmp2         

LocalAddressVisitor visiting statement:
STMT00012 (IL 0x000...  ???)
               [000055] --C-G-------              *  CALL      int    System.Threading.WaitHandle.WaitOneNoCheck
               [000053] ------------ this in rcx  +--*  LCL_VAR   ref    V05 tmp2         
               [000054] ------------ arg1         \--*  CNS_INT   int    -1

LocalAddressVisitor visiting statement:
STMT00001 (IL 0x005...  ???)
               [000001] --C-G-------              *  CALL      void   HotkeyedMusicPlayer.ArgsTransport.EnsureRootKeyExists

LocalAddressVisitor visiting statement:
STMT00002 (IL 0x00A...  ???)
               [000009] -ACXG-------              *  ASG       ref   
               [000008] D------N----              +--*  LCL_VAR   ref    V04 tmp1         
               [000007] --CXG-------              \--*  CALL help ref    HELPER.CORINFO_HELP_CHKCASTARRAY
               [000006] H------N---- arg0            +--*  CNS_INT(h) long   0xd1ffab1e class
               [000005] --C-G------- arg1            \--*  CALL      ref    Microsoft.Win32.Registry.GetValue
               [000002] ------------ arg0               +--*  CNS_STR   ref   <string constant>
               [000003] ------------ arg1               +--*  CNS_STR   ref   <string constant>
               [000004] ------------ arg2               \--*  LCL_VAR   ref    V00 arg0         

LocalAddressVisitor visiting statement:
STMT00003 (IL   ???...  ???)
               [000019] -ACXG-------              *  ASG       ref   
               [000018] D------N----              +--*  LCL_VAR   ref    V01 loc0         
               [000017] --CXG-------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWARR_1_OBJ
               [000015] H----------- arg0            +--*  CNS_INT(h) long   0xd1ffab1e class
               [000016] ---X-------- arg1            \--*  CAST      long <- int
               [000014] ---X--------                    \--*  ADD       int   
               [000012] ---X--------                       +--*  ARR_LENGTH int   
               [000011] ------------                       |  \--*  LCL_VAR   ref    V04 tmp1         
               [000013] ------------                       \--*  CNS_INT   int    1

LocalAddressVisitor visiting statement:
STMT00005 (IL   ???...  ???)
               [000024] -AC---------              *  ASG       ref   
               [000023] D------N----              +--*  LCL_VAR   ref    V02 loc1         
               [000062] --C-G-------              \--*  CALL      ref    System.String.Join
               [000063] ------------ arg0            +--*  PUTARG_TYPE ushort
               [000066] ------------                 |  \--*  CNS_INT   int    124
               [000020] ------------ arg1            \--*  LCL_VAR   ref    V00 arg0         

LocalAddressVisitor visiting statement:
STMT00006 (IL   ???...0x03F)
               [000027] --C-G-------              *  CALL nullcheck void   System.Array.CopyTo
               [000010] ------------ this in rcx  +--*  LCL_VAR   ref    V04 tmp1         
               [000025] ------------ arg1         +--*  LCL_VAR   ref    V01 loc0         
               [000026] ------------ arg2         \--*  CNS_INT   int    0

LocalAddressVisitor visiting statement:
STMT00007 (IL 0x038...  ???)
               [000035] -A-XG-------              *  ASG       ref   
               [000034] ---XG--N----              +--*  INDEX     ref   
               [000028] ------------              |  +--*  LCL_VAR   ref    V01 loc0         
               [000032] ---X--------              |  \--*  SUB       int   
               [000030] ---X--------              |     +--*  ARR_LENGTH int   
               [000029] ------------              |     |  \--*  LCL_VAR   ref    V01 loc0         
               [000031] ------------              |     \--*  CNS_INT   int    1
               [000033] ------------              \--*  LCL_VAR   ref    V02 loc1         

LocalAddressVisitor visiting statement:
STMT00016 (IL 0x040...  ???)
               [000071] --C-G-------              *  CALL      void   Microsoft.Win32.Registry.SetValue
               [000068] ------------ arg0         +--*  CNS_STR   ref   <string constant>
               [000069] ------------ arg1         +--*  CNS_STR   ref   <string constant>
               [000038] ------------ arg2         +--*  LCL_VAR   ref    V01 loc0         
               [000070] ------------ arg3         \--*  CNS_INT   int    0

LocalAddressVisitor visiting statement:
STMT00017 (IL 0x050...  ???)
               [000079] --CXG-------              *  CALL nullcheck void   System.Threading.Mutex.ReleaseMutex
               [000078] --CXG------- this in rcx  \--*  COMMA     ref   
               [000077] H-CXG-------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
               [000075] ------------ arg0            |  +--*  CNS_INT   long   0x7ffc7e4c17a0
               [000076] ------------ arg1            |  \--*  CNS_INT   int    1
               [000073] ----G-------                 \--*  FIELD     ref    _registryLock

LocalAddressVisitor visiting statement:
STMT00010 (IL 0x055...  ???)
               [000041] ------------              *  RETURN    void  


*************** Finishing PHASE Morph - Structs/AddrExp

*************** Starting PHASE Morph - ByRefs

*************** In fgRetypeImplicitByRefArgs()

*************** Finishing PHASE Morph - ByRefs

*************** Starting PHASE Morph - Global

*************** In fgMorphBlocks()

Morphing BB01 of 'HotkeyedMusicPlayer.ArgsTransport:EnqueueArgs(System.String[])'

fgMorphTree BB01, STMT00013 (before)
               [000059] -ACXG-------              *  ASG       ref   
               [000058] D------N----              +--*  LCL_VAR   ref    V05 tmp2         
               [000047] --CXG-------              \--*  COMMA     ref   
               [000046] H-CXG-------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
               [000044] ------------ arg0            |  +--*  CNS_INT   long   0x7ffc7e4c17a0
               [000045] ------------ arg1            |  \--*  CNS_INT   int    1
               [000042] ----G-------                 \--*  FIELD     ref    _registryLock
Initializing arg info for 46.CALL:
ArgTable for 46.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 44.CNS_INT long (By ref), 1 reg: rcx, byteAlignment=8]
fgArgTabEntry[arg 1 45.CNS_INT int (By ref), 1 reg: rdx, byteAlignment=8]

Morphing args for 46.CALL:
argSlots=2, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000044] -----+------              *  CNS_INT   long   0x7ffc7e4c17a0
Replaced with placeholder node:
               [000081] ----------L-              *  ARGPLACE  long  
Deferred argument ('rdx'):
               [000045] -----+------              *  CNS_INT   int    1
Replaced with placeholder node:
               [000082] ----------L-              *  ARGPLACE  int   

Shuffled argument table:    rcx rdx 
ArgTable for 46.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 44.CNS_INT long (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]
fgArgTabEntry[arg 1 45.CNS_INT int (By ref), 1 reg: rdx, byteAlignment=8, lateArgInx=1, processed]


fgMorphTree BB01, STMT00013 (after)
               [000059] -ACXG+------              *  ASG       ref   
               [000058] D----+-N----              +--*  LCL_VAR   ref    V05 tmp2         
               [000047] --CXG+------              \--*  COMMA     ref   
               [000046] H-CXG+------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
               [000044] -----+------ arg0 in rcx     |  +--*  CNS_INT   long   0x7ffc7e4c17a0
               [000045] -----+------ arg1 in rdx     |  \--*  CNS_INT   int    1
               [000042] n---G+------                 \--*  IND       ref   
               [000083] I----+------                    \--*  CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock]

fgMorphTree BB01, STMT00014 (before)
               [000057] ---X--------              *  NULLCHECK byte  
               [000056] ------------              \--*  LCL_VAR   ref    V05 tmp2         
GenTreeNode creates assertion:
               [000057] ---X--------              *  NULLCHECK byte  
In BB01 New Local Constant Assertion: V05 != null index=#01, mask=0000000000000001

fgMorphTree BB01, STMT00012 (before)
               [000055] --C-G-------              *  CALL      int    System.Threading.WaitHandle.WaitOneNoCheck
               [000053] ------------ this in rcx  +--*  LCL_VAR   ref    V05 tmp2         
               [000054] ------------ arg1         \--*  CNS_INT   int    -1
Initializing arg info for 55.CALL:
ArgTable for 55.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 53.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8]
fgArgTabEntry[arg 1 54.CNS_INT int (By ref), 1 reg: rdx, byteAlignment=8]

Morphing args for 55.CALL:
argSlots=2, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000053] -----+------              *  LCL_VAR   ref    V05 tmp2         
Replaced with placeholder node:
               [000084] ----------L-              *  ARGPLACE  ref   
Deferred argument ('rdx'):
               [000054] -----+------              *  CNS_INT   int    -1
Replaced with placeholder node:
               [000085] ----------L-              *  ARGPLACE  int   

Shuffled argument table:    rcx rdx 
ArgTable for 55.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 53.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]
fgArgTabEntry[arg 1 54.CNS_INT int (By ref), 1 reg: rdx, byteAlignment=8, lateArgInx=1, processed]


fgMorphTree BB01, STMT00012 (after)
               [000055] --CXG+------              *  CALL      int    System.Threading.WaitHandle.WaitOneNoCheck
               [000053] -----+------ this in rcx  +--*  LCL_VAR   ref    V05 tmp2         
               [000054] -----+------ arg1 in rdx  \--*  CNS_INT   int    -1

fgMorphTree BB01, STMT00001 (before)
               [000001] --C-G-------              *  CALL      void   HotkeyedMusicPlayer.ArgsTransport.EnsureRootKeyExists
Initializing arg info for 1.CALL:
ArgTable for 1.CALL after fgInitArgInfo:

Morphing args for 1.CALL:
argSlots=0, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32
ArgTable for 1.CALL after fgMorphArgs:


fgMorphTree BB01, STMT00002 (before)
               [000009] -ACXG-------              *  ASG       ref   
               [000008] D------N----              +--*  LCL_VAR   ref    V04 tmp1         
               [000007] --CXG-------              \--*  CALL help ref    HELPER.CORINFO_HELP_CHKCASTARRAY
               [000006] H------N---- arg0            +--*  CNS_INT(h) long   0xd1ffab1e class
               [000005] --C-G------- arg1            \--*  CALL      ref    Microsoft.Win32.Registry.GetValue
               [000002] ------------ arg0               +--*  CNS_STR   ref   <string constant>
               [000003] ------------ arg1               +--*  CNS_STR   ref   <string constant>
               [000004] ------------ arg2               \--*  LCL_VAR   ref    V00 arg0         
Initializing arg info for 7.CALL:
ArgTable for 7.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 6.CNS_INT long (By ref), 1 reg: rcx, byteAlignment=8]
fgArgTabEntry[arg 1 5.CALL ref (By ref), 1 reg: rdx, byteAlignment=8]

Morphing args for 7.CALL:
Initializing arg info for 5.CALL:
ArgTable for 5.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 2.CNS_STR ref (By ref), 1 reg: rcx, byteAlignment=8]
fgArgTabEntry[arg 1 3.CNS_STR ref (By ref), 1 reg: rdx, byteAlignment=8]
fgArgTabEntry[arg 2 4.LCL_VAR ref (By ref), 1 reg: r8, byteAlignment=8]

Morphing args for 5.CALL:
argSlots=3, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
     (  4, 12) [000087] #---G-------              *  IND       ref   
     (  2, 10) [000086] H-----------              \--*  CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer"
Replaced with placeholder node:
               [000090] ----------L-              *  ARGPLACE  ref   
Deferred argument ('rdx'):
     (  4, 12) [000089] #---G-------              *  IND       ref   
     (  2, 10) [000088] H-----------              \--*  CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance"
Replaced with placeholder node:
               [000091] ----------L-              *  ARGPLACE  ref   
Deferred argument ('r8'):
               [000004] -----+------              *  LCL_VAR   ref    V00 arg0         
Replaced with placeholder node:
               [000092] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx rdx r8 
ArgTable for 5.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 87.IND ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]
fgArgTabEntry[arg 1 89.IND ref (By ref), 1 reg: rdx, byteAlignment=8, lateArgInx=1, processed]
fgArgTabEntry[arg 2 4.LCL_VAR ref (By ref), 1 reg: r8, byteAlignment=8, lateArgInx=2, processed]

argSlots=2, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Argument with 'side effect'...
               [000005] --CXG+------              *  CALL      ref    Microsoft.Win32.Registry.GetValue
     (  4, 12) [000087] #---G------- arg0 in rcx  +--*  IND       ref   
     (  2, 10) [000086] H-----------              |  \--*  CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer"
     (  4, 12) [000089] #---G------- arg1 in rdx  +--*  IND       ref   
     (  2, 10) [000088] H-----------              |  \--*  CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance"
               [000004] -----+------ arg2 in r8   \--*  LCL_VAR   ref    V00 arg0         

lvaGrabTemp returning 6 (V06 tmp3) called for argument with side effect.

  Evaluate to a temp:
               [000094] -ACXG-----L-              *  ASG       ref   
               [000093] D------N----              +--*  LCL_VAR   ref    V06 tmp3         
               [000005] --CXG+------              \--*  CALL      ref    Microsoft.Win32.Registry.GetValue
     (  4, 12) [000087] #---G------- arg0 in rcx     +--*  IND       ref   
     (  2, 10) [000086] H-----------                 |  \--*  CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer"
     (  4, 12) [000089] #---G------- arg1 in rdx     +--*  IND       ref   
     (  2, 10) [000088] H-----------                 |  \--*  CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance"
               [000004] -----+------ arg2 in r8      \--*  LCL_VAR   ref    V00 arg0         
Deferred argument ('rcx'):
               [000006] H----+-N----              *  CNS_INT(h) long   0xd1ffab1e class
Replaced with placeholder node:
               [000096] ----------L-              *  ARGPLACE  long  

Shuffled argument table:    rdx rcx 
ArgTable for 7.CALL after fgMorphArgs:
fgArgTabEntry[arg 1 95.LCL_VAR ref (By ref), 1 reg: rdx, byteAlignment=8, lateArgInx=0, tmpNum=V06, isTmp, processed]
fgArgTabEntry[arg 0 6.CNS_INT long (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=1, processed]


fgMorphTree BB01, STMT00002 (after)
               [000009] -ACXG+------              *  ASG       ref   
               [000008] D----+-N----              +--*  LCL_VAR   ref    V04 tmp1         
               [000007] --CXG+------              \--*  CALL help ref    HELPER.CORINFO_HELP_CHKCASTARRAY
               [000094] -ACXG-----L- arg1 SETUP      +--*  ASG       ref   
               [000093] D------N----                 |  +--*  LCL_VAR   ref    V06 tmp3         
               [000005] --CXG+------                 |  \--*  CALL      ref    Microsoft.Win32.Registry.GetValue
     (  4, 12) [000087] #---G------- arg0 in rcx     |     +--*  IND       ref   
     (  2, 10) [000086] H-----------                 |     |  \--*  CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer"
     (  4, 12) [000089] #---G------- arg1 in rdx     |     +--*  IND       ref   
     (  2, 10) [000088] H-----------                 |     |  \--*  CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance"
               [000004] -----+------ arg2 in r8      |     \--*  LCL_VAR   ref    V00 arg0         
               [000095] ------------ arg1 in rdx     +--*  LCL_VAR   ref    V06 tmp3         
               [000006] H----+-N---- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e class

fgMorphTree BB01, STMT00003 (before)
               [000019] -ACXG-------              *  ASG       ref   
               [000018] D------N----              +--*  LCL_VAR   ref    V01 loc0         
               [000017] --CXG-------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWARR_1_OBJ
               [000015] H----------- arg0            +--*  CNS_INT(h) long   0xd1ffab1e class
               [000016] ---X-------- arg1            \--*  CAST      long <- int
               [000014] ---X--------                    \--*  ADD       int   
               [000012] ---X--------                       +--*  ARR_LENGTH int   
               [000011] ------------                       |  \--*  LCL_VAR   ref    V04 tmp1         
               [000013] ------------                       \--*  CNS_INT   int    1
Initializing arg info for 17.CALL:
ArgTable for 17.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 15.CNS_INT long (By ref), 1 reg: rcx, byteAlignment=8]
fgArgTabEntry[arg 1 16.CAST long (By ref), 1 reg: rdx, byteAlignment=8]

Morphing args for 17.CALL:
GenTreeNode creates assertion:
               [000012] ---X--------              *  ARR_LENGTH int   
In BB01 New Local Constant Assertion: V04 != null index=#02, mask=0000000000000002
argSlots=2, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rdx'):
               [000016] ---X-+------              *  CAST      long <- int
               [000014] ---X-+------              \--*  ADD       int   
               [000012] ---X-+------                 +--*  ARR_LENGTH int   
               [000011] -----+------                 |  \--*  LCL_VAR   ref    V04 tmp1         
               [000013] -----+------                 \--*  CNS_INT   int    1
Replaced with placeholder node:
               [000097] ----------L-              *  ARGPLACE  long  
Deferred argument ('rcx'):
               [000015] H----+------              *  CNS_INT(h) long   0xd1ffab1e class
Replaced with placeholder node:
               [000098] ----------L-              *  ARGPLACE  long  

Shuffled argument table:    rdx rcx 
ArgTable for 17.CALL after fgMorphArgs:
fgArgTabEntry[arg 1 16.CAST long (By ref), 1 reg: rdx, byteAlignment=8, lateArgInx=0, processed]
fgArgTabEntry[arg 0 15.CNS_INT long (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=1, processed]


fgMorphTree BB01, STMT00003 (after)
               [000019] -ACXG+------              *  ASG       ref   
               [000018] D----+-N----              +--*  LCL_VAR   ref    V01 loc0         
               [000017] --CXG+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWARR_1_OBJ
               [000016] ---X-+------ arg1 in rdx     +--*  CAST      long <- int
               [000014] ---X-+------                 |  \--*  ADD       int   
               [000012] ---X-+------                 |     +--*  ARR_LENGTH int   
               [000011] -----+------                 |     |  \--*  LCL_VAR   ref    V04 tmp1         
               [000013] -----+------                 |     \--*  CNS_INT   int    1
               [000015] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e class

fgMorphTree BB01, STMT00005 (before)
               [000024] -AC---------              *  ASG       ref   
               [000023] D------N----              +--*  LCL_VAR   ref    V02 loc1         
               [000062] --C-G-------              \--*  CALL      ref    System.String.Join
               [000063] ------------ arg0            +--*  PUTARG_TYPE ushort
               [000066] ------------                 |  \--*  CNS_INT   int    124
               [000020] ------------ arg1            \--*  LCL_VAR   ref    V00 arg0         
Initializing arg info for 62.CALL:
ArgTable for 62.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 63.PUTARG_TYPE int (By ref), 1 reg: rcx, byteAlignment=8]
fgArgTabEntry[arg 1 20.LCL_VAR ref (By ref), 1 reg: rdx, byteAlignment=8]

Morphing args for 62.CALL:
argSlots=2, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rdx'):
               [000020] -----+------              *  LCL_VAR   ref    V00 arg0         
Replaced with placeholder node:
               [000099] ----------L-              *  ARGPLACE  ref   
Deferred argument ('rcx'):
               [000066] -----+------              *  CNS_INT   int    124
Replaced with placeholder node:
               [000100] ----------L-              *  ARGPLACE  int   

Shuffled argument table:    rdx rcx 
ArgTable for 62.CALL after fgMorphArgs:
fgArgTabEntry[arg 1 20.LCL_VAR ref (By ref), 1 reg: rdx, byteAlignment=8, lateArgInx=0, processed]
fgArgTabEntry[arg 0 66.CNS_INT int (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=1, processed]


fgMorphTree BB01, STMT00005 (after)
               [000024] -ACXG+------              *  ASG       ref   
               [000023] D----+-N----              +--*  LCL_VAR   ref    V02 loc1         
               [000062] --CXG+------              \--*  CALL      ref    System.String.Join
               [000020] -----+------ arg1 in rdx     +--*  LCL_VAR   ref    V00 arg0         
               [000066] -----+------ arg0 in rcx     \--*  CNS_INT   int    124

fgMorphTree BB01, STMT00006 (before)
               [000027] --C-G-------              *  CALL nullcheck void   System.Array.CopyTo
               [000010] ------------ this in rcx  +--*  LCL_VAR   ref    V04 tmp1         
               [000025] ------------ arg1         +--*  LCL_VAR   ref    V01 loc0         
               [000026] ------------ arg2         \--*  CNS_INT   int    0

Non-null prop for index #02 in BB01:
               [000027] --C-G-------              *  CALL nullcheck void   System.Array.CopyTo
Initializing arg info for 27.CALL:
ArgTable for 27.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 10.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8]
fgArgTabEntry[arg 1 25.LCL_VAR ref (By ref), 1 reg: rdx, byteAlignment=8]
fgArgTabEntry[arg 2 26.CNS_INT int (By ref), 1 reg: r8, byteAlignment=8]

Morphing args for 27.CALL:
argSlots=3, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000010] -----+------              *  LCL_VAR   ref    V04 tmp1         
Replaced with placeholder node:
               [000101] ----------L-              *  ARGPLACE  ref   
Deferred argument ('rdx'):
               [000025] -----+------              *  LCL_VAR   ref    V01 loc0         
Replaced with placeholder node:
               [000102] ----------L-              *  ARGPLACE  ref   
Deferred argument ('r8'):
               [000026] -----+------              *  CNS_INT   int    0
Replaced with placeholder node:
               [000103] ----------L-              *  ARGPLACE  int   

Shuffled argument table:    rcx rdx r8 
ArgTable for 27.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 10.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]
fgArgTabEntry[arg 1 25.LCL_VAR ref (By ref), 1 reg: rdx, byteAlignment=8, lateArgInx=1, processed]
fgArgTabEntry[arg 2 26.CNS_INT int (By ref), 1 reg: r8, byteAlignment=8, lateArgInx=2, processed]


fgMorphTree BB01, STMT00006 (after)
               [000027] --CXG+------              *  CALL      void   System.Array.CopyTo
               [000010] -----+------ this in rcx  +--*  LCL_VAR   ref    V04 tmp1         
               [000025] -----+------ arg1 in rdx  +--*  LCL_VAR   ref    V01 loc0         
               [000026] -----+------ arg2 in r8   \--*  CNS_INT   int    0

fgMorphTree BB01, STMT00007 (before)
               [000035] -A-XG-------              *  ASG       ref   
               [000034] ---XG--N----              +--*  INDEX     ref   
               [000028] ------------              |  +--*  LCL_VAR   ref    V01 loc0         
               [000032] ---X--------              |  \--*  SUB       int   
               [000030] ---X--------              |     +--*  ARR_LENGTH int   
               [000029] ------------              |     |  \--*  LCL_VAR   ref    V01 loc0         
               [000031] ------------              |     \--*  CNS_INT   int    1
               [000033] ------------              \--*  LCL_VAR   ref    V02 loc1         
GenTreeNode creates assertion:
               [000030] ---X--------              *  ARR_LENGTH int   
In BB01 New Local Constant Assertion: V01 != null index=#03, mask=0000000000000004

fgMorphTree BB01, STMT00007 (after)
               [000035] -A-XG+------              *  ASG       ref   
               [000117] ---XG+-N----              +--*  COMMA     ref   
               [000110] ---X-+------              |  +--*  ARR_BOUNDS_CHECK_Rng void  
               [000032] ---X-+------              |  |  +--*  ADD       int   
               [000030] ---X-+------              |  |  |  +--*  ARR_LENGTH int   
               [000029] -----+------              |  |  |  |  \--*  LCL_VAR   ref    V01 loc0         
               [000031] -----+------              |  |  |  \--*  CNS_INT   int    -1
               [000109] ---X-+------              |  |  \--*  ARR_LENGTH int   
               [000028] -----+------              |  |     \--*  LCL_VAR   ref    V01 loc0         
               [000034] a--XG+-N----              |  \--*  IND       ref   
               [000116] ---X-+------              |     \--*  ADD       byref 
               [000104] -----+------              |        +--*  LCL_VAR   ref    V01 loc0         
               [000115] ---X-+------              |        \--*  ADD       long  
               [000113] ---X-+------              |           +--*  LSH       long  
               [000111] ---X-+------              |           |  +--*  CAST      long <- int
               [000105] ---X-+------              |           |  |  \--*  ADD       int   
               [000106] ---X-+------              |           |  |     +--*  ARR_LENGTH int   
               [000107] -----+------              |           |  |     |  \--*  LCL_VAR   ref    V01 loc0         
               [000108] -----+------              |           |  |     \--*  CNS_INT   int    -1 Fseq[#ConstantIndex]
               [000112] -----+-N----              |           |  \--*  CNS_INT   long   3
               [000114] -----+------              |           \--*  CNS_INT   long   16 Fseq[#FirstElem]
               [000033] -----+------              \--*  LCL_VAR   ref    V02 loc1         

fgMorphTree BB01, STMT00016 (before)
               [000071] --C-G-------              *  CALL      void   Microsoft.Win32.Registry.SetValue
               [000068] ------------ arg0         +--*  CNS_STR   ref   <string constant>
               [000069] ------------ arg1         +--*  CNS_STR   ref   <string constant>
               [000038] ------------ arg2         +--*  LCL_VAR   ref    V01 loc0         
               [000070] ------------ arg3         \--*  CNS_INT   int    0
Initializing arg info for 71.CALL:
ArgTable for 71.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 68.CNS_STR ref (By ref), 1 reg: rcx, byteAlignment=8]
fgArgTabEntry[arg 1 69.CNS_STR ref (By ref), 1 reg: rdx, byteAlignment=8]
fgArgTabEntry[arg 2 38.LCL_VAR ref (By ref), 1 reg: r8, byteAlignment=8]
fgArgTabEntry[arg 3 70.CNS_INT int (By ref), 1 reg: r9, byteAlignment=8]

Morphing args for 71.CALL:
argSlots=4, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
     (  4, 12) [000119] #---G-------              *  IND       ref   
     (  2, 10) [000118] H-----------              \--*  CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer"
Replaced with placeholder node:
               [000122] ----------L-              *  ARGPLACE  ref   
Deferred argument ('rdx'):
     (  4, 12) [000121] #---G-------              *  IND       ref   
     (  2, 10) [000120] H-----------              \--*  CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance"
Replaced with placeholder node:
               [000123] ----------L-              *  ARGPLACE  ref   
Deferred argument ('r8'):
               [000038] -----+------              *  LCL_VAR   ref    V01 loc0         
Replaced with placeholder node:
               [000124] ----------L-              *  ARGPLACE  ref   
Deferred argument ('r9'):
               [000070] -----+------              *  CNS_INT   int    0
Replaced with placeholder node:
               [000125] ----------L-              *  ARGPLACE  int   

Shuffled argument table:    rcx rdx r8 r9 
ArgTable for 71.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 119.IND ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]
fgArgTabEntry[arg 1 121.IND ref (By ref), 1 reg: rdx, byteAlignment=8, lateArgInx=1, processed]
fgArgTabEntry[arg 2 38.LCL_VAR ref (By ref), 1 reg: r8, byteAlignment=8, lateArgInx=2, processed]
fgArgTabEntry[arg 3 70.CNS_INT int (By ref), 1 reg: r9, byteAlignment=8, lateArgInx=3, processed]


fgMorphTree BB01, STMT00016 (after)
               [000071] --CXG+------              *  CALL      void   Microsoft.Win32.Registry.SetValue
     (  4, 12) [000119] #---G------- arg0 in rcx  +--*  IND       ref   
     (  2, 10) [000118] H-----------              |  \--*  CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer"
     (  4, 12) [000121] #---G------- arg1 in rdx  +--*  IND       ref   
     (  2, 10) [000120] H-----------              |  \--*  CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance"
               [000038] -----+------ arg2 in r8   +--*  LCL_VAR   ref    V01 loc0         
               [000070] -----+------ arg3 in r9   \--*  CNS_INT   int    0

fgMorphTree BB01, STMT00017 (before)
               [000079] --CXG-------              *  CALL nullcheck void   System.Threading.Mutex.ReleaseMutex
               [000078] --CXG------- this in rcx  \--*  COMMA     ref   
               [000077] H-CXG-------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
               [000075] ------------ arg0            |  +--*  CNS_INT   long   0x7ffc7e4c17a0
               [000076] ------------ arg1            |  \--*  CNS_INT   int    1
               [000073] ----G-------                 \--*  FIELD     ref    _registryLock
Initializing arg info for 79.CALL:
ArgTable for 79.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 78.COMMA ref (By ref), 1 reg: rcx, byteAlignment=8]

[Fast tailcall decision]: Will fast tailcall

GTF_CALL_M_TAILCALL bit set for call [000079]
Remove all stmts after the call.

Removing statement STMT00010 (IL 0x055...  ???)
               [000041] ------------              *  RETURN    void  
 in BB01 as useless:

Morphing args for 79.CALL:
Initializing arg info for 77.CALL:
ArgTable for 77.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 75.CNS_INT long (By ref), 1 reg: rcx, byteAlignment=8]
fgArgTabEntry[arg 1 76.CNS_INT int (By ref), 1 reg: rdx, byteAlignment=8]

Morphing args for 77.CALL:
argSlots=2, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000075] -----+------              *  CNS_INT   long   0x7ffc7e4c17a0
Replaced with placeholder node:
               [000126] ----------L-              *  ARGPLACE  long  
Deferred argument ('rdx'):
               [000076] -----+------              *  CNS_INT   int    1
Replaced with placeholder node:
               [000127] ----------L-              *  ARGPLACE  int   

Shuffled argument table:    rcx rdx 
ArgTable for 77.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 75.CNS_INT long (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]
fgArgTabEntry[arg 1 76.CNS_INT int (By ref), 1 reg: rdx, byteAlignment=8, lateArgInx=1, processed]


Sorting the arguments:
Deferred argument ('rcx'):
               [000078] --CXG+------              *  COMMA     ref   
               [000077] H-CXG+------              +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
               [000075] -----+------ arg0 in rcx  |  +--*  CNS_INT   long   0x7ffc7e4c17a0
               [000076] -----+------ arg1 in rdx  |  \--*  CNS_INT   int    1
               [000073] n---G+------              \--*  IND       ref   
               [000128] I----+------                 \--*  CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock]
Replaced with placeholder node:
               [000129] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx 
ArgTable for 79.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 78.COMMA ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB01, STMT00017 (after)
               [000079] --CXG+------              *  CALL nullcheck void   System.Threading.Mutex.ReleaseMutex
               [000078] --CXG+------ this in rcx  \--*  COMMA     ref   
               [000077] H-CXG+------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
               [000075] -----+------ arg0 in rcx     |  +--*  CNS_INT   long   0x7ffc7e4c17a0
               [000076] -----+------ arg1 in rdx     |  \--*  CNS_INT   int    1
               [000073] n---G+------                 \--*  IND       ref   
               [000128] I----+------                    \--*  CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock]

*************** Finishing PHASE Morph - Global
Trees after Morph - Global

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..056)        (return)                     i label target jmp hascall gcsafe idxlen new[] nullcheck 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..056) (return), preds={} succs={}

***** BB01
STMT00013 (IL 0x000...  ???)
               [000059] -ACXG+------              *  ASG       ref   
               [000058] D----+-N----              +--*  LCL_VAR   ref    V05 tmp2         
               [000047] --CXG+------              \--*  COMMA     ref   
               [000046] H-CXG+------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
               [000044] -----+------ arg0 in rcx     |  +--*  CNS_INT   long   0x7ffc7e4c17a0
               [000045] -----+------ arg1 in rdx     |  \--*  CNS_INT   int    1
               [000042] n---G+------                 \--*  IND       ref   
               [000083] I----+------                    \--*  CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock]

***** BB01
STMT00014 (IL 0x000...  ???)
               [000057] ---X-+------              *  NULLCHECK byte  
               [000056] -----+------              \--*  LCL_VAR   ref    V05 tmp2         

***** BB01
STMT00012 (IL 0x000...  ???)
               [000055] --CXG+------              *  CALL      int    System.Threading.WaitHandle.WaitOneNoCheck
               [000053] -----+------ this in rcx  +--*  LCL_VAR   ref    V05 tmp2         
               [000054] -----+------ arg1 in rdx  \--*  CNS_INT   int    -1

***** BB01
STMT00001 (IL 0x005...  ???)
               [000001] --CXG+------              *  CALL      void   HotkeyedMusicPlayer.ArgsTransport.EnsureRootKeyExists

***** BB01
STMT00002 (IL 0x00A...  ???)
               [000009] -ACXG+------              *  ASG       ref   
               [000008] D----+-N----              +--*  LCL_VAR   ref    V04 tmp1         
               [000007] --CXG+------              \--*  CALL help ref    HELPER.CORINFO_HELP_CHKCASTARRAY
               [000094] -ACXG-----L- arg1 SETUP      +--*  ASG       ref   
               [000093] D------N----                 |  +--*  LCL_VAR   ref    V06 tmp3         
               [000005] --CXG+------                 |  \--*  CALL      ref    Microsoft.Win32.Registry.GetValue
     (  4, 12) [000087] #---G------- arg0 in rcx     |     +--*  IND       ref   
     (  2, 10) [000086] H-----------                 |     |  \--*  CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer"
     (  4, 12) [000089] #---G------- arg1 in rdx     |     +--*  IND       ref   
     (  2, 10) [000088] H-----------                 |     |  \--*  CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance"
               [000004] -----+------ arg2 in r8      |     \--*  LCL_VAR   ref    V00 arg0         
               [000095] ------------ arg1 in rdx     +--*  LCL_VAR   ref    V06 tmp3         
               [000006] H----+-N---- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e class

***** BB01
STMT00003 (IL   ???...  ???)
               [000019] -ACXG+------              *  ASG       ref   
               [000018] D----+-N----              +--*  LCL_VAR   ref    V01 loc0         
               [000017] --CXG+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWARR_1_OBJ
               [000016] ---X-+------ arg1 in rdx     +--*  CAST      long <- int
               [000014] ---X-+------                 |  \--*  ADD       int   
               [000012] ---X-+------                 |     +--*  ARR_LENGTH int   
               [000011] -----+------                 |     |  \--*  LCL_VAR   ref    V04 tmp1         
               [000013] -----+------                 |     \--*  CNS_INT   int    1
               [000015] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e class

***** BB01
STMT00005 (IL   ???...  ???)
               [000024] -ACXG+------              *  ASG       ref   
               [000023] D----+-N----              +--*  LCL_VAR   ref    V02 loc1         
               [000062] --CXG+------              \--*  CALL      ref    System.String.Join
               [000020] -----+------ arg1 in rdx     +--*  LCL_VAR   ref    V00 arg0         
               [000066] -----+------ arg0 in rcx     \--*  CNS_INT   int    124

***** BB01
STMT00006 (IL   ???...0x03F)
               [000027] --CXG+------              *  CALL      void   System.Array.CopyTo
               [000010] -----+------ this in rcx  +--*  LCL_VAR   ref    V04 tmp1         
               [000025] -----+------ arg1 in rdx  +--*  LCL_VAR   ref    V01 loc0         
               [000026] -----+------ arg2 in r8   \--*  CNS_INT   int    0

***** BB01
STMT00007 (IL 0x038...  ???)
               [000035] -A-XG+------              *  ASG       ref   
               [000117] ---XG+-N----              +--*  COMMA     ref   
               [000110] ---X-+------              |  +--*  ARR_BOUNDS_CHECK_Rng void  
               [000032] ---X-+------              |  |  +--*  ADD       int   
               [000030] ---X-+------              |  |  |  +--*  ARR_LENGTH int   
               [000029] -----+------              |  |  |  |  \--*  LCL_VAR   ref    V01 loc0         
               [000031] -----+------              |  |  |  \--*  CNS_INT   int    -1
               [000109] ---X-+------              |  |  \--*  ARR_LENGTH int   
               [000028] -----+------              |  |     \--*  LCL_VAR   ref    V01 loc0         
               [000034] a--XG+-N----              |  \--*  IND       ref   
               [000116] ---X-+------              |     \--*  ADD       byref 
               [000104] -----+------              |        +--*  LCL_VAR   ref    V01 loc0         
               [000115] ---X-+------              |        \--*  ADD       long  
               [000113] ---X-+------              |           +--*  LSH       long  
               [000111] ---X-+------              |           |  +--*  CAST      long <- int
               [000105] ---X-+------              |           |  |  \--*  ADD       int   
               [000106] ---X-+------              |           |  |     +--*  ARR_LENGTH int   
               [000107] -----+------              |           |  |     |  \--*  LCL_VAR   ref    V01 loc0         
               [000108] -----+------              |           |  |     \--*  CNS_INT   int    -1 Fseq[#ConstantIndex]
               [000112] -----+-N----              |           |  \--*  CNS_INT   long   3
               [000114] -----+------              |           \--*  CNS_INT   long   16 Fseq[#FirstElem]
               [000033] -----+------              \--*  LCL_VAR   ref    V02 loc1         

***** BB01
STMT00016 (IL 0x040...  ???)
               [000071] --CXG+------              *  CALL      void   Microsoft.Win32.Registry.SetValue
     (  4, 12) [000119] #---G------- arg0 in rcx  +--*  IND       ref   
     (  2, 10) [000118] H-----------              |  \--*  CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer"
     (  4, 12) [000121] #---G------- arg1 in rdx  +--*  IND       ref   
     (  2, 10) [000120] H-----------              |  \--*  CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance"
               [000038] -----+------ arg2 in r8   +--*  LCL_VAR   ref    V01 loc0         
               [000070] -----+------ arg3 in r9   \--*  CNS_INT   int    0

***** BB01
STMT00017 (IL 0x050...  ???)
               [000079] --CXG+------              *  CALL nullcheck void   System.Threading.Mutex.ReleaseMutex
               [000078] --CXG+------ this in rcx  \--*  COMMA     ref   
               [000077] H-CXG+------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
               [000075] -----+------ arg0 in rcx     |  +--*  CNS_INT   long   0x7ffc7e4c17a0
               [000076] -----+------ arg1 in rdx     |  \--*  CNS_INT   int    1
               [000073] n---G+------                 \--*  IND       ref   
               [000128] I----+------                    \--*  CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock]

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist

*************** Starting PHASE GS Cookie
No GS security needed

*************** Finishing PHASE GS Cookie

*************** Starting PHASE Compute edge weights (1, false)
*************** In fgComputeBlockAndEdgeWeights()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..056)        (return)                     i label target jmp hascall gcsafe idxlen new[] nullcheck 
-----------------------------------------------------------------------------------------------------------------------------------------

 -- no profile data, so using default called count
 -- not optimizing or no profile data, so not computing edge weights

*************** Finishing PHASE Compute edge weights (1, false)

*************** Starting PHASE Create EH funclets
*************** In fgCreateFunclets()

After fgCreateFunclets()
-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..056)        (return)                     i label target jmp hascall gcsafe idxlen new[] nullcheck 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table is empty
*************** In fgDebugCheckBBlist

*************** Finishing PHASE Create EH funclets

*************** Starting PHASE Optimize layout
*************** In optOptimizeLayout()

***************  Exception Handling table is empty
*************** In fgDebugCheckBBlist

*************** In fgUpdateFlowGraph()
Before updating the flow graph:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..056)        (return)                     i label target jmp hascall gcsafe idxlen new[] nullcheck 
-----------------------------------------------------------------------------------------------------------------------------------------

*************** In fgDebugCheckBBlist

*************** In fgUpdateFlowGraph()
Before updating the flow graph:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..056)        (return)                     i label target jmp hascall gcsafe idxlen new[] nullcheck 
-----------------------------------------------------------------------------------------------------------------------------------------

*************** In fgDebugCheckBBlist

*************** Finishing PHASE Optimize layout

*************** Starting PHASE Compute blocks reachability
*************** In fgComputeReachability
*************** In fgDebugCheckBBlist

Renumbering the basic blocks for fgComputeReachability pass #1

*************** Before renumbering the basic blocks

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..056)        (return)                     i label target jmp hascall gcsafe idxlen new[] nullcheck 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table is empty

*************** After renumbering the basic blocks
=============== No blocks renumbered!
Enter blocks: BB01 

After computing reachability sets:
------------------------------------------------
BBnum  Reachable by 
------------------------------------------------
BB01 : BB01 

After computing reachability:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..056)        (return)                     i label target jmp hascall gcsafe idxlen new[] nullcheck 
-----------------------------------------------------------------------------------------------------------------------------------------

*************** In fgDebugCheckBBlist
*************** In fgComputeDoms
*************** In fgDebugCheckBBlist

Dominator computation start blocks (those blocks with no incoming edges):
BB01 
------------------------------------------------
BBnum  Dominated by
------------------------------------------------
BB01:  BB01 

Inside fgBuildDomTree

After computing the Dominance Tree:


After numbering the dominator tree:
BB01: pre=01, post=01

*************** Finishing PHASE Compute blocks reachability

*************** Starting PHASE Optimize loops
*************** In optOptimizeLoops()
*************** In fgDebugCheckBBlist

*************** Finishing PHASE Optimize loops

*************** Starting PHASE Clone loops

*************** In optCloneLoops()

*************** Finishing PHASE Clone loops

*************** Starting PHASE Unroll loops

*************** Finishing PHASE Unroll loops

*************** Starting PHASE Mark local vars

*************** In lvaMarkLocalVars()
*** lvaComputeRefCounts ***

*** lvaComputeRefCounts -- explicit counts ***

*** marking local variables in block BB01 (weight=1   )
STMT00013 (IL 0x000...  ???)
               [000059] -ACXG+------              *  ASG       ref   
               [000058] D----+-N----              +--*  LCL_VAR   ref    V05 tmp2         
               [000047] --CXG+------              \--*  COMMA     ref   
               [000046] H-CXG+------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
               [000044] -----+------ arg0 in rcx     |  +--*  CNS_INT   long   0x7ffc7e4c17a0
               [000045] -----+------ arg1 in rdx     |  \--*  CNS_INT   int    1
               [000042] n---G+------                 \--*  IND       ref   
               [000083] I----+------                    \--*  CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock]
New refCnts for V05: refCnt =  1, refCntWtd = 2   
STMT00014 (IL 0x000...  ???)
               [000057] ---X-+------              *  NULLCHECK byte  
               [000056] -----+------              \--*  LCL_VAR   ref    V05 tmp2         
New refCnts for V05: refCnt =  2, refCntWtd = 4   
STMT00012 (IL 0x000...  ???)
               [000055] --CXG+------              *  CALL      int    System.Threading.WaitHandle.WaitOneNoCheck
               [000053] -----+------ this in rcx  +--*  LCL_VAR   ref    V05 tmp2         
               [000054] -----+------ arg1 in rdx  \--*  CNS_INT   int    -1
New refCnts for V05: refCnt =  3, refCntWtd = 6   
STMT00001 (IL 0x005...  ???)
               [000001] --CXG+------              *  CALL      void   HotkeyedMusicPlayer.ArgsTransport.EnsureRootKeyExists
STMT00002 (IL 0x00A...  ???)
               [000009] -ACXG+------              *  ASG       ref   
               [000008] D----+-N----              +--*  LCL_VAR   ref    V04 tmp1         
               [000007] --CXG+------              \--*  CALL help ref    HELPER.CORINFO_HELP_CHKCASTARRAY
               [000094] -ACXG-----L- arg1 SETUP      +--*  ASG       ref   
               [000093] D------N----                 |  +--*  LCL_VAR   ref    V06 tmp3         
               [000005] --CXG+------                 |  \--*  CALL      ref    Microsoft.Win32.Registry.GetValue
     (  4, 12) [000087] #---G------- arg0 in rcx     |     +--*  IND       ref   
     (  2, 10) [000086] H-----------                 |     |  \--*  CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer"
     (  4, 12) [000089] #---G------- arg1 in rdx     |     +--*  IND       ref   
     (  2, 10) [000088] H-----------                 |     |  \--*  CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance"
               [000004] -----+------ arg2 in r8      |     \--*  LCL_VAR   ref    V00 arg0         
               [000095] ------------ arg1 in rdx     +--*  LCL_VAR   ref    V06 tmp3         
               [000006] H----+-N---- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e class
New refCnts for V04: refCnt =  1, refCntWtd = 2   
New refCnts for V06: refCnt =  1, refCntWtd = 2   
New refCnts for V00: refCnt =  1, refCntWtd = 1   
New refCnts for V06: refCnt =  2, refCntWtd = 4   
STMT00003 (IL   ???...  ???)
               [000019] -ACXG+------              *  ASG       ref   
               [000018] D----+-N----              +--*  LCL_VAR   ref    V01 loc0         
               [000017] --CXG+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWARR_1_OBJ
               [000016] ---X-+------ arg1 in rdx     +--*  CAST      long <- int
               [000014] ---X-+------                 |  \--*  ADD       int   
               [000012] ---X-+------                 |     +--*  ARR_LENGTH int   
               [000011] -----+------                 |     |  \--*  LCL_VAR   ref    V04 tmp1         
               [000013] -----+------                 |     \--*  CNS_INT   int    1
               [000015] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e class
New refCnts for V01: refCnt =  1, refCntWtd = 1   
New refCnts for V04: refCnt =  2, refCntWtd = 4   
STMT00005 (IL   ???...  ???)
               [000024] -ACXG+------              *  ASG       ref   
               [000023] D----+-N----              +--*  LCL_VAR   ref    V02 loc1         
               [000062] --CXG+------              \--*  CALL      ref    System.String.Join
               [000020] -----+------ arg1 in rdx     +--*  LCL_VAR   ref    V00 arg0         
               [000066] -----+------ arg0 in rcx     \--*  CNS_INT   int    124
New refCnts for V02: refCnt =  1, refCntWtd = 1   
New refCnts for V00: refCnt =  2, refCntWtd = 2   
STMT00006 (IL   ???...0x03F)
               [000027] --CXG+------              *  CALL      void   System.Array.CopyTo
               [000010] -----+------ this in rcx  +--*  LCL_VAR   ref    V04 tmp1         
               [000025] -----+------ arg1 in rdx  +--*  LCL_VAR   ref    V01 loc0         
               [000026] -----+------ arg2 in r8   \--*  CNS_INT   int    0
New refCnts for V04: refCnt =  3, refCntWtd = 6   
New refCnts for V01: refCnt =  2, refCntWtd = 2   
STMT00007 (IL 0x038...  ???)
               [000035] -A-XG+------              *  ASG       ref   
               [000117] ---XG+-N----              +--*  COMMA     ref   
               [000110] ---X-+------              |  +--*  ARR_BOUNDS_CHECK_Rng void  
               [000032] ---X-+------              |  |  +--*  ADD       int   
               [000030] ---X-+------              |  |  |  +--*  ARR_LENGTH int   
               [000029] -----+------              |  |  |  |  \--*  LCL_VAR   ref    V01 loc0         
               [000031] -----+------              |  |  |  \--*  CNS_INT   int    -1
               [000109] ---X-+------              |  |  \--*  ARR_LENGTH int   
               [000028] -----+------              |  |     \--*  LCL_VAR   ref    V01 loc0         
               [000034] a--XG+-N----              |  \--*  IND       ref   
               [000116] ---X-+------              |     \--*  ADD       byref 
               [000104] -----+------              |        +--*  LCL_VAR   ref    V01 loc0         
               [000115] ---X-+------              |        \--*  ADD       long  
               [000113] ---X-+------              |           +--*  LSH       long  
               [000111] ---X-+------              |           |  +--*  CAST      long <- int
               [000105] ---X-+------              |           |  |  \--*  ADD       int   
               [000106] ---X-+------              |           |  |     +--*  ARR_LENGTH int   
               [000107] -----+------              |           |  |     |  \--*  LCL_VAR   ref    V01 loc0         
               [000108] -----+------              |           |  |     \--*  CNS_INT   int    -1 Fseq[#ConstantIndex]
               [000112] -----+-N----              |           |  \--*  CNS_INT   long   3
               [000114] -----+------              |           \--*  CNS_INT   long   16 Fseq[#FirstElem]
               [000033] -----+------              \--*  LCL_VAR   ref    V02 loc1         
New refCnts for V01: refCnt =  3, refCntWtd = 3   
New refCnts for V01: refCnt =  4, refCntWtd = 4   
New refCnts for V01: refCnt =  5, refCntWtd = 5   
New refCnts for V01: refCnt =  6, refCntWtd = 6   
New refCnts for V02: refCnt =  2, refCntWtd = 2   
STMT00016 (IL 0x040...  ???)
               [000071] --CXG+------              *  CALL      void   Microsoft.Win32.Registry.SetValue
     (  4, 12) [000119] #---G------- arg0 in rcx  +--*  IND       ref   
     (  2, 10) [000118] H-----------              |  \--*  CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer"
     (  4, 12) [000121] #---G------- arg1 in rdx  +--*  IND       ref   
     (  2, 10) [000120] H-----------              |  \--*  CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance"
               [000038] -----+------ arg2 in r8   +--*  LCL_VAR   ref    V01 loc0         
               [000070] -----+------ arg3 in r9   \--*  CNS_INT   int    0
New refCnts for V01: refCnt =  7, refCntWtd = 7   
STMT00017 (IL 0x050...  ???)
               [000079] --CXG+------              *  CALL nullcheck void   System.Threading.Mutex.ReleaseMutex
               [000078] --CXG+------ this in rcx  \--*  COMMA     ref   
               [000077] H-CXG+------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
               [000075] -----+------ arg0 in rcx     |  +--*  CNS_INT   long   0x7ffc7e4c17a0
               [000076] -----+------ arg1 in rdx     |  \--*  CNS_INT   int    1
               [000073] n---G+------                 \--*  IND       ref   
               [000128] I----+------                    \--*  CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock]

*** lvaComputeRefCounts -- implicit counts ***
New refCnts for V00: refCnt =  3, refCntWtd = 3   
New refCnts for V00: refCnt =  4, refCntWtd = 4   

*************** In optAddCopies()


*************** Finishing PHASE Mark local vars

*************** Starting PHASE Optimize bools
*************** In optOptimizeBools()
*************** In fgDebugCheckBBlist

*************** Finishing PHASE Optimize bools

*************** Starting PHASE Find oper order
*************** In fgFindOperOrder()

*************** Finishing PHASE Find oper order

*************** Starting PHASE Set block order
*************** In fgSetBlockOrder()
The biggest BB has   22 tree nodes

*************** Finishing PHASE Set block order
Trees before Build SSA representation

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..056)        (return)                     i label target jmp hascall gcsafe idxlen new[] nullcheck 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..056) (return), preds={} succs={}

***** BB01
STMT00013 (IL 0x000...  ???)
N010 ( 21, 30) [000059] -ACXG---R---              *  ASG       ref   
N009 (  1,  1) [000058] D------N----              +--*  LCL_VAR   ref    V05 tmp2         
N008 ( 21, 30) [000047] --CXG-------              \--*  COMMA     ref   
N005 ( 17, 18) [000046] H-CXG-------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
N003 (  2, 10) [000044] ------------ arg0 in rcx     |  +--*  CNS_INT   long   0x7ffc7e4c17a0
N004 (  1,  1) [000045] ------------ arg1 in rdx     |  \--*  CNS_INT   int    1
N007 (  4, 12) [000042] n---G-------                 \--*  IND       ref   
N006 (  2, 10) [000083] I-----------                    \--*  CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock]

***** BB01
STMT00014 (IL 0x000...  ???)
N002 (  2,  2) [000057] ---X--------              *  NULLCHECK byte  
N001 (  1,  1) [000056] ------------              \--*  LCL_VAR   ref    V05 tmp2         

***** BB01
STMT00012 (IL 0x000...  ???)
N005 ( 16, 10) [000055] --CXG-------              *  CALL      int    System.Threading.WaitHandle.WaitOneNoCheck
N003 (  1,  1) [000053] ------------ this in rcx  +--*  LCL_VAR   ref    V05 tmp2         
N004 (  1,  1) [000054] ------------ arg1 in rdx  \--*  CNS_INT   int    -1

***** BB01
STMT00001 (IL 0x005...  ???)
N001 ( 14,  5) [000001] --CXG-------              *  CALL      void   HotkeyedMusicPlayer.ArgsTransport.EnsureRootKeyExists

***** BB01
STMT00002 (IL 0x00A...  ???)
N017 ( 43, 51) [000009] -ACXG---R---              *  ASG       ref   
N016 (  1,  1) [000008] D------N----              +--*  LCL_VAR   ref    V04 tmp1         
N015 ( 43, 51) [000007] --CXG-------              \--*  CALL help ref    HELPER.CORINFO_HELP_CHKCASTARRAY
N012 ( 23, 33) [000094] -ACXG---R-L- arg1 SETUP      +--*  ASG       ref   
N011 (  1,  1) [000093] D------N----                 |  +--*  LCL_VAR   ref    V06 tmp3         
N010 ( 23, 33) [000005] --CXG-------                 |  \--*  CALL      ref    Microsoft.Win32.Registry.GetValue
N006 (  4, 12) [000087] #---G------- arg0 in rcx     |     +--*  IND       ref   
N005 (  2, 10) [000086] H-----------                 |     |  \--*  CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer"
N008 (  4, 12) [000089] #---G------- arg1 in rdx     |     +--*  IND       ref   
N007 (  2, 10) [000088] H-----------                 |     |  \--*  CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance"
N009 (  1,  1) [000004] ------------ arg2 in r8      |     \--*  LCL_VAR   ref    V00 arg0         
N013 (  1,  1) [000095] ------------ arg1 in rdx     +--*  LCL_VAR   ref    V06 tmp3         
N014 (  2, 10) [000006] H------N---- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e class

***** BB01
STMT00003 (IL   ???...  ???)
N011 ( 22, 24) [000019] -ACXG---R---              *  ASG       ref   
N010 (  1,  1) [000018] D------N----              +--*  LCL_VAR   ref    V01 loc0         
N009 ( 22, 24) [000017] --CXG-------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWARR_1_OBJ
N007 (  6,  7) [000016] ---X-------- arg1 in rdx     +--*  CAST      long <- int
N006 (  5,  5) [000014] ---X--------                 |  \--*  ADD       int   
N004 (  3,  3) [000012] ---X--------                 |     +--*  ARR_LENGTH int   
N003 (  1,  1) [000011] ------------                 |     |  \--*  LCL_VAR   ref    V04 tmp1         
N005 (  1,  1) [000013] ------------                 |     \--*  CNS_INT   int    1
N008 (  2, 10) [000015] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e class

***** BB01
STMT00005 (IL   ???...  ???)
N007 ( 20, 12) [000024] -ACXG---R---              *  ASG       ref   
N006 (  3,  2) [000023] D------N----              +--*  LCL_VAR   ref    V02 loc1         
N005 ( 16,  9) [000062] --CXG-------              \--*  CALL      ref    System.String.Join
N003 (  1,  1) [000020] ------------ arg1 in rdx     +--*  LCL_VAR   ref    V00 arg0         
N004 (  1,  1) [000066] ------------ arg0 in rcx     \--*  CNS_INT   int    124

***** BB01
STMT00006 (IL   ???...0x03F)
N007 ( 17, 12) [000027] --CXG-------              *  CALL      void   System.Array.CopyTo
N004 (  1,  1) [000010] ------------ this in rcx  +--*  LCL_VAR   ref    V04 tmp1         
N005 (  1,  1) [000025] ------------ arg1 in rdx  +--*  LCL_VAR   ref    V01 loc0         
N006 (  1,  1) [000026] ------------ arg2 in r8   \--*  CNS_INT   int    0

***** BB01
STMT00007 (IL 0x038...  ???)
N022 ( 26, 29) [000035] -A-XG-------              *  ASG       ref   
N020 ( 22, 26) [000117] ---XG--N----              +--*  COMMA     ref   
N007 ( 12, 15) [000110] ---X--------              |  +--*  ARR_BOUNDS_CHECK_Rng void  
N004 (  5,  5) [000032] ---X--------              |  |  +--*  ADD       int   
N002 (  3,  3) [000030] ---X--------              |  |  |  +--*  ARR_LENGTH int   
N001 (  1,  1) [000029] ------------              |  |  |  |  \--*  LCL_VAR   ref    V01 loc0         
N003 (  1,  1) [000031] ------------              |  |  |  \--*  CNS_INT   int    -1
N006 (  3,  3) [000109] ---X--------              |  |  \--*  ARR_LENGTH int   
N005 (  1,  1) [000028] ------------              |  |     \--*  LCL_VAR   ref    V01 loc0         
N019 ( 10, 11) [000034] a--XG--N----              |  \--*  IND       ref   
N018 (  9, 10) [000116] ---X---N----              |     \--*  ADD       byref 
N016 (  8,  9) [000115] ---X---N----              |        +--*  ADD       long  
N014 (  7,  8) [000113] ---X---N----              |        |  +--*  LSH       long  
N012 (  6,  7) [000111] ---X--------              |        |  |  +--*  CAST      long <- int
N011 (  5,  5) [000105] ---X--------              |        |  |  |  \--*  ADD       int   
N009 (  3,  3) [000106] ---X--------              |        |  |  |     +--*  ARR_LENGTH int   
N008 (  1,  1) [000107] ------------              |        |  |  |     |  \--*  LCL_VAR   ref    V01 loc0         
N010 (  1,  1) [000108] ------------              |        |  |  |     \--*  CNS_INT   int    -1 Fseq[#ConstantIndex]
N013 (  1,  1) [000112] -------N----              |        |  |  \--*  CNS_INT   long   3
N015 (  1,  1) [000114] ------------              |        |  \--*  CNS_INT   long   16 Fseq[#FirstElem]
N017 (  1,  1) [000104] ------------              |        \--*  LCL_VAR   ref    V01 loc0         
N021 (  3,  2) [000033] ------------              \--*  LCL_VAR   ref    V02 loc1         

***** BB01
STMT00016 (IL 0x040...  ???)
N011 ( 24, 35) [000071] --CXG-------              *  CALL      void   Microsoft.Win32.Registry.SetValue
N006 (  4, 12) [000119] #---G------- arg0 in rcx  +--*  IND       ref   
N005 (  2, 10) [000118] H-----------              |  \--*  CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer"
N008 (  4, 12) [000121] #---G------- arg1 in rdx  +--*  IND       ref   
N007 (  2, 10) [000120] H-----------              |  \--*  CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance"
N009 (  1,  1) [000038] ------------ arg2 in r8   +--*  LCL_VAR   ref    V01 loc0         
N010 (  1,  1) [000070] ------------ arg3 in r9   \--*  CNS_INT   int    0

***** BB01
STMT00017 (IL 0x050...  ???)
N010 ( 35, 37) [000079] --CXG-------              *  CALL nullcheck void   System.Threading.Mutex.ReleaseMutex
N009 ( 21, 30) [000078] --CXG------- this in rcx  \--*  COMMA     ref   
N006 ( 17, 18) [000077] H-CXG-------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
N004 (  2, 10) [000075] ------------ arg0 in rcx     |  +--*  CNS_INT   long   0x7ffc7e4c17a0
N005 (  1,  1) [000076] ------------ arg1 in rdx     |  \--*  CNS_INT   int    1
N008 (  4, 12) [000073] n---G-------                 \--*  IND       ref   
N007 (  2, 10) [000128] I-----------                    \--*  CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock]

-------------------------------------------------------------------------------------------------------------------

*************** Starting PHASE Build SSA representation
*************** In SsaBuilder::Build()
[SsaBuilder] Max block count is 2.

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..056)        (return)                     i label target jmp hascall gcsafe idxlen new[] nullcheck 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table is empty
[SsaBuilder] Topologically sorted the graph.
[SsaBuilder::ComputeImmediateDom]

Inside fgBuildDomTree

After computing the Dominance Tree:

*************** In fgLocalVarLiveness()
In fgLocalVarLivenessInit
Tracked variable (6 out of 7) table:
V01 loc0          [   ref]: refCnt =    7, refCntWtd =   7   
V00 arg0          [   ref]: refCnt =    4, refCntWtd =   4   
V04 tmp1          [   ref]: refCnt =    3, refCntWtd =   6   
V05 tmp2          [   ref]: refCnt =    3, refCntWtd =   6   
V06 tmp3          [   ref]: refCnt =    2, refCntWtd =   4   
V02 loc1          [   ref]: refCnt =    2, refCntWtd =   2   

*************** In fgPerBlockLocalVarLiveness()
BB01 USE(1)={    V00                } + ByrefExposed + GcHeap
     DEF(5)={V01     V04 V05 V06 V02} + ByrefExposed* + GcHeap*

** Memory liveness computed, GcHeap states and ByrefExposed states match
*************** In fgInterBlockLocalVarLiveness()

BB liveness after fgLiveVarAnalysis():

BB01 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(0)={   }

*************** In optRemoveRedundantZeroInits()
*************** In SsaBuilder::InsertPhiFunctions()
Inserting phi functions:
*************** In SsaBuilder::RenameVariables()

After fgSsaBuild:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..056)        (return)                     i label target jmp hascall gcsafe idxlen new[] nullcheck 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..056) (return), preds={} succs={}

***** BB01
STMT00013 (IL 0x000...  ???)
N010 ( 21, 30) [000059] -ACXG---R---              *  ASG       ref   
N009 (  1,  1) [000058] D------N----              +--*  LCL_VAR   ref    V05 tmp2         d:2
N008 ( 21, 30) [000047] --CXG-------              \--*  COMMA     ref   
N005 ( 17, 18) [000046] H-CXG-------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
N003 (  2, 10) [000044] ------------ arg0 in rcx     |  +--*  CNS_INT   long   0x7ffc7e4c17a0
N004 (  1,  1) [000045] ------------ arg1 in rdx     |  \--*  CNS_INT   int    1
N007 (  4, 12) [000042] n---G-------                 \--*  IND       ref   
N006 (  2, 10) [000083] I-----------                    \--*  CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock]

***** BB01
STMT00014 (IL 0x000...  ???)
N002 (  2,  2) [000057] ---X--------              *  NULLCHECK byte  
N001 (  1,  1) [000056] ------------              \--*  LCL_VAR   ref    V05 tmp2         u:2

***** BB01
STMT00012 (IL 0x000...  ???)
N005 ( 16, 10) [000055] --CXG-------              *  CALL      int    System.Threading.WaitHandle.WaitOneNoCheck
N003 (  1,  1) [000053] ------------ this in rcx  +--*  LCL_VAR   ref    V05 tmp2         u:2 (last use)
N004 (  1,  1) [000054] ------------ arg1 in rdx  \--*  CNS_INT   int    -1

***** BB01
STMT00001 (IL 0x005...  ???)
N001 ( 14,  5) [000001] --CXG-------              *  CALL      void   HotkeyedMusicPlayer.ArgsTransport.EnsureRootKeyExists

***** BB01
STMT00002 (IL 0x00A...  ???)
N017 ( 43, 51) [000009] -ACXG---R---              *  ASG       ref   
N016 (  1,  1) [000008] D------N----              +--*  LCL_VAR   ref    V04 tmp1         d:2
N015 ( 43, 51) [000007] --CXG-------              \--*  CALL help ref    HELPER.CORINFO_HELP_CHKCASTARRAY
N012 ( 23, 33) [000094] -ACXG---R-L- arg1 SETUP      +--*  ASG       ref   
N011 (  1,  1) [000093] D------N----                 |  +--*  LCL_VAR   ref    V06 tmp3         d:2
N010 ( 23, 33) [000005] --CXG-------                 |  \--*  CALL      ref    Microsoft.Win32.Registry.GetValue
N006 (  4, 12) [000087] #---G------- arg0 in rcx     |     +--*  IND       ref   
N005 (  2, 10) [000086] H-----------                 |     |  \--*  CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer"
N008 (  4, 12) [000089] #---G------- arg1 in rdx     |     +--*  IND       ref   
N007 (  2, 10) [000088] H-----------                 |     |  \--*  CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance"
N009 (  1,  1) [000004] ------------ arg2 in r8      |     \--*  LCL_VAR   ref    V00 arg0         u:1
N013 (  1,  1) [000095] ------------ arg1 in rdx     +--*  LCL_VAR   ref    V06 tmp3         u:2 (last use)
N014 (  2, 10) [000006] H------N---- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e class

***** BB01
STMT00003 (IL   ???...  ???)
N011 ( 22, 24) [000019] -ACXG---R---              *  ASG       ref   
N010 (  1,  1) [000018] D------N----              +--*  LCL_VAR   ref    V01 loc0         d:2
N009 ( 22, 24) [000017] --CXG-------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWARR_1_OBJ
N007 (  6,  7) [000016] ---X-------- arg1 in rdx     +--*  CAST      long <- int
N006 (  5,  5) [000014] ---X--------                 |  \--*  ADD       int   
N004 (  3,  3) [000012] ---X--------                 |     +--*  ARR_LENGTH int   
N003 (  1,  1) [000011] ------------                 |     |  \--*  LCL_VAR   ref    V04 tmp1         u:2
N005 (  1,  1) [000013] ------------                 |     \--*  CNS_INT   int    1
N008 (  2, 10) [000015] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e class

***** BB01
STMT00005 (IL   ???...  ???)
N007 ( 20, 12) [000024] -ACXG---R---              *  ASG       ref   
N006 (  3,  2) [000023] D------N----              +--*  LCL_VAR   ref    V02 loc1         d:2
N005 ( 16,  9) [000062] --CXG-------              \--*  CALL      ref    System.String.Join
N003 (  1,  1) [000020] ------------ arg1 in rdx     +--*  LCL_VAR   ref    V00 arg0         u:1 (last use)
N004 (  1,  1) [000066] ------------ arg0 in rcx     \--*  CNS_INT   int    124

***** BB01
STMT00006 (IL   ???...0x03F)
N007 ( 17, 12) [000027] --CXG-------              *  CALL      void   System.Array.CopyTo
N004 (  1,  1) [000010] ------------ this in rcx  +--*  LCL_VAR   ref    V04 tmp1         u:2 (last use)
N005 (  1,  1) [000025] ------------ arg1 in rdx  +--*  LCL_VAR   ref    V01 loc0         u:2
N006 (  1,  1) [000026] ------------ arg2 in r8   \--*  CNS_INT   int    0

***** BB01
STMT00007 (IL 0x038...  ???)
N022 ( 26, 29) [000035] -A-XG-------              *  ASG       ref   
N020 ( 22, 26) [000117] ---XG--N----              +--*  COMMA     ref   
N007 ( 12, 15) [000110] ---X--------              |  +--*  ARR_BOUNDS_CHECK_Rng void  
N004 (  5,  5) [000032] ---X--------              |  |  +--*  ADD       int   
N002 (  3,  3) [000030] ---X--------              |  |  |  +--*  ARR_LENGTH int   
N001 (  1,  1) [000029] ------------              |  |  |  |  \--*  LCL_VAR   ref    V01 loc0         u:2
N003 (  1,  1) [000031] ------------              |  |  |  \--*  CNS_INT   int    -1
N006 (  3,  3) [000109] ---X--------              |  |  \--*  ARR_LENGTH int   
N005 (  1,  1) [000028] ------------              |  |     \--*  LCL_VAR   ref    V01 loc0         u:2
N019 ( 10, 11) [000034] a--XG--N----              |  \--*  IND       ref   
N018 (  9, 10) [000116] ---X---N----              |     \--*  ADD       byref 
N016 (  8,  9) [000115] ---X---N----              |        +--*  ADD       long  
N014 (  7,  8) [000113] ---X---N----              |        |  +--*  LSH       long  
N012 (  6,  7) [000111] ---X--------              |        |  |  +--*  CAST      long <- int
N011 (  5,  5) [000105] ---X--------              |        |  |  |  \--*  ADD       int   
N009 (  3,  3) [000106] ---X--------              |        |  |  |     +--*  ARR_LENGTH int   
N008 (  1,  1) [000107] ------------              |        |  |  |     |  \--*  LCL_VAR   ref    V01 loc0         u:2
N010 (  1,  1) [000108] ------------              |        |  |  |     \--*  CNS_INT   int    -1 Fseq[#ConstantIndex]
N013 (  1,  1) [000112] -------N----              |        |  |  \--*  CNS_INT   long   3
N015 (  1,  1) [000114] ------------              |        |  \--*  CNS_INT   long   16 Fseq[#FirstElem]
N017 (  1,  1) [000104] ------------              |        \--*  LCL_VAR   ref    V01 loc0         u:2
N021 (  3,  2) [000033] ------------              \--*  LCL_VAR   ref    V02 loc1         u:2 (last use)

***** BB01
STMT00016 (IL 0x040...  ???)
N011 ( 24, 35) [000071] --CXG-------              *  CALL      void   Microsoft.Win32.Registry.SetValue
N006 (  4, 12) [000119] #---G------- arg0 in rcx  +--*  IND       ref   
N005 (  2, 10) [000118] H-----------              |  \--*  CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer"
N008 (  4, 12) [000121] #---G------- arg1 in rdx  +--*  IND       ref   
N007 (  2, 10) [000120] H-----------              |  \--*  CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance"
N009 (  1,  1) [000038] ------------ arg2 in r8   +--*  LCL_VAR   ref    V01 loc0         u:2 (last use)
N010 (  1,  1) [000070] ------------ arg3 in r9   \--*  CNS_INT   int    0

***** BB01
STMT00017 (IL 0x050...  ???)
N010 ( 35, 37) [000079] --CXG-------              *  CALL nullcheck void   System.Threading.Mutex.ReleaseMutex
N009 ( 21, 30) [000078] --CXG------- this in rcx  \--*  COMMA     ref   
N006 ( 17, 18) [000077] H-CXG-------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
N004 (  2, 10) [000075] ------------ arg0 in rcx     |  +--*  CNS_INT   long   0x7ffc7e4c17a0
N005 (  1,  1) [000076] ------------ arg1 in rdx     |  \--*  CNS_INT   int    1
N008 (  4, 12) [000073] n---G-------                 \--*  IND       ref   
N007 (  2, 10) [000128] I-----------                    \--*  CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock]

-------------------------------------------------------------------------------------------------------------------

*************** Finishing PHASE Build SSA representation
Trees after Build SSA representation

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..056)        (return)                     i label target jmp hascall gcsafe idxlen new[] nullcheck 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..056) (return), preds={} succs={}

***** BB01
STMT00013 (IL 0x000...  ???)
N010 ( 21, 30) [000059] -ACXG---R---              *  ASG       ref   
N009 (  1,  1) [000058] D------N----              +--*  LCL_VAR   ref    V05 tmp2         d:2
N008 ( 21, 30) [000047] --CXG-------              \--*  COMMA     ref   
N005 ( 17, 18) [000046] H-CXG-------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
N003 (  2, 10) [000044] ------------ arg0 in rcx     |  +--*  CNS_INT   long   0x7ffc7e4c17a0
N004 (  1,  1) [000045] ------------ arg1 in rdx     |  \--*  CNS_INT   int    1
N007 (  4, 12) [000042] n---G-------                 \--*  IND       ref   
N006 (  2, 10) [000083] I-----------                    \--*  CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock]

***** BB01
STMT00014 (IL 0x000...  ???)
N002 (  2,  2) [000057] ---X--------              *  NULLCHECK byte  
N001 (  1,  1) [000056] ------------              \--*  LCL_VAR   ref    V05 tmp2         u:2

***** BB01
STMT00012 (IL 0x000...  ???)
N005 ( 16, 10) [000055] --CXG-------              *  CALL      int    System.Threading.WaitHandle.WaitOneNoCheck
N003 (  1,  1) [000053] ------------ this in rcx  +--*  LCL_VAR   ref    V05 tmp2         u:2 (last use)
N004 (  1,  1) [000054] ------------ arg1 in rdx  \--*  CNS_INT   int    -1

***** BB01
STMT00001 (IL 0x005...  ???)
N001 ( 14,  5) [000001] --CXG-------              *  CALL      void   HotkeyedMusicPlayer.ArgsTransport.EnsureRootKeyExists

***** BB01
STMT00002 (IL 0x00A...  ???)
N017 ( 43, 51) [000009] -ACXG---R---              *  ASG       ref   
N016 (  1,  1) [000008] D------N----              +--*  LCL_VAR   ref    V04 tmp1         d:2
N015 ( 43, 51) [000007] --CXG-------              \--*  CALL help ref    HELPER.CORINFO_HELP_CHKCASTARRAY
N012 ( 23, 33) [000094] -ACXG---R-L- arg1 SETUP      +--*  ASG       ref   
N011 (  1,  1) [000093] D------N----                 |  +--*  LCL_VAR   ref    V06 tmp3         d:2
N010 ( 23, 33) [000005] --CXG-------                 |  \--*  CALL      ref    Microsoft.Win32.Registry.GetValue
N006 (  4, 12) [000087] #---G------- arg0 in rcx     |     +--*  IND       ref   
N005 (  2, 10) [000086] H-----------                 |     |  \--*  CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer"
N008 (  4, 12) [000089] #---G------- arg1 in rdx     |     +--*  IND       ref   
N007 (  2, 10) [000088] H-----------                 |     |  \--*  CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance"
N009 (  1,  1) [000004] ------------ arg2 in r8      |     \--*  LCL_VAR   ref    V00 arg0         u:1
N013 (  1,  1) [000095] ------------ arg1 in rdx     +--*  LCL_VAR   ref    V06 tmp3         u:2 (last use)
N014 (  2, 10) [000006] H------N---- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e class

***** BB01
STMT00003 (IL   ???...  ???)
N011 ( 22, 24) [000019] -ACXG---R---              *  ASG       ref   
N010 (  1,  1) [000018] D------N----              +--*  LCL_VAR   ref    V01 loc0         d:2
N009 ( 22, 24) [000017] --CXG-------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWARR_1_OBJ
N007 (  6,  7) [000016] ---X-------- arg1 in rdx     +--*  CAST      long <- int
N006 (  5,  5) [000014] ---X--------                 |  \--*  ADD       int   
N004 (  3,  3) [000012] ---X--------                 |     +--*  ARR_LENGTH int   
N003 (  1,  1) [000011] ------------                 |     |  \--*  LCL_VAR   ref    V04 tmp1         u:2
N005 (  1,  1) [000013] ------------                 |     \--*  CNS_INT   int    1
N008 (  2, 10) [000015] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e class

***** BB01
STMT00005 (IL   ???...  ???)
N007 ( 20, 12) [000024] -ACXG---R---              *  ASG       ref   
N006 (  3,  2) [000023] D------N----              +--*  LCL_VAR   ref    V02 loc1         d:2
N005 ( 16,  9) [000062] --CXG-------              \--*  CALL      ref    System.String.Join
N003 (  1,  1) [000020] ------------ arg1 in rdx     +--*  LCL_VAR   ref    V00 arg0         u:1 (last use)
N004 (  1,  1) [000066] ------------ arg0 in rcx     \--*  CNS_INT   int    124

***** BB01
STMT00006 (IL   ???...0x03F)
N007 ( 17, 12) [000027] --CXG-------              *  CALL      void   System.Array.CopyTo
N004 (  1,  1) [000010] ------------ this in rcx  +--*  LCL_VAR   ref    V04 tmp1         u:2 (last use)
N005 (  1,  1) [000025] ------------ arg1 in rdx  +--*  LCL_VAR   ref    V01 loc0         u:2
N006 (  1,  1) [000026] ------------ arg2 in r8   \--*  CNS_INT   int    0

***** BB01
STMT00007 (IL 0x038...  ???)
N022 ( 26, 29) [000035] -A-XG-------              *  ASG       ref   
N020 ( 22, 26) [000117] ---XG--N----              +--*  COMMA     ref   
N007 ( 12, 15) [000110] ---X--------              |  +--*  ARR_BOUNDS_CHECK_Rng void  
N004 (  5,  5) [000032] ---X--------              |  |  +--*  ADD       int   
N002 (  3,  3) [000030] ---X--------              |  |  |  +--*  ARR_LENGTH int   
N001 (  1,  1) [000029] ------------              |  |  |  |  \--*  LCL_VAR   ref    V01 loc0         u:2
N003 (  1,  1) [000031] ------------              |  |  |  \--*  CNS_INT   int    -1
N006 (  3,  3) [000109] ---X--------              |  |  \--*  ARR_LENGTH int   
N005 (  1,  1) [000028] ------------              |  |     \--*  LCL_VAR   ref    V01 loc0         u:2
N019 ( 10, 11) [000034] a--XG--N----              |  \--*  IND       ref   
N018 (  9, 10) [000116] ---X---N----              |     \--*  ADD       byref 
N016 (  8,  9) [000115] ---X---N----              |        +--*  ADD       long  
N014 (  7,  8) [000113] ---X---N----              |        |  +--*  LSH       long  
N012 (  6,  7) [000111] ---X--------              |        |  |  +--*  CAST      long <- int
N011 (  5,  5) [000105] ---X--------              |        |  |  |  \--*  ADD       int   
N009 (  3,  3) [000106] ---X--------              |        |  |  |     +--*  ARR_LENGTH int   
N008 (  1,  1) [000107] ------------              |        |  |  |     |  \--*  LCL_VAR   ref    V01 loc0         u:2
N010 (  1,  1) [000108] ------------              |        |  |  |     \--*  CNS_INT   int    -1 Fseq[#ConstantIndex]
N013 (  1,  1) [000112] -------N----              |        |  |  \--*  CNS_INT   long   3
N015 (  1,  1) [000114] ------------              |        |  \--*  CNS_INT   long   16 Fseq[#FirstElem]
N017 (  1,  1) [000104] ------------              |        \--*  LCL_VAR   ref    V01 loc0         u:2
N021 (  3,  2) [000033] ------------              \--*  LCL_VAR   ref    V02 loc1         u:2 (last use)

***** BB01
STMT00016 (IL 0x040...  ???)
N011 ( 24, 35) [000071] --CXG-------              *  CALL      void   Microsoft.Win32.Registry.SetValue
N006 (  4, 12) [000119] #---G------- arg0 in rcx  +--*  IND       ref   
N005 (  2, 10) [000118] H-----------              |  \--*  CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer"
N008 (  4, 12) [000121] #---G------- arg1 in rdx  +--*  IND       ref   
N007 (  2, 10) [000120] H-----------              |  \--*  CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance"
N009 (  1,  1) [000038] ------------ arg2 in r8   +--*  LCL_VAR   ref    V01 loc0         u:2 (last use)
N010 (  1,  1) [000070] ------------ arg3 in r9   \--*  CNS_INT   int    0

***** BB01
STMT00017 (IL 0x050...  ???)
N010 ( 35, 37) [000079] --CXG-------              *  CALL nullcheck void   System.Threading.Mutex.ReleaseMutex
N009 ( 21, 30) [000078] --CXG------- this in rcx  \--*  COMMA     ref   
N006 ( 17, 18) [000077] H-CXG-------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
N004 (  2, 10) [000075] ------------ arg0 in rcx     |  +--*  CNS_INT   long   0x7ffc7e4c17a0
N005 (  1,  1) [000076] ------------ arg1 in rdx     |  \--*  CNS_INT   int    1
N008 (  4, 12) [000073] n---G-------                 \--*  IND       ref   
N007 (  2, 10) [000128] I-----------                    \--*  CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock]

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist

*************** Starting PHASE Early Value Propagation
*************** In optEarlyProp()

After optEarlyProp:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..056)        (return)                     i label target jmp hascall gcsafe idxlen new[] nullcheck 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..056) (return), preds={} succs={}

***** BB01
STMT00013 (IL 0x000...  ???)
N010 ( 21, 30) [000059] -ACXG---R---              *  ASG       ref   
N009 (  1,  1) [000058] D------N----              +--*  LCL_VAR   ref    V05 tmp2         d:2
N008 ( 21, 30) [000047] --CXG-------              \--*  COMMA     ref   
N005 ( 17, 18) [000046] H-CXG-------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
N003 (  2, 10) [000044] ------------ arg0 in rcx     |  +--*  CNS_INT   long   0x7ffc7e4c17a0
N004 (  1,  1) [000045] ------------ arg1 in rdx     |  \--*  CNS_INT   int    1
N007 (  4, 12) [000042] n---G-------                 \--*  IND       ref   
N006 (  2, 10) [000083] I-----------                    \--*  CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock]

***** BB01
STMT00014 (IL 0x000...  ???)
N002 (  2,  2) [000057] ---X--------              *  NULLCHECK byte  
N001 (  1,  1) [000056] ------------              \--*  LCL_VAR   ref    V05 tmp2         u:2

***** BB01
STMT00012 (IL 0x000...  ???)
N005 ( 16, 10) [000055] --CXG-------              *  CALL      int    System.Threading.WaitHandle.WaitOneNoCheck
N003 (  1,  1) [000053] ------------ this in rcx  +--*  LCL_VAR   ref    V05 tmp2         u:2 (last use)
N004 (  1,  1) [000054] ------------ arg1 in rdx  \--*  CNS_INT   int    -1

***** BB01
STMT00001 (IL 0x005...  ???)
N001 ( 14,  5) [000001] --CXG-------              *  CALL      void   HotkeyedMusicPlayer.ArgsTransport.EnsureRootKeyExists

***** BB01
STMT00002 (IL 0x00A...  ???)
N017 ( 43, 51) [000009] -ACXG---R---              *  ASG       ref   
N016 (  1,  1) [000008] D------N----              +--*  LCL_VAR   ref    V04 tmp1         d:2
N015 ( 43, 51) [000007] --CXG-------              \--*  CALL help ref    HELPER.CORINFO_HELP_CHKCASTARRAY
N012 ( 23, 33) [000094] -ACXG---R-L- arg1 SETUP      +--*  ASG       ref   
N011 (  1,  1) [000093] D------N----                 |  +--*  LCL_VAR   ref    V06 tmp3         d:2
N010 ( 23, 33) [000005] --CXG-------                 |  \--*  CALL      ref    Microsoft.Win32.Registry.GetValue
N006 (  4, 12) [000087] #---G------- arg0 in rcx     |     +--*  IND       ref   
N005 (  2, 10) [000086] H-----------                 |     |  \--*  CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer"
N008 (  4, 12) [000089] #---G------- arg1 in rdx     |     +--*  IND       ref   
N007 (  2, 10) [000088] H-----------                 |     |  \--*  CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance"
N009 (  1,  1) [000004] ------------ arg2 in r8      |     \--*  LCL_VAR   ref    V00 arg0         u:1
N013 (  1,  1) [000095] ------------ arg1 in rdx     +--*  LCL_VAR   ref    V06 tmp3         u:2 (last use)
N014 (  2, 10) [000006] H------N---- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e class

***** BB01
STMT00003 (IL   ???...  ???)
N011 ( 22, 24) [000019] -ACXG---R---              *  ASG       ref   
N010 (  1,  1) [000018] D------N----              +--*  LCL_VAR   ref    V01 loc0         d:2
N009 ( 22, 24) [000017] --CXG-------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWARR_1_OBJ
N007 (  6,  7) [000016] ---X-------- arg1 in rdx     +--*  CAST      long <- int
N006 (  5,  5) [000014] ---X--------                 |  \--*  ADD       int   
N004 (  3,  3) [000012] ---X--------                 |     +--*  ARR_LENGTH int   
N003 (  1,  1) [000011] ------------                 |     |  \--*  LCL_VAR   ref    V04 tmp1         u:2
N005 (  1,  1) [000013] ------------                 |     \--*  CNS_INT   int    1
N008 (  2, 10) [000015] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e class

***** BB01
STMT00005 (IL   ???...  ???)
N007 ( 20, 12) [000024] -ACXG---R---              *  ASG       ref   
N006 (  3,  2) [000023] D------N----              +--*  LCL_VAR   ref    V02 loc1         d:2
N005 ( 16,  9) [000062] --CXG-------              \--*  CALL      ref    System.String.Join
N003 (  1,  1) [000020] ------------ arg1 in rdx     +--*  LCL_VAR   ref    V00 arg0         u:1 (last use)
N004 (  1,  1) [000066] ------------ arg0 in rcx     \--*  CNS_INT   int    124

***** BB01
STMT00006 (IL   ???...0x03F)
N007 ( 17, 12) [000027] --CXG-------              *  CALL      void   System.Array.CopyTo
N004 (  1,  1) [000010] ------------ this in rcx  +--*  LCL_VAR   ref    V04 tmp1         u:2 (last use)
N005 (  1,  1) [000025] ------------ arg1 in rdx  +--*  LCL_VAR   ref    V01 loc0         u:2
N006 (  1,  1) [000026] ------------ arg2 in r8   \--*  CNS_INT   int    0

***** BB01
STMT00007 (IL 0x038...  ???)
N022 ( 26, 29) [000035] -A-XG-------              *  ASG       ref   
N020 ( 22, 26) [000117] ---XG--N----              +--*  COMMA     ref   
N007 ( 12, 15) [000110] ---X--------              |  +--*  ARR_BOUNDS_CHECK_Rng void  
N004 (  5,  5) [000032] ---X--------              |  |  +--*  ADD       int   
N002 (  3,  3) [000030] ---X--------              |  |  |  +--*  ARR_LENGTH int   
N001 (  1,  1) [000029] ------------              |  |  |  |  \--*  LCL_VAR   ref    V01 loc0         u:2
N003 (  1,  1) [000031] ------------              |  |  |  \--*  CNS_INT   int    -1
N006 (  3,  3) [000109] ---X--------              |  |  \--*  ARR_LENGTH int   
N005 (  1,  1) [000028] ------------              |  |     \--*  LCL_VAR   ref    V01 loc0         u:2
N019 ( 10, 11) [000034] a--XG--N----              |  \--*  IND       ref   
N018 (  9, 10) [000116] ---X---N----              |     \--*  ADD       byref 
N016 (  8,  9) [000115] ---X---N----              |        +--*  ADD       long  
N014 (  7,  8) [000113] ---X---N----              |        |  +--*  LSH       long  
N012 (  6,  7) [000111] ---X--------              |        |  |  +--*  CAST      long <- int
N011 (  5,  5) [000105] ---X--------              |        |  |  |  \--*  ADD       int   
N009 (  3,  3) [000106] ---X--------              |        |  |  |     +--*  ARR_LENGTH int   
N008 (  1,  1) [000107] ------------              |        |  |  |     |  \--*  LCL_VAR   ref    V01 loc0         u:2
N010 (  1,  1) [000108] ------------              |        |  |  |     \--*  CNS_INT   int    -1 Fseq[#ConstantIndex]
N013 (  1,  1) [000112] -------N----              |        |  |  \--*  CNS_INT   long   3
N015 (  1,  1) [000114] ------------              |        |  \--*  CNS_INT   long   16 Fseq[#FirstElem]
N017 (  1,  1) [000104] ------------              |        \--*  LCL_VAR   ref    V01 loc0         u:2
N021 (  3,  2) [000033] ------------              \--*  LCL_VAR   ref    V02 loc1         u:2 (last use)

***** BB01
STMT00016 (IL 0x040...  ???)
N011 ( 24, 35) [000071] --CXG-------              *  CALL      void   Microsoft.Win32.Registry.SetValue
N006 (  4, 12) [000119] #---G------- arg0 in rcx  +--*  IND       ref   
N005 (  2, 10) [000118] H-----------              |  \--*  CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer"
N008 (  4, 12) [000121] #---G------- arg1 in rdx  +--*  IND       ref   
N007 (  2, 10) [000120] H-----------              |  \--*  CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance"
N009 (  1,  1) [000038] ------------ arg2 in r8   +--*  LCL_VAR   ref    V01 loc0         u:2 (last use)
N010 (  1,  1) [000070] ------------ arg3 in r9   \--*  CNS_INT   int    0

***** BB01
STMT00017 (IL 0x050...  ???)
N010 ( 35, 37) [000079] --CXG-------              *  CALL nullcheck void   System.Threading.Mutex.ReleaseMutex
N009 ( 21, 30) [000078] --CXG------- this in rcx  \--*  COMMA     ref   
N006 ( 17, 18) [000077] H-CXG-------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
N004 (  2, 10) [000075] ------------ arg0 in rcx     |  +--*  CNS_INT   long   0x7ffc7e4c17a0
N005 (  1,  1) [000076] ------------ arg1 in rdx     |  \--*  CNS_INT   int    1
N008 (  4, 12) [000073] n---G-------                 \--*  IND       ref   
N007 (  2, 10) [000128] I-----------                    \--*  CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock]

-------------------------------------------------------------------------------------------------------------------

*************** Finishing PHASE Early Value Propagation

*************** Starting PHASE Do value numbering

*************** In fgValueNumber()
Memory Initial Value in BB01 is: $81
The SSA definition for ByrefExposed (#1) at start of BB01 is $81 {InitVal($41)}
The SSA definition for GcHeap (#1) at start of BB01 is $81 {InitVal($41)}

***** BB01, STMT00013(before)
N010 ( 21, 30) [000059] -ACXG---R---              *  ASG       ref   
N009 (  1,  1) [000058] D------N----              +--*  LCL_VAR   ref    V05 tmp2         d:2
N008 ( 21, 30) [000047] --CXG-------              \--*  COMMA     ref   
N005 ( 17, 18) [000046] H-CXG-------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
N003 (  2, 10) [000044] ------------ arg0 in rcx     |  +--*  CNS_INT   long   0x7ffc7e4c17a0
N004 (  1,  1) [000045] ------------ arg1 in rdx     |  \--*  CNS_INT   int    1
N007 (  4, 12) [000042] n---G-------                 \--*  IND       ref   
N006 (  2, 10) [000083] I-----------                    \--*  CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock]

N001 [000081]   ARGPLACE  => $c0 {c0}
N002 [000082]   ARGPLACE  => $100 {100}
N003 [000044]   CNS_INT   0x7ffc7e4c17a0 => $140 {LngCns:  0x7ffc7e4c17a0}
N004 [000045]   CNS_INT   1 => $42 {IntCns 1}
VN of ARGPLACE tree [000081] updated to $140 {LngCns:  0x7ffc7e4c17a0}
VN of ARGPLACE tree [000082] updated to $42 {IntCns 1}
N005 [000046]   CALL help => $201 {norm=$200 {GetsharedNongcstaticBase($140, $42)}, exc=$1c0 {HelperMultipleExc()}}
N006 [000083]   CNS_INT(h) 0xd1ffab1e static Fseq[_registryLock] => $240 {Hnd const: 0x00000000D1FFAB1E}
N007 [000042]   IND       => <l:$280 {ByrefExposedLoad($43, $240, $81)}, c:$2c0 {2c0}>
N008 [000047]   COMMA     => <l:$1c2 {norm=$280 {ByrefExposedLoad($43, $240, $81)}, exc=$1c0 {HelperMultipleExc()}}, c:$1c1 {norm=$2c0 {2c0}, exc=$1c0 {HelperMultipleExc()}}>
N009 [000058]   LCL_VAR   V05 tmp2         d:2 => <l:$280 {ByrefExposedLoad($43, $240, $81)}, c:$2c0 {2c0}>
N010 [000059]   ASG       => <l:$1c2 {norm=$280 {ByrefExposedLoad($43, $240, $81)}, exc=$1c0 {HelperMultipleExc()}}, c:$1c1 {norm=$2c0 {2c0}, exc=$1c0 {HelperMultipleExc()}}>

***** BB01, STMT00013(after)
N010 ( 21, 30) [000059] -ACXG---R---              *  ASG       ref    <l:$1c2, c:$1c1>
N009 (  1,  1) [000058] D------N----              +--*  LCL_VAR   ref    V05 tmp2         d:2 <l:$280, c:$2c0>
N008 ( 21, 30) [000047] --CXG-------              \--*  COMMA     ref    <l:$1c2, c:$1c1>
N005 ( 17, 18) [000046] H-CXG-------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE $201
N003 (  2, 10) [000044] ------------ arg0 in rcx     |  +--*  CNS_INT   long   0x7ffc7e4c17a0 $140
N004 (  1,  1) [000045] ------------ arg1 in rdx     |  \--*  CNS_INT   int    1 $42
N007 (  4, 12) [000042] n---G-------                 \--*  IND       ref    <l:$280, c:$2c0>
N006 (  2, 10) [000083] I-----------                    \--*  CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock] $240

---------

***** BB01, STMT00014(before)
N002 (  2,  2) [000057] ---X--------              *  NULLCHECK byte  
N001 (  1,  1) [000056] ------------              \--*  LCL_VAR   ref    V05 tmp2         u:2

N001 [000056]   LCL_VAR   V05 tmp2         u:2 => <l:$280 {ByrefExposedLoad($43, $240, $81)}, c:$2c0 {2c0}>
N002 [000057]   NULLCHECK => <l:$1c6 {norm=$3 {3}, exc=$1c4 {NullPtrExc($280)}}, c:$1c5 {norm=$3 {3}, exc=$1c3 {NullPtrExc($2c0)}}>

***** BB01, STMT00014(after)
N002 (  2,  2) [000057] ---X--------              *  NULLCHECK byte   <l:$1c6, c:$1c5>
N001 (  1,  1) [000056] ------------              \--*  LCL_VAR   ref    V05 tmp2         u:2 <l:$280, c:$2c0>

---------

***** BB01, STMT00012(before)
N005 ( 16, 10) [000055] --CXG-------              *  CALL      int    System.Threading.WaitHandle.WaitOneNoCheck
N003 (  1,  1) [000053] ------------ this in rcx  +--*  LCL_VAR   ref    V05 tmp2         u:2 (last use)
N004 (  1,  1) [000054] ------------ arg1 in rdx  \--*  CNS_INT   int    -1

N001 [000084]   ARGPLACE  => $2c2 {2c2}
N002 [000085]   ARGPLACE  => $101 {101}
N003 [000053]   LCL_VAR   V05 tmp2         u:2 (last use) => <l:$280 {ByrefExposedLoad($43, $240, $81)}, c:$2c0 {2c0}>
N004 [000054]   CNS_INT   -1 => $41 {IntCns -1}
VN of ARGPLACE tree [000085] updated to <l:$280 {ByrefExposedLoad($43, $240, $81)}, c:$2c0 {2c0}>
  fgCurMemoryVN[GcHeap] assigned for CALL at [000055] to VN: $2c3.
N005 [000055]   CALL      => $102 {102}

***** BB01, STMT00012(after)
N005 ( 16, 10) [000055] --CXG-------              *  CALL      int    System.Threading.WaitHandle.WaitOneNoCheck $102
N003 (  1,  1) [000053] ------------ this in rcx  +--*  LCL_VAR   ref    V05 tmp2         u:2 (last use) <l:$280, c:$2c0>
N004 (  1,  1) [000054] ------------ arg1 in rdx  \--*  CNS_INT   int    -1 $41

---------

***** BB01, STMT00001(before)
N001 ( 14,  5) [000001] --CXG-------              *  CALL      void   HotkeyedMusicPlayer.ArgsTransport.EnsureRootKeyExists

  fgCurMemoryVN[GcHeap] assigned for CALL at [000001] to VN: $2c4.
N001 [000001]   CALL      => $VN.Void

***** BB01, STMT00001(after)
N001 ( 14,  5) [000001] --CXG-------              *  CALL      void   HotkeyedMusicPlayer.ArgsTransport.EnsureRootKeyExists $VN.Void

---------

***** BB01, STMT00002(before)
N017 ( 43, 51) [000009] -ACXG---R---              *  ASG       ref   
N016 (  1,  1) [000008] D------N----              +--*  LCL_VAR   ref    V04 tmp1         d:2
N015 ( 43, 51) [000007] --CXG-------              \--*  CALL help ref    HELPER.CORINFO_HELP_CHKCASTARRAY
N012 ( 23, 33) [000094] -ACXG---R-L- arg1 SETUP      +--*  ASG       ref   
N011 (  1,  1) [000093] D------N----                 |  +--*  LCL_VAR   ref    V06 tmp3         d:2
N010 ( 23, 33) [000005] --CXG-------                 |  \--*  CALL      ref    Microsoft.Win32.Registry.GetValue
N006 (  4, 12) [000087] #---G------- arg0 in rcx     |     +--*  IND       ref   
N005 (  2, 10) [000086] H-----------                 |     |  \--*  CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer"
N008 (  4, 12) [000089] #---G------- arg1 in rdx     |     +--*  IND       ref   
N007 (  2, 10) [000088] H-----------                 |     |  \--*  CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance"
N009 (  1,  1) [000004] ------------ arg2 in r8      |     \--*  LCL_VAR   ref    V00 arg0         u:1
N013 (  1,  1) [000095] ------------ arg1 in rdx     +--*  LCL_VAR   ref    V06 tmp3         u:2 (last use)
N014 (  2, 10) [000006] H------N---- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e class

N001 [000096]   ARGPLACE  => $c1 {c1}
N002 [000090]   ARGPLACE  => $2c5 {2c5}
N003 [000091]   ARGPLACE  => $2c6 {2c6}
N004 [000092]   ARGPLACE  => $2c7 {2c7}
N005 [000086]   CNS_INT(h) 0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer" => $241 {Hnd const: 0x00000000D1FFAB1E}
    VNForMapSelect($2, $241):ref returns $1c7 {$VN.ReadOnlyHeap[$241]}
    VNForMapSelect($2, $241):ref returns $1c7 {$VN.ReadOnlyHeap[$241]}
N006 [000087]   IND       => $1c7 {$VN.ReadOnlyHeap[$241]}
N007 [000088]   CNS_INT(h) 0xD1FFAB1E "ArgsFromTheSecondInstance" => $242 {Hnd const: 0x00000000D1FFAB1E}
    VNForMapSelect($2, $242):ref returns $1c8 {$VN.ReadOnlyHeap[$242]}
    VNForMapSelect($2, $242):ref returns $1c8 {$VN.ReadOnlyHeap[$242]}
N008 [000089]   IND       => $1c8 {$VN.ReadOnlyHeap[$242]}
N009 [000004]   LCL_VAR   V00 arg0         u:1 => $80 {InitVal($40)}
VN of ARGPLACE tree [000090] updated to $1c7 {$VN.ReadOnlyHeap[$241]}
VN of ARGPLACE tree [000091] updated to $1c8 {$VN.ReadOnlyHeap[$242]}
VN of ARGPLACE tree [000092] updated to $80 {InitVal($40)}
  fgCurMemoryVN[GcHeap] assigned for CALL at [000005] to VN: $2c9.
N010 [000005]   CALL      => $2c8 {2c8}
N011 [000093]   LCL_VAR   V06 tmp3         d:2 => $2c8 {2c8}
N012 [000094]   ASG       => $2c8 {2c8}
N013 [000095]   LCL_VAR   V06 tmp3         u:2 (last use) => $2c8 {2c8}
N014 [000006]   CNS_INT(h) 0xd1ffab1e class => $243 {Hnd const: 0x00000000D1FFAB1E}
VN of ARGPLACE tree [000096] updated to $243 {Hnd const: 0x00000000D1FFAB1E}
N015 [000007]   CALL help => $1cd {norm=$2c8 {2c8}, exc=$1cc( {HelperMultipleExc()},  {InvalidCastExc($2c8, $243)})}
N016 [000008]   LCL_VAR   V04 tmp1         d:2 => $2c8 {2c8}
N017 [000009]   ASG       => $1cd {norm=$2c8 {2c8}, exc=$1cc( {HelperMultipleExc()},  {InvalidCastExc($2c8, $243)})}

***** BB01, STMT00002(after)
N017 ( 43, 51) [000009] -ACXG---R---              *  ASG       ref    $1cd
N016 (  1,  1) [000008] D------N----              +--*  LCL_VAR   ref    V04 tmp1         d:2 $2c8
N015 ( 43, 51) [000007] --CXG-------              \--*  CALL help ref    HELPER.CORINFO_HELP_CHKCASTARRAY $1cd
N012 ( 23, 33) [000094] -ACXG---R-L- arg1 SETUP      +--*  ASG       ref    $2c8
N011 (  1,  1) [000093] D------N----                 |  +--*  LCL_VAR   ref    V06 tmp3         d:2 $2c8
N010 ( 23, 33) [000005] --CXG-------                 |  \--*  CALL      ref    Microsoft.Win32.Registry.GetValue $2c8
N006 (  4, 12) [000087] #---G------- arg0 in rcx     |     +--*  IND       ref    $1c7
N005 (  2, 10) [000086] H-----------                 |     |  \--*  CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer" $241
N008 (  4, 12) [000089] #---G------- arg1 in rdx     |     +--*  IND       ref    $1c8
N007 (  2, 10) [000088] H-----------                 |     |  \--*  CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance" $242
N009 (  1,  1) [000004] ------------ arg2 in r8      |     \--*  LCL_VAR   ref    V00 arg0         u:1 $80
N013 (  1,  1) [000095] ------------ arg1 in rdx     +--*  LCL_VAR   ref    V06 tmp3         u:2 (last use) $2c8
N014 (  2, 10) [000006] H------N---- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e class $243

---------

***** BB01, STMT00003(before)
N011 ( 22, 24) [000019] -ACXG---R---              *  ASG       ref   
N010 (  1,  1) [000018] D------N----              +--*  LCL_VAR   ref    V01 loc0         d:2
N009 ( 22, 24) [000017] --CXG-------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWARR_1_OBJ
N007 (  6,  7) [000016] ---X-------- arg1 in rdx     +--*  CAST      long <- int
N006 (  5,  5) [000014] ---X--------                 |  \--*  ADD       int   
N004 (  3,  3) [000012] ---X--------                 |     +--*  ARR_LENGTH int   
N003 (  1,  1) [000011] ------------                 |     |  \--*  LCL_VAR   ref    V04 tmp1         u:2
N005 (  1,  1) [000013] ------------                 |     \--*  CNS_INT   int    1
N008 (  2, 10) [000015] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e class

N001 [000098]   ARGPLACE  => $c2 {c2}
N002 [000097]   ARGPLACE  => $c3 {c3}
N003 [000011]   LCL_VAR   V04 tmp1         u:2 => $2c8 {2c8}
N004 [000012]   ARR_LENGTH => $340 {norm=$300 {ARR_LENGTH($2c8)}, exc=$1ce {NullPtrExc($2c8)}}
N005 [000013]   CNS_INT   1 => $42 {IntCns 1}
N006 [000014]   ADD       => $342 {norm=$341 {ADD($42, $300)}, exc=$1ce {NullPtrExc($2c8)}}
    VNForCastOper(long) is $44
N007 [000016]   CAST      => $203 {norm=$202 {Cast($341, $44)}, exc=$1ce {NullPtrExc($2c8)}}
N008 [000015]   CNS_INT(h) 0xd1ffab1e class => $243 {Hnd const: 0x00000000D1FFAB1E}
VN of ARGPLACE tree [000098] updated to $243 {Hnd const: 0x00000000D1FFAB1E}
VN of ARGPLACE tree [000097] updated to $203 {norm=$202 {Cast($341, $44)}, exc=$1ce {NullPtrExc($2c8)}}
N009 [000017]   CALL help => $1d1 {norm=$281 {JitNewArr($243, $202, $2cc)}, exc=$1d0( {NullPtrExc($2c8)},  {NewArrOverflowExc($202)})}
N010 [000018]   LCL_VAR   V01 loc0         d:2 => $281 {JitNewArr($243, $202, $2cc)}
N011 [000019]   ASG       => $1d1 {norm=$281 {JitNewArr($243, $202, $2cc)}, exc=$1d0( {NullPtrExc($2c8)},  {NewArrOverflowExc($202)})}

***** BB01, STMT00003(after)
N011 ( 22, 24) [000019] -ACXG---R---              *  ASG       ref    $1d1
N010 (  1,  1) [000018] D------N----              +--*  LCL_VAR   ref    V01 loc0         d:2 $281
N009 ( 22, 24) [000017] --CXG-------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWARR_1_OBJ $1d1
N007 (  6,  7) [000016] ---X-------- arg1 in rdx     +--*  CAST      long <- int $203
N006 (  5,  5) [000014] ---X--------                 |  \--*  ADD       int    $342
N004 (  3,  3) [000012] ---X--------                 |     +--*  ARR_LENGTH int    $340
N003 (  1,  1) [000011] ------------                 |     |  \--*  LCL_VAR   ref    V04 tmp1         u:2 $2c8
N005 (  1,  1) [000013] ------------                 |     \--*  CNS_INT   int    1 $42
N008 (  2, 10) [000015] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e class $243

---------

***** BB01, STMT00005(before)
N007 ( 20, 12) [000024] -ACXG---R---              *  ASG       ref   
N006 (  3,  2) [000023] D------N----              +--*  LCL_VAR   ref    V02 loc1         d:2
N005 ( 16,  9) [000062] --CXG-------              \--*  CALL      ref    System.String.Join
N003 (  1,  1) [000020] ------------ arg1 in rdx     +--*  LCL_VAR   ref    V00 arg0         u:1 (last use)
N004 (  1,  1) [000066] ------------ arg0 in rcx     \--*  CNS_INT   int    124

N001 [000100]   ARGPLACE  => $103 {103}
N002 [000099]   ARGPLACE  => $2ce {2ce}
N003 [000020]   LCL_VAR   V00 arg0         u:1 (last use) => $80 {InitVal($40)}
N004 [000066]   CNS_INT   124 => $45 {IntCns 124}
VN of ARGPLACE tree [000100] updated to $45 {IntCns 124}
VN of ARGPLACE tree [000099] updated to $80 {InitVal($40)}
  fgCurMemoryVN[GcHeap] assigned for CALL at [000062] to VN: $2d0.
N005 [000062]   CALL      => $2cf {2cf}
N006 [000023]   LCL_VAR   V02 loc1         d:2 => $2cf {2cf}
N007 [000024]   ASG       => $2cf {2cf}

***** BB01, STMT00005(after)
N007 ( 20, 12) [000024] -ACXG---R---              *  ASG       ref    $2cf
N006 (  3,  2) [000023] D------N----              +--*  LCL_VAR   ref    V02 loc1         d:2 $2cf
N005 ( 16,  9) [000062] --CXG-------              \--*  CALL      ref    System.String.Join $2cf
N003 (  1,  1) [000020] ------------ arg1 in rdx     +--*  LCL_VAR   ref    V00 arg0         u:1 (last use) $80
N004 (  1,  1) [000066] ------------ arg0 in rcx     \--*  CNS_INT   int    124 $45

---------

***** BB01, STMT00006(before)
N007 ( 17, 12) [000027] --CXG-------              *  CALL      void   System.Array.CopyTo
N004 (  1,  1) [000010] ------------ this in rcx  +--*  LCL_VAR   ref    V04 tmp1         u:2 (last use)
N005 (  1,  1) [000025] ------------ arg1 in rdx  +--*  LCL_VAR   ref    V01 loc0         u:2
N006 (  1,  1) [000026] ------------ arg2 in r8   \--*  CNS_INT   int    0

N001 [000101]   ARGPLACE  => $2d2 {2d2}
N002 [000102]   ARGPLACE  => $2d3 {2d3}
N003 [000103]   ARGPLACE  => $104 {104}
N004 [000010]   LCL_VAR   V04 tmp1         u:2 (last use) => $2c8 {2c8}
N005 [000025]   LCL_VAR   V01 loc0         u:2 => $281 {JitNewArr($243, $202, $2cc)}
N006 [000026]   CNS_INT   0 => $40 {IntCns 0}
VN of ARGPLACE tree [000102] updated to $2c8 {2c8}
VN of ARGPLACE tree [000103] updated to $281 {JitNewArr($243, $202, $2cc)}
  fgCurMemoryVN[GcHeap] assigned for CALL at [000027] to VN: $2d4.
N007 [000027]   CALL      => $VN.Void

***** BB01, STMT00006(after)
N007 ( 17, 12) [000027] --CXG-------              *  CALL      void   System.Array.CopyTo $VN.Void
N004 (  1,  1) [000010] ------------ this in rcx  +--*  LCL_VAR   ref    V04 tmp1         u:2 (last use) $2c8
N005 (  1,  1) [000025] ------------ arg1 in rdx  +--*  LCL_VAR   ref    V01 loc0         u:2 $281
N006 (  1,  1) [000026] ------------ arg2 in r8   \--*  CNS_INT   int    0 $40

---------

***** BB01, STMT00007(before)
N022 ( 26, 29) [000035] -A-XG-------              *  ASG       ref   
N020 ( 22, 26) [000117] ---XG--N----              +--*  COMMA     ref   
N007 ( 12, 15) [000110] ---X--------              |  +--*  ARR_BOUNDS_CHECK_Rng void  
N004 (  5,  5) [000032] ---X--------              |  |  +--*  ADD       int   
N002 (  3,  3) [000030] ---X--------              |  |  |  +--*  ARR_LENGTH int   
N001 (  1,  1) [000029] ------------              |  |  |  |  \--*  LCL_VAR   ref    V01 loc0         u:2
N003 (  1,  1) [000031] ------------              |  |  |  \--*  CNS_INT   int    -1
N006 (  3,  3) [000109] ---X--------              |  |  \--*  ARR_LENGTH int   
N005 (  1,  1) [000028] ------------              |  |     \--*  LCL_VAR   ref    V01 loc0         u:2
N019 ( 10, 11) [000034] a--XG--N----              |  \--*  IND       ref   
N018 (  9, 10) [000116] ---X---N----              |     \--*  ADD       byref 
N016 (  8,  9) [000115] ---X---N----              |        +--*  ADD       long  
N014 (  7,  8) [000113] ---X---N----              |        |  +--*  LSH       long  
N012 (  6,  7) [000111] ---X--------              |        |  |  +--*  CAST      long <- int
N011 (  5,  5) [000105] ---X--------              |        |  |  |  \--*  ADD       int   
N009 (  3,  3) [000106] ---X--------              |        |  |  |     +--*  ARR_LENGTH int   
N008 (  1,  1) [000107] ------------              |        |  |  |     |  \--*  LCL_VAR   ref    V01 loc0         u:2
N010 (  1,  1) [000108] ------------              |        |  |  |     \--*  CNS_INT   int    -1 Fseq[#ConstantIndex]
N013 (  1,  1) [000112] -------N----              |        |  |  \--*  CNS_INT   long   3
N015 (  1,  1) [000114] ------------              |        |  \--*  CNS_INT   long   16 Fseq[#FirstElem]
N017 (  1,  1) [000104] ------------              |        \--*  LCL_VAR   ref    V01 loc0         u:2
N021 (  3,  2) [000033] ------------              \--*  LCL_VAR   ref    V02 loc1         u:2 (last use)

N001 [000029]   LCL_VAR   V01 loc0         u:2 => $281 {JitNewArr($243, $202, $2cc)}
N002 [000030]   ARR_LENGTH => $343 {norm=$301 {ARR_LENGTH($281)}, exc=$1d2 {NullPtrExc($281)}}
N003 [000031]   CNS_INT   -1 => $41 {IntCns -1}
N004 [000032]   ADD       => $345 {norm=$344 {ADD($41, $301)}, exc=$1d2 {NullPtrExc($281)}}
N005 [000028]   LCL_VAR   V01 loc0         u:2 => $281 {JitNewArr($243, $202, $2cc)}
N006 [000109]   ARR_LENGTH => $343 {norm=$301 {ARR_LENGTH($281)}, exc=$1d2 {NullPtrExc($281)}}
N007 [000110]   ARR_BOUNDS_CHECK_Rng => $1d7 {norm=$3 {3}, exc=$1d6( {NullPtrExc($281)},  {IndexOutOfRangeExc($344, $301)})}
N008 [000107]   LCL_VAR   V01 loc0         u:2 => $281 {JitNewArr($243, $202, $2cc)}
N009 [000106]   ARR_LENGTH => $343 {norm=$301 {ARR_LENGTH($281)}, exc=$1d2 {NullPtrExc($281)}}
N010 [000108]   CNS_INT   -1 Fseq[#ConstantIndex] => $41 {IntCns -1}
N011 [000105]   ADD       => $345 {norm=$344 {ADD($41, $301)}, exc=$1d2 {NullPtrExc($281)}}
    VNForCastOper(long) is $44
N012 [000111]   CAST      => $205 {norm=$204 {Cast($344, $44)}, exc=$1d2 {NullPtrExc($281)}}
N013 [000112]   CNS_INT   3 => $141 {LngCns:  3}
N014 [000113]   LSH       => $207 {norm=$206 {LSH($204, $141)}, exc=$1d2 {NullPtrExc($281)}}
N015 [000114]   CNS_INT   16 Fseq[#FirstElem] => $143 {LngCns:  16}
N016 [000115]   ADD       => $209 {norm=$208 {ADD($143, $206)}, exc=$1d2 {NullPtrExc($281)}}
N017 [000104]   LCL_VAR   V01 loc0         u:2 => $281 {JitNewArr($243, $202, $2cc)}
N018 [000116]   ADD       => $381 {norm=$380 {ADD($208, $281)}, exc=$1d2 {NullPtrExc($281)}}
    VNForHandle(arrElemType: ref) is $244
  Relabeled IND_ARR_INDEX address node [000116] with l:$382:  {norm=$3c0 {PtrToArrElem($244, $281, $204, $0)}, exc=$1d2 {NullPtrExc($281)}}
      [$3c0 is:  {PtrToArrElem($244, $281, $204, $0)}]
N020 [000117]   COMMA     => $1d7 {norm=$3 {3}, exc=$1d6( {NullPtrExc($281)},  {IndexOutOfRangeExc($344, $301)})}
N021 [000033]   LCL_VAR   V02 loc1         u:2 (last use) => $2cf {2cf}
Tree [000035] assigns to an array element:
    VNForMapSelect($2d4, $244):ref returns $1d8 {$2d4[$244]}
    VNForMapSelect($1d8, $281):ref returns $1d9 {$1d8[$281]}
    VNForMapSelect($1d9, $204):ref returns $1da {$1d9[$204]}
    VNForMapStore($1d9, $204, $2cf):ref returns $282 {$1d9[$204 := $2cf]}
    VNForMapStore($1d8, $281, $282):ref returns $283 {$1d8[$281 := $282]}
  hAtArrType $1d8 is MapSelect(curGcHeap($2d4), ref[]).
  hAtArrTypeAtArr $1d9 is MapSelect(hAtArrType($1d8), arr=$281)
  hAtArrTypeAtArrAtInx $1da is MapSelect(hAtArrTypeAtArr($1d9), inx=$204):ref
  newValAtInd $2cf is  {2cf}
  newValAtArr $282 is  {$1d9[$204 := $2cf]}
  newValAtArrType $283 is  {$1d8[$281 := $282]}
    VNForMapStore($2d4, $244, $283):ref returns $284 {$2d4[$244 := $283]}
  fgCurMemoryVN[GcHeap] assigned for ArrIndexAssign (case 1) at [000035] to VN: $284.
N022 [000035]   ASG       => $VN.Void

***** BB01, STMT00007(after)
N022 ( 26, 29) [000035] -A-XG-------              *  ASG       ref    $VN.Void
N020 ( 22, 26) [000117] ---XG--N----              +--*  COMMA     ref    $VN.Void
N007 ( 12, 15) [000110] ---X--------              |  +--*  ARR_BOUNDS_CHECK_Rng void   $1d7
N004 (  5,  5) [000032] ---X--------              |  |  +--*  ADD       int    $345
N002 (  3,  3) [000030] ---X--------              |  |  |  +--*  ARR_LENGTH int    $343
N001 (  1,  1) [000029] ------------              |  |  |  |  \--*  LCL_VAR   ref    V01 loc0         u:2 $281
N003 (  1,  1) [000031] ------------              |  |  |  \--*  CNS_INT   int    -1 $41
N006 (  3,  3) [000109] ---X--------              |  |  \--*  ARR_LENGTH int    $343
N005 (  1,  1) [000028] ------------              |  |     \--*  LCL_VAR   ref    V01 loc0         u:2 $281
N019 ( 10, 11) [000034] a--XG--N----              |  \--*  IND       ref    $2cf
N018 (  9, 10) [000116] ---X---N----              |     \--*  ADD       byref  $382
N016 (  8,  9) [000115] ---X---N----              |        +--*  ADD       long   $209
N014 (  7,  8) [000113] ---X---N----              |        |  +--*  LSH       long   $207
N012 (  6,  7) [000111] ---X--------              |        |  |  +--*  CAST      long <- int $205
N011 (  5,  5) [000105] ---X--------              |        |  |  |  \--*  ADD       int    $345
N009 (  3,  3) [000106] ---X--------              |        |  |  |     +--*  ARR_LENGTH int    $343
N008 (  1,  1) [000107] ------------              |        |  |  |     |  \--*  LCL_VAR   ref    V01 loc0         u:2 $281
N010 (  1,  1) [000108] ------------              |        |  |  |     \--*  CNS_INT   int    -1 Fseq[#ConstantIndex] $41
N013 (  1,  1) [000112] -------N----              |        |  |  \--*  CNS_INT   long   3 $141
N015 (  1,  1) [000114] ------------              |        |  \--*  CNS_INT   long   16 Fseq[#FirstElem] $143
N017 (  1,  1) [000104] ------------              |        \--*  LCL_VAR   ref    V01 loc0         u:2 $281
N021 (  3,  2) [000033] ------------              \--*  LCL_VAR   ref    V02 loc1         u:2 (last use) $2cf

---------

***** BB01, STMT00016(before)
N011 ( 24, 35) [000071] --CXG-------              *  CALL      void   Microsoft.Win32.Registry.SetValue
N006 (  4, 12) [000119] #---G------- arg0 in rcx  +--*  IND       ref   
N005 (  2, 10) [000118] H-----------              |  \--*  CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer"
N008 (  4, 12) [000121] #---G------- arg1 in rdx  +--*  IND       ref   
N007 (  2, 10) [000120] H-----------              |  \--*  CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance"
N009 (  1,  1) [000038] ------------ arg2 in r8   +--*  LCL_VAR   ref    V01 loc0         u:2 (last use)
N010 (  1,  1) [000070] ------------ arg3 in r9   \--*  CNS_INT   int    0

N001 [000122]   ARGPLACE  => $2d5 {2d5}
N002 [000123]   ARGPLACE  => $2d6 {2d6}
N003 [000124]   ARGPLACE  => $2d7 {2d7}
N004 [000125]   ARGPLACE  => $105 {105}
N005 [000118]   CNS_INT(h) 0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer" => $241 {Hnd const: 0x00000000D1FFAB1E}
    VNForMapSelect($2, $241):ref returns $1c7 {$VN.ReadOnlyHeap[$241]}
    VNForMapSelect($2, $241):ref returns $1c7 {$VN.ReadOnlyHeap[$241]}
N006 [000119]   IND       => $1c7 {$VN.ReadOnlyHeap[$241]}
N007 [000120]   CNS_INT(h) 0xD1FFAB1E "ArgsFromTheSecondInstance" => $242 {Hnd const: 0x00000000D1FFAB1E}
    VNForMapSelect($2, $242):ref returns $1c8 {$VN.ReadOnlyHeap[$242]}
    VNForMapSelect($2, $242):ref returns $1c8 {$VN.ReadOnlyHeap[$242]}
N008 [000121]   IND       => $1c8 {$VN.ReadOnlyHeap[$242]}
N009 [000038]   LCL_VAR   V01 loc0         u:2 (last use) => $281 {JitNewArr($243, $202, $2cc)}
N010 [000070]   CNS_INT   0 => $40 {IntCns 0}
VN of ARGPLACE tree [000122] updated to $1c7 {$VN.ReadOnlyHeap[$241]}
VN of ARGPLACE tree [000123] updated to $1c8 {$VN.ReadOnlyHeap[$242]}
VN of ARGPLACE tree [000124] updated to $281 {JitNewArr($243, $202, $2cc)}
VN of ARGPLACE tree [000125] updated to $40 {IntCns 0}
  fgCurMemoryVN[GcHeap] assigned for CALL at [000071] to VN: $2d8.
N011 [000071]   CALL      => $VN.Void

***** BB01, STMT00016(after)
N011 ( 24, 35) [000071] --CXG-------              *  CALL      void   Microsoft.Win32.Registry.SetValue $VN.Void
N006 (  4, 12) [000119] #---G------- arg0 in rcx  +--*  IND       ref    $1c7
N005 (  2, 10) [000118] H-----------              |  \--*  CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer" $241
N008 (  4, 12) [000121] #---G------- arg1 in rdx  +--*  IND       ref    $1c8
N007 (  2, 10) [000120] H-----------              |  \--*  CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance" $242
N009 (  1,  1) [000038] ------------ arg2 in r8   +--*  LCL_VAR   ref    V01 loc0         u:2 (last use) $281
N010 (  1,  1) [000070] ------------ arg3 in r9   \--*  CNS_INT   int    0 $40

---------

***** BB01, STMT00017(before)
N010 ( 35, 37) [000079] --CXG-------              *  CALL nullcheck void   System.Threading.Mutex.ReleaseMutex
N009 ( 21, 30) [000078] --CXG------- this in rcx  \--*  COMMA     ref   
N006 ( 17, 18) [000077] H-CXG-------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
N004 (  2, 10) [000075] ------------ arg0 in rcx     |  +--*  CNS_INT   long   0x7ffc7e4c17a0
N005 (  1,  1) [000076] ------------ arg1 in rdx     |  \--*  CNS_INT   int    1
N008 (  4, 12) [000073] n---G-------                 \--*  IND       ref   
N007 (  2, 10) [000128] I-----------                    \--*  CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock]

N001 [000129]   ARGPLACE  => $2d9 {2d9}
N002 [000126]   ARGPLACE  => $c4 {c4}
N003 [000127]   ARGPLACE  => $106 {106}
N004 [000075]   CNS_INT   0x7ffc7e4c17a0 => $140 {LngCns:  0x7ffc7e4c17a0}
N005 [000076]   CNS_INT   1 => $42 {IntCns 1}
VN of ARGPLACE tree [000126] updated to $140 {LngCns:  0x7ffc7e4c17a0}
VN of ARGPLACE tree [000127] updated to $42 {IntCns 1}
N006 [000077]   CALL help => $201 {norm=$200 {GetsharedNongcstaticBase($140, $42)}, exc=$1c0 {HelperMultipleExc()}}
N007 [000128]   CNS_INT(h) 0xd1ffab1e static Fseq[_registryLock] => $240 {Hnd const: 0x00000000D1FFAB1E}
N008 [000073]   IND       => <l:$285 {ByrefExposedLoad($43, $240, $2d8)}, c:$2da {2da}>
N009 [000078]   COMMA     => <l:$1dc {norm=$285 {ByrefExposedLoad($43, $240, $2d8)}, exc=$1c0 {HelperMultipleExc()}}, c:$1db {norm=$2da {2da}, exc=$1c0 {HelperMultipleExc()}}>
  fgCurMemoryVN[GcHeap] assigned for CALL at [000079] to VN: $2db.
N010 [000079]   CALL nullcheck => $VN.Void

***** BB01, STMT00017(after)
N010 ( 35, 37) [000079] --CXG-------              *  CALL nullcheck void   System.Threading.Mutex.ReleaseMutex $VN.Void
N009 ( 21, 30) [000078] --CXG------- this in rcx  \--*  COMMA     ref    <l:$1dc, c:$1db>
N006 ( 17, 18) [000077] H-CXG-------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE $201
N004 (  2, 10) [000075] ------------ arg0 in rcx     |  +--*  CNS_INT   long   0x7ffc7e4c17a0 $140
N005 (  1,  1) [000076] ------------ arg1 in rdx     |  \--*  CNS_INT   int    1 $42
N008 (  4, 12) [000073] n---G-------                 \--*  IND       ref    <l:$285, c:$2da>
N007 (  2, 10) [000128] I-----------                    \--*  CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock] $240

finish(BB01).

*************** Finishing PHASE Do value numbering

*************** Starting PHASE Hoist loop code

*************** Finishing PHASE Hoist loop code

*************** Starting PHASE VN based copy prop
*************** In optVnCopyProp()
Copy Assertion for BB01
  curSsaName stack: { }

							Live vars: {V00} => {V00 V05}
							Live vars: {V00 V05} => {V00}
							Live vars: {V00} => {V00 V06}
							Live vars: {V00 V06} => {V00}
							Live vars: {V00} => {V00 V04}
							Live vars: {V00 V04} => {V00 V01 V04}
							Live vars: {V00 V01 V04} => {V01 V04}
							Live vars: {V01 V04} => {V01 V02 V04}
							Live vars: {V01 V02 V04} => {V01 V02}
							Live vars: {V01 V02} => {V01}
							Live vars: {V01} => {}

*************** Finishing PHASE VN based copy prop

*************** Starting PHASE Optimize Valnum CSEs

*************** In optOptimizeCSEs()
Blocks/Trees at start of optOptimizeCSE phase

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..056)        (return)                     i label target jmp hascall gcsafe idxlen new[] nullcheck 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..056) (return), preds={} succs={}

***** BB01
STMT00013 (IL 0x000...  ???)
N010 ( 21, 30) [000059] -ACXG---R---              *  ASG       ref    <l:$1c2, c:$1c1>
N009 (  1,  1) [000058] D------N----              +--*  LCL_VAR   ref    V05 tmp2         d:2 <l:$280, c:$2c0>
N008 ( 21, 30) [000047] --CXG-------              \--*  COMMA     ref    <l:$1c2, c:$1c1>
N005 ( 17, 18) [000046] H-CXG-------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE $201
N003 (  2, 10) [000044] ------------ arg0 in rcx     |  +--*  CNS_INT   long   0x7ffc7e4c17a0 $140
N004 (  1,  1) [000045] ------------ arg1 in rdx     |  \--*  CNS_INT   int    1 $42
N007 (  4, 12) [000042] n---G-------                 \--*  IND       ref    <l:$280, c:$2c0>
N006 (  2, 10) [000083] I-----------                    \--*  CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock] $240

***** BB01
STMT00014 (IL 0x000...  ???)
N002 (  2,  2) [000057] ---X--------              *  NULLCHECK byte   <l:$1c6, c:$1c5>
N001 (  1,  1) [000056] ------------              \--*  LCL_VAR   ref    V05 tmp2         u:2 <l:$280, c:$2c0>

***** BB01
STMT00012 (IL 0x000...  ???)
N005 ( 16, 10) [000055] --CXG-------              *  CALL      int    System.Threading.WaitHandle.WaitOneNoCheck $102
N003 (  1,  1) [000053] ------------ this in rcx  +--*  LCL_VAR   ref    V05 tmp2         u:2 (last use) <l:$280, c:$2c0>
N004 (  1,  1) [000054] ------------ arg1 in rdx  \--*  CNS_INT   int    -1 $41

***** BB01
STMT00001 (IL 0x005...  ???)
N001 ( 14,  5) [000001] --CXG-------              *  CALL      void   HotkeyedMusicPlayer.ArgsTransport.EnsureRootKeyExists $VN.Void

***** BB01
STMT00002 (IL 0x00A...  ???)
N017 ( 43, 51) [000009] -ACXG---R---              *  ASG       ref    $1cd
N016 (  1,  1) [000008] D------N----              +--*  LCL_VAR   ref    V04 tmp1         d:2 $2c8
N015 ( 43, 51) [000007] --CXG-------              \--*  CALL help ref    HELPER.CORINFO_HELP_CHKCASTARRAY $1cd
N012 ( 23, 33) [000094] -ACXG---R-L- arg1 SETUP      +--*  ASG       ref    $2c8
N011 (  1,  1) [000093] D------N----                 |  +--*  LCL_VAR   ref    V06 tmp3         d:2 $2c8
N010 ( 23, 33) [000005] --CXG-------                 |  \--*  CALL      ref    Microsoft.Win32.Registry.GetValue $2c8
N006 (  4, 12) [000087] #---G------- arg0 in rcx     |     +--*  IND       ref    $1c7
N005 (  2, 10) [000086] H-----------                 |     |  \--*  CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer" $241
N008 (  4, 12) [000089] #---G------- arg1 in rdx     |     +--*  IND       ref    $1c8
N007 (  2, 10) [000088] H-----------                 |     |  \--*  CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance" $242
N009 (  1,  1) [000004] ------------ arg2 in r8      |     \--*  LCL_VAR   ref    V00 arg0         u:1 $80
N013 (  1,  1) [000095] ------------ arg1 in rdx     +--*  LCL_VAR   ref    V06 tmp3         u:2 (last use) $2c8
N014 (  2, 10) [000006] H------N---- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e class $243

***** BB01
STMT00003 (IL   ???...  ???)
N011 ( 22, 24) [000019] -ACXG---R---              *  ASG       ref    $1d1
N010 (  1,  1) [000018] D------N----              +--*  LCL_VAR   ref    V01 loc0         d:2 $281
N009 ( 22, 24) [000017] --CXG-------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWARR_1_OBJ $1d1
N007 (  6,  7) [000016] ---X-------- arg1 in rdx     +--*  CAST      long <- int $203
N006 (  5,  5) [000014] ---X--------                 |  \--*  ADD       int    $342
N004 (  3,  3) [000012] ---X--------                 |     +--*  ARR_LENGTH int    $340
N003 (  1,  1) [000011] ------------                 |     |  \--*  LCL_VAR   ref    V04 tmp1         u:2 $2c8
N005 (  1,  1) [000013] ------------                 |     \--*  CNS_INT   int    1 $42
N008 (  2, 10) [000015] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e class $243

***** BB01
STMT00005 (IL   ???...  ???)
N007 ( 20, 12) [000024] -ACXG---R---              *  ASG       ref    $2cf
N006 (  3,  2) [000023] D------N----              +--*  LCL_VAR   ref    V02 loc1         d:2 $2cf
N005 ( 16,  9) [000062] --CXG-------              \--*  CALL      ref    System.String.Join $2cf
N003 (  1,  1) [000020] ------------ arg1 in rdx     +--*  LCL_VAR   ref    V00 arg0         u:1 (last use) $80
N004 (  1,  1) [000066] ------------ arg0 in rcx     \--*  CNS_INT   int    124 $45

***** BB01
STMT00006 (IL   ???...0x03F)
N007 ( 17, 12) [000027] --CXG-------              *  CALL      void   System.Array.CopyTo $VN.Void
N004 (  1,  1) [000010] ------------ this in rcx  +--*  LCL_VAR   ref    V04 tmp1         u:2 (last use) $2c8
N005 (  1,  1) [000025] ------------ arg1 in rdx  +--*  LCL_VAR   ref    V01 loc0         u:2 $281
N006 (  1,  1) [000026] ------------ arg2 in r8   \--*  CNS_INT   int    0 $40

***** BB01
STMT00007 (IL 0x038...  ???)
N022 ( 26, 29) [000035] -A-XG-------              *  ASG       ref    $VN.Void
N020 ( 22, 26) [000117] ---XG--N----              +--*  COMMA     ref    $VN.Void
N007 ( 12, 15) [000110] ---X--------              |  +--*  ARR_BOUNDS_CHECK_Rng void   $1d7
N004 (  5,  5) [000032] ---X--------              |  |  +--*  ADD       int    $345
N002 (  3,  3) [000030] ---X--------              |  |  |  +--*  ARR_LENGTH int    $343
N001 (  1,  1) [000029] ------------              |  |  |  |  \--*  LCL_VAR   ref    V01 loc0         u:2 $281
N003 (  1,  1) [000031] ------------              |  |  |  \--*  CNS_INT   int    -1 $41
N006 (  3,  3) [000109] ---X--------              |  |  \--*  ARR_LENGTH int    $343
N005 (  1,  1) [000028] ------------              |  |     \--*  LCL_VAR   ref    V01 loc0         u:2 $281
N019 ( 10, 11) [000034] a--XG--N----              |  \--*  IND       ref    $2cf
N018 (  9, 10) [000116] ---X---N----              |     \--*  ADD       byref  $382
N016 (  8,  9) [000115] ---X---N----              |        +--*  ADD       long   $209
N014 (  7,  8) [000113] ---X---N----              |        |  +--*  LSH       long   $207
N012 (  6,  7) [000111] ---X--------              |        |  |  +--*  CAST      long <- int $205
N011 (  5,  5) [000105] ---X--------              |        |  |  |  \--*  ADD       int    $345
N009 (  3,  3) [000106] ---X--------              |        |  |  |     +--*  ARR_LENGTH int    $343
N008 (  1,  1) [000107] ------------              |        |  |  |     |  \--*  LCL_VAR   ref    V01 loc0         u:2 $281
N010 (  1,  1) [000108] ------------              |        |  |  |     \--*  CNS_INT   int    -1 Fseq[#ConstantIndex] $41
N013 (  1,  1) [000112] -------N----              |        |  |  \--*  CNS_INT   long   3 $141
N015 (  1,  1) [000114] ------------              |        |  \--*  CNS_INT   long   16 Fseq[#FirstElem] $143
N017 (  1,  1) [000104] ------------              |        \--*  LCL_VAR   ref    V01 loc0         u:2 $281
N021 (  3,  2) [000033] ------------              \--*  LCL_VAR   ref    V02 loc1         u:2 (last use) $2cf

***** BB01
STMT00016 (IL 0x040...  ???)
N011 ( 24, 35) [000071] --CXG-------              *  CALL      void   Microsoft.Win32.Registry.SetValue $VN.Void
N006 (  4, 12) [000119] #---G------- arg0 in rcx  +--*  IND       ref    $1c7
N005 (  2, 10) [000118] H-----------              |  \--*  CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer" $241
N008 (  4, 12) [000121] #---G------- arg1 in rdx  +--*  IND       ref    $1c8
N007 (  2, 10) [000120] H-----------              |  \--*  CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance" $242
N009 (  1,  1) [000038] ------------ arg2 in r8   +--*  LCL_VAR   ref    V01 loc0         u:2 (last use) $281
N010 (  1,  1) [000070] ------------ arg3 in r9   \--*  CNS_INT   int    0 $40

***** BB01
STMT00017 (IL 0x050...  ???)
N010 ( 35, 37) [000079] --CXG-------              *  CALL nullcheck void   System.Threading.Mutex.ReleaseMutex $VN.Void
N009 ( 21, 30) [000078] --CXG------- this in rcx  \--*  COMMA     ref    <l:$1dc, c:$1db>
N006 ( 17, 18) [000077] H-CXG-------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE $201
N004 (  2, 10) [000075] ------------ arg0 in rcx     |  +--*  CNS_INT   long   0x7ffc7e4c17a0 $140
N005 (  1,  1) [000076] ------------ arg1 in rdx     |  \--*  CNS_INT   int    1 $42
N008 (  4, 12) [000073] n---G-------                 \--*  IND       ref    <l:$285, c:$2da>
N007 (  2, 10) [000128] I-----------                    \--*  CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock] $240

-------------------------------------------------------------------------------------------------------------------

*************** In optOptimizeValnumCSEs()

CSE candidate #01, key=$301 in BB01, [cost= 3, size= 3]: 
N006 (  3,  3) CSE #01 (use)[000109] ---X--------              *  ARR_LENGTH int    $343
N005 (  1,  1)              [000028] ------------              \--*  LCL_VAR   ref    V01 loc0         u:2 $281

CSE candidate #02, key=$344 in BB01, [cost= 5, size= 5]: 
N011 (  5,  5) CSE #02 (use)[000105] ---X--------              *  ADD       int    $345
N009 (  3,  3) CSE #01 (use)[000106] ---X--------              +--*  ARR_LENGTH int    $343
N008 (  1,  1)              [000107] ------------              |  \--*  LCL_VAR   ref    V01 loc0         u:2 $281
N010 (  1,  1)              [000108] ------------              \--*  CNS_INT   int    -1 Fseq[#ConstantIndex] $41

CSE candidate #03, key=$1c7 in BB01, [cost= 4, size=12]: 
N006 (  4, 12) CSE #03 (use)[000119] #---G-------              *  IND       ref    $1c7
N005 (  2, 10)              [000118] H-----------              \--*  CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer" $241

CSE candidate #04, key=$1c8 in BB01, [cost= 4, size=12]: 
N008 (  4, 12) CSE #04 (use)[000121] #---G-------              *  IND       ref    $1c8
N007 (  2, 10)              [000120] H-----------              \--*  CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance" $242

CSE candidate #05, key=$200 in BB01, [cost=17, size=18]: 
N006 ( 17, 18) CSE #05 (use)[000077] H-CXG-------              *  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE $201
N004 (  2, 10)              [000075] ------------ arg0 in rcx  +--*  CNS_INT   long   0x7ffc7e4c17a0 $140
N005 (  1,  1)              [000076] ------------ arg1 in rdx  \--*  CNS_INT   int    1 $42

Blocks that generate CSE def/uses
BB01 cseGen = 0000000000000155

Performing DataFlow for ValnumCSE's
StartMerge BB01
  :: cseOut    = 00000000000007FF
EndMerge BB01
  :: cseIn     = 0000000000000000
  :: cseGen    = 0000000000000155
  => cseOut    = 0000000000000155
  != preMerge  = 00000000000007FF, => true

After performing DataFlow for ValnumCSE's
BB01 cseIn  = 0000000000000000, cseGen = 0000000000000155, cseOut = 0000000000000155

Labeling the CSEs with Use/Def information
BB01 [000046] Def of CSE #05 [weight=1   ]
BB01 [000087] Def of CSE #03 [weight=1   ]
BB01 [000089] Def of CSE #04 [weight=1   ]
BB01 [000030] Def of CSE #01 [weight=1   ]
BB01 [000032] Def of CSE #02 [weight=1   ]
BB01 [000109] Use of CSE #01 [weight=1   ]
BB01 [000106] Use of CSE #01 [weight=1   ]
BB01 [000105] Use of CSE #02 [weight=1   ]
BB01 [000119] Use of CSE #03 [weight=1   ] *** Now Live Across Call ***
BB01 [000121] Use of CSE #04 [weight=1   ] *** Now Live Across Call ***
BB01 [000077] Use of CSE #05 [weight=1   ] *** Now Live Across Call ***

************ Trees at start of optValnumCSE_Heuristic()

------------ BB01 [000..056) (return), preds={} succs={}

***** BB01
STMT00013 (IL 0x000...  ???)
N010 ( 21, 30)              [000059] -ACXG---R---              *  ASG       ref    <l:$1c2, c:$1c1>
N009 (  1,  1)              [000058] D------N----              +--*  LCL_VAR   ref    V05 tmp2         d:2 <l:$280, c:$2c0>
N008 ( 21, 30)              [000047] --CXG-------              \--*  COMMA     ref    <l:$1c2, c:$1c1>
N005 ( 17, 18) CSE #05 (def)[000046] H-CXG-------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE $201
N003 (  2, 10)              [000044] ------------ arg0 in rcx     |  +--*  CNS_INT   long   0x7ffc7e4c17a0 $140
N004 (  1,  1)              [000045] ------------ arg1 in rdx     |  \--*  CNS_INT   int    1 $42
N007 (  4, 12)              [000042] n---G-------                 \--*  IND       ref    <l:$280, c:$2c0>
N006 (  2, 10)              [000083] I-----------                    \--*  CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock] $240

***** BB01
STMT00014 (IL 0x000...  ???)
N002 (  2,  2)              [000057] ---X--------              *  NULLCHECK byte   <l:$1c6, c:$1c5>
N001 (  1,  1)              [000056] ------------              \--*  LCL_VAR   ref    V05 tmp2         u:2 <l:$280, c:$2c0>

***** BB01
STMT00012 (IL 0x000...  ???)
N005 ( 16, 10)              [000055] --CXG-------              *  CALL      int    System.Threading.WaitHandle.WaitOneNoCheck $102
N003 (  1,  1)              [000053] ------------ this in rcx  +--*  LCL_VAR   ref    V05 tmp2         u:2 (last use) <l:$280, c:$2c0>
N004 (  1,  1)              [000054] ------------ arg1 in rdx  \--*  CNS_INT   int    -1 $41

***** BB01
STMT00001 (IL 0x005...  ???)
N001 ( 14,  5)              [000001] --CXG-------              *  CALL      void   HotkeyedMusicPlayer.ArgsTransport.EnsureRootKeyExists $VN.Void

***** BB01
STMT00002 (IL 0x00A...  ???)
N017 ( 43, 51)              [000009] -ACXG---R---              *  ASG       ref    $1cd
N016 (  1,  1)              [000008] D------N----              +--*  LCL_VAR   ref    V04 tmp1         d:2 $2c8
N015 ( 43, 51)              [000007] --CXG-------              \--*  CALL help ref    HELPER.CORINFO_HELP_CHKCASTARRAY $1cd
N012 ( 23, 33)              [000094] -ACXG---R-L- arg1 SETUP      +--*  ASG       ref    $2c8
N011 (  1,  1)              [000093] D------N----                 |  +--*  LCL_VAR   ref    V06 tmp3         d:2 $2c8
N010 ( 23, 33)              [000005] --CXG-------                 |  \--*  CALL      ref    Microsoft.Win32.Registry.GetValue $2c8
N006 (  4, 12) CSE #03 (def)[000087] #---G------- arg0 in rcx     |     +--*  IND       ref    $1c7
N005 (  2, 10)              [000086] H-----------                 |     |  \--*  CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer" $241
N008 (  4, 12) CSE #04 (def)[000089] #---G------- arg1 in rdx     |     +--*  IND       ref    $1c8
N007 (  2, 10)              [000088] H-----------                 |     |  \--*  CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance" $242
N009 (  1,  1)              [000004] ------------ arg2 in r8      |     \--*  LCL_VAR   ref    V00 arg0         u:1 $80
N013 (  1,  1)              [000095] ------------ arg1 in rdx     +--*  LCL_VAR   ref    V06 tmp3         u:2 (last use) $2c8
N014 (  2, 10)              [000006] H------N---- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e class $243

***** BB01
STMT00003 (IL   ???...  ???)
N011 ( 22, 24)              [000019] -ACXG---R---              *  ASG       ref    $1d1
N010 (  1,  1)              [000018] D------N----              +--*  LCL_VAR   ref    V01 loc0         d:2 $281
N009 ( 22, 24)              [000017] --CXG-------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWARR_1_OBJ $1d1
N007 (  6,  7)              [000016] ---X-------- arg1 in rdx     +--*  CAST      long <- int $203
N006 (  5,  5)              [000014] ---X--------                 |  \--*  ADD       int    $342
N004 (  3,  3)              [000012] ---X--------                 |     +--*  ARR_LENGTH int    $340
N003 (  1,  1)              [000011] ------------                 |     |  \--*  LCL_VAR   ref    V04 tmp1         u:2 $2c8
N005 (  1,  1)              [000013] ------------                 |     \--*  CNS_INT   int    1 $42
N008 (  2, 10)              [000015] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e class $243

***** BB01
STMT00005 (IL   ???...  ???)
N007 ( 20, 12)              [000024] -ACXG---R---              *  ASG       ref    $2cf
N006 (  3,  2)              [000023] D------N----              +--*  LCL_VAR   ref    V02 loc1         d:2 $2cf
N005 ( 16,  9)              [000062] --CXG-------              \--*  CALL      ref    System.String.Join $2cf
N003 (  1,  1)              [000020] ------------ arg1 in rdx     +--*  LCL_VAR   ref    V00 arg0         u:1 (last use) $80
N004 (  1,  1)              [000066] ------------ arg0 in rcx     \--*  CNS_INT   int    124 $45

***** BB01
STMT00006 (IL   ???...0x03F)
N007 ( 17, 12)              [000027] --CXG-------              *  CALL      void   System.Array.CopyTo $VN.Void
N004 (  1,  1)              [000010] ------------ this in rcx  +--*  LCL_VAR   ref    V04 tmp1         u:2 (last use) $2c8
N005 (  1,  1)              [000025] ------------ arg1 in rdx  +--*  LCL_VAR   ref    V01 loc0         u:2 $281
N006 (  1,  1)              [000026] ------------ arg2 in r8   \--*  CNS_INT   int    0 $40

***** BB01
STMT00007 (IL 0x038...  ???)
N022 ( 26, 29)              [000035] -A-XG-------              *  ASG       ref    $VN.Void
N020 ( 22, 26)              [000117] ---XG--N----              +--*  COMMA     ref    $VN.Void
N007 ( 12, 15)              [000110] ---X--------              |  +--*  ARR_BOUNDS_CHECK_Rng void   $1d7
N004 (  5,  5) CSE #02 (def)[000032] ---X--------              |  |  +--*  ADD       int    $345
N002 (  3,  3) CSE #01 (def)[000030] ---X--------              |  |  |  +--*  ARR_LENGTH int    $343
N001 (  1,  1)              [000029] ------------              |  |  |  |  \--*  LCL_VAR   ref    V01 loc0         u:2 $281
N003 (  1,  1)              [000031] ------------              |  |  |  \--*  CNS_INT   int    -1 $41
N006 (  3,  3) CSE #01 (use)[000109] ---X--------              |  |  \--*  ARR_LENGTH int    $343
N005 (  1,  1)              [000028] ------------              |  |     \--*  LCL_VAR   ref    V01 loc0         u:2 $281
N019 ( 10, 11)              [000034] a--XG--N----              |  \--*  IND       ref    $2cf
N018 (  9, 10)              [000116] ---X---N----              |     \--*  ADD       byref  $382
N016 (  8,  9)              [000115] ---X---N----              |        +--*  ADD       long   $209
N014 (  7,  8)              [000113] ---X---N----              |        |  +--*  LSH       long   $207
N012 (  6,  7)              [000111] ---X--------              |        |  |  +--*  CAST      long <- int $205
N011 (  5,  5) CSE #02 (use)[000105] ---X--------              |        |  |  |  \--*  ADD       int    $345
N009 (  3,  3) CSE #01 (use)[000106] ---X--------              |        |  |  |     +--*  ARR_LENGTH int    $343
N008 (  1,  1)              [000107] ------------              |        |  |  |     |  \--*  LCL_VAR   ref    V01 loc0         u:2 $281
N010 (  1,  1)              [000108] ------------              |        |  |  |     \--*  CNS_INT   int    -1 Fseq[#ConstantIndex] $41
N013 (  1,  1)              [000112] -------N----              |        |  |  \--*  CNS_INT   long   3 $141
N015 (  1,  1)              [000114] ------------              |        |  \--*  CNS_INT   long   16 Fseq[#FirstElem] $143
N017 (  1,  1)              [000104] ------------              |        \--*  LCL_VAR   ref    V01 loc0         u:2 $281
N021 (  3,  2)              [000033] ------------              \--*  LCL_VAR   ref    V02 loc1         u:2 (last use) $2cf

***** BB01
STMT00016 (IL 0x040...  ???)
N011 ( 24, 35)              [000071] --CXG-------              *  CALL      void   Microsoft.Win32.Registry.SetValue $VN.Void
N006 (  4, 12) CSE #03 (use)[000119] #---G------- arg0 in rcx  +--*  IND       ref    $1c7
N005 (  2, 10)              [000118] H-----------              |  \--*  CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer" $241
N008 (  4, 12) CSE #04 (use)[000121] #---G------- arg1 in rdx  +--*  IND       ref    $1c8
N007 (  2, 10)              [000120] H-----------              |  \--*  CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance" $242
N009 (  1,  1)              [000038] ------------ arg2 in r8   +--*  LCL_VAR   ref    V01 loc0         u:2 (last use) $281
N010 (  1,  1)              [000070] ------------ arg3 in r9   \--*  CNS_INT   int    0 $40

***** BB01
STMT00017 (IL 0x050...  ???)
N010 ( 35, 37)              [000079] --CXG-------              *  CALL nullcheck void   System.Threading.Mutex.ReleaseMutex $VN.Void
N009 ( 21, 30)              [000078] --CXG------- this in rcx  \--*  COMMA     ref    <l:$1dc, c:$1db>
N006 ( 17, 18) CSE #05 (use)[000077] H-CXG-------                 +--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE $201
N004 (  2, 10)              [000075] ------------ arg0 in rcx     |  +--*  CNS_INT   long   0x7ffc7e4c17a0 $140
N005 (  1,  1)              [000076] ------------ arg1 in rdx     |  \--*  CNS_INT   int    1 $42
N008 (  4, 12)              [000073] n---G-------                 \--*  IND       ref    <l:$285, c:$2da>
N007 (  2, 10)              [000128] I-----------                    \--*  CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock] $240

-------------------------------------------------------------------------------------------------------------------


Aggressive CSE Promotion cutoff is 200.000000
Moderate CSE Promotion cutoff is 100.000000
enregCount is 6
Framesize estimate is 0x0000
We have a small frame

Sorted CSE candidates:
CSE #05, {$200, $1c0} useCnt=1: [def=100.000000, use=100.000000, cost= 17, call]
        :: N005 ( 17, 18) CSE #05 (def)[000046] H-CXG-------              *  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE $201
CSE #02, {$344, $1d2} useCnt=1: [def=100.000000, use=100.000000, cost=  5      ]
        :: N004 (  5,  5) CSE #02 (def)[000032] ---X--------              *  ADD       int    $345
CSE #03, {$1c7, $4  } useCnt=1: [def=100.000000, use=100.000000, cost=  4, call]
        :: N006 (  4, 12) CSE #03 (def)[000087] #---G-------              *  IND       ref    $1c7
CSE #04, {$1c8, $4  } useCnt=1: [def=100.000000, use=100.000000, cost=  4, call]
        :: N008 (  4, 12) CSE #04 (def)[000089] #---G-------              *  IND       ref    $1c8
CSE #01, {$301, $1d2} useCnt=2: [def=100.000000, use=200.000000, cost=  3      ]
        :: N002 (  3,  3) CSE #01 (def)[000030] ---X--------              *  ARR_LENGTH int    $343


Considering CSE #05 {$200, $1c0} [def=100.000000, use=100.000000, cost= 17, call]
CSE Expression : 
N005 ( 17, 18) CSE #05 (def)[000046] H-CXG-------              *  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE $201
N003 (  2, 10)              [000044] ------------ arg0 in rcx  +--*  CNS_INT   long   0x7ffc7e4c17a0 $140
N004 (  1,  1)              [000045] ------------ arg1 in rdx  \--*  CNS_INT   int    1 $42

Aggressive CSE Promotion (300.000000 >= 200.000000)
cseRefCnt=300.000000, aggressiveRefCnt=200.000000, moderateRefCnt=100.000000
defCnt=100.000000, useCnt=100.000000, cost=17, size=18, LiveAcrossCall
def_cost=1, use_cost=1, extra_no_cost=34, extra_yes_cost=100
CSE cost savings check (1734.000000 >= 300.000000) passes

Promoting CSE:

lvaGrabTemp returning 7 (V07 rat0) (a long lifetime temp) called for CSE - aggressive.
CSE #05 is single-def, so associated CSE temp V07 will be in SSA
New refCnts for V07: refCnt =  2, refCntWtd = 2   
New refCnts for V07: refCnt =  3, refCntWtd = 3   

CSE #05 def at [000046] replaced in BB01 with def of V07
ReMorphing args for 46.CALL:
argSlots=2, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32
ArgTable for 46.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 44.CNS_INT long (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]
fgArgTabEntry[arg 1 45.CNS_INT int (By ref), 1 reg: rdx, byteAlignment=8, lateArgInx=1, processed]

optValnumCSE morphed tree:
N014 ( 22, 31)              [000059] -ACXG---R---              *  ASG       ref    <l:$1c2, c:$1c1>
N013 (  1,  1)              [000058] D------N----              +--*  LCL_VAR   ref    V05 tmp2         d:2 <l:$280, c:$2c0>
N012 ( 22, 31)              [000047] -ACXG-------              \--*  COMMA     ref    <l:$1c2, c:$1c1>
N009 ( 18, 19)              [000133] -ACXG-------                 +--*  COMMA     long   $201
N007 ( 17, 18)              [000131] -ACXG---R---                 |  +--*  ASG       long   $VN.Void
N006 (  1,  1)              [000130] D------N----                 |  |  +--*  LCL_VAR   long   V07 cse0         d:1 $201
N005 ( 17, 18)              [000046] H-CXG-------                 |  |  \--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE $201
N003 (  2, 10)              [000044] ------------ arg0 in rcx     |  |     +--*  CNS_INT   long   0x7ffc7e4c17a0 $140
N004 (  1,  1)              [000045] ------------ arg1 in rdx     |  |     \--*  CNS_INT   int    1 $42
N008 (  1,  1)              [000132] ------------                 |  \--*  LCL_VAR   long   V07 cse0         u:1 $201
N011 (  4, 12)              [000042] n---G-------                 \--*  IND       ref    <l:$280, c:$2c0>
N010 (  2, 10)              [000083] I-----------                    \--*  CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock] $240


Working on the replacement of the CSE #05 use at [000077] in BB01
ReMorphing args for 79.CALL:
ArgTable for 79.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 78.COMMA ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]

optValnumCSE morphed tree:
N006 ( 19, 20)              [000079] --CXG-------              *  CALL nullcheck void   System.Threading.Mutex.ReleaseMutex $VN.Void
N005 (  5, 13)              [000078] ----G------- this in rcx  \--*  COMMA     ref    <l:$1dc, c:$1db>
N002 (  1,  1)              [000134] ------------                 +--*  LCL_VAR   long   V07 cse0         u:1 $200
N004 (  4, 12)              [000073] n---G-------                 \--*  IND       ref    <l:$285, c:$2da>
N003 (  2, 10)              [000128] I-----------                    \--*  CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock] $240


Considering CSE #02 {$344, $1d2} [def=100.000000, use=100.000000, cost=  5      ]
CSE Expression : 
N004 (  5,  5) CSE #02 (def)[000032] ---X--------              *  ADD       int    $345
N002 (  3,  3) CSE #01 (def)[000030] ---X--------              +--*  ARR_LENGTH int    $343
N001 (  1,  1)              [000029] ------------              |  \--*  LCL_VAR   ref    V01 loc0         u:2 $281
N003 (  1,  1)              [000031] ------------              \--*  CNS_INT   int    -1 $41

Aggressive CSE Promotion (300.000000 >= 300.000000)
cseRefCnt=300.000000, aggressiveRefCnt=300.000000, moderateRefCnt=150.000000
defCnt=100.000000, useCnt=100.000000, cost=5, size=5
def_cost=1, use_cost=1, extra_no_cost=8, extra_yes_cost=0
CSE cost savings check (508.000000 >= 200.000000) passes

Promoting CSE:

lvaGrabTemp returning 8 (V08 rat0) (a long lifetime temp) called for CSE - aggressive.
CSE #02 is single-def, so associated CSE temp V08 will be in SSA
New refCnts for V08: refCnt =  2, refCntWtd = 2   
New refCnts for V08: refCnt =  3, refCntWtd = 3   

CSE #02 def at [000032] replaced in BB01 with def of V08
optValnumCSE morphed tree:
N026 ( 27, 30)              [000035] -A-XG-------              *  ASG       ref    $VN.Void
N024 ( 23, 27)              [000117] -A-XG--N----              +--*  COMMA     ref    $VN.Void
N011 ( 13, 16)              [000110] -A-X--------              |  +--*  ARR_BOUNDS_CHECK_Rng void   $1d7
N008 (  6,  6)              [000138] -A-X--------              |  |  +--*  COMMA     int    $345
N006 (  5,  5)              [000136] -A-X----R---              |  |  |  +--*  ASG       int    $VN.Void
N005 (  1,  1)              [000135] D------N----              |  |  |  |  +--*  LCL_VAR   int    V08 cse1         d:1 $345
N004 (  5,  5)              [000032] ---X--------              |  |  |  |  \--*  ADD       int    $345
N002 (  3,  3) CSE #01 (def)[000030] ---X--------              |  |  |  |     +--*  ARR_LENGTH int    $343
N001 (  1,  1)              [000029] ------------              |  |  |  |     |  \--*  LCL_VAR   ref    V01 loc0         u:2 $281
N003 (  1,  1)              [000031] ------------              |  |  |  |     \--*  CNS_INT   int    -1 $41
N007 (  1,  1)              [000137] ------------              |  |  |  \--*  LCL_VAR   int    V08 cse1         u:1 $345
N010 (  3,  3) CSE #01 (use)[000109] ---X--------              |  |  \--*  ARR_LENGTH int    $343
N009 (  1,  1)              [000028] ------------              |  |     \--*  LCL_VAR   ref    V01 loc0         u:2 $281
N023 ( 10, 11)              [000034] a--XG--N----              |  \--*  IND       ref    $2cf
N022 (  9, 10)              [000116] ---X---N----              |     \--*  ADD       byref  $382
N020 (  8,  9)              [000115] ---X---N----              |        +--*  ADD       long   $209
N018 (  7,  8)              [000113] ---X---N----              |        |  +--*  LSH       long   $207
N016 (  6,  7)              [000111] ---X--------              |        |  |  +--*  CAST      long <- int $205
N015 (  5,  5) CSE #02 (use)[000105] ---X--------              |        |  |  |  \--*  ADD       int    $345
N013 (  3,  3) CSE #01 (use)[000106] ---X--------              |        |  |  |     +--*  ARR_LENGTH int    $343
N012 (  1,  1)              [000107] ------------              |        |  |  |     |  \--*  LCL_VAR   ref    V01 loc0         u:2 $281
N014 (  1,  1)              [000108] ------------              |        |  |  |     \--*  CNS_INT   int    -1 Fseq[#ConstantIndex] $41
N017 (  1,  1)              [000112] -------N----              |        |  |  \--*  CNS_INT   long   3 $141
N019 (  1,  1)              [000114] ------------              |        |  \--*  CNS_INT   long   16 Fseq[#FirstElem] $143
N021 (  1,  1)              [000104] ------------              |        \--*  LCL_VAR   ref    V01 loc0         u:2 $281
N025 (  3,  2)              [000033] ------------              \--*  LCL_VAR   ref    V02 loc1         u:2 (last use) $2cf


Working on the replacement of the CSE #02 use at [000105] in BB01
Unmark CSE use #01 at [000106]:   2 ->   1
optValnumCSE morphed tree:
N023 ( 23, 26)              [000035] -A-XG-------              *  ASG       ref    $VN.Void
N021 ( 19, 23)              [000117] -A-XG--N----              +--*  COMMA     ref    $VN.Void
N011 ( 13, 16)              [000110] -A-X--------              |  +--*  ARR_BOUNDS_CHECK_Rng void   $1d7
N008 (  6,  6)              [000138] -A-X--------              |  |  +--*  COMMA     int    $345
N006 (  5,  5)              [000136] -A-X----R---              |  |  |  +--*  ASG       int    $VN.Void
N005 (  1,  1)              [000135] D------N----              |  |  |  |  +--*  LCL_VAR   int    V08 cse1         d:1 $345
N004 (  5,  5)              [000032] ---X--------              |  |  |  |  \--*  ADD       int    $345
N002 (  3,  3) CSE #01 (def)[000030] ---X--------              |  |  |  |     +--*  ARR_LENGTH int    $343
N001 (  1,  1)              [000029] ------------              |  |  |  |     |  \--*  LCL_VAR   ref    V01 loc0         u:2 $281
N003 (  1,  1)              [000031] ------------              |  |  |  |     \--*  CNS_INT   int    -1 $41
N007 (  1,  1)              [000137] ------------              |  |  |  \--*  LCL_VAR   int    V08 cse1         u:1 $345
N010 (  3,  3) CSE #01 (use)[000109] ---X--------              |  |  \--*  ARR_LENGTH int    $343
N009 (  1,  1)              [000028] ------------              |  |     \--*  LCL_VAR   ref    V01 loc0         u:2 $281
N020 (  6,  7)              [000034] a---G--N----              |  \--*  IND       ref    $2cf
N019 (  5,  6)              [000116] -------N----              |     \--*  ADD       byref  $382
N017 (  4,  5)              [000115] -------N----              |        +--*  ADD       long   $209
N015 (  3,  4)              [000113] -------N----              |        |  +--*  LSH       long   $207
N013 (  2,  3)              [000111] ------------              |        |  |  +--*  CAST      long <- int $205
N012 (  1,  1)              [000139] ------------              |        |  |  |  \--*  LCL_VAR   int    V08 cse1         u:1 $344
N014 (  1,  1)              [000112] -------N----              |        |  |  \--*  CNS_INT   long   3 $141
N016 (  1,  1)              [000114] ------------              |        |  \--*  CNS_INT   long   16 Fseq[#FirstElem] $143
N018 (  1,  1)              [000104] ------------              |        \--*  LCL_VAR   ref    V01 loc0         u:2 $281
N022 (  3,  2)              [000033] ------------              \--*  LCL_VAR   ref    V02 loc1         u:2 (last use) $2cf


Considering CSE #03 {$1c7, $4  } [def=100.000000, use=100.000000, cost=  4, call]
CSE Expression : 
N006 (  4, 12) CSE #03 (def)[000087] #---G-------              *  IND       ref    $1c7
N005 (  2, 10)              [000086] H-----------              \--*  CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer" $241

Aggressive CSE Promotion (300.000000 >= 300.000000)
cseRefCnt=300.000000, aggressiveRefCnt=300.000000, moderateRefCnt=150.000000
defCnt=100.000000, useCnt=100.000000, cost=4, size=12, LiveAcrossCall
def_cost=1, use_cost=1, extra_no_cost=22, extra_yes_cost=100
CSE cost savings check (422.000000 >= 300.000000) passes

Promoting CSE:

lvaGrabTemp returning 9 (V09 rat0) (a long lifetime temp) called for CSE - aggressive.
CSE #03 is single-def, so associated CSE temp V09 will be in SSA
New refCnts for V09: refCnt =  2, refCntWtd = 2   
New refCnts for V09: refCnt =  3, refCntWtd = 3   

CSE #03 def at [000087] replaced in BB01 with def of V09
ReMorphing args for 7.CALL:
ReMorphing args for 5.CALL:
argSlots=3, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32
ArgTable for 5.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 143.COMMA ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]
fgArgTabEntry[arg 1 89.IND ref (By ref), 1 reg: rdx, byteAlignment=8, lateArgInx=1, processed]
fgArgTabEntry[arg 2 4.LCL_VAR ref (By ref), 1 reg: r8, byteAlignment=8, lateArgInx=2, processed]

argSlots=2, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32
ArgTable for 7.CALL after fgMorphArgs:
fgArgTabEntry[arg 1 95.LCL_VAR ref (By ref), 1 reg: rdx, byteAlignment=8, lateArgInx=0, tmpNum=V06, isTmp, processed]
fgArgTabEntry[arg 0 6.CNS_INT long (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=1, processed]

optValnumCSE morphed tree:
N021 ( 44, 52)              [000009] -ACXG---R---              *  ASG       ref    $1cd
N020 (  1,  1)              [000008] D------N----              +--*  LCL_VAR   ref    V04 tmp1         d:2 $2c8
N019 ( 44, 52)              [000007] -ACXG-------              \--*  CALL help ref    HELPER.CORINFO_HELP_CHKCASTARRAY $1cd
N016 ( 24, 34)              [000094] -ACXG---R-L- arg1 SETUP      +--*  ASG       ref    $2c8
N015 (  1,  1)              [000093] D------N----                 |  +--*  LCL_VAR   ref    V06 tmp3         d:2 $2c8
N014 ( 24, 34)              [000005] -ACXG-------                 |  \--*  CALL      ref    Microsoft.Win32.Registry.GetValue $2c8
N010 (  5, 13)              [000143] -A--G------- arg0 in rcx     |     +--*  COMMA     ref    $1c7
N008 (  4, 12)              [000141] -A--G---R---                 |     |  +--*  ASG       ref    $VN.Void
N007 (  1,  1)              [000140] D------N----                 |     |  |  +--*  LCL_VAR   ref    V09 cse2         d:1 $1c7
N006 (  4, 12)              [000087] #---G-------                 |     |  |  \--*  IND       ref    $1c7
N005 (  2, 10)              [000086] H-----------                 |     |  |     \--*  CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer" $241
N009 (  1,  1)              [000142] ------------                 |     |  \--*  LCL_VAR   ref    V09 cse2         u:1 $1c7
N012 (  4, 12) CSE #04 (def)[000089] #---G------- arg1 in rdx     |     +--*  IND       ref    $1c8
N011 (  2, 10)              [000088] H-----------                 |     |  \--*  CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance" $242
N013 (  1,  1)              [000004] ------------ arg2 in r8      |     \--*  LCL_VAR   ref    V00 arg0         u:1 $80
N017 (  1,  1)              [000095] ------------ arg1 in rdx     +--*  LCL_VAR   ref    V06 tmp3         u:2 (last use) $2c8
N018 (  2, 10)              [000006] H------N---- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e class $243


Working on the replacement of the CSE #03 use at [000119] in BB01
ReMorphing args for 71.CALL:
argSlots=4, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32
ArgTable for 71.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 144.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]
fgArgTabEntry[arg 1 121.IND ref (By ref), 1 reg: rdx, byteAlignment=8, lateArgInx=1, processed]
fgArgTabEntry[arg 2 38.LCL_VAR ref (By ref), 1 reg: r8, byteAlignment=8, lateArgInx=2, processed]
fgArgTabEntry[arg 3 70.CNS_INT int (By ref), 1 reg: r9, byteAlignment=8, lateArgInx=3, processed]

optValnumCSE morphed tree:
N010 ( 21, 24)              [000071] --CXG-------              *  CALL      void   Microsoft.Win32.Registry.SetValue $VN.Void
N005 (  1,  1)              [000144] ------------ arg0 in rcx  +--*  LCL_VAR   ref    V09 cse2         u:1 $1c7
N007 (  4, 12) CSE #04 (use)[000121] #---G------- arg1 in rdx  +--*  IND       ref    $1c8
N006 (  2, 10)              [000120] H-----------              |  \--*  CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance" $242
N008 (  1,  1)              [000038] ------------ arg2 in r8   +--*  LCL_VAR   ref    V01 loc0         u:2 (last use) $281
N009 (  1,  1)              [000070] ------------ arg3 in r9   \--*  CNS_INT   int    0 $40


Considering CSE #04 {$1c8, $4  } [def=100.000000, use=100.000000, cost=  4, call]
CSE Expression : 
N012 (  4, 12) CSE #04 (def)[000089] #---G-------              *  IND       ref    $1c8
N011 (  2, 10)              [000088] H-----------              \--*  CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance" $242

Aggressive CSE Promotion (300.000000 >= 300.000000)
cseRefCnt=300.000000, aggressiveRefCnt=300.000000, moderateRefCnt=200.000000
defCnt=100.000000, useCnt=100.000000, cost=4, size=12, LiveAcrossCall
def_cost=1, use_cost=1, extra_no_cost=22, extra_yes_cost=100
CSE cost savings check (422.000000 >= 300.000000) passes

Promoting CSE:

lvaGrabTemp returning 10 (V10 rat0) (a long lifetime temp) called for CSE - aggressive.
CSE #04 is single-def, so associated CSE temp V10 will be in SSA
New refCnts for V10: refCnt =  2, refCntWtd = 2   
New refCnts for V10: refCnt =  3, refCntWtd = 3   

CSE #04 def at [000089] replaced in BB01 with def of V10
ReMorphing args for 7.CALL:
ReMorphing args for 5.CALL:
argSlots=3, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32
ArgTable for 5.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 143.COMMA ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]
fgArgTabEntry[arg 1 148.COMMA ref (By ref), 1 reg: rdx, byteAlignment=8, lateArgInx=1, processed]
fgArgTabEntry[arg 2 4.LCL_VAR ref (By ref), 1 reg: r8, byteAlignment=8, lateArgInx=2, processed]

argSlots=2, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32
ArgTable for 7.CALL after fgMorphArgs:
fgArgTabEntry[arg 1 95.LCL_VAR ref (By ref), 1 reg: rdx, byteAlignment=8, lateArgInx=0, tmpNum=V06, isTmp, processed]
fgArgTabEntry[arg 0 6.CNS_INT long (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=1, processed]

optValnumCSE morphed tree:
N025 ( 45, 53)              [000009] -ACXG---R---              *  ASG       ref    $1cd
N024 (  1,  1)              [000008] D------N----              +--*  LCL_VAR   ref    V04 tmp1         d:2 $2c8
N023 ( 45, 53)              [000007] -ACXG-------              \--*  CALL help ref    HELPER.CORINFO_HELP_CHKCASTARRAY $1cd
N020 ( 25, 35)              [000094] -ACXG---R-L- arg1 SETUP      +--*  ASG       ref    $2c8
N019 (  1,  1)              [000093] D------N----                 |  +--*  LCL_VAR   ref    V06 tmp3         d:2 $2c8
N018 ( 25, 35)              [000005] -ACXG-------                 |  \--*  CALL      ref    Microsoft.Win32.Registry.GetValue $2c8
N010 (  5, 13)              [000143] -A--G------- arg0 in rcx     |     +--*  COMMA     ref    $1c7
N008 (  4, 12)              [000141] -A--G---R---                 |     |  +--*  ASG       ref    $VN.Void
N007 (  1,  1)              [000140] D------N----                 |     |  |  +--*  LCL_VAR   ref    V09 cse2         d:1 $1c7
N006 (  4, 12)              [000087] #---G-------                 |     |  |  \--*  IND       ref    $1c7
N005 (  2, 10)              [000086] H-----------                 |     |  |     \--*  CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer" $241
N009 (  1,  1)              [000142] ------------                 |     |  \--*  LCL_VAR   ref    V09 cse2         u:1 $1c7
N016 (  5, 13)              [000148] -A--G------- arg1 in rdx     |     +--*  COMMA     ref    $1c8
N014 (  4, 12)              [000146] -A--G---R---                 |     |  +--*  ASG       ref    $VN.Void
N013 (  1,  1)              [000145] D------N----                 |     |  |  +--*  LCL_VAR   ref    V10 cse3         d:1 $1c8
N012 (  4, 12)              [000089] #---G-------                 |     |  |  \--*  IND       ref    $1c8
N011 (  2, 10)              [000088] H-----------                 |     |  |     \--*  CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance" $242
N015 (  1,  1)              [000147] ------------                 |     |  \--*  LCL_VAR   ref    V10 cse3         u:1 $1c8
N017 (  1,  1)              [000004] ------------ arg2 in r8      |     \--*  LCL_VAR   ref    V00 arg0         u:1 $80
N021 (  1,  1)              [000095] ------------ arg1 in rdx     +--*  LCL_VAR   ref    V06 tmp3         u:2 (last use) $2c8
N022 (  2, 10)              [000006] H------N---- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e class $243


Working on the replacement of the CSE #04 use at [000121] in BB01
ReMorphing args for 71.CALL:
argSlots=4, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32
ArgTable for 71.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 144.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]
fgArgTabEntry[arg 1 149.LCL_VAR ref (By ref), 1 reg: rdx, byteAlignment=8, lateArgInx=1, processed]
fgArgTabEntry[arg 2 38.LCL_VAR ref (By ref), 1 reg: r8, byteAlignment=8, lateArgInx=2, processed]
fgArgTabEntry[arg 3 70.CNS_INT int (By ref), 1 reg: r9, byteAlignment=8, lateArgInx=3, processed]

optValnumCSE morphed tree:
N009 ( 18, 13)              [000071] --CXG-------              *  CALL      void   Microsoft.Win32.Registry.SetValue $VN.Void
N005 (  1,  1)              [000144] ------------ arg0 in rcx  +--*  LCL_VAR   ref    V09 cse2         u:1 $1c7
N006 (  1,  1)              [000149] ------------ arg1 in rdx  +--*  LCL_VAR   ref    V10 cse3         u:1 $1c8
N007 (  1,  1)              [000038] ------------ arg2 in r8   +--*  LCL_VAR   ref    V01 loc0         u:2 (last use) $281
N008 (  1,  1)              [000070] ------------ arg3 in r9   \--*  CNS_INT   int    0 $40


Considering CSE #01 {$301, $1d2} [def=100.000000, use=100.000000, cost=  3      ]
CSE Expression : 
N002 (  3,  3) CSE #01 (def)[000030] ---X--------              *  ARR_LENGTH int    $343
N001 (  1,  1)              [000029] ------------              \--*  LCL_VAR   ref    V01 loc0         u:2 $281

Aggressive CSE Promotion (300.000000 >= 300.000000)
cseRefCnt=300.000000, aggressiveRefCnt=300.000000, moderateRefCnt=250.000000
defCnt=100.000000, useCnt=100.000000, cost=3, size=3
def_cost=1, use_cost=1, extra_no_cost=4, extra_yes_cost=0
CSE cost savings check (304.000000 >= 200.000000) passes

Promoting CSE:

lvaGrabTemp returning 11 (V11 rat0) (a long lifetime temp) called for CSE - aggressive.
CSE #01 is single-def, so associated CSE temp V11 will be in SSA
New refCnts for V11: refCnt =  2, refCntWtd = 2   
New refCnts for V11: refCnt =  3, refCntWtd = 3   

CSE #01 def at [000030] replaced in BB01 with def of V11
optValnumCSE morphed tree:
N027 ( 24, 27)              [000035] -A-XG-------              *  ASG       ref    $VN.Void
N025 ( 20, 24)              [000117] -A-XG--N----              +--*  COMMA     ref    $VN.Void
N015 ( 14, 17)              [000110] -A-X--------              |  +--*  ARR_BOUNDS_CHECK_Rng void   $1d7
N012 (  7,  7)              [000138] -A-X--------              |  |  +--*  COMMA     int    $345
N010 (  6,  6)              [000136] -A-X----R---              |  |  |  +--*  ASG       int    $VN.Void
N009 (  1,  1)              [000135] D------N----              |  |  |  |  +--*  LCL_VAR   int    V08 cse1         d:1 $345
N008 (  6,  6)              [000032] -A-X--------              |  |  |  |  \--*  ADD       int    $345
N006 (  4,  4)              [000153] -A-X--------              |  |  |  |     +--*  COMMA     int    $343
N004 (  3,  3)              [000151] -A-X----R---              |  |  |  |     |  +--*  ASG       int    $VN.Void
N003 (  1,  1)              [000150] D------N----              |  |  |  |     |  |  +--*  LCL_VAR   int    V11 cse4         d:1 $343
N002 (  3,  3)              [000030] ---X--------              |  |  |  |     |  |  \--*  ARR_LENGTH int    $343
N001 (  1,  1)              [000029] ------------              |  |  |  |     |  |     \--*  LCL_VAR   ref    V01 loc0         u:2 $281
N005 (  1,  1)              [000152] ------------              |  |  |  |     |  \--*  LCL_VAR   int    V11 cse4         u:1 $343
N007 (  1,  1)              [000031] ------------              |  |  |  |     \--*  CNS_INT   int    -1 $41
N011 (  1,  1)              [000137] ------------              |  |  |  \--*  LCL_VAR   int    V08 cse1         u:1 $345
N014 (  3,  3) CSE #01 (use)[000109] ---X--------              |  |  \--*  ARR_LENGTH int    $343
N013 (  1,  1)              [000028] ------------              |  |     \--*  LCL_VAR   ref    V01 loc0         u:2 $281
N024 (  6,  7)              [000034] a---G--N----              |  \--*  IND       ref    $2cf
N023 (  5,  6)              [000116] -------N----              |     \--*  ADD       byref  $382
N021 (  4,  5)              [000115] -------N----              |        +--*  ADD       long   $209
N019 (  3,  4)              [000113] -------N----              |        |  +--*  LSH       long   $207
N017 (  2,  3)              [000111] ------------              |        |  |  +--*  CAST      long <- int $205
N016 (  1,  1)              [000139] ------------              |        |  |  |  \--*  LCL_VAR   int    V08 cse1         u:1 $344
N018 (  1,  1)              [000112] -------N----              |        |  |  \--*  CNS_INT   long   3 $141
N020 (  1,  1)              [000114] ------------              |        |  \--*  CNS_INT   long   16 Fseq[#FirstElem] $143
N022 (  1,  1)              [000104] ------------              |        \--*  LCL_VAR   ref    V01 loc0         u:2 $281
N026 (  3,  2)              [000033] ------------              \--*  LCL_VAR   ref    V02 loc1         u:2 (last use) $2cf


Working on the replacement of the CSE #01 use at [000109] in BB01
optValnumCSE morphed tree:
N026 ( 22, 25)              [000035] -A-XG-------              *  ASG       ref    $VN.Void
N024 ( 18, 22)              [000117] -A-XG--N----              +--*  COMMA     ref    $VN.Void
N014 ( 12, 15)              [000110] -A-X--------              |  +--*  ARR_BOUNDS_CHECK_Rng void   $1d7
N012 (  7,  7)              [000138] -A-X--------              |  |  +--*  COMMA     int    $345
N010 (  6,  6)              [000136] -A-X----R---              |  |  |  +--*  ASG       int    $VN.Void
N009 (  1,  1)              [000135] D------N----              |  |  |  |  +--*  LCL_VAR   int    V08 cse1         d:1 $345
N008 (  6,  6)              [000032] -A-X--------              |  |  |  |  \--*  ADD       int    $345
N006 (  4,  4)              [000153] -A-X--------              |  |  |  |     +--*  COMMA     int    $343
N004 (  3,  3)              [000151] -A-X----R---              |  |  |  |     |  +--*  ASG       int    $VN.Void
N003 (  1,  1)              [000150] D------N----              |  |  |  |     |  |  +--*  LCL_VAR   int    V11 cse4         d:1 $343
N002 (  3,  3)              [000030] ---X--------              |  |  |  |     |  |  \--*  ARR_LENGTH int    $343
N001 (  1,  1)              [000029] ------------              |  |  |  |     |  |     \--*  LCL_VAR   ref    V01 loc0         u:2 $281
N005 (  1,  1)              [000152] ------------              |  |  |  |     |  \--*  LCL_VAR   int    V11 cse4         u:1 $343
N007 (  1,  1)              [000031] ------------              |  |  |  |     \--*  CNS_INT   int    -1 $41
N011 (  1,  1)              [000137] ------------              |  |  |  \--*  LCL_VAR   int    V08 cse1         u:1 $345
N013 (  1,  1)              [000154] ------------              |  |  \--*  LCL_VAR   int    V11 cse4         u:1 $301
N023 (  6,  7)              [000034] a---G--N----              |  \--*  IND       ref    $2cf
N022 (  5,  6)              [000116] -------N----              |     \--*  ADD       byref  $382
N020 (  4,  5)              [000115] -------N----              |        +--*  ADD       long   $209
N018 (  3,  4)              [000113] -------N----              |        |  +--*  LSH       long   $207
N016 (  2,  3)              [000111] ------------              |        |  |  +--*  CAST      long <- int $205
N015 (  1,  1)              [000139] ------------              |        |  |  |  \--*  LCL_VAR   int    V08 cse1         u:1 $344
N017 (  1,  1)              [000112] -------N----              |        |  |  \--*  CNS_INT   long   3 $141
N019 (  1,  1)              [000114] ------------              |        |  \--*  CNS_INT   long   16 Fseq[#FirstElem] $143
N021 (  1,  1)              [000104] ------------              |        \--*  LCL_VAR   ref    V01 loc0         u:2 $281
N025 (  3,  2)              [000033] ------------              \--*  LCL_VAR   ref    V02 loc1         u:2 (last use) $2cf


*************** Finishing PHASE Optimize Valnum CSEs

*************** Starting PHASE Assertion prop
*************** In optAssertionPropMain()
Blocks/Trees at start of phase

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..056)        (return)                     i label target jmp hascall gcsafe idxlen new[] nullcheck 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..056) (return), preds={} succs={}

***** BB01
STMT00013 (IL 0x000...  ???)
N014 ( 22, 31) [000059] -ACXG---R---              *  ASG       ref    <l:$1c2, c:$1c1>
N013 (  1,  1) [000058] D------N----              +--*  LCL_VAR   ref    V05 tmp2         d:2 <l:$280, c:$2c0>
N012 ( 22, 31) [000047] -ACXG-------              \--*  COMMA     ref    <l:$1c2, c:$1c1>
N009 ( 18, 19) [000133] -ACXG-------                 +--*  COMMA     long   $201
N007 ( 17, 18) [000131] -ACXG---R---                 |  +--*  ASG       long   $VN.Void
N006 (  1,  1) [000130] D------N----                 |  |  +--*  LCL_VAR   long   V07 cse0         d:1 $201
N005 ( 17, 18) [000046] H-CXG-------                 |  |  \--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE $201
N003 (  2, 10) [000044] ------------ arg0 in rcx     |  |     +--*  CNS_INT   long   0x7ffc7e4c17a0 $140
N004 (  1,  1) [000045] ------------ arg1 in rdx     |  |     \--*  CNS_INT   int    1 $42
N008 (  1,  1) [000132] ------------                 |  \--*  LCL_VAR   long   V07 cse0         u:1 $201
N011 (  4, 12) [000042] n---G-------                 \--*  IND       ref    <l:$280, c:$2c0>
N010 (  2, 10) [000083] I-----------                    \--*  CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock] $240

***** BB01
STMT00014 (IL 0x000...  ???)
N002 (  2,  2) [000057] ---X--------              *  NULLCHECK byte   <l:$1c6, c:$1c5>
N001 (  1,  1) [000056] ------------              \--*  LCL_VAR   ref    V05 tmp2         u:2 <l:$280, c:$2c0>

***** BB01
STMT00012 (IL 0x000...  ???)
N005 ( 16, 10) [000055] --CXG-------              *  CALL      int    System.Threading.WaitHandle.WaitOneNoCheck $102
N003 (  1,  1) [000053] ------------ this in rcx  +--*  LCL_VAR   ref    V05 tmp2         u:2 (last use) <l:$280, c:$2c0>
N004 (  1,  1) [000054] ------------ arg1 in rdx  \--*  CNS_INT   int    -1 $41

***** BB01
STMT00001 (IL 0x005...  ???)
N001 ( 14,  5) [000001] --CXG-------              *  CALL      void   HotkeyedMusicPlayer.ArgsTransport.EnsureRootKeyExists $VN.Void

***** BB01
STMT00002 (IL 0x00A...  ???)
N025 ( 45, 53) [000009] -ACXG---R---              *  ASG       ref    $1cd
N024 (  1,  1) [000008] D------N----              +--*  LCL_VAR   ref    V04 tmp1         d:2 $2c8
N023 ( 45, 53) [000007] -ACXG-------              \--*  CALL help ref    HELPER.CORINFO_HELP_CHKCASTARRAY $1cd
N020 ( 25, 35) [000094] -ACXG---R-L- arg1 SETUP      +--*  ASG       ref    $2c8
N019 (  1,  1) [000093] D------N----                 |  +--*  LCL_VAR   ref    V06 tmp3         d:2 $2c8
N018 ( 25, 35) [000005] -ACXG-------                 |  \--*  CALL      ref    Microsoft.Win32.Registry.GetValue $2c8
N010 (  5, 13) [000143] -A--G------- arg0 in rcx     |     +--*  COMMA     ref    $1c7
N008 (  4, 12) [000141] -A--G---R---                 |     |  +--*  ASG       ref    $VN.Void
N007 (  1,  1) [000140] D------N----                 |     |  |  +--*  LCL_VAR   ref    V09 cse2         d:1 $1c7
N006 (  4, 12) [000087] #---G-------                 |     |  |  \--*  IND       ref    $1c7
N005 (  2, 10) [000086] H-----------                 |     |  |     \--*  CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer" $241
N009 (  1,  1) [000142] ------------                 |     |  \--*  LCL_VAR   ref    V09 cse2         u:1 $1c7
N016 (  5, 13) [000148] -A--G------- arg1 in rdx     |     +--*  COMMA     ref    $1c8
N014 (  4, 12) [000146] -A--G---R---                 |     |  +--*  ASG       ref    $VN.Void
N013 (  1,  1) [000145] D------N----                 |     |  |  +--*  LCL_VAR   ref    V10 cse3         d:1 $1c8
N012 (  4, 12) [000089] #---G-------                 |     |  |  \--*  IND       ref    $1c8
N011 (  2, 10) [000088] H-----------                 |     |  |     \--*  CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance" $242
N015 (  1,  1) [000147] ------------                 |     |  \--*  LCL_VAR   ref    V10 cse3         u:1 $1c8
N017 (  1,  1) [000004] ------------ arg2 in r8      |     \--*  LCL_VAR   ref    V00 arg0         u:1 $80
N021 (  1,  1) [000095] ------------ arg1 in rdx     +--*  LCL_VAR   ref    V06 tmp3         u:2 (last use) $2c8
N022 (  2, 10) [000006] H------N---- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e class $243

***** BB01
STMT00003 (IL   ???...  ???)
N011 ( 22, 24) [000019] -ACXG---R---              *  ASG       ref    $1d1
N010 (  1,  1) [000018] D------N----              +--*  LCL_VAR   ref    V01 loc0         d:2 $281
N009 ( 22, 24) [000017] --CXG-------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWARR_1_OBJ $1d1
N007 (  6,  7) [000016] ---X-------- arg1 in rdx     +--*  CAST      long <- int $203
N006 (  5,  5) [000014] ---X--------                 |  \--*  ADD       int    $342
N004 (  3,  3) [000012] ---X--------                 |     +--*  ARR_LENGTH int    $340
N003 (  1,  1) [000011] ------------                 |     |  \--*  LCL_VAR   ref    V04 tmp1         u:2 $2c8
N005 (  1,  1) [000013] ------------                 |     \--*  CNS_INT   int    1 $42
N008 (  2, 10) [000015] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e class $243

***** BB01
STMT00005 (IL   ???...  ???)
N007 ( 20, 12) [000024] -ACXG---R---              *  ASG       ref    $2cf
N006 (  3,  2) [000023] D------N----              +--*  LCL_VAR   ref    V02 loc1         d:2 $2cf
N005 ( 16,  9) [000062] --CXG-------              \--*  CALL      ref    System.String.Join $2cf
N003 (  1,  1) [000020] ------------ arg1 in rdx     +--*  LCL_VAR   ref    V00 arg0         u:1 (last use) $80
N004 (  1,  1) [000066] ------------ arg0 in rcx     \--*  CNS_INT   int    124 $45

***** BB01
STMT00006 (IL   ???...0x03F)
N007 ( 17, 12) [000027] --CXG-------              *  CALL      void   System.Array.CopyTo $VN.Void
N004 (  1,  1) [000010] ------------ this in rcx  +--*  LCL_VAR   ref    V04 tmp1         u:2 (last use) $2c8
N005 (  1,  1) [000025] ------------ arg1 in rdx  +--*  LCL_VAR   ref    V01 loc0         u:2 $281
N006 (  1,  1) [000026] ------------ arg2 in r8   \--*  CNS_INT   int    0 $40

***** BB01
STMT00007 (IL 0x038...  ???)
N026 ( 22, 25) [000035] -A-XG-------              *  ASG       ref    $VN.Void
N024 ( 18, 22) [000117] -A-XG--N----              +--*  COMMA     ref    $VN.Void
N014 ( 12, 15) [000110] -A-X--------              |  +--*  ARR_BOUNDS_CHECK_Rng void   $1d7
N012 (  7,  7) [000138] -A-X--------              |  |  +--*  COMMA     int    $345
N010 (  6,  6) [000136] -A-X----R---              |  |  |  +--*  ASG       int    $VN.Void
N009 (  1,  1) [000135] D------N----              |  |  |  |  +--*  LCL_VAR   int    V08 cse1         d:1 $345
N008 (  6,  6) [000032] -A-X--------              |  |  |  |  \--*  ADD       int    $345
N006 (  4,  4) [000153] -A-X--------              |  |  |  |     +--*  COMMA     int    $343
N004 (  3,  3) [000151] -A-X----R---              |  |  |  |     |  +--*  ASG       int    $VN.Void
N003 (  1,  1) [000150] D------N----              |  |  |  |     |  |  +--*  LCL_VAR   int    V11 cse4         d:1 $343
N002 (  3,  3) [000030] ---X--------              |  |  |  |     |  |  \--*  ARR_LENGTH int    $343
N001 (  1,  1) [000029] ------------              |  |  |  |     |  |     \--*  LCL_VAR   ref    V01 loc0         u:2 $281
N005 (  1,  1) [000152] ------------              |  |  |  |     |  \--*  LCL_VAR   int    V11 cse4         u:1 $343
N007 (  1,  1) [000031] ------------              |  |  |  |     \--*  CNS_INT   int    -1 $41
N011 (  1,  1) [000137] ------------              |  |  |  \--*  LCL_VAR   int    V08 cse1         u:1 $345
N013 (  1,  1) [000154] ------------              |  |  \--*  LCL_VAR   int    V11 cse4         u:1 $301
N023 (  6,  7) [000034] a---G--N----              |  \--*  IND       ref    $2cf
N022 (  5,  6) [000116] -------N----              |     \--*  ADD       byref  $382
N020 (  4,  5) [000115] -------N----              |        +--*  ADD       long   $209
N018 (  3,  4) [000113] -------N----              |        |  +--*  LSH       long   $207
N016 (  2,  3) [000111] ------------              |        |  |  +--*  CAST      long <- int $205
N015 (  1,  1) [000139] ------------              |        |  |  |  \--*  LCL_VAR   int    V08 cse1         u:1 $344
N017 (  1,  1) [000112] -------N----              |        |  |  \--*  CNS_INT   long   3 $141
N019 (  1,  1) [000114] ------------              |        |  \--*  CNS_INT   long   16 Fseq[#FirstElem] $143
N021 (  1,  1) [000104] ------------              |        \--*  LCL_VAR   ref    V01 loc0         u:2 $281
N025 (  3,  2) [000033] ------------              \--*  LCL_VAR   ref    V02 loc1         u:2 (last use) $2cf

***** BB01
STMT00016 (IL 0x040...  ???)
N009 ( 18, 13) [000071] --CXG-------              *  CALL      void   Microsoft.Win32.Registry.SetValue $VN.Void
N005 (  1,  1) [000144] ------------ arg0 in rcx  +--*  LCL_VAR   ref    V09 cse2         u:1 $1c7
N006 (  1,  1) [000149] ------------ arg1 in rdx  +--*  LCL_VAR   ref    V10 cse3         u:1 $1c8
N007 (  1,  1) [000038] ------------ arg2 in r8   +--*  LCL_VAR   ref    V01 loc0         u:2 (last use) $281
N008 (  1,  1) [000070] ------------ arg3 in r9   \--*  CNS_INT   int    0 $40

***** BB01
STMT00017 (IL 0x050...  ???)
N006 ( 19, 20) [000079] --CXG-------              *  CALL nullcheck void   System.Threading.Mutex.ReleaseMutex $VN.Void
N005 (  5, 13) [000078] ----G------- this in rcx  \--*  COMMA     ref    <l:$1dc, c:$1db>
N002 (  1,  1) [000134] ------------                 +--*  LCL_VAR   long   V07 cse0         u:1 $200
N004 (  4, 12) [000073] n---G-------                 \--*  IND       ref    <l:$285, c:$2da>
N003 (  2, 10) [000128] I-----------                    \--*  CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock] $240

-------------------------------------------------------------------------------------------------------------------
GenTreeNode creates assertion:
N002 (  2,  2) [000057] ---X--------              *  NULLCHECK byte   <l:$1c6, c:$1c5>
In BB01 New Global Constant Assertion: (704, 0) ($2c0,$0) V05.02 != null index=#01, mask=0000000000000001
GenTreeNode creates assertion:
N004 (  3,  3) [000012] ---X--------              *  ARR_LENGTH int    $340
In BB01 New Global Constant Assertion: (712, 0) ($2c8,$0) V04.02 != null index=#02, mask=0000000000000002
GenTreeNode creates assertion:
N002 (  3,  3) [000030] ---X--------              *  ARR_LENGTH int    $343
In BB01 New Global Constant Assertion: (641, 0) ($281,$0) V01.02 != null index=#03, mask=0000000000000004
GenTreeNode creates assertion:
N014 ( 12, 15) [000110] -A-X--------              *  ARR_BOUNDS_CHECK_Rng void   $1d7
In BB01 New Global ArrBnds  Assertion: (0, 0) ($0,$0) [idx: {ADD($41, $301)};len: {ARR_LENGTH($281)}] in range  index=#04, mask=0000000000000008
BB01 valueGen = 000000000000000F
AssertionPropCallback::StartMerge: BB01 in -> 0000000000000000
AssertionPropCallback::EndMerge  : BB01 in -> 0000000000000000

AssertionPropCallback::Changed   : BB01 before out -> 000000000000000F; after out -> 000000000000000F;
		jumpDest before out -> 000000000000000F; jumpDest after out -> 0000000000000000;



BB01 valueIn  = 0000000000000000 valueOut = 000000000000000F
Propagating 0000000000000000 assertions for BB01, stmt STMT00013, tree [000081], tree -> 0
Propagating 0000000000000000 assertions for BB01, stmt STMT00013, tree [000082], tree -> 0
Propagating 0000000000000000 assertions for BB01, stmt STMT00013, tree [000044], tree -> 0
Propagating 0000000000000000 assertions for BB01, stmt STMT00013, tree [000045], tree -> 0
Propagating 0000000000000000 assertions for BB01, stmt STMT00013, tree [000046], tree -> 0
Propagating 0000000000000000 assertions for BB01, stmt STMT00013, tree [000130], tree -> 0
Propagating 0000000000000000 assertions for BB01, stmt STMT00013, tree [000131], tree -> 0
Propagating 0000000000000000 assertions for BB01, stmt STMT00013, tree [000132], tree -> 0
Propagating 0000000000000000 assertions for BB01, stmt STMT00013, tree [000133], tree -> 0
Propagating 0000000000000000 assertions for BB01, stmt STMT00013, tree [000083], tree -> 0
Propagating 0000000000000000 assertions for BB01, stmt STMT00013, tree [000042], tree -> 0
Propagating 0000000000000000 assertions for BB01, stmt STMT00013, tree [000047], tree -> 0
Propagating 0000000000000000 assertions for BB01, stmt STMT00013, tree [000058], tree -> 0
Propagating 0000000000000000 assertions for BB01, stmt STMT00013, tree [000059], tree -> 0
Propagating 0000000000000000 assertions for BB01, stmt STMT00014, tree [000056], tree -> 0
Propagating 0000000000000000 assertions for BB01, stmt STMT00014, tree [000057], tree -> 1
Propagating 0000000000000001 assertions for BB01, stmt STMT00012, tree [000084], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00012, tree [000085], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00012, tree [000053], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00012, tree [000054], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00012, tree [000055], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00001, tree [000001], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00002, tree [000096], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00002, tree [000090], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00002, tree [000091], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00002, tree [000092], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00002, tree [000086], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00002, tree [000087], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00002, tree [000140], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00002, tree [000141], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00002, tree [000142], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00002, tree [000143], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00002, tree [000088], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00002, tree [000089], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00002, tree [000145], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00002, tree [000146], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00002, tree [000147], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00002, tree [000148], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00002, tree [000004], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00002, tree [000005], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00002, tree [000093], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00002, tree [000094], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00002, tree [000095], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00002, tree [000006], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00002, tree [000007], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00002, tree [000008], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00002, tree [000009], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00003, tree [000098], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00003, tree [000097], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00003, tree [000011], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00003, tree [000012], tree -> 2
Propagating 0000000000000003 assertions for BB01, stmt STMT00003, tree [000013], tree -> 0
Propagating 0000000000000003 assertions for BB01, stmt STMT00003, tree [000014], tree -> 0
Propagating 0000000000000003 assertions for BB01, stmt STMT00003, tree [000016], tree -> 0
Propagating 0000000000000003 assertions for BB01, stmt STMT00003, tree [000015], tree -> 0
Propagating 0000000000000003 assertions for BB01, stmt STMT00003, tree [000017], tree -> 0
Propagating 0000000000000003 assertions for BB01, stmt STMT00003, tree [000018], tree -> 0
Propagating 0000000000000003 assertions for BB01, stmt STMT00003, tree [000019], tree -> 0
Propagating 0000000000000003 assertions for BB01, stmt STMT00005, tree [000100], tree -> 0
Propagating 0000000000000003 assertions for BB01, stmt STMT00005, tree [000099], tree -> 0
Propagating 0000000000000003 assertions for BB01, stmt STMT00005, tree [000020], tree -> 0
Propagating 0000000000000003 assertions for BB01, stmt STMT00005, tree [000066], tree -> 0
Propagating 0000000000000003 assertions for BB01, stmt STMT00005, tree [000062], tree -> 0
Propagating 0000000000000003 assertions for BB01, stmt STMT00005, tree [000023], tree -> 0
Propagating 0000000000000003 assertions for BB01, stmt STMT00005, tree [000024], tree -> 0
Propagating 0000000000000003 assertions for BB01, stmt STMT00006, tree [000101], tree -> 0
Propagating 0000000000000003 assertions for BB01, stmt STMT00006, tree [000102], tree -> 0
Propagating 0000000000000003 assertions for BB01, stmt STMT00006, tree [000103], tree -> 0
Propagating 0000000000000003 assertions for BB01, stmt STMT00006, tree [000010], tree -> 0
Propagating 0000000000000003 assertions for BB01, stmt STMT00006, tree [000025], tree -> 0
Propagating 0000000000000003 assertions for BB01, stmt STMT00006, tree [000026], tree -> 0
Propagating 0000000000000003 assertions for BB01, stmt STMT00006, tree [000027], tree -> 0
Propagating 0000000000000003 assertions for BB01, stmt STMT00007, tree [000029], tree -> 0
Propagating 0000000000000003 assertions for BB01, stmt STMT00007, tree [000030], tree -> 3
Propagating 0000000000000007 assertions for BB01, stmt STMT00007, tree [000150], tree -> 0
Propagating 0000000000000007 assertions for BB01, stmt STMT00007, tree [000151], tree -> 0
Propagating 0000000000000007 assertions for BB01, stmt STMT00007, tree [000152], tree -> 0
Propagating 0000000000000007 assertions for BB01, stmt STMT00007, tree [000153], tree -> 0
Propagating 0000000000000007 assertions for BB01, stmt STMT00007, tree [000031], tree -> 0
Propagating 0000000000000007 assertions for BB01, stmt STMT00007, tree [000032], tree -> 0
Propagating 0000000000000007 assertions for BB01, stmt STMT00007, tree [000135], tree -> 0
Propagating 0000000000000007 assertions for BB01, stmt STMT00007, tree [000136], tree -> 0
Propagating 0000000000000007 assertions for BB01, stmt STMT00007, tree [000137], tree -> 0
Propagating 0000000000000007 assertions for BB01, stmt STMT00007, tree [000138], tree -> 0
Propagating 0000000000000007 assertions for BB01, stmt STMT00007, tree [000154], tree -> 0
Propagating 0000000000000007 assertions for BB01, stmt STMT00007, tree [000110], tree -> 4
Propagating 000000000000000F assertions for BB01, stmt STMT00007, tree [000139], tree -> 0
Propagating 000000000000000F assertions for BB01, stmt STMT00007, tree [000111], tree -> 0
Propagating 000000000000000F assertions for BB01, stmt STMT00007, tree [000112], tree -> 0
Propagating 000000000000000F assertions for BB01, stmt STMT00007, tree [000113], tree -> 0
Propagating 000000000000000F assertions for BB01, stmt STMT00007, tree [000114], tree -> 0
Propagating 000000000000000F assertions for BB01, stmt STMT00007, tree [000115], tree -> 0
Propagating 000000000000000F assertions for BB01, stmt STMT00007, tree [000104], tree -> 0
Propagating 000000000000000F assertions for BB01, stmt STMT00007, tree [000116], tree -> 0
Propagating 000000000000000F assertions for BB01, stmt STMT00007, tree [000034], tree -> 0
Propagating 000000000000000F assertions for BB01, stmt STMT00007, tree [000117], tree -> 0
Propagating 000000000000000F assertions for BB01, stmt STMT00007, tree [000033], tree -> 0
Propagating 000000000000000F assertions for BB01, stmt STMT00007, tree [000035], tree -> 0
Propagating 000000000000000F assertions for BB01, stmt STMT00016, tree [000122], tree -> 0
Propagating 000000000000000F assertions for BB01, stmt STMT00016, tree [000123], tree -> 0
Propagating 000000000000000F assertions for BB01, stmt STMT00016, tree [000124], tree -> 0
Propagating 000000000000000F assertions for BB01, stmt STMT00016, tree [000125], tree -> 0
Propagating 000000000000000F assertions for BB01, stmt STMT00016, tree [000144], tree -> 0
Propagating 000000000000000F assertions for BB01, stmt STMT00016, tree [000149], tree -> 0
Propagating 000000000000000F assertions for BB01, stmt STMT00016, tree [000038], tree -> 0
Propagating 000000000000000F assertions for BB01, stmt STMT00016, tree [000070], tree -> 0
Propagating 000000000000000F assertions for BB01, stmt STMT00016, tree [000071], tree -> 0
Propagating 000000000000000F assertions for BB01, stmt STMT00017, tree [000129], tree -> 0
Propagating 000000000000000F assertions for BB01, stmt STMT00017, tree [000134], tree -> 0
Propagating 000000000000000F assertions for BB01, stmt STMT00017, tree [000128], tree -> 0
Propagating 000000000000000F assertions for BB01, stmt STMT00017, tree [000073], tree -> 0
Propagating 000000000000000F assertions for BB01, stmt STMT00017, tree [000078], tree -> 0
Propagating 000000000000000F assertions for BB01, stmt STMT00017, tree [000079], tree -> 0
*************** In fgDebugCheckBBlist

*************** Finishing PHASE Assertion prop

*************** Starting PHASE Optimize index checks
*************** In OptimizeRangeChecks()
Blocks/trees before phase

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..056)        (return)                     i label target jmp hascall gcsafe idxlen new[] nullcheck 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..056) (return), preds={} succs={}

***** BB01
STMT00013 (IL 0x000...  ???)
N014 ( 22, 31) [000059] -ACXG---R---              *  ASG       ref    <l:$1c2, c:$1c1>
N013 (  1,  1) [000058] D------N----              +--*  LCL_VAR   ref    V05 tmp2         d:2 <l:$280, c:$2c0>
N012 ( 22, 31) [000047] -ACXG-------              \--*  COMMA     ref    <l:$1c2, c:$1c1>
N009 ( 18, 19) [000133] -ACXG-------                 +--*  COMMA     long   $201
N007 ( 17, 18) [000131] -ACXG---R---                 |  +--*  ASG       long   $VN.Void
N006 (  1,  1) [000130] D------N----                 |  |  +--*  LCL_VAR   long   V07 cse0         d:1 $201
N005 ( 17, 18) [000046] H-CXG-------                 |  |  \--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE $201
N003 (  2, 10) [000044] ------------ arg0 in rcx     |  |     +--*  CNS_INT   long   0x7ffc7e4c17a0 $140
N004 (  1,  1) [000045] ------------ arg1 in rdx     |  |     \--*  CNS_INT   int    1 $42
N008 (  1,  1) [000132] ------------                 |  \--*  LCL_VAR   long   V07 cse0         u:1 $201
N011 (  4, 12) [000042] n---G-------                 \--*  IND       ref    <l:$280, c:$2c0>
N010 (  2, 10) [000083] I-----------                    \--*  CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock] $240

***** BB01
STMT00014 (IL 0x000...  ???)
N002 (  2,  2) [000057] ---X--------              *  NULLCHECK byte   <l:$1c6, c:$1c5>
N001 (  1,  1) [000056] ------------              \--*  LCL_VAR   ref    V05 tmp2         u:2 <l:$280, c:$2c0>

***** BB01
STMT00012 (IL 0x000...  ???)
N005 ( 16, 10) [000055] --CXG-------              *  CALL      int    System.Threading.WaitHandle.WaitOneNoCheck $102
N003 (  1,  1) [000053] ------------ this in rcx  +--*  LCL_VAR   ref    V05 tmp2         u:2 (last use) <l:$280, c:$2c0>
N004 (  1,  1) [000054] ------------ arg1 in rdx  \--*  CNS_INT   int    -1 $41

***** BB01
STMT00001 (IL 0x005...  ???)
N001 ( 14,  5) [000001] --CXG-------              *  CALL      void   HotkeyedMusicPlayer.ArgsTransport.EnsureRootKeyExists $VN.Void

***** BB01
STMT00002 (IL 0x00A...  ???)
N025 ( 45, 53) [000009] -ACXG---R---              *  ASG       ref    $1cd
N024 (  1,  1) [000008] D------N----              +--*  LCL_VAR   ref    V04 tmp1         d:2 $2c8
N023 ( 45, 53) [000007] -ACXG-------              \--*  CALL help ref    HELPER.CORINFO_HELP_CHKCASTARRAY $1cd
N020 ( 25, 35) [000094] -ACXG---R-L- arg1 SETUP      +--*  ASG       ref    $2c8
N019 (  1,  1) [000093] D------N----                 |  +--*  LCL_VAR   ref    V06 tmp3         d:2 $2c8
N018 ( 25, 35) [000005] -ACXG-------                 |  \--*  CALL      ref    Microsoft.Win32.Registry.GetValue $2c8
N010 (  5, 13) [000143] -A--G------- arg0 in rcx     |     +--*  COMMA     ref    $1c7
N008 (  4, 12) [000141] -A--G---R---                 |     |  +--*  ASG       ref    $VN.Void
N007 (  1,  1) [000140] D------N----                 |     |  |  +--*  LCL_VAR   ref    V09 cse2         d:1 $1c7
N006 (  4, 12) [000087] #---G-------                 |     |  |  \--*  IND       ref    $1c7
N005 (  2, 10) [000086] H-----------                 |     |  |     \--*  CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer" $241
N009 (  1,  1) [000142] ------------                 |     |  \--*  LCL_VAR   ref    V09 cse2         u:1 $1c7
N016 (  5, 13) [000148] -A--G------- arg1 in rdx     |     +--*  COMMA     ref    $1c8
N014 (  4, 12) [000146] -A--G---R---                 |     |  +--*  ASG       ref    $VN.Void
N013 (  1,  1) [000145] D------N----                 |     |  |  +--*  LCL_VAR   ref    V10 cse3         d:1 $1c8
N012 (  4, 12) [000089] #---G-------                 |     |  |  \--*  IND       ref    $1c8
N011 (  2, 10) [000088] H-----------                 |     |  |     \--*  CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance" $242
N015 (  1,  1) [000147] ------------                 |     |  \--*  LCL_VAR   ref    V10 cse3         u:1 $1c8
N017 (  1,  1) [000004] ------------ arg2 in r8      |     \--*  LCL_VAR   ref    V00 arg0         u:1 $80
N021 (  1,  1) [000095] ------------ arg1 in rdx     +--*  LCL_VAR   ref    V06 tmp3         u:2 (last use) $2c8
N022 (  2, 10) [000006] H------N---- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e class $243

***** BB01
STMT00003 (IL   ???...  ???)
N011 ( 22, 24) [000019] -ACXG---R---              *  ASG       ref    $1d1
N010 (  1,  1) [000018] D------N----              +--*  LCL_VAR   ref    V01 loc0         d:2 $281
N009 ( 22, 24) [000017] --CXG-------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWARR_1_OBJ $1d1
N007 (  6,  7) [000016] ---X-------- arg1 in rdx     +--*  CAST      long <- int $203
N006 (  5,  5) [000014] ---X--------                 |  \--*  ADD       int    $342
N004 (  3,  3) [000012] ---X--------                 |     +--*  ARR_LENGTH int    $340
N003 (  1,  1) [000011] ------------                 |     |  \--*  LCL_VAR   ref    V04 tmp1         u:2 $2c8
N005 (  1,  1) [000013] ------------                 |     \--*  CNS_INT   int    1 $42
N008 (  2, 10) [000015] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e class $243

***** BB01
STMT00005 (IL   ???...  ???)
N007 ( 20, 12) [000024] -ACXG---R---              *  ASG       ref    $2cf
N006 (  3,  2) [000023] D------N----              +--*  LCL_VAR   ref    V02 loc1         d:2 $2cf
N005 ( 16,  9) [000062] --CXG-------              \--*  CALL      ref    System.String.Join $2cf
N003 (  1,  1) [000020] ------------ arg1 in rdx     +--*  LCL_VAR   ref    V00 arg0         u:1 (last use) $80
N004 (  1,  1) [000066] ------------ arg0 in rcx     \--*  CNS_INT   int    124 $45

***** BB01
STMT00006 (IL   ???...0x03F)
N007 ( 17, 12) [000027] --CXG-------              *  CALL      void   System.Array.CopyTo $VN.Void
N004 (  1,  1) [000010] ------------ this in rcx  +--*  LCL_VAR   ref    V04 tmp1         u:2 (last use) $2c8
N005 (  1,  1) [000025] ------------ arg1 in rdx  +--*  LCL_VAR   ref    V01 loc0         u:2 $281
N006 (  1,  1) [000026] ------------ arg2 in r8   \--*  CNS_INT   int    0 $40

***** BB01
STMT00007 (IL 0x038...  ???)
N026 ( 22, 25) [000035] -A-XG-------              *  ASG       ref    $VN.Void
N024 ( 18, 22) [000117] -A-XG--N----              +--*  COMMA     ref    $VN.Void
N014 ( 12, 15) [000110] -A-X--------              |  +--*  ARR_BOUNDS_CHECK_Rng void   $1d7
N012 (  7,  7) [000138] -A-X--------              |  |  +--*  COMMA     int    $345
N010 (  6,  6) [000136] -A-X----R---              |  |  |  +--*  ASG       int    $VN.Void
N009 (  1,  1) [000135] D------N----              |  |  |  |  +--*  LCL_VAR   int    V08 cse1         d:1 $345
N008 (  6,  6) [000032] -A-X--------              |  |  |  |  \--*  ADD       int    $345
N006 (  4,  4) [000153] -A-X--------              |  |  |  |     +--*  COMMA     int    $343
N004 (  3,  3) [000151] -A-X----R---              |  |  |  |     |  +--*  ASG       int    $VN.Void
N003 (  1,  1) [000150] D------N----              |  |  |  |     |  |  +--*  LCL_VAR   int    V11 cse4         d:1 $343
N002 (  3,  3) [000030] ---X--------              |  |  |  |     |  |  \--*  ARR_LENGTH int    $343
N001 (  1,  1) [000029] ------------              |  |  |  |     |  |     \--*  LCL_VAR   ref    V01 loc0         u:2 $281
N005 (  1,  1) [000152] ------------              |  |  |  |     |  \--*  LCL_VAR   int    V11 cse4         u:1 $343
N007 (  1,  1) [000031] ------------              |  |  |  |     \--*  CNS_INT   int    -1 $41
N011 (  1,  1) [000137] ------------              |  |  |  \--*  LCL_VAR   int    V08 cse1         u:1 $345
N013 (  1,  1) [000154] ------------              |  |  \--*  LCL_VAR   int    V11 cse4         u:1 $301
N023 (  6,  7) [000034] a---G--N----              |  \--*  IND       ref    $2cf
N022 (  5,  6) [000116] -------N----              |     \--*  ADD       byref  $382
N020 (  4,  5) [000115] -------N----              |        +--*  ADD       long   $209
N018 (  3,  4) [000113] -------N----              |        |  +--*  LSH       long   $207
N016 (  2,  3) [000111] ------------              |        |  |  +--*  CAST      long <- int $205
N015 (  1,  1) [000139] ------------              |        |  |  |  \--*  LCL_VAR   int    V08 cse1         u:1 $344
N017 (  1,  1) [000112] -------N----              |        |  |  \--*  CNS_INT   long   3 $141
N019 (  1,  1) [000114] ------------              |        |  \--*  CNS_INT   long   16 Fseq[#FirstElem] $143
N021 (  1,  1) [000104] ------------              |        \--*  LCL_VAR   ref    V01 loc0         u:2 $281
N025 (  3,  2) [000033] ------------              \--*  LCL_VAR   ref    V02 loc1         u:2 (last use) $2cf

***** BB01
STMT00016 (IL 0x040...  ???)
N009 ( 18, 13) [000071] --CXG-------              *  CALL      void   Microsoft.Win32.Registry.SetValue $VN.Void
N005 (  1,  1) [000144] ------------ arg0 in rcx  +--*  LCL_VAR   ref    V09 cse2         u:1 $1c7
N006 (  1,  1) [000149] ------------ arg1 in rdx  +--*  LCL_VAR   ref    V10 cse3         u:1 $1c8
N007 (  1,  1) [000038] ------------ arg2 in r8   +--*  LCL_VAR   ref    V01 loc0         u:2 (last use) $281
N008 (  1,  1) [000070] ------------ arg3 in r9   \--*  CNS_INT   int    0 $40

***** BB01
STMT00017 (IL 0x050...  ???)
N006 ( 19, 20) [000079] --CXG-------              *  CALL nullcheck void   System.Threading.Mutex.ReleaseMutex $VN.Void
N005 (  5, 13) [000078] ----G------- this in rcx  \--*  COMMA     ref    <l:$1dc, c:$1db>
N002 (  1,  1) [000134] ------------                 +--*  LCL_VAR   long   V07 cse0         u:1 $200
N004 (  4, 12) [000073] n---G-------                 \--*  IND       ref    <l:$285, c:$2da>
N003 (  2, 10) [000128] I-----------                    \--*  CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock] $240

-------------------------------------------------------------------------------------------------------------------
Looking for array size assertions for: $301
ArrSize for lengthVN:301 = 0
[RangeCheck::GetRange] BB01N012 (  7,  7) [000138] -A-X--------              *  COMMA     int    $345
N010 (  6,  6) [000136] -A-X----R---              +--*  ASG       int    $VN.Void
N009 (  1,  1) [000135] D------N----              |  +--*  LCL_VAR   int    V08 cse1         d:1 $345
N008 (  6,  6) [000032] -A-X--------              |  \--*  ADD       int    $345
N006 (  4,  4) [000153] -A-X--------              |     +--*  COMMA     int    $343
N004 (  3,  3) [000151] -A-X----R---              |     |  +--*  ASG       int    $VN.Void
N003 (  1,  1) [000150] D------N----              |     |  |  +--*  LCL_VAR   int    V11 cse4         d:1 $343
N002 (  3,  3) [000030] ---X--------              |     |  |  \--*  ARR_LENGTH int    $343
N001 (  1,  1) [000029] ------------              |     |  |     \--*  LCL_VAR   ref    V01 loc0         u:2 $281
N005 (  1,  1) [000152] ------------              |     |  \--*  LCL_VAR   int    V11 cse4         u:1 $343
N007 (  1,  1) [000031] ------------              |     \--*  CNS_INT   int    -1 $41
N011 (  1,  1) [000137] ------------              \--*  LCL_VAR   int    V08 cse1         u:1 $345
{
   [RangeCheck::GetRange] BB01N011 (  1,  1) [000137] ------------              *  LCL_VAR   int    V08 cse1         u:1 $345
   {
----------------------------------------------------
N010 (  6,  6) [000136] -A-X----R---              *  ASG       int    $VN.Void
N009 (  1,  1) [000135] D------N----              +--*  LCL_VAR   int    V08 cse1         d:1 $345
N008 (  6,  6) [000032] -A-X--------              \--*  ADD       int    $345
N006 (  4,  4) [000153] -A-X--------                 +--*  COMMA     int    $343
N004 (  3,  3) [000151] -A-X----R---                 |  +--*  ASG       int    $VN.Void
N003 (  1,  1) [000150] D------N----                 |  |  +--*  LCL_VAR   int    V11 cse4         d:1 $343
N002 (  3,  3) [000030] ---X--------                 |  |  \--*  ARR_LENGTH int    $343
N001 (  1,  1) [000029] ------------                 |  |     \--*  LCL_VAR   ref    V01 loc0         u:2 $281
N005 (  1,  1) [000152] ------------                 |  \--*  LCL_VAR   int    V11 cse4         u:1 $343
N007 (  1,  1) [000031] ------------                 \--*  CNS_INT   int    -1 $41
----------------------------------------------------
      [RangeCheck::GetRange] BB01N008 (  6,  6) [000032] -A-X--------              *  ADD       int    $345
N006 (  4,  4) [000153] -A-X--------              +--*  COMMA     int    $343
N004 (  3,  3) [000151] -A-X----R---              |  +--*  ASG       int    $VN.Void
N003 (  1,  1) [000150] D------N----              |  |  +--*  LCL_VAR   int    V11 cse4         d:1 $343
N002 (  3,  3) [000030] ---X--------              |  |  \--*  ARR_LENGTH int    $343
N001 (  1,  1) [000029] ------------              |  |     \--*  LCL_VAR   ref    V01 loc0         u:2 $281
N005 (  1,  1) [000152] ------------              |  \--*  LCL_VAR   int    V11 cse4         u:1 $343
N007 (  1,  1) [000031] ------------              \--*  CNS_INT   int    -1 $41
      {
         [RangeCheck::GetRange] BB01N006 (  4,  4) [000153] -A-X--------              *  COMMA     int    $343
N004 (  3,  3) [000151] -A-X----R---              +--*  ASG       int    $VN.Void
N003 (  1,  1) [000150] D------N----              |  +--*  LCL_VAR   int    V11 cse4         d:1 $343
N002 (  3,  3) [000030] ---X--------              |  \--*  ARR_LENGTH int    $343
N001 (  1,  1) [000029] ------------              |     \--*  LCL_VAR   ref    V01 loc0         u:2 $281
N005 (  1,  1) [000152] ------------              \--*  LCL_VAR   int    V11 cse4         u:1 $343
         {
            [RangeCheck::GetRange] BB01N005 (  1,  1) [000152] ------------              *  LCL_VAR   int    V11 cse4         u:1 $343
            {
----------------------------------------------------
N004 (  3,  3) [000151] -A-X----R---              *  ASG       int    $VN.Void
N003 (  1,  1) [000150] D------N----              +--*  LCL_VAR   int    V11 cse4         d:1 $343
N002 (  3,  3) [000030] ---X--------              \--*  ARR_LENGTH int    $343
N001 (  1,  1) [000029] ------------                 \--*  LCL_VAR   ref    V01 loc0         u:2 $281
----------------------------------------------------
               [RangeCheck::GetRange] BB01N002 (  3,  3) [000030] ---X--------              *  ARR_LENGTH int    $343
N001 (  1,  1) [000029] ------------              \--*  LCL_VAR   ref    V01 loc0         u:2 $281
               {
                  Computed Range [000030] => <Unknown, Unknown>
               }
Merging assertions from pred edges of BB01 for op [000152] $301
               Computed Range [000152] => <Unknown, Unknown>
            }
            Computed Range [000153] => <Unknown, Unknown>
         }
Merging assertions from pred edges of BB01 for op [000153] $301
         [RangeCheck::GetRange] BB01N007 (  1,  1) [000031] ------------              *  CNS_INT   int    -1 $41
         {
            Computed Range [000031] => <-1, -1>
         }
Merging assertions from pred edges of BB01 for op [000031] $41
BinOp add ranges <Unknown, Unknown> <-1, -1> = <Unknown, Unknown>
         Computed Range [000032] => <Unknown, Unknown>
      }
Merging assertions from pred edges of BB01 for op [000137] $344
      Computed Range [000137] => <Unknown, Unknown>
   }
   Computed Range [000138] => <Unknown, Unknown>
}

*************** Finishing PHASE Optimize index checks

*************** Starting PHASE Insert GC Polls

*************** Finishing PHASE Insert GC Polls [no changes]

*************** Starting PHASE Determine first cold block

*************** In fgDetermineFirstColdBlock()
No procedure splitting will be done for this method

*************** Finishing PHASE Determine first cold block
Trees before Rationalize IR

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..056)        (return)                     i label target jmp hascall gcsafe idxlen new[] nullcheck 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..056) (return), preds={} succs={}

***** BB01
STMT00013 (IL 0x000...  ???)
N014 ( 22, 31) [000059] -ACXG---R---              *  ASG       ref    <l:$1c2, c:$1c1>
N013 (  1,  1) [000058] D------N----              +--*  LCL_VAR   ref    V05 tmp2         d:2 <l:$280, c:$2c0>
N012 ( 22, 31) [000047] -ACXG-------              \--*  COMMA     ref    <l:$1c2, c:$1c1>
N009 ( 18, 19) [000133] -ACXG-------                 +--*  COMMA     long   $201
N007 ( 17, 18) [000131] -ACXG---R---                 |  +--*  ASG       long   $VN.Void
N006 (  1,  1) [000130] D------N----                 |  |  +--*  LCL_VAR   long   V07 cse0         d:1 $201
N005 ( 17, 18) [000046] H-CXG-------                 |  |  \--*  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE $201
N003 (  2, 10) [000044] ------------ arg0 in rcx     |  |     +--*  CNS_INT   long   0x7ffc7e4c17a0 $140
N004 (  1,  1) [000045] ------------ arg1 in rdx     |  |     \--*  CNS_INT   int    1 $42
N008 (  1,  1) [000132] ------------                 |  \--*  LCL_VAR   long   V07 cse0         u:1 $201
N011 (  4, 12) [000042] n---G-------                 \--*  IND       ref    <l:$280, c:$2c0>
N010 (  2, 10) [000083] I-----------                    \--*  CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock] $240

***** BB01
STMT00014 (IL 0x000...  ???)
N002 (  2,  2) [000057] ---X--------              *  NULLCHECK byte   <l:$1c6, c:$1c5>
N001 (  1,  1) [000056] ------------              \--*  LCL_VAR   ref    V05 tmp2         u:2 <l:$280, c:$2c0>

***** BB01
STMT00012 (IL 0x000...  ???)
N005 ( 16, 10) [000055] --CXG-------              *  CALL      int    System.Threading.WaitHandle.WaitOneNoCheck $102
N003 (  1,  1) [000053] ------------ this in rcx  +--*  LCL_VAR   ref    V05 tmp2         u:2 (last use) <l:$280, c:$2c0>
N004 (  1,  1) [000054] ------------ arg1 in rdx  \--*  CNS_INT   int    -1 $41

***** BB01
STMT00001 (IL 0x005...  ???)
N001 ( 14,  5) [000001] --CXG-------              *  CALL      void   HotkeyedMusicPlayer.ArgsTransport.EnsureRootKeyExists $VN.Void

***** BB01
STMT00002 (IL 0x00A...  ???)
N025 ( 45, 53) [000009] -ACXG---R---              *  ASG       ref    $1cd
N024 (  1,  1) [000008] D------N----              +--*  LCL_VAR   ref    V04 tmp1         d:2 $2c8
N023 ( 45, 53) [000007] -ACXG-------              \--*  CALL help ref    HELPER.CORINFO_HELP_CHKCASTARRAY $1cd
N020 ( 25, 35) [000094] -ACXG---R-L- arg1 SETUP      +--*  ASG       ref    $2c8
N019 (  1,  1) [000093] D------N----                 |  +--*  LCL_VAR   ref    V06 tmp3         d:2 $2c8
N018 ( 25, 35) [000005] -ACXG-------                 |  \--*  CALL      ref    Microsoft.Win32.Registry.GetValue $2c8
N010 (  5, 13) [000143] -A--G------- arg0 in rcx     |     +--*  COMMA     ref    $1c7
N008 (  4, 12) [000141] -A--G---R---                 |     |  +--*  ASG       ref    $VN.Void
N007 (  1,  1) [000140] D------N----                 |     |  |  +--*  LCL_VAR   ref    V09 cse2         d:1 $1c7
N006 (  4, 12) [000087] #---G-------                 |     |  |  \--*  IND       ref    $1c7
N005 (  2, 10) [000086] H-----------                 |     |  |     \--*  CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer" $241
N009 (  1,  1) [000142] ------------                 |     |  \--*  LCL_VAR   ref    V09 cse2         u:1 $1c7
N016 (  5, 13) [000148] -A--G------- arg1 in rdx     |     +--*  COMMA     ref    $1c8
N014 (  4, 12) [000146] -A--G---R---                 |     |  +--*  ASG       ref    $VN.Void
N013 (  1,  1) [000145] D------N----                 |     |  |  +--*  LCL_VAR   ref    V10 cse3         d:1 $1c8
N012 (  4, 12) [000089] #---G-------                 |     |  |  \--*  IND       ref    $1c8
N011 (  2, 10) [000088] H-----------                 |     |  |     \--*  CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance" $242
N015 (  1,  1) [000147] ------------                 |     |  \--*  LCL_VAR   ref    V10 cse3         u:1 $1c8
N017 (  1,  1) [000004] ------------ arg2 in r8      |     \--*  LCL_VAR   ref    V00 arg0         u:1 $80
N021 (  1,  1) [000095] ------------ arg1 in rdx     +--*  LCL_VAR   ref    V06 tmp3         u:2 (last use) $2c8
N022 (  2, 10) [000006] H------N---- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e class $243

***** BB01
STMT00003 (IL   ???...  ???)
N011 ( 22, 24) [000019] -ACXG---R---              *  ASG       ref    $1d1
N010 (  1,  1) [000018] D------N----              +--*  LCL_VAR   ref    V01 loc0         d:2 $281
N009 ( 22, 24) [000017] --CXG-------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWARR_1_OBJ $1d1
N007 (  6,  7) [000016] ---X-------- arg1 in rdx     +--*  CAST      long <- int $203
N006 (  5,  5) [000014] ---X--------                 |  \--*  ADD       int    $342
N004 (  3,  3) [000012] ---X--------                 |     +--*  ARR_LENGTH int    $340
N003 (  1,  1) [000011] ------------                 |     |  \--*  LCL_VAR   ref    V04 tmp1         u:2 $2c8
N005 (  1,  1) [000013] ------------                 |     \--*  CNS_INT   int    1 $42
N008 (  2, 10) [000015] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e class $243

***** BB01
STMT00005 (IL   ???...  ???)
N007 ( 20, 12) [000024] -ACXG---R---              *  ASG       ref    $2cf
N006 (  3,  2) [000023] D------N----              +--*  LCL_VAR   ref    V02 loc1         d:2 $2cf
N005 ( 16,  9) [000062] --CXG-------              \--*  CALL      ref    System.String.Join $2cf
N003 (  1,  1) [000020] ------------ arg1 in rdx     +--*  LCL_VAR   ref    V00 arg0         u:1 (last use) $80
N004 (  1,  1) [000066] ------------ arg0 in rcx     \--*  CNS_INT   int    124 $45

***** BB01
STMT00006 (IL   ???...0x03F)
N007 ( 17, 12) [000027] --CXG-------              *  CALL      void   System.Array.CopyTo $VN.Void
N004 (  1,  1) [000010] ------------ this in rcx  +--*  LCL_VAR   ref    V04 tmp1         u:2 (last use) $2c8
N005 (  1,  1) [000025] ------------ arg1 in rdx  +--*  LCL_VAR   ref    V01 loc0         u:2 $281
N006 (  1,  1) [000026] ------------ arg2 in r8   \--*  CNS_INT   int    0 $40

***** BB01
STMT00007 (IL 0x038...  ???)
N026 ( 22, 25) [000035] -A-XG-------              *  ASG       ref    $VN.Void
N024 ( 18, 22) [000117] -A-XG--N----              +--*  COMMA     ref    $VN.Void
N014 ( 12, 15) [000110] -A-X--------              |  +--*  ARR_BOUNDS_CHECK_Rng void   $1d7
N012 (  7,  7) [000138] -A-X--------              |  |  +--*  COMMA     int    $345
N010 (  6,  6) [000136] -A-X----R---              |  |  |  +--*  ASG       int    $VN.Void
N009 (  1,  1) [000135] D------N----              |  |  |  |  +--*  LCL_VAR   int    V08 cse1         d:1 $345
N008 (  6,  6) [000032] -A-X--------              |  |  |  |  \--*  ADD       int    $345
N006 (  4,  4) [000153] -A-X--------              |  |  |  |     +--*  COMMA     int    $343
N004 (  3,  3) [000151] -A-X----R---              |  |  |  |     |  +--*  ASG       int    $VN.Void
N003 (  1,  1) [000150] D------N----              |  |  |  |     |  |  +--*  LCL_VAR   int    V11 cse4         d:1 $343
N002 (  3,  3) [000030] ---X--------              |  |  |  |     |  |  \--*  ARR_LENGTH int    $343
N001 (  1,  1) [000029] ------------              |  |  |  |     |  |     \--*  LCL_VAR   ref    V01 loc0         u:2 $281
N005 (  1,  1) [000152] ------------              |  |  |  |     |  \--*  LCL_VAR   int    V11 cse4         u:1 $343
N007 (  1,  1) [000031] ------------              |  |  |  |     \--*  CNS_INT   int    -1 $41
N011 (  1,  1) [000137] ------------              |  |  |  \--*  LCL_VAR   int    V08 cse1         u:1 $345
N013 (  1,  1) [000154] ------------              |  |  \--*  LCL_VAR   int    V11 cse4         u:1 $301
N023 (  6,  7) [000034] a---G--N----              |  \--*  IND       ref    $2cf
N022 (  5,  6) [000116] -------N----              |     \--*  ADD       byref  $382
N020 (  4,  5) [000115] -------N----              |        +--*  ADD       long   $209
N018 (  3,  4) [000113] -------N----              |        |  +--*  LSH       long   $207
N016 (  2,  3) [000111] ------------              |        |  |  +--*  CAST      long <- int $205
N015 (  1,  1) [000139] ------------              |        |  |  |  \--*  LCL_VAR   int    V08 cse1         u:1 $344
N017 (  1,  1) [000112] -------N----              |        |  |  \--*  CNS_INT   long   3 $141
N019 (  1,  1) [000114] ------------              |        |  \--*  CNS_INT   long   16 Fseq[#FirstElem] $143
N021 (  1,  1) [000104] ------------              |        \--*  LCL_VAR   ref    V01 loc0         u:2 $281
N025 (  3,  2) [000033] ------------              \--*  LCL_VAR   ref    V02 loc1         u:2 (last use) $2cf

***** BB01
STMT00016 (IL 0x040...  ???)
N009 ( 18, 13) [000071] --CXG-------              *  CALL      void   Microsoft.Win32.Registry.SetValue $VN.Void
N005 (  1,  1) [000144] ------------ arg0 in rcx  +--*  LCL_VAR   ref    V09 cse2         u:1 $1c7
N006 (  1,  1) [000149] ------------ arg1 in rdx  +--*  LCL_VAR   ref    V10 cse3         u:1 $1c8
N007 (  1,  1) [000038] ------------ arg2 in r8   +--*  LCL_VAR   ref    V01 loc0         u:2 (last use) $281
N008 (  1,  1) [000070] ------------ arg3 in r9   \--*  CNS_INT   int    0 $40

***** BB01
STMT00017 (IL 0x050...  ???)
N006 ( 19, 20) [000079] --CXG-------              *  CALL nullcheck void   System.Threading.Mutex.ReleaseMutex $VN.Void
N005 (  5, 13) [000078] ----G------- this in rcx  \--*  COMMA     ref    <l:$1dc, c:$1db>
N002 (  1,  1) [000134] ------------                 +--*  LCL_VAR   long   V07 cse0         u:1 $200
N004 (  4, 12) [000073] n---G-------                 \--*  IND       ref    <l:$285, c:$2da>
N003 (  2, 10) [000128] I-----------                    \--*  CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock] $240

-------------------------------------------------------------------------------------------------------------------

*************** Starting PHASE Rationalize IR
rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N007 ( 17, 18) [000131] DACXG-------              *  STORE_LCL_VAR long   V07 cse0         d:1

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N014 ( 22, 31) [000059] DACXG-------              *  STORE_LCL_VAR ref    V05 tmp2         d:2

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N008 (  4, 12) [000141] DA--G-------              *  STORE_LCL_VAR ref    V09 cse2         d:1

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N014 (  4, 12) [000146] DA--G-------              *  STORE_LCL_VAR ref    V10 cse3         d:1

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N020 ( 25, 35) [000094] DACXG-----L-              *  STORE_LCL_VAR ref    V06 tmp3         d:2

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N025 ( 45, 53) [000009] DACXG-------              *  STORE_LCL_VAR ref    V04 tmp1         d:2

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N011 ( 22, 24) [000019] DACXG-------              *  STORE_LCL_VAR ref    V01 loc0         d:2

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N007 ( 20, 12) [000024] DACXG-------              *  STORE_LCL_VAR ref    V02 loc1         d:2

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N004 (  3,  3) [000151] DA-X--------              *  STORE_LCL_VAR int    V11 cse4         d:1

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N010 (  6,  6) [000136] DA-X--------              *  STORE_LCL_VAR int    V08 cse1         d:1


*************** Finishing PHASE Rationalize IR
Trees after Rationalize IR

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..056)        (return)                     i label target jmp hascall gcsafe idxlen new[] nullcheck LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..056) (return), preds={} succs={}
               [000155] ------------                 IL_OFFSET void   IL offset: 0x0
N003 (  2, 10) [000044] ------------        t44 =    CNS_INT   long   0x7ffc7e4c17a0 $140
N004 (  1,  1) [000045] ------------        t45 =    CNS_INT   int    1 $42
                                                  /--*  t44    long   arg0 in rcx
                                                  +--*  t45    int    arg1 in rdx
N005 ( 17, 18) [000046] H-CXG-------        t46 = *  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE $201
                                                  /--*  t46    long   
N007 ( 17, 18) [000131] DA-XG-------              *  STORE_LCL_VAR long   V07 cse0         d:1
N010 (  2, 10) [000083] I-----------        t83 =    CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock] $240
                                                  /--*  t83    long   
N011 (  4, 12) [000042] n---G-------        t42 = *  IND       ref    <l:$280, c:$2c0>
                                                  /--*  t42    ref    
N014 ( 22, 31) [000059] DA-XG-------              *  STORE_LCL_VAR ref    V05 tmp2         d:2
               [000156] ------------                 IL_OFFSET void   IL offset: 0x0
N001 (  1,  1) [000056] ------------        t56 =    LCL_VAR   ref    V05 tmp2         u:2 <l:$280, c:$2c0>
                                                  /--*  t56    ref    
N002 (  2,  2) [000057] ---X--------              *  NULLCHECK byte   <l:$1c6, c:$1c5>
               [000157] ------------                 IL_OFFSET void   IL offset: 0x0
N003 (  1,  1) [000053] ------------        t53 =    LCL_VAR   ref    V05 tmp2         u:2 (last use) <l:$280, c:$2c0>
N004 (  1,  1) [000054] ------------        t54 =    CNS_INT   int    -1 $41
                                                  /--*  t53    ref    this in rcx
                                                  +--*  t54    int    arg1 in rdx
N005 ( 16, 10) [000055] --CXG-------        t55 = *  CALL      int    System.Threading.WaitHandle.WaitOneNoCheck $102
               [000158] ------------                 IL_OFFSET void   IL offset: 0x5
N001 ( 14,  5) [000001] --CXG-------                 CALL      void   HotkeyedMusicPlayer.ArgsTransport.EnsureRootKeyExists $VN.Void
               [000159] ------------                 IL_OFFSET void   IL offset: 0xa
N005 (  2, 10) [000086] H-----------        t86 =    CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer" $241
                                                  /--*  t86    long   
N006 (  4, 12) [000087] #---G-------        t87 = *  IND       ref    $1c7
                                                  /--*  t87    ref    
N008 (  4, 12) [000141] DA--G-------              *  STORE_LCL_VAR ref    V09 cse2         d:1
N009 (  1,  1) [000142] ------------       t142 =    LCL_VAR   ref    V09 cse2         u:1 $1c7
N011 (  2, 10) [000088] H-----------        t88 =    CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance" $242
                                                  /--*  t88    long   
N012 (  4, 12) [000089] #---G-------        t89 = *  IND       ref    $1c8
                                                  /--*  t89    ref    
N014 (  4, 12) [000146] DA--G-------              *  STORE_LCL_VAR ref    V10 cse3         d:1
N015 (  1,  1) [000147] ------------       t147 =    LCL_VAR   ref    V10 cse3         u:1 $1c8
N017 (  1,  1) [000004] ------------         t4 =    LCL_VAR   ref    V00 arg0         u:1 $80
                                                  /--*  t142   ref    arg0 in rcx
                                                  +--*  t147   ref    arg1 in rdx
                                                  +--*  t4     ref    arg2 in r8
N018 ( 25, 35) [000005] --CXG-------         t5 = *  CALL      ref    Microsoft.Win32.Registry.GetValue $2c8
                                                  /--*  t5     ref    
N020 ( 25, 35) [000094] DA-XG-----L-              *  STORE_LCL_VAR ref    V06 tmp3         d:2
N021 (  1,  1) [000095] ------------        t95 =    LCL_VAR   ref    V06 tmp3         u:2 (last use) $2c8
N022 (  2, 10) [000006] H------N----         t6 =    CNS_INT(h) long   0xd1ffab1e class $243
                                                  /--*  t95    ref    arg1 in rdx
                                                  +--*  t6     long   arg0 in rcx
N023 ( 45, 53) [000007] --CXG-------         t7 = *  CALL help ref    HELPER.CORINFO_HELP_CHKCASTARRAY $1cd
                                                  /--*  t7     ref    
N025 ( 45, 53) [000009] DA-XG-------              *  STORE_LCL_VAR ref    V04 tmp1         d:2
N003 (  1,  1) [000011] ------------        t11 =    LCL_VAR   ref    V04 tmp1         u:2 $2c8
                                                  /--*  t11    ref    
N004 (  3,  3) [000012] ---X--------        t12 = *  ARR_LENGTH int    $340
N005 (  1,  1) [000013] ------------        t13 =    CNS_INT   int    1 $42
                                                  /--*  t12    int    
                                                  +--*  t13    int    
N006 (  5,  5) [000014] ---X--------        t14 = *  ADD       int    $342
                                                  /--*  t14    int    
N007 (  6,  7) [000016] ---X--------        t16 = *  CAST      long <- int $203
N008 (  2, 10) [000015] H-----------        t15 =    CNS_INT(h) long   0xd1ffab1e class $243
                                                  /--*  t16    long   arg1 in rdx
                                                  +--*  t15    long   arg0 in rcx
N009 ( 22, 24) [000017] --CXG-------        t17 = *  CALL help ref    HELPER.CORINFO_HELP_NEWARR_1_OBJ $1d1
                                                  /--*  t17    ref    
N011 ( 22, 24) [000019] DA-XG-------              *  STORE_LCL_VAR ref    V01 loc0         d:2
N003 (  1,  1) [000020] ------------        t20 =    LCL_VAR   ref    V00 arg0         u:1 (last use) $80
N004 (  1,  1) [000066] ------------        t66 =    CNS_INT   int    124 $45
                                                  /--*  t20    ref    arg1 in rdx
                                                  +--*  t66    int    arg0 in rcx
N005 ( 16,  9) [000062] --CXG-------        t62 = *  CALL      ref    System.String.Join $2cf
                                                  /--*  t62    ref    
N007 ( 20, 12) [000024] DA-XG-------              *  STORE_LCL_VAR ref    V02 loc1         d:2
N004 (  1,  1) [000010] ------------        t10 =    LCL_VAR   ref    V04 tmp1         u:2 (last use) $2c8
N005 (  1,  1) [000025] ------------        t25 =    LCL_VAR   ref    V01 loc0         u:2 $281
N006 (  1,  1) [000026] ------------        t26 =    CNS_INT   int    0 $40
                                                  /--*  t10    ref    this in rcx
                                                  +--*  t25    ref    arg1 in rdx
                                                  +--*  t26    int    arg2 in r8
N007 ( 17, 12) [000027] --CXG-------              *  CALL      void   System.Array.CopyTo $VN.Void
               [000160] ------------                 IL_OFFSET void   IL offset: 0x38
N001 (  1,  1) [000029] ------------        t29 =    LCL_VAR   ref    V01 loc0         u:2 $281
                                                  /--*  t29    ref    
N002 (  3,  3) [000030] ---X--------        t30 = *  ARR_LENGTH int    $343
                                                  /--*  t30    int    
N004 (  3,  3) [000151] DA-X--------              *  STORE_LCL_VAR int    V11 cse4         d:1
N005 (  1,  1) [000152] ------------       t152 =    LCL_VAR   int    V11 cse4         u:1 $343
N007 (  1,  1) [000031] ------------        t31 =    CNS_INT   int    -1 $41
                                                  /--*  t152   int    
                                                  +--*  t31    int    
N008 (  6,  6) [000032] ---X--------        t32 = *  ADD       int    $345
                                                  /--*  t32    int    
N010 (  6,  6) [000136] DA-X--------              *  STORE_LCL_VAR int    V08 cse1         d:1
N011 (  1,  1) [000137] ------------       t137 =    LCL_VAR   int    V08 cse1         u:1 $345
N013 (  1,  1) [000154] ------------       t154 =    LCL_VAR   int    V11 cse4         u:1 $301
                                                  /--*  t137   int    
                                                  +--*  t154   int    
N014 ( 12, 15) [000110] ---X--------              *  ARR_BOUNDS_CHECK_Rng void   $1d7
N015 (  1,  1) [000139] ------------       t139 =    LCL_VAR   int    V08 cse1         u:1 $344
                                                  /--*  t139   int    
N016 (  2,  3) [000111] ------------       t111 = *  CAST      long <- int $205
N017 (  1,  1) [000112] -------N----       t112 =    CNS_INT   long   3 $141
                                                  /--*  t111   long   
                                                  +--*  t112   long   
N018 (  3,  4) [000113] -------N----       t113 = *  LSH       long   $207
N019 (  1,  1) [000114] ------------       t114 =    CNS_INT   long   16 Fseq[#FirstElem] $143
                                                  /--*  t113   long   
                                                  +--*  t114   long   
N020 (  4,  5) [000115] -------N----       t115 = *  ADD       long   $209
N021 (  1,  1) [000104] ------------       t104 =    LCL_VAR   ref    V01 loc0         u:2 $281
                                                  /--*  t115   long   
                                                  +--*  t104   ref    
N022 (  5,  6) [000116] -------N----       t116 = *  ADD       byref  $382
N025 (  3,  2) [000033] ------------        t33 =    LCL_VAR   ref    V02 loc1         u:2 (last use) $2cf
                                                  /--*  t116   byref  
                                                  +--*  t33    ref    
               [000161] -A-XG-------              *  STOREIND  ref   
               [000162] ------------                 IL_OFFSET void   IL offset: 0x40
N005 (  1,  1) [000144] ------------       t144 =    LCL_VAR   ref    V09 cse2         u:1 $1c7
N006 (  1,  1) [000149] ------------       t149 =    LCL_VAR   ref    V10 cse3         u:1 $1c8
N007 (  1,  1) [000038] ------------        t38 =    LCL_VAR   ref    V01 loc0         u:2 (last use) $281
N008 (  1,  1) [000070] ------------        t70 =    CNS_INT   int    0 $40
                                                  /--*  t144   ref    arg0 in rcx
                                                  +--*  t149   ref    arg1 in rdx
                                                  +--*  t38    ref    arg2 in r8
                                                  +--*  t70    int    arg3 in r9
N009 ( 18, 13) [000071] --CXG-------              *  CALL      void   Microsoft.Win32.Registry.SetValue $VN.Void
               [000163] ------------                 IL_OFFSET void   IL offset: 0x50
N003 (  2, 10) [000128] I-----------       t128 =    CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock] $240
                                                  /--*  t128   long   
N004 (  4, 12) [000073] n---G-------        t73 = *  IND       ref    <l:$285, c:$2da>
                                                  /--*  t73    ref    this in rcx
N006 ( 19, 20) [000079] --CXG-------              *  CALL nullcheck void   System.Threading.Mutex.ReleaseMutex $VN.Void

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist

*************** Starting PHASE Do 'simple' lowering
Bumping outgoingArgSpaceSize to 32 for call [000046]
outgoingArgSpaceSize 32 sufficient for call [000055], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000001], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000005], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000007], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000017], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000062], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000027], which needs 32
*** Computing fgRngChkTarget for block BB01
fgNewBBinRegion(jumpKind=3, tryIndex=0, hndIndex=0, putInFilter=false, runRarely=true, insertAtEnd=true): inserting after BB01
New Basic Block BB02 [0006] created.

fgAddCodeRef - Add BB in non-EH region for RNGCHK_FAIL, new block BB02 [0006]
Initializing arg info for 168.CALL:
ArgTable for 168.CALL after fgInitArgInfo:

Morphing args for 168.CALL:
argSlots=0, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32
ArgTable for 168.CALL after fgMorphArgs:

outgoingArgSpaceSize 32 sufficient for call [000071], which needs 32
outgoingArgSpaceSize not impacted by fast tail call [000079]
outgoingArgSpaceSize 32 sufficient for call [000168], which needs 32

After fgSimpleLowering() added some RngChk throw blocks
-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..056)        (return)                     i label target jmp hascall gcsafe idxlen new[] nullcheck LIR 
BB02 [0006]  0                             0       [???..???)        (throw )                     keep i internal rare label target LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table is empty


*************** Finishing PHASE Do 'simple' lowering
*************** In fgDebugCheckBBlist
Trees before Lowering nodeinfo

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..056)        (return)                     i label target jmp hascall gcsafe idxlen new[] nullcheck LIR 
BB02 [0006]  0                             0       [???..???)        (throw )                     keep i internal rare label target LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..056) (return), preds={} succs={}
               [000155] ------------                 IL_OFFSET void   IL offset: 0x0
N003 (  2, 10) [000044] ------------        t44 =    CNS_INT   long   0x7ffc7e4c17a0 $140
N004 (  1,  1) [000045] ------------        t45 =    CNS_INT   int    1 $42
                                                  /--*  t44    long   arg0 in rcx
                                                  +--*  t45    int    arg1 in rdx
N005 ( 17, 18) [000046] H-CXG-------        t46 = *  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE $201
                                                  /--*  t46    long   
N007 ( 17, 18) [000131] DA-XG-------              *  STORE_LCL_VAR long   V07 cse0         d:1
N010 (  2, 10) [000083] I-----------        t83 =    CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock] $240
                                                  /--*  t83    long   
N011 (  4, 12) [000042] n---G-------        t42 = *  IND       ref    <l:$280, c:$2c0>
                                                  /--*  t42    ref    
N014 ( 22, 31) [000059] DA-XG-------              *  STORE_LCL_VAR ref    V05 tmp2         d:2
               [000156] ------------                 IL_OFFSET void   IL offset: 0x0
N001 (  1,  1) [000056] ------------        t56 =    LCL_VAR   ref    V05 tmp2         u:2 <l:$280, c:$2c0>
                                                  /--*  t56    ref    
N002 (  2,  2) [000057] ---X--------              *  NULLCHECK byte   <l:$1c6, c:$1c5>
               [000157] ------------                 IL_OFFSET void   IL offset: 0x0
N003 (  1,  1) [000053] ------------        t53 =    LCL_VAR   ref    V05 tmp2         u:2 (last use) <l:$280, c:$2c0>
N004 (  1,  1) [000054] ------------        t54 =    CNS_INT   int    -1 $41
                                                  /--*  t53    ref    this in rcx
                                                  +--*  t54    int    arg1 in rdx
N005 ( 16, 10) [000055] --CXG-------        t55 = *  CALL      int    System.Threading.WaitHandle.WaitOneNoCheck $102
               [000158] ------------                 IL_OFFSET void   IL offset: 0x5
N001 ( 14,  5) [000001] --CXG-------                 CALL      void   HotkeyedMusicPlayer.ArgsTransport.EnsureRootKeyExists $VN.Void
               [000159] ------------                 IL_OFFSET void   IL offset: 0xa
N005 (  2, 10) [000086] H-----------        t86 =    CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer" $241
                                                  /--*  t86    long   
N006 (  4, 12) [000087] #---G-------        t87 = *  IND       ref    $1c7
                                                  /--*  t87    ref    
N008 (  4, 12) [000141] DA--G-------              *  STORE_LCL_VAR ref    V09 cse2         d:1
N009 (  1,  1) [000142] ------------       t142 =    LCL_VAR   ref    V09 cse2         u:1 $1c7
N011 (  2, 10) [000088] H-----------        t88 =    CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance" $242
                                                  /--*  t88    long   
N012 (  4, 12) [000089] #---G-------        t89 = *  IND       ref    $1c8
                                                  /--*  t89    ref    
N014 (  4, 12) [000146] DA--G-------              *  STORE_LCL_VAR ref    V10 cse3         d:1
N015 (  1,  1) [000147] ------------       t147 =    LCL_VAR   ref    V10 cse3         u:1 $1c8
N017 (  1,  1) [000004] ------------         t4 =    LCL_VAR   ref    V00 arg0         u:1 $80
                                                  /--*  t142   ref    arg0 in rcx
                                                  +--*  t147   ref    arg1 in rdx
                                                  +--*  t4     ref    arg2 in r8
N018 ( 25, 35) [000005] --CXG-------         t5 = *  CALL      ref    Microsoft.Win32.Registry.GetValue $2c8
                                                  /--*  t5     ref    
N020 ( 25, 35) [000094] DA-XG-----L-              *  STORE_LCL_VAR ref    V06 tmp3         d:2
N021 (  1,  1) [000095] ------------        t95 =    LCL_VAR   ref    V06 tmp3         u:2 (last use) $2c8
N022 (  2, 10) [000006] H------N----         t6 =    CNS_INT(h) long   0xd1ffab1e class $243
                                                  /--*  t95    ref    arg1 in rdx
                                                  +--*  t6     long   arg0 in rcx
N023 ( 45, 53) [000007] --CXG-------         t7 = *  CALL help ref    HELPER.CORINFO_HELP_CHKCASTARRAY $1cd
                                                  /--*  t7     ref    
N025 ( 45, 53) [000009] DA-XG-------              *  STORE_LCL_VAR ref    V04 tmp1         d:2
N003 (  1,  1) [000011] ------------        t11 =    LCL_VAR   ref    V04 tmp1         u:2 $2c8
               [000164] ------------       t164 =    CNS_INT   long   8
                                                  /--*  t11    ref    
                                                  +--*  t164   long   
               [000165] ------------       t165 = *  ADD       ref   
                                                  /--*  t165   ref    
N004 (  3,  3) [000012] ---X--------        t12 = *  IND       int    $340
N005 (  1,  1) [000013] ------------        t13 =    CNS_INT   int    1 $42
                                                  /--*  t12    int    
                                                  +--*  t13    int    
N006 (  5,  5) [000014] ---X--------        t14 = *  ADD       int    $342
                                                  /--*  t14    int    
N007 (  6,  7) [000016] ---X--------        t16 = *  CAST      long <- int $203
N008 (  2, 10) [000015] H-----------        t15 =    CNS_INT(h) long   0xd1ffab1e class $243
                                                  /--*  t16    long   arg1 in rdx
                                                  +--*  t15    long   arg0 in rcx
N009 ( 22, 24) [000017] --CXG-------        t17 = *  CALL help ref    HELPER.CORINFO_HELP_NEWARR_1_OBJ $1d1
                                                  /--*  t17    ref    
N011 ( 22, 24) [000019] DA-XG-------              *  STORE_LCL_VAR ref    V01 loc0         d:2
N003 (  1,  1) [000020] ------------        t20 =    LCL_VAR   ref    V00 arg0         u:1 (last use) $80
N004 (  1,  1) [000066] ------------        t66 =    CNS_INT   int    124 $45
                                                  /--*  t20    ref    arg1 in rdx
                                                  +--*  t66    int    arg0 in rcx
N005 ( 16,  9) [000062] --CXG-------        t62 = *  CALL      ref    System.String.Join $2cf
                                                  /--*  t62    ref    
N007 ( 20, 12) [000024] DA-XG-------              *  STORE_LCL_VAR ref    V02 loc1         d:2
N004 (  1,  1) [000010] ------------        t10 =    LCL_VAR   ref    V04 tmp1         u:2 (last use) $2c8
N005 (  1,  1) [000025] ------------        t25 =    LCL_VAR   ref    V01 loc0         u:2 $281
N006 (  1,  1) [000026] ------------        t26 =    CNS_INT   int    0 $40
                                                  /--*  t10    ref    this in rcx
                                                  +--*  t25    ref    arg1 in rdx
                                                  +--*  t26    int    arg2 in r8
N007 ( 17, 12) [000027] --CXG-------              *  CALL      void   System.Array.CopyTo $VN.Void
               [000160] ------------                 IL_OFFSET void   IL offset: 0x38
N001 (  1,  1) [000029] ------------        t29 =    LCL_VAR   ref    V01 loc0         u:2 $281
               [000166] ------------       t166 =    CNS_INT   long   8
                                                  /--*  t29    ref    
                                                  +--*  t166   long   
               [000167] ------------       t167 = *  ADD       ref   
                                                  /--*  t167   ref    
N002 (  3,  3) [000030] ---X--------        t30 = *  IND       int    $343
                                                  /--*  t30    int    
N004 (  3,  3) [000151] DA-X--------              *  STORE_LCL_VAR int    V11 cse4         d:1
N005 (  1,  1) [000152] ------------       t152 =    LCL_VAR   int    V11 cse4         u:1 $343
N007 (  1,  1) [000031] ------------        t31 =    CNS_INT   int    -1 $41
                                                  /--*  t152   int    
                                                  +--*  t31    int    
N008 (  6,  6) [000032] ---X--------        t32 = *  ADD       int    $345
                                                  /--*  t32    int    
N010 (  6,  6) [000136] DA-X--------              *  STORE_LCL_VAR int    V08 cse1         d:1
N011 (  1,  1) [000137] ------------       t137 =    LCL_VAR   int    V08 cse1         u:1 $345
N013 (  1,  1) [000154] ------------       t154 =    LCL_VAR   int    V11 cse4         u:1 $301
                                                  /--*  t137   int    
                                                  +--*  t154   int    
N014 ( 12, 15) [000110] ---X--------              *  ARR_BOUNDS_CHECK_Rng void   $1d7
N015 (  1,  1) [000139] ------------       t139 =    LCL_VAR   int    V08 cse1         u:1 $344
                                                  /--*  t139   int    
N016 (  2,  3) [000111] ------------       t111 = *  CAST      long <- int $205
N017 (  1,  1) [000112] -------N----       t112 =    CNS_INT   long   3 $141
                                                  /--*  t111   long   
                                                  +--*  t112   long   
N018 (  3,  4) [000113] -------N----       t113 = *  LSH       long   $207
N019 (  1,  1) [000114] ------------       t114 =    CNS_INT   long   16 Fseq[#FirstElem] $143
                                                  /--*  t113   long   
                                                  +--*  t114   long   
N020 (  4,  5) [000115] -------N----       t115 = *  ADD       long   $209
N021 (  1,  1) [000104] ------------       t104 =    LCL_VAR   ref    V01 loc0         u:2 $281
                                                  /--*  t115   long   
                                                  +--*  t104   ref    
N022 (  5,  6) [000116] -------N----       t116 = *  ADD       byref  $382
N025 (  3,  2) [000033] ------------        t33 =    LCL_VAR   ref    V02 loc1         u:2 (last use) $2cf
                                                  /--*  t116   byref  
                                                  +--*  t33    ref    
               [000161] -A-XG-------              *  STOREIND  ref   
               [000162] ------------                 IL_OFFSET void   IL offset: 0x40
N005 (  1,  1) [000144] ------------       t144 =    LCL_VAR   ref    V09 cse2         u:1 $1c7
N006 (  1,  1) [000149] ------------       t149 =    LCL_VAR   ref    V10 cse3         u:1 $1c8
N007 (  1,  1) [000038] ------------        t38 =    LCL_VAR   ref    V01 loc0         u:2 (last use) $281
N008 (  1,  1) [000070] ------------        t70 =    CNS_INT   int    0 $40
                                                  /--*  t144   ref    arg0 in rcx
                                                  +--*  t149   ref    arg1 in rdx
                                                  +--*  t38    ref    arg2 in r8
                                                  +--*  t70    int    arg3 in r9
N009 ( 18, 13) [000071] --CXG-------              *  CALL      void   Microsoft.Win32.Registry.SetValue $VN.Void
               [000163] ------------                 IL_OFFSET void   IL offset: 0x50
N003 (  2, 10) [000128] I-----------       t128 =    CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock] $240
                                                  /--*  t128   long   
N004 (  4, 12) [000073] n---G-------        t73 = *  IND       ref    <l:$285, c:$2da>
                                                  /--*  t73    ref    this in rcx
N006 ( 19, 20) [000079] --CXG-------              *  CALL nullcheck void   System.Threading.Mutex.ReleaseMutex $VN.Void

------------ BB02 [???..???) (throw), preds={} succs={}
N001 ( 14,  5) [000168] --CXG-------                 CALL help void   HELPER.CORINFO_HELP_RNGCHKFAIL

-------------------------------------------------------------------------------------------------------------------

*************** Starting PHASE Lowering nodeinfo
lowering call (before):
N003 (  2, 10) [000044] ------------        t44 =    CNS_INT   long   0x7ffc7e4c17a0 $140
N004 (  1,  1) [000045] ------------        t45 =    CNS_INT   int    1 $42
                                                  /--*  t44    long   arg0 in rcx
                                                  +--*  t45    int    arg1 in rdx
N005 ( 17, 18) [000046] H-CXG-------        t46 = *  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE $201

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000081] ----------L-              *  ARGPLACE  long   $140
lowering arg : N002 (  0,  0) [000082] ----------L-              *  ARGPLACE  int    $42

late:
======
lowering arg : N003 (  2, 10) [000044] ------------              *  CNS_INT   long   0x7ffc7e4c17a0 $140
new node is :                [000169] ------------              *  PUTARG_REG long   REG rcx

lowering arg : N004 (  1,  1) [000045] ------------              *  CNS_INT   int    1 $42
new node is :                [000170] ------------              *  PUTARG_REG int    REG rdx

lowering call (after):
N003 (  2, 10) [000044] ------------        t44 =    CNS_INT   long   0x7ffc7e4c17a0 $140
                                                  /--*  t44    long   
               [000169] ------------       t169 = *  PUTARG_REG long   REG rcx
N004 (  1,  1) [000045] ------------        t45 =    CNS_INT   int    1 $42
                                                  /--*  t45    int    
               [000170] ------------       t170 = *  PUTARG_REG int    REG rdx
                                                  /--*  t169   long   arg0 in rcx
                                                  +--*  t170   int    arg1 in rdx
N005 ( 17, 18) [000046] H-CXG-------        t46 = *  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE $201

lowering store lcl var/field (before):
N003 (  2, 10) [000044] ------------        t44 =    CNS_INT   long   0x7ffc7e4c17a0 $140
                                                  /--*  t44    long   
               [000169] ------------       t169 = *  PUTARG_REG long   REG rcx
N004 (  1,  1) [000045] ------------        t45 =    CNS_INT   int    1 $42
                                                  /--*  t45    int    
               [000170] ------------       t170 = *  PUTARG_REG int    REG rdx
                                                  /--*  t169   long   arg0 in rcx
                                                  +--*  t170   int    arg1 in rdx
N005 ( 17, 18) [000046] H-CXG-------        t46 = *  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE $201
                                                  /--*  t46    long   
N007 ( 17, 18) [000131] DA-XG-------              *  STORE_LCL_VAR long   V07 cse0         d:1

lowering store lcl var/field (after):
N003 (  2, 10) [000044] ------------        t44 =    CNS_INT   long   0x7ffc7e4c17a0 $140
                                                  /--*  t44    long   
               [000169] ------------       t169 = *  PUTARG_REG long   REG rcx
N004 (  1,  1) [000045] ------------        t45 =    CNS_INT   int    1 $42
                                                  /--*  t45    int    
               [000170] ------------       t170 = *  PUTARG_REG int    REG rdx
                                                  /--*  t169   long   arg0 in rcx
                                                  +--*  t170   int    arg1 in rdx
N005 ( 17, 18) [000046] H-CXG-------        t46 = *  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE $201
                                                  /--*  t46    long   
N007 ( 17, 18) [000131] DA-XG-------              *  STORE_LCL_VAR long   V07 cse0         d:1

lowering store lcl var/field (before):
N010 (  2, 10) [000083] I-----------        t83 =    CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock] $240
                                                  /--*  t83    long   
N011 (  4, 12) [000042] n---G-------        t42 = *  IND       ref    <l:$280, c:$2c0>
                                                  /--*  t42    ref    
N014 ( 22, 31) [000059] DA-XG-------              *  STORE_LCL_VAR ref    V05 tmp2         d:2

lowering store lcl var/field (after):
N010 (  2, 10) [000083] I-----------        t83 =    CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock] $240
                                                  /--*  t83    long   
N011 (  4, 12) [000042] n---G-------        t42 = *  IND       ref    <l:$280, c:$2c0>
                                                  /--*  t42    ref    
N014 ( 22, 31) [000059] DA-XG-------              *  STORE_LCL_VAR ref    V05 tmp2         d:2

lowering call (before):
N003 (  1,  1) [000053] ------------        t53 =    LCL_VAR   ref    V05 tmp2         u:2 (last use) <l:$280, c:$2c0>
N004 (  1,  1) [000054] ------------        t54 =    CNS_INT   int    -1 $41
                                                  /--*  t53    ref    this in rcx
                                                  +--*  t54    int    arg1 in rdx
N005 ( 16, 10) [000055] --CXG-------        t55 = *  CALL      int    System.Threading.WaitHandle.WaitOneNoCheck $102

objp:
======
lowering arg : N001 (  0,  0) [000084] ----------L-              *  ARGPLACE  ref    $2c2

args:
======
lowering arg : N002 (  0,  0) [000085] ----------L-              *  ARGPLACE  int    <l:$280, c:$2c0>

late:
======
lowering arg : N003 (  1,  1) [000053] ------------              *  LCL_VAR   ref    V05 tmp2         u:2 (last use) <l:$280, c:$2c0>
new node is :                [000171] ------------              *  PUTARG_REG ref    REG rcx

lowering arg : N004 (  1,  1) [000054] ------------              *  CNS_INT   int    -1 $41
new node is :                [000172] ------------              *  PUTARG_REG int    REG rdx

lowering call (after):
N003 (  1,  1) [000053] ------------        t53 =    LCL_VAR   ref    V05 tmp2         u:2 (last use) <l:$280, c:$2c0>
                                                  /--*  t53    ref    
               [000171] ------------       t171 = *  PUTARG_REG ref    REG rcx
N004 (  1,  1) [000054] ------------        t54 =    CNS_INT   int    -1 $41
                                                  /--*  t54    int    
               [000172] ------------       t172 = *  PUTARG_REG int    REG rdx
                                                  /--*  t171   ref    this in rcx
                                                  +--*  t172   int    arg1 in rdx
N005 ( 16, 10) [000055] --CXG-------        t55 = *  CALL      int    System.Threading.WaitHandle.WaitOneNoCheck $102

lowering call (before):
N001 ( 14,  5) [000001] --CXG-------                 CALL      void   HotkeyedMusicPlayer.ArgsTransport.EnsureRootKeyExists $VN.Void

objp:
======

args:
======

late:
======
lowering call (after):
N001 ( 14,  5) [000001] --CXG-------                 CALL      void   HotkeyedMusicPlayer.ArgsTransport.EnsureRootKeyExists $VN.Void

lowering store lcl var/field (before):
N005 (  2, 10) [000086] H-----------        t86 =    CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer" $241
                                                  /--*  t86    long   
N006 (  4, 12) [000087] #---G-------        t87 = *  IND       ref    $1c7
                                                  /--*  t87    ref    
N008 (  4, 12) [000141] DA--G-------              *  STORE_LCL_VAR ref    V09 cse2         d:1

lowering store lcl var/field (after):
N005 (  2, 10) [000086] H-----------        t86 =    CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer" $241
                                                  /--*  t86    long   
N006 (  4, 12) [000087] #---G-------        t87 = *  IND       ref    $1c7
                                                  /--*  t87    ref    
N008 (  4, 12) [000141] DA--G-------              *  STORE_LCL_VAR ref    V09 cse2         d:1

lowering store lcl var/field (before):
N011 (  2, 10) [000088] H-----------        t88 =    CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance" $242
                                                  /--*  t88    long   
N012 (  4, 12) [000089] #---G-------        t89 = *  IND       ref    $1c8
                                                  /--*  t89    ref    
N014 (  4, 12) [000146] DA--G-------              *  STORE_LCL_VAR ref    V10 cse3         d:1

lowering store lcl var/field (after):
N011 (  2, 10) [000088] H-----------        t88 =    CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance" $242
                                                  /--*  t88    long   
N012 (  4, 12) [000089] #---G-------        t89 = *  IND       ref    $1c8
                                                  /--*  t89    ref    
N014 (  4, 12) [000146] DA--G-------              *  STORE_LCL_VAR ref    V10 cse3         d:1

lowering call (before):
N009 (  1,  1) [000142] ------------       t142 =    LCL_VAR   ref    V09 cse2         u:1 $1c7
N011 (  2, 10) [000088] H-----------        t88 =    CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance" $242
                                                  /--*  t88    long   
N012 (  4, 12) [000089] #---G-------        t89 = *  IND       ref    $1c8
                                                  /--*  t89    ref    
N014 (  4, 12) [000146] DA--G-------              *  STORE_LCL_VAR ref    V10 cse3         d:1
N015 (  1,  1) [000147] ------------       t147 =    LCL_VAR   ref    V10 cse3         u:1 $1c8
N017 (  1,  1) [000004] ------------         t4 =    LCL_VAR   ref    V00 arg0         u:1 $80
                                                  /--*  t142   ref    arg0 in rcx
                                                  +--*  t147   ref    arg1 in rdx
                                                  +--*  t4     ref    arg2 in r8
N018 ( 25, 35) [000005] --CXG-------         t5 = *  CALL      ref    Microsoft.Win32.Registry.GetValue $2c8

objp:
======

args:
======
lowering arg : N002 (  0,  0) [000090] ----------L-              *  ARGPLACE  ref    $1c7
lowering arg : N003 (  0,  0) [000091] ----------L-              *  ARGPLACE  ref    $1c8
lowering arg : N004 (  0,  0) [000092] ----------L-              *  ARGPLACE  ref    $80

late:
======
lowering arg : N009 (  1,  1) [000142] ------------              *  LCL_VAR   ref    V09 cse2         u:1 $1c7
new node is :                [000173] ------------              *  PUTARG_REG ref    REG rcx

lowering arg : N015 (  1,  1) [000147] ------------              *  LCL_VAR   ref    V10 cse3         u:1 $1c8
new node is :                [000174] ------------              *  PUTARG_REG ref    REG rdx

lowering arg : N017 (  1,  1) [000004] ------------              *  LCL_VAR   ref    V00 arg0         u:1 $80
new node is :                [000175] ------------              *  PUTARG_REG ref    REG r8

lowering call (after):
N009 (  1,  1) [000142] ------------       t142 =    LCL_VAR   ref    V09 cse2         u:1 $1c7
                                                  /--*  t142   ref    
               [000173] ------------       t173 = *  PUTARG_REG ref    REG rcx
N011 (  2, 10) [000088] H-----------        t88 =    CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance" $242
                                                  /--*  t88    long   
N012 (  4, 12) [000089] #---G-------        t89 = *  IND       ref    $1c8
                                                  /--*  t89    ref    
N014 (  4, 12) [000146] DA--G-------              *  STORE_LCL_VAR ref    V10 cse3         d:1
N015 (  1,  1) [000147] ------------       t147 =    LCL_VAR   ref    V10 cse3         u:1 $1c8
                                                  /--*  t147   ref    
               [000174] ------------       t174 = *  PUTARG_REG ref    REG rdx
N017 (  1,  1) [000004] ------------         t4 =    LCL_VAR   ref    V00 arg0         u:1 $80
                                                  /--*  t4     ref    
               [000175] ------------       t175 = *  PUTARG_REG ref    REG r8
                                                  /--*  t173   ref    arg0 in rcx
                                                  +--*  t174   ref    arg1 in rdx
                                                  +--*  t175   ref    arg2 in r8
N018 ( 25, 35) [000005] --CXG-------         t5 = *  CALL      ref    Microsoft.Win32.Registry.GetValue $2c8

lowering store lcl var/field (before):
N009 (  1,  1) [000142] ------------       t142 =    LCL_VAR   ref    V09 cse2         u:1 $1c7
                                                  /--*  t142   ref    
               [000173] ------------       t173 = *  PUTARG_REG ref    REG rcx
N011 (  2, 10) [000088] H-----------        t88 =    CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance" $242
                                                  /--*  t88    long   
N012 (  4, 12) [000089] #---G-------        t89 = *  IND       ref    $1c8
                                                  /--*  t89    ref    
N014 (  4, 12) [000146] DA--G-------              *  STORE_LCL_VAR ref    V10 cse3         d:1
N015 (  1,  1) [000147] ------------       t147 =    LCL_VAR   ref    V10 cse3         u:1 $1c8
                                                  /--*  t147   ref    
               [000174] ------------       t174 = *  PUTARG_REG ref    REG rdx
N017 (  1,  1) [000004] ------------         t4 =    LCL_VAR   ref    V00 arg0         u:1 $80
                                                  /--*  t4     ref    
               [000175] ------------       t175 = *  PUTARG_REG ref    REG r8
                                                  /--*  t173   ref    arg0 in rcx
                                                  +--*  t174   ref    arg1 in rdx
                                                  +--*  t175   ref    arg2 in r8
N018 ( 25, 35) [000005] --CXG-------         t5 = *  CALL      ref    Microsoft.Win32.Registry.GetValue $2c8
                                                  /--*  t5     ref    
N020 ( 25, 35) [000094] DA-XG-----L-              *  STORE_LCL_VAR ref    V06 tmp3         d:2

lowering store lcl var/field (after):
N009 (  1,  1) [000142] ------------       t142 =    LCL_VAR   ref    V09 cse2         u:1 $1c7
                                                  /--*  t142   ref    
               [000173] ------------       t173 = *  PUTARG_REG ref    REG rcx
N011 (  2, 10) [000088] H-----------        t88 =    CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance" $242
                                                  /--*  t88    long   
N012 (  4, 12) [000089] #---G-------        t89 = *  IND       ref    $1c8
                                                  /--*  t89    ref    
N014 (  4, 12) [000146] DA--G-------              *  STORE_LCL_VAR ref    V10 cse3         d:1
N015 (  1,  1) [000147] ------------       t147 =    LCL_VAR   ref    V10 cse3         u:1 $1c8
                                                  /--*  t147   ref    
               [000174] ------------       t174 = *  PUTARG_REG ref    REG rdx
N017 (  1,  1) [000004] ------------         t4 =    LCL_VAR   ref    V00 arg0         u:1 $80
                                                  /--*  t4     ref    
               [000175] ------------       t175 = *  PUTARG_REG ref    REG r8
                                                  /--*  t173   ref    arg0 in rcx
                                                  +--*  t174   ref    arg1 in rdx
                                                  +--*  t175   ref    arg2 in r8
N018 ( 25, 35) [000005] --CXG-------         t5 = *  CALL      ref    Microsoft.Win32.Registry.GetValue $2c8
                                                  /--*  t5     ref    
N020 ( 25, 35) [000094] DA-XG-----L-              *  STORE_LCL_VAR ref    V06 tmp3         d:2

lowering call (before):
N009 (  1,  1) [000142] ------------       t142 =    LCL_VAR   ref    V09 cse2         u:1 $1c7
                                                  /--*  t142   ref    
               [000173] ------------       t173 = *  PUTARG_REG ref    REG rcx
N011 (  2, 10) [000088] H-----------        t88 =    CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance" $242
                                                  /--*  t88    long   
N012 (  4, 12) [000089] #---G-------        t89 = *  IND       ref    $1c8
                                                  /--*  t89    ref    
N014 (  4, 12) [000146] DA--G-------              *  STORE_LCL_VAR ref    V10 cse3         d:1
N015 (  1,  1) [000147] ------------       t147 =    LCL_VAR   ref    V10 cse3         u:1 $1c8
                                                  /--*  t147   ref    
               [000174] ------------       t174 = *  PUTARG_REG ref    REG rdx
N017 (  1,  1) [000004] ------------         t4 =    LCL_VAR   ref    V00 arg0         u:1 $80
                                                  /--*  t4     ref    
               [000175] ------------       t175 = *  PUTARG_REG ref    REG r8
                                                  /--*  t173   ref    arg0 in rcx
                                                  +--*  t174   ref    arg1 in rdx
                                                  +--*  t175   ref    arg2 in r8
N018 ( 25, 35) [000005] --CXG-------         t5 = *  CALL      ref    Microsoft.Win32.Registry.GetValue $2c8
                                                  /--*  t5     ref    
N020 ( 25, 35) [000094] DA-XG-----L-              *  STORE_LCL_VAR ref    V06 tmp3         d:2
N021 (  1,  1) [000095] ------------        t95 =    LCL_VAR   ref    V06 tmp3         u:2 (last use) $2c8
N022 (  2, 10) [000006] H------N----         t6 =    CNS_INT(h) long   0xd1ffab1e class $243
                                                  /--*  t95    ref    arg1 in rdx
                                                  +--*  t6     long   arg0 in rcx
N023 ( 45, 53) [000007] --CXG-------         t7 = *  CALL help ref    HELPER.CORINFO_HELP_CHKCASTARRAY $1cd

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000096] ----------L-              *  ARGPLACE  long   $243
lowering arg : N020 ( 25, 35) [000094] DA-XG-----L-              *  STORE_LCL_VAR ref    V06 tmp3         d:2

late:
======
lowering arg : N021 (  1,  1) [000095] ------------              *  LCL_VAR   ref    V06 tmp3         u:2 (last use) $2c8
new node is :                [000176] ------------              *  PUTARG_REG ref    REG rdx

lowering arg : N022 (  2, 10) [000006] H------N----              *  CNS_INT(h) long   0xd1ffab1e class $243
new node is :                [000177] ------------              *  PUTARG_REG long   REG rcx

lowering call (after):
N009 (  1,  1) [000142] ------------       t142 =    LCL_VAR   ref    V09 cse2         u:1 $1c7
                                                  /--*  t142   ref    
               [000173] ------------       t173 = *  PUTARG_REG ref    REG rcx
N011 (  2, 10) [000088] H-----------        t88 =    CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance" $242
                                                  /--*  t88    long   
N012 (  4, 12) [000089] #---G-------        t89 = *  IND       ref    $1c8
                                                  /--*  t89    ref    
N014 (  4, 12) [000146] DA--G-------              *  STORE_LCL_VAR ref    V10 cse3         d:1
N015 (  1,  1) [000147] ------------       t147 =    LCL_VAR   ref    V10 cse3         u:1 $1c8
                                                  /--*  t147   ref    
               [000174] ------------       t174 = *  PUTARG_REG ref    REG rdx
N017 (  1,  1) [000004] ------------         t4 =    LCL_VAR   ref    V00 arg0         u:1 $80
                                                  /--*  t4     ref    
               [000175] ------------       t175 = *  PUTARG_REG ref    REG r8
                                                  /--*  t173   ref    arg0 in rcx
                                                  +--*  t174   ref    arg1 in rdx
                                                  +--*  t175   ref    arg2 in r8
N018 ( 25, 35) [000005] --CXG-------         t5 = *  CALL      ref    Microsoft.Win32.Registry.GetValue $2c8
                                                  /--*  t5     ref    
N020 ( 25, 35) [000094] DA-XG-----L-              *  STORE_LCL_VAR ref    V06 tmp3         d:2
N021 (  1,  1) [000095] ------------        t95 =    LCL_VAR   ref    V06 tmp3         u:2 (last use) $2c8
                                                  /--*  t95    ref    
               [000176] ------------       t176 = *  PUTARG_REG ref    REG rdx
N022 (  2, 10) [000006] H------N----         t6 =    CNS_INT(h) long   0xd1ffab1e class $243
                                                  /--*  t6     long   
               [000177] ------------       t177 = *  PUTARG_REG long   REG rcx
                                                  /--*  t176   ref    arg1 in rdx
                                                  +--*  t177   long   arg0 in rcx
N023 ( 45, 53) [000007] --CXG-------         t7 = *  CALL help ref    HELPER.CORINFO_HELP_CHKCASTARRAY $1cd

lowering store lcl var/field (before):
N009 (  1,  1) [000142] ------------       t142 =    LCL_VAR   ref    V09 cse2         u:1 $1c7
                                                  /--*  t142   ref    
               [000173] ------------       t173 = *  PUTARG_REG ref    REG rcx
N011 (  2, 10) [000088] H-----------        t88 =    CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance" $242
                                                  /--*  t88    long   
N012 (  4, 12) [000089] #---G-------        t89 = *  IND       ref    $1c8
                                                  /--*  t89    ref    
N014 (  4, 12) [000146] DA--G-------              *  STORE_LCL_VAR ref    V10 cse3         d:1
N015 (  1,  1) [000147] ------------       t147 =    LCL_VAR   ref    V10 cse3         u:1 $1c8
                                                  /--*  t147   ref    
               [000174] ------------       t174 = *  PUTARG_REG ref    REG rdx
N017 (  1,  1) [000004] ------------         t4 =    LCL_VAR   ref    V00 arg0         u:1 $80
                                                  /--*  t4     ref    
               [000175] ------------       t175 = *  PUTARG_REG ref    REG r8
                                                  /--*  t173   ref    arg0 in rcx
                                                  +--*  t174   ref    arg1 in rdx
                                                  +--*  t175   ref    arg2 in r8
N018 ( 25, 35) [000005] --CXG-------         t5 = *  CALL      ref    Microsoft.Win32.Registry.GetValue $2c8
                                                  /--*  t5     ref    
N020 ( 25, 35) [000094] DA-XG-----L-              *  STORE_LCL_VAR ref    V06 tmp3         d:2
N021 (  1,  1) [000095] ------------        t95 =    LCL_VAR   ref    V06 tmp3         u:2 (last use) $2c8
                                                  /--*  t95    ref    
               [000176] ------------       t176 = *  PUTARG_REG ref    REG rdx
N022 (  2, 10) [000006] H------N----         t6 =    CNS_INT(h) long   0xd1ffab1e class $243
                                                  /--*  t6     long   
               [000177] ------------       t177 = *  PUTARG_REG long   REG rcx
                                                  /--*  t176   ref    arg1 in rdx
                                                  +--*  t177   long   arg0 in rcx
N023 ( 45, 53) [000007] --CXG-------         t7 = *  CALL help ref    HELPER.CORINFO_HELP_CHKCASTARRAY $1cd
                                                  /--*  t7     ref    
N025 ( 45, 53) [000009] DA-XG-------              *  STORE_LCL_VAR ref    V04 tmp1         d:2

lowering store lcl var/field (after):
N009 (  1,  1) [000142] ------------       t142 =    LCL_VAR   ref    V09 cse2         u:1 $1c7
                                                  /--*  t142   ref    
               [000173] ------------       t173 = *  PUTARG_REG ref    REG rcx
N011 (  2, 10) [000088] H-----------        t88 =    CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance" $242
                                                  /--*  t88    long   
N012 (  4, 12) [000089] #---G-------        t89 = *  IND       ref    $1c8
                                                  /--*  t89    ref    
N014 (  4, 12) [000146] DA--G-------              *  STORE_LCL_VAR ref    V10 cse3         d:1
N015 (  1,  1) [000147] ------------       t147 =    LCL_VAR   ref    V10 cse3         u:1 $1c8
                                                  /--*  t147   ref    
               [000174] ------------       t174 = *  PUTARG_REG ref    REG rdx
N017 (  1,  1) [000004] ------------         t4 =    LCL_VAR   ref    V00 arg0         u:1 $80
                                                  /--*  t4     ref    
               [000175] ------------       t175 = *  PUTARG_REG ref    REG r8
                                                  /--*  t173   ref    arg0 in rcx
                                                  +--*  t174   ref    arg1 in rdx
                                                  +--*  t175   ref    arg2 in r8
N018 ( 25, 35) [000005] --CXG-------         t5 = *  CALL      ref    Microsoft.Win32.Registry.GetValue $2c8
                                                  /--*  t5     ref    
N020 ( 25, 35) [000094] DA-XG-----L-              *  STORE_LCL_VAR ref    V06 tmp3         d:2
N021 (  1,  1) [000095] ------------        t95 =    LCL_VAR   ref    V06 tmp3         u:2 (last use) $2c8
                                                  /--*  t95    ref    
               [000176] ------------       t176 = *  PUTARG_REG ref    REG rdx
N022 (  2, 10) [000006] H------N----         t6 =    CNS_INT(h) long   0xd1ffab1e class $243
                                                  /--*  t6     long   
               [000177] ------------       t177 = *  PUTARG_REG long   REG rcx
                                                  /--*  t176   ref    arg1 in rdx
                                                  +--*  t177   long   arg0 in rcx
N023 ( 45, 53) [000007] --CXG-------         t7 = *  CALL help ref    HELPER.CORINFO_HELP_CHKCASTARRAY $1cd
                                                  /--*  t7     ref    
N025 ( 45, 53) [000009] DA-XG-------              *  STORE_LCL_VAR ref    V04 tmp1         d:2

Addressing mode:
  Base
    N003 (  1,  1) [000011] ------------              *  LCL_VAR   ref    V04 tmp1         u:2 $2c8
  + 8
Removing unused node:
                 [000164] -c----------              *  CNS_INT   long   8
New addressing mode node:
                 [000165] ------------              *  LEA(b+8)  ref   

lowering call (before):
N003 (  1,  1) [000011] ------------        t11 =    LCL_VAR   ref    V04 tmp1         u:2 $2c8
                                                  /--*  t11    ref    
               [000165] -c----------       t165 = *  LEA(b+8)  ref   
                                                  /--*  t165   ref    
N004 (  3,  3) [000012] ---X--------        t12 = *  IND       int    $340
N005 (  1,  1) [000013] -c----------        t13 =    CNS_INT   int    1 $42
                                                  /--*  t12    int    
                                                  +--*  t13    int    
N006 (  5,  5) [000014] ---X--------        t14 = *  ADD       int    $342
                                                  /--*  t14    int    
N007 (  6,  7) [000016] ---X--------        t16 = *  CAST      long <- int $203
N008 (  2, 10) [000015] H-----------        t15 =    CNS_INT(h) long   0xd1ffab1e class $243
                                                  /--*  t16    long   arg1 in rdx
                                                  +--*  t15    long   arg0 in rcx
N009 ( 22, 24) [000017] --CXG-------        t17 = *  CALL help ref    HELPER.CORINFO_HELP_NEWARR_1_OBJ $1d1

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000098] ----------L-              *  ARGPLACE  long   $243
lowering arg : N002 (  0,  0) [000097] ----------L-              *  ARGPLACE  long   $203

late:
======
lowering arg : N007 (  6,  7) [000016] ---X--------              *  CAST      long <- int $203
new node is :                [000178] ---X--------              *  PUTARG_REG long   REG rdx

lowering arg : N008 (  2, 10) [000015] H-----------              *  CNS_INT(h) long   0xd1ffab1e class $243
new node is :                [000179] ------------              *  PUTARG_REG long   REG rcx

lowering call (after):
N003 (  1,  1) [000011] ------------        t11 =    LCL_VAR   ref    V04 tmp1         u:2 $2c8
                                                  /--*  t11    ref    
               [000165] -c----------       t165 = *  LEA(b+8)  ref   
                                                  /--*  t165   ref    
N004 (  3,  3) [000012] ---X--------        t12 = *  IND       int    $340
N005 (  1,  1) [000013] -c----------        t13 =    CNS_INT   int    1 $42
                                                  /--*  t12    int    
                                                  +--*  t13    int    
N006 (  5,  5) [000014] ---X--------        t14 = *  ADD       int    $342
                                                  /--*  t14    int    
N007 (  6,  7) [000016] ---X--------        t16 = *  CAST      long <- int $203
                                                  /--*  t16    long   
               [000178] ---X--------       t178 = *  PUTARG_REG long   REG rdx
N008 (  2, 10) [000015] H-----------        t15 =    CNS_INT(h) long   0xd1ffab1e class $243
                                                  /--*  t15    long   
               [000179] ------------       t179 = *  PUTARG_REG long   REG rcx
                                                  /--*  t178   long   arg1 in rdx
                                                  +--*  t179   long   arg0 in rcx
N009 ( 22, 24) [000017] --CXG-------        t17 = *  CALL help ref    HELPER.CORINFO_HELP_NEWARR_1_OBJ $1d1

lowering store lcl var/field (before):
N003 (  1,  1) [000011] ------------        t11 =    LCL_VAR   ref    V04 tmp1         u:2 $2c8
                                                  /--*  t11    ref    
               [000165] -c----------       t165 = *  LEA(b+8)  ref   
                                                  /--*  t165   ref    
N004 (  3,  3) [000012] ---X--------        t12 = *  IND       int    $340
N005 (  1,  1) [000013] -c----------        t13 =    CNS_INT   int    1 $42
                                                  /--*  t12    int    
                                                  +--*  t13    int    
N006 (  5,  5) [000014] ---X--------        t14 = *  ADD       int    $342
                                                  /--*  t14    int    
N007 (  6,  7) [000016] ---X--------        t16 = *  CAST      long <- int $203
                                                  /--*  t16    long   
               [000178] ---X--------       t178 = *  PUTARG_REG long   REG rdx
N008 (  2, 10) [000015] H-----------        t15 =    CNS_INT(h) long   0xd1ffab1e class $243
                                                  /--*  t15    long   
               [000179] ------------       t179 = *  PUTARG_REG long   REG rcx
                                                  /--*  t178   long   arg1 in rdx
                                                  +--*  t179   long   arg0 in rcx
N009 ( 22, 24) [000017] --CXG-------        t17 = *  CALL help ref    HELPER.CORINFO_HELP_NEWARR_1_OBJ $1d1
                                                  /--*  t17    ref    
N011 ( 22, 24) [000019] DA-XG-------              *  STORE_LCL_VAR ref    V01 loc0         d:2

lowering store lcl var/field (after):
N003 (  1,  1) [000011] ------------        t11 =    LCL_VAR   ref    V04 tmp1         u:2 $2c8
                                                  /--*  t11    ref    
               [000165] -c----------       t165 = *  LEA(b+8)  ref   
                                                  /--*  t165   ref    
N004 (  3,  3) [000012] ---X--------        t12 = *  IND       int    $340
N005 (  1,  1) [000013] -c----------        t13 =    CNS_INT   int    1 $42
                                                  /--*  t12    int    
                                                  +--*  t13    int    
N006 (  5,  5) [000014] ---X--------        t14 = *  ADD       int    $342
                                                  /--*  t14    int    
N007 (  6,  7) [000016] ---X--------        t16 = *  CAST      long <- int $203
                                                  /--*  t16    long   
               [000178] ---X--------       t178 = *  PUTARG_REG long   REG rdx
N008 (  2, 10) [000015] H-----------        t15 =    CNS_INT(h) long   0xd1ffab1e class $243
                                                  /--*  t15    long   
               [000179] ------------       t179 = *  PUTARG_REG long   REG rcx
                                                  /--*  t178   long   arg1 in rdx
                                                  +--*  t179   long   arg0 in rcx
N009 ( 22, 24) [000017] --CXG-------        t17 = *  CALL help ref    HELPER.CORINFO_HELP_NEWARR_1_OBJ $1d1
                                                  /--*  t17    ref    
N011 ( 22, 24) [000019] DA-XG-------              *  STORE_LCL_VAR ref    V01 loc0         d:2

lowering call (before):
N003 (  1,  1) [000020] ------------        t20 =    LCL_VAR   ref    V00 arg0         u:1 (last use) $80
N004 (  1,  1) [000066] ------------        t66 =    CNS_INT   int    124 $45
                                                  /--*  t20    ref    arg1 in rdx
                                                  +--*  t66    int    arg0 in rcx
N005 ( 16,  9) [000062] --CXG-------        t62 = *  CALL      ref    System.String.Join $2cf

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000100] ----------L-              *  ARGPLACE  int    $45
lowering arg : N002 (  0,  0) [000099] ----------L-              *  ARGPLACE  ref    $80

late:
======
lowering arg : N003 (  1,  1) [000020] ------------              *  LCL_VAR   ref    V00 arg0         u:1 (last use) $80
new node is :                [000180] ------------              *  PUTARG_REG ref    REG rdx

lowering arg : N004 (  1,  1) [000066] ------------              *  CNS_INT   int    124 $45
new node is :                [000181] ------------              *  PUTARG_REG int    REG rcx

lowering call (after):
N003 (  1,  1) [000020] ------------        t20 =    LCL_VAR   ref    V00 arg0         u:1 (last use) $80
                                                  /--*  t20    ref    
               [000180] ------------       t180 = *  PUTARG_REG ref    REG rdx
N004 (  1,  1) [000066] ------------        t66 =    CNS_INT   int    124 $45
                                                  /--*  t66    int    
               [000181] ------------       t181 = *  PUTARG_REG int    REG rcx
                                                  /--*  t180   ref    arg1 in rdx
                                                  +--*  t181   int    arg0 in rcx
N005 ( 16,  9) [000062] --CXG-------        t62 = *  CALL      ref    System.String.Join $2cf

lowering store lcl var/field (before):
N003 (  1,  1) [000020] ------------        t20 =    LCL_VAR   ref    V00 arg0         u:1 (last use) $80
                                                  /--*  t20    ref    
               [000180] ------------       t180 = *  PUTARG_REG ref    REG rdx
N004 (  1,  1) [000066] ------------        t66 =    CNS_INT   int    124 $45
                                                  /--*  t66    int    
               [000181] ------------       t181 = *  PUTARG_REG int    REG rcx
                                                  /--*  t180   ref    arg1 in rdx
                                                  +--*  t181   int    arg0 in rcx
N005 ( 16,  9) [000062] --CXG-------        t62 = *  CALL      ref    System.String.Join $2cf
                                                  /--*  t62    ref    
N007 ( 20, 12) [000024] DA-XG-------              *  STORE_LCL_VAR ref    V02 loc1         d:2

lowering store lcl var/field (after):
N003 (  1,  1) [000020] ------------        t20 =    LCL_VAR   ref    V00 arg0         u:1 (last use) $80
                                                  /--*  t20    ref    
               [000180] ------------       t180 = *  PUTARG_REG ref    REG rdx
N004 (  1,  1) [000066] ------------        t66 =    CNS_INT   int    124 $45
                                                  /--*  t66    int    
               [000181] ------------       t181 = *  PUTARG_REG int    REG rcx
                                                  /--*  t180   ref    arg1 in rdx
                                                  +--*  t181   int    arg0 in rcx
N005 ( 16,  9) [000062] --CXG-------        t62 = *  CALL      ref    System.String.Join $2cf
                                                  /--*  t62    ref    
N007 ( 20, 12) [000024] DA-XG-------              *  STORE_LCL_VAR ref    V02 loc1         d:2

lowering call (before):
N004 (  1,  1) [000010] ------------        t10 =    LCL_VAR   ref    V04 tmp1         u:2 (last use) $2c8
N005 (  1,  1) [000025] ------------        t25 =    LCL_VAR   ref    V01 loc0         u:2 $281
N006 (  1,  1) [000026] ------------        t26 =    CNS_INT   int    0 $40
                                                  /--*  t10    ref    this in rcx
                                                  +--*  t25    ref    arg1 in rdx
                                                  +--*  t26    int    arg2 in r8
N007 ( 17, 12) [000027] --CXG-------              *  CALL      void   System.Array.CopyTo $VN.Void

objp:
======
lowering arg : N001 (  0,  0) [000101] ----------L-              *  ARGPLACE  ref    $2d2

args:
======
lowering arg : N002 (  0,  0) [000102] ----------L-              *  ARGPLACE  ref    $2c8
lowering arg : N003 (  0,  0) [000103] ----------L-              *  ARGPLACE  int    $281

late:
======
lowering arg : N004 (  1,  1) [000010] ------------              *  LCL_VAR   ref    V04 tmp1         u:2 (last use) $2c8
new node is :                [000182] ------------              *  PUTARG_REG ref    REG rcx

lowering arg : N005 (  1,  1) [000025] ------------              *  LCL_VAR   ref    V01 loc0         u:2 $281
new node is :                [000183] ------------              *  PUTARG_REG ref    REG rdx

lowering arg : N006 (  1,  1) [000026] ------------              *  CNS_INT   int    0 $40
new node is :                [000184] ------------              *  PUTARG_REG int    REG r8

results of lowering call:
N001 (  2, 10) [000185] H-----------       t185 =    CNS_INT(h) long   0xd1ffab1e ftn
                                                  /--*  t185   long   
N002 (  4, 12) [000186] ------------       t186 = *  IND       long  
lowering call (after):
N004 (  1,  1) [000010] ------------        t10 =    LCL_VAR   ref    V04 tmp1         u:2 (last use) $2c8
                                                  /--*  t10    ref    
               [000182] ------------       t182 = *  PUTARG_REG ref    REG rcx
N005 (  1,  1) [000025] ------------        t25 =    LCL_VAR   ref    V01 loc0         u:2 $281
                                                  /--*  t25    ref    
               [000183] ------------       t183 = *  PUTARG_REG ref    REG rdx
N006 (  1,  1) [000026] ------------        t26 =    CNS_INT   int    0 $40
                                                  /--*  t26    int    
               [000184] ------------       t184 = *  PUTARG_REG int    REG r8
N001 (  2, 10) [000185] Hc----------       t185 =    CNS_INT(h) long   0xd1ffab1e ftn
                                                  /--*  t185   long   
N002 (  4, 12) [000186] -c----------       t186 = *  IND       long   REG NA
                                                  /--*  t182   ref    this in rcx
                                                  +--*  t183   ref    arg1 in rdx
                                                  +--*  t184   int    arg2 in r8
                                                  +--*  t186   long   control expr
N007 ( 17, 12) [000027] --CXG-------              *  CALL      void   System.Array.CopyTo $VN.Void

Addressing mode:
  Base
    N001 (  1,  1) [000029] ------------              *  LCL_VAR   ref    V01 loc0         u:2 $281
  + 8
Removing unused node:
                 [000166] -c----------              *  CNS_INT   long   8
New addressing mode node:
                 [000167] ------------              *  LEA(b+8)  ref   

lowering store lcl var/field (before):
N001 (  1,  1) [000029] ------------        t29 =    LCL_VAR   ref    V01 loc0         u:2 $281
                                                  /--*  t29    ref    
               [000167] -c----------       t167 = *  LEA(b+8)  ref   
                                                  /--*  t167   ref    
N002 (  3,  3) [000030] ---X--------        t30 = *  IND       int    $343
                                                  /--*  t30    int    
N004 (  3,  3) [000151] DA-X--------              *  STORE_LCL_VAR int    V11 cse4         d:1

lowering store lcl var/field (after):
N001 (  1,  1) [000029] ------------        t29 =    LCL_VAR   ref    V01 loc0         u:2 $281
                                                  /--*  t29    ref    
               [000167] -c----------       t167 = *  LEA(b+8)  ref   
                                                  /--*  t167   ref    
N002 (  3,  3) [000030] ---X--------        t30 = *  IND       int    $343
                                                  /--*  t30    int    
N004 (  3,  3) [000151] DA-X--------              *  STORE_LCL_VAR int    V11 cse4         d:1

lowering store lcl var/field (before):
N005 (  1,  1) [000152] ------------       t152 =    LCL_VAR   int    V11 cse4         u:1 $343
N007 (  1,  1) [000031] -c----------        t31 =    CNS_INT   int    -1 $41
                                                  /--*  t152   int    
                                                  +--*  t31    int    
N008 (  6,  6) [000032] ---X--------        t32 = *  ADD       int    $345
                                                  /--*  t32    int    
N010 (  6,  6) [000136] DA-X--------              *  STORE_LCL_VAR int    V08 cse1         d:1

lowering store lcl var/field (after):
N005 (  1,  1) [000152] ------------       t152 =    LCL_VAR   int    V11 cse4         u:1 $343
N007 (  1,  1) [000031] -c----------        t31 =    CNS_INT   int    -1 $41
                                                  /--*  t152   int    
                                                  +--*  t31    int    
N008 (  6,  6) [000032] ---X--------        t32 = *  ADD       int    $345
                                                  /--*  t32    int    
N010 (  6,  6) [000136] DA-X--------              *  STORE_LCL_VAR int    V08 cse1         d:1

Addressing mode:
  Base
    N021 (  1,  1) [000104] ------------              *  LCL_VAR   ref    V01 loc0         u:2 $281
  + Index * 8 + 16
    N016 (  2,  3) [000111] ------------              *  CAST      long <- int $205
Removing unused node:
  N020 (  4,  5) [000115] -------N----              *  ADD       long   $209
Removing unused node:
  N019 (  1,  1) [000114] -c----------              *  CNS_INT   long   16 Fseq[#FirstElem] $143
Removing unused node:
  N018 (  3,  4) [000113] -------N----              *  LSH       long   $207
Removing unused node:
  N017 (  1,  1) [000112] -c-----N----              *  CNS_INT   long   3 $141
New addressing mode node:
  N022 (  5,  6) [000116] ------------              *  LEA(b+(i*8)+16) byref 

lowering call (before):
N005 (  1,  1) [000144] ------------       t144 =    LCL_VAR   ref    V09 cse2         u:1 $1c7
N006 (  1,  1) [000149] ------------       t149 =    LCL_VAR   ref    V10 cse3         u:1 $1c8
N007 (  1,  1) [000038] ------------        t38 =    LCL_VAR   ref    V01 loc0         u:2 (last use) $281
N008 (  1,  1) [000070] ------------        t70 =    CNS_INT   int    0 $40
                                                  /--*  t144   ref    arg0 in rcx
                                                  +--*  t149   ref    arg1 in rdx
                                                  +--*  t38    ref    arg2 in r8
                                                  +--*  t70    int    arg3 in r9
N009 ( 18, 13) [000071] --CXG-------              *  CALL      void   Microsoft.Win32.Registry.SetValue $VN.Void

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000122] ----------L-              *  ARGPLACE  ref    $1c7
lowering arg : N002 (  0,  0) [000123] ----------L-              *  ARGPLACE  ref    $1c8
lowering arg : N003 (  0,  0) [000124] ----------L-              *  ARGPLACE  ref    $281
lowering arg : N004 (  0,  0) [000125] ----------L-              *  ARGPLACE  int    $40

late:
======
lowering arg : N005 (  1,  1) [000144] ------------              *  LCL_VAR   ref    V09 cse2         u:1 $1c7
new node is :                [000187] ------------              *  PUTARG_REG ref    REG rcx

lowering arg : N006 (  1,  1) [000149] ------------              *  LCL_VAR   ref    V10 cse3         u:1 $1c8
new node is :                [000188] ------------              *  PUTARG_REG ref    REG rdx

lowering arg : N007 (  1,  1) [000038] ------------              *  LCL_VAR   ref    V01 loc0         u:2 (last use) $281
new node is :                [000189] ------------              *  PUTARG_REG ref    REG r8

lowering arg : N008 (  1,  1) [000070] ------------              *  CNS_INT   int    0 $40
new node is :                [000190] ------------              *  PUTARG_REG int    REG r9

lowering call (after):
N005 (  1,  1) [000144] ------------       t144 =    LCL_VAR   ref    V09 cse2         u:1 $1c7
                                                  /--*  t144   ref    
               [000187] ------------       t187 = *  PUTARG_REG ref    REG rcx
N006 (  1,  1) [000149] ------------       t149 =    LCL_VAR   ref    V10 cse3         u:1 $1c8
                                                  /--*  t149   ref    
               [000188] ------------       t188 = *  PUTARG_REG ref    REG rdx
N007 (  1,  1) [000038] ------------        t38 =    LCL_VAR   ref    V01 loc0         u:2 (last use) $281
                                                  /--*  t38    ref    
               [000189] ------------       t189 = *  PUTARG_REG ref    REG r8
N008 (  1,  1) [000070] ------------        t70 =    CNS_INT   int    0 $40
                                                  /--*  t70    int    
               [000190] ------------       t190 = *  PUTARG_REG int    REG r9
                                                  /--*  t187   ref    arg0 in rcx
                                                  +--*  t188   ref    arg1 in rdx
                                                  +--*  t189   ref    arg2 in r8
                                                  +--*  t190   int    arg3 in r9
N009 ( 18, 13) [000071] --CXG-------              *  CALL      void   Microsoft.Win32.Registry.SetValue $VN.Void

lowering call (before):
N003 (  2, 10) [000128] I-----------       t128 =    CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock] $240
                                                  /--*  t128   long   
N004 (  4, 12) [000073] n---G-------        t73 = *  IND       ref    <l:$285, c:$2da>
                                                  /--*  t73    ref    this in rcx
N006 ( 19, 20) [000079] --CXG-------              *  CALL nullcheck void   System.Threading.Mutex.ReleaseMutex $VN.Void

objp:
======
lowering arg : N001 (  0,  0) [000129] ----------L-              *  ARGPLACE  ref    $2d9

args:
======

late:
======
lowering arg : N004 (  4, 12) [000073] n---G-------              *  IND       ref    <l:$285, c:$2da>
new node is :                [000191] ----G-------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N003 (  2, 10) [000128] I-----------       t128 =    CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock] $240
                                                  /--*  t128   long   
N004 (  4, 12) [000073] n---G-------        t73 = *  IND       ref    <l:$285, c:$2da>
                                                  /--*  t73    ref    
               [000191] ----G-------       t191 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t191   ref    this in rcx
N006 ( 19, 20) [000079] --CXG-------              *  CALL nullcheck void   System.Threading.Mutex.ReleaseMutex $VN.Void

lowering call (before):
N001 ( 14,  5) [000168] --CXG-------                 CALL help void   HELPER.CORINFO_HELP_RNGCHKFAIL

objp:
======

args:
======

late:
======
lowering call (after):
N001 ( 14,  5) [000168] --CXG-------                 CALL help void   HELPER.CORINFO_HELP_RNGCHKFAIL

Lower has completed modifying nodes.

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..056)        (return)                     i label target jmp hascall gcsafe idxlen new[] nullcheck LIR 
BB02 [0006]  0                             0       [???..???)        (throw )                     keep i internal rare label target LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..056) (return), preds={} succs={}
               [000155] ------------                 IL_OFFSET void   IL offset: 0x0
N003 (  2, 10) [000044] ------------        t44 =    CNS_INT   long   0x7ffc7e4c17a0 $140
                                                  /--*  t44    long   
               [000169] ------------       t169 = *  PUTARG_REG long   REG rcx
N004 (  1,  1) [000045] ------------        t45 =    CNS_INT   int    1 $42
                                                  /--*  t45    int    
               [000170] ------------       t170 = *  PUTARG_REG int    REG rdx
                                                  /--*  t169   long   arg0 in rcx
                                                  +--*  t170   int    arg1 in rdx
N005 ( 17, 18) [000046] H-CXG-------        t46 = *  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE $201
                                                  /--*  t46    long   
N007 ( 17, 18) [000131] DA-XG-------              *  STORE_LCL_VAR long   V07 cse0         d:1
N010 (  2, 10) [000083] I-----------        t83 =    CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock] $240
                                                  /--*  t83    long   
N011 (  4, 12) [000042] n---G-------        t42 = *  IND       ref    <l:$280, c:$2c0>
                                                  /--*  t42    ref    
N014 ( 22, 31) [000059] DA-XG-------              *  STORE_LCL_VAR ref    V05 tmp2         d:2
               [000156] ------------                 IL_OFFSET void   IL offset: 0x0
N001 (  1,  1) [000056] ------------        t56 =    LCL_VAR   ref    V05 tmp2         u:2 <l:$280, c:$2c0>
                                                  /--*  t56    ref    
N002 (  2,  2) [000057] ---X--------              *  NULLCHECK int    <l:$1c6, c:$1c5>
               [000157] ------------                 IL_OFFSET void   IL offset: 0x0
N003 (  1,  1) [000053] ------------        t53 =    LCL_VAR   ref    V05 tmp2         u:2 (last use) <l:$280, c:$2c0>
                                                  /--*  t53    ref    
               [000171] ------------       t171 = *  PUTARG_REG ref    REG rcx
N004 (  1,  1) [000054] ------------        t54 =    CNS_INT   int    -1 $41
                                                  /--*  t54    int    
               [000172] ------------       t172 = *  PUTARG_REG int    REG rdx
                                                  /--*  t171   ref    this in rcx
                                                  +--*  t172   int    arg1 in rdx
N005 ( 16, 10) [000055] --CXG-------        t55 = *  CALL      int    System.Threading.WaitHandle.WaitOneNoCheck $102
               [000158] ------------                 IL_OFFSET void   IL offset: 0x5
N001 ( 14,  5) [000001] --CXG-------                 CALL      void   HotkeyedMusicPlayer.ArgsTransport.EnsureRootKeyExists $VN.Void
               [000159] ------------                 IL_OFFSET void   IL offset: 0xa
N005 (  2, 10) [000086] H-----------        t86 =    CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer" $241
                                                  /--*  t86    long   
N006 (  4, 12) [000087] #---G-------        t87 = *  IND       ref    $1c7
                                                  /--*  t87    ref    
N008 (  4, 12) [000141] DA--G-------              *  STORE_LCL_VAR ref    V09 cse2         d:1
N009 (  1,  1) [000142] ------------       t142 =    LCL_VAR   ref    V09 cse2         u:1 $1c7
                                                  /--*  t142   ref    
               [000173] ------------       t173 = *  PUTARG_REG ref    REG rcx
N011 (  2, 10) [000088] H-----------        t88 =    CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance" $242
                                                  /--*  t88    long   
N012 (  4, 12) [000089] #---G-------        t89 = *  IND       ref    $1c8
                                                  /--*  t89    ref    
N014 (  4, 12) [000146] DA--G-------              *  STORE_LCL_VAR ref    V10 cse3         d:1
N015 (  1,  1) [000147] ------------       t147 =    LCL_VAR   ref    V10 cse3         u:1 $1c8
                                                  /--*  t147   ref    
               [000174] ------------       t174 = *  PUTARG_REG ref    REG rdx
N017 (  1,  1) [000004] ------------         t4 =    LCL_VAR   ref    V00 arg0         u:1 $80
                                                  /--*  t4     ref    
               [000175] ------------       t175 = *  PUTARG_REG ref    REG r8
                                                  /--*  t173   ref    arg0 in rcx
                                                  +--*  t174   ref    arg1 in rdx
                                                  +--*  t175   ref    arg2 in r8
N018 ( 25, 35) [000005] --CXG-------         t5 = *  CALL      ref    Microsoft.Win32.Registry.GetValue $2c8
                                                  /--*  t5     ref    
N020 ( 25, 35) [000094] DA-XG-----L-              *  STORE_LCL_VAR ref    V06 tmp3         d:2
N021 (  1,  1) [000095] ------------        t95 =    LCL_VAR   ref    V06 tmp3         u:2 (last use) $2c8
                                                  /--*  t95    ref    
               [000176] ------------       t176 = *  PUTARG_REG ref    REG rdx
N022 (  2, 10) [000006] H------N----         t6 =    CNS_INT(h) long   0xd1ffab1e class $243
                                                  /--*  t6     long   
               [000177] ------------       t177 = *  PUTARG_REG long   REG rcx
                                                  /--*  t176   ref    arg1 in rdx
                                                  +--*  t177   long   arg0 in rcx
N023 ( 45, 53) [000007] --CXG-------         t7 = *  CALL help ref    HELPER.CORINFO_HELP_CHKCASTARRAY $1cd
                                                  /--*  t7     ref    
N025 ( 45, 53) [000009] DA-XG-------              *  STORE_LCL_VAR ref    V04 tmp1         d:2
N003 (  1,  1) [000011] ------------        t11 =    LCL_VAR   ref    V04 tmp1         u:2 $2c8
                                                  /--*  t11    ref    
               [000165] -c----------       t165 = *  LEA(b+8)  ref   
                                                  /--*  t165   ref    
N004 (  3,  3) [000012] ---X--------        t12 = *  IND       int    $340
N005 (  1,  1) [000013] -c----------        t13 =    CNS_INT   int    1 $42
                                                  /--*  t12    int    
                                                  +--*  t13    int    
N006 (  5,  5) [000014] ---X--------        t14 = *  ADD       int    $342
                                                  /--*  t14    int    
N007 (  6,  7) [000016] ---X--------        t16 = *  CAST      long <- int $203
                                                  /--*  t16    long   
               [000178] ---X--------       t178 = *  PUTARG_REG long   REG rdx
N008 (  2, 10) [000015] H-----------        t15 =    CNS_INT(h) long   0xd1ffab1e class $243
                                                  /--*  t15    long   
               [000179] ------------       t179 = *  PUTARG_REG long   REG rcx
                                                  /--*  t178   long   arg1 in rdx
                                                  +--*  t179   long   arg0 in rcx
N009 ( 22, 24) [000017] --CXG-------        t17 = *  CALL help ref    HELPER.CORINFO_HELP_NEWARR_1_OBJ $1d1
                                                  /--*  t17    ref    
N011 ( 22, 24) [000019] DA-XG-------              *  STORE_LCL_VAR ref    V01 loc0         d:2
N003 (  1,  1) [000020] ------------        t20 =    LCL_VAR   ref    V00 arg0         u:1 (last use) $80
                                                  /--*  t20    ref    
               [000180] ------------       t180 = *  PUTARG_REG ref    REG rdx
N004 (  1,  1) [000066] ------------        t66 =    CNS_INT   int    124 $45
                                                  /--*  t66    int    
               [000181] ------------       t181 = *  PUTARG_REG int    REG rcx
                                                  /--*  t180   ref    arg1 in rdx
                                                  +--*  t181   int    arg0 in rcx
N005 ( 16,  9) [000062] --CXG-------        t62 = *  CALL      ref    System.String.Join $2cf
                                                  /--*  t62    ref    
N007 ( 20, 12) [000024] DA-XG-------              *  STORE_LCL_VAR ref    V02 loc1         d:2
N004 (  1,  1) [000010] ------------        t10 =    LCL_VAR   ref    V04 tmp1         u:2 (last use) $2c8
                                                  /--*  t10    ref    
               [000182] ------------       t182 = *  PUTARG_REG ref    REG rcx
N005 (  1,  1) [000025] ------------        t25 =    LCL_VAR   ref    V01 loc0         u:2 $281
                                                  /--*  t25    ref    
               [000183] ------------       t183 = *  PUTARG_REG ref    REG rdx
N006 (  1,  1) [000026] ------------        t26 =    CNS_INT   int    0 $40
                                                  /--*  t26    int    
               [000184] ------------       t184 = *  PUTARG_REG int    REG r8
N001 (  2, 10) [000185] Hc----------       t185 =    CNS_INT(h) long   0xd1ffab1e ftn
                                                  /--*  t185   long   
N002 (  4, 12) [000186] -c----------       t186 = *  IND       long   REG NA
                                                  /--*  t182   ref    this in rcx
                                                  +--*  t183   ref    arg1 in rdx
                                                  +--*  t184   int    arg2 in r8
                                                  +--*  t186   long   control expr
N007 ( 17, 12) [000027] --CXG-------              *  CALL      void   System.Array.CopyTo $VN.Void
               [000160] ------------                 IL_OFFSET void   IL offset: 0x38
N001 (  1,  1) [000029] ------------        t29 =    LCL_VAR   ref    V01 loc0         u:2 $281
                                                  /--*  t29    ref    
               [000167] -c----------       t167 = *  LEA(b+8)  ref   
                                                  /--*  t167   ref    
N002 (  3,  3) [000030] ---X--------        t30 = *  IND       int    $343
                                                  /--*  t30    int    
N004 (  3,  3) [000151] DA-X--------              *  STORE_LCL_VAR int    V11 cse4         d:1
N005 (  1,  1) [000152] ------------       t152 =    LCL_VAR   int    V11 cse4         u:1 $343
N007 (  1,  1) [000031] -c----------        t31 =    CNS_INT   int    -1 $41
                                                  /--*  t152   int    
                                                  +--*  t31    int    
N008 (  6,  6) [000032] ---X--------        t32 = *  ADD       int    $345
                                                  /--*  t32    int    
N010 (  6,  6) [000136] DA-X--------              *  STORE_LCL_VAR int    V08 cse1         d:1
N011 (  1,  1) [000137] ------------       t137 =    LCL_VAR   int    V08 cse1         u:1 $345
N013 (  1,  1) [000154] ------------       t154 =    LCL_VAR   int    V11 cse4         u:1 $301
                                                  /--*  t137   int    
                                                  +--*  t154   int    
N014 ( 12, 15) [000110] ---X--------              *  ARR_BOUNDS_CHECK_Rng void   $1d7
N015 (  1,  1) [000139] ------------       t139 =    LCL_VAR   int    V08 cse1         u:1 $344
                                                  /--*  t139   int    
N016 (  2,  3) [000111] ------------       t111 = *  CAST      long <- int $205
N021 (  1,  1) [000104] ------------       t104 =    LCL_VAR   ref    V01 loc0         u:2 $281
                                                  /--*  t104   ref    
                                                  +--*  t111   long   
N022 (  5,  6) [000116] ------------       t116 = *  LEA(b+(i*8)+16) byref 
N025 (  3,  2) [000033] ------------        t33 =    LCL_VAR   ref    V02 loc1         u:2 (last use) $2cf
                                                  /--*  t116   byref  
                                                  +--*  t33    ref    
               [000161] -A-XG-------              *  STOREIND  ref   
               [000162] ------------                 IL_OFFSET void   IL offset: 0x40
N005 (  1,  1) [000144] ------------       t144 =    LCL_VAR   ref    V09 cse2         u:1 $1c7
                                                  /--*  t144   ref    
               [000187] ------------       t187 = *  PUTARG_REG ref    REG rcx
N006 (  1,  1) [000149] ------------       t149 =    LCL_VAR   ref    V10 cse3         u:1 $1c8
                                                  /--*  t149   ref    
               [000188] ------------       t188 = *  PUTARG_REG ref    REG rdx
N007 (  1,  1) [000038] ------------        t38 =    LCL_VAR   ref    V01 loc0         u:2 (last use) $281
                                                  /--*  t38    ref    
               [000189] ------------       t189 = *  PUTARG_REG ref    REG r8
N008 (  1,  1) [000070] ------------        t70 =    CNS_INT   int    0 $40
                                                  /--*  t70    int    
               [000190] ------------       t190 = *  PUTARG_REG int    REG r9
                                                  /--*  t187   ref    arg0 in rcx
                                                  +--*  t188   ref    arg1 in rdx
                                                  +--*  t189   ref    arg2 in r8
                                                  +--*  t190   int    arg3 in r9
N009 ( 18, 13) [000071] --CXG-------              *  CALL      void   Microsoft.Win32.Registry.SetValue $VN.Void
               [000163] ------------                 IL_OFFSET void   IL offset: 0x50
N003 (  2, 10) [000128] I-----------       t128 =    CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock] $240
                                                  /--*  t128   long   
N004 (  4, 12) [000073] n---G-------        t73 = *  IND       ref    <l:$285, c:$2da>
                                                  /--*  t73    ref    
               [000191] ----G-------       t191 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t191   ref    this in rcx
N006 ( 19, 20) [000079] --CXG-------              *  CALL nullcheck void   System.Threading.Mutex.ReleaseMutex $VN.Void

------------ BB02 [???..???) (throw), preds={} succs={}
N001 ( 14,  5) [000168] --CXG-------                 CALL help void   HELPER.CORINFO_HELP_RNGCHKFAIL

-------------------------------------------------------------------------------------------------------------------

*** lvaComputeRefCounts ***

*** lvaComputeRefCounts -- explicit counts ***
New refCnts for V07: refCnt =  1, refCntWtd = 1   
New refCnts for V05: refCnt =  1, refCntWtd = 2   
New refCnts for V05: refCnt =  2, refCntWtd = 4   
New refCnts for V05: refCnt =  3, refCntWtd = 6   
New refCnts for V09: refCnt =  1, refCntWtd = 1   
New refCnts for V09: refCnt =  2, refCntWtd = 2   
New refCnts for V10: refCnt =  1, refCntWtd = 1   
New refCnts for V10: refCnt =  2, refCntWtd = 2   
New refCnts for V00: refCnt =  1, refCntWtd = 1   
New refCnts for V06: refCnt =  1, refCntWtd = 2   
New refCnts for V06: refCnt =  2, refCntWtd = 4   
New refCnts for V04: refCnt =  1, refCntWtd = 2   
New refCnts for V04: refCnt =  2, refCntWtd = 4   
New refCnts for V01: refCnt =  1, refCntWtd = 1   
New refCnts for V00: refCnt =  2, refCntWtd = 2   
New refCnts for V02: refCnt =  1, refCntWtd = 1   
New refCnts for V04: refCnt =  3, refCntWtd = 6   
New refCnts for V01: refCnt =  2, refCntWtd = 2   
New refCnts for V01: refCnt =  3, refCntWtd = 3   
New refCnts for V11: refCnt =  1, refCntWtd = 1   
New refCnts for V11: refCnt =  2, refCntWtd = 2   
New refCnts for V08: refCnt =  1, refCntWtd = 1   
New refCnts for V08: refCnt =  2, refCntWtd = 2   
New refCnts for V11: refCnt =  3, refCntWtd = 3   
New refCnts for V08: refCnt =  3, refCntWtd = 3   
New refCnts for V01: refCnt =  4, refCntWtd = 4   
New refCnts for V02: refCnt =  2, refCntWtd = 2   
New refCnts for V09: refCnt =  3, refCntWtd = 3   
New refCnts for V10: refCnt =  3, refCntWtd = 3   
New refCnts for V01: refCnt =  5, refCntWtd = 5   

*** lvaComputeRefCounts -- implicit counts ***
New refCnts for V00: refCnt =  3, refCntWtd = 3   
New refCnts for V00: refCnt =  4, refCntWtd = 4   
*************** In fgLocalVarLiveness()
; Initial local variable assignments
;
;  V00 arg0              ref  class-hnd
;  V01 loc0              ref  class-hnd exact
;  V02 loc1              ref  class-hnd
;  V03 OutArgs        lclBlk <32>  "OutgoingArgSpace"
;  V04 tmp1              ref  class-hnd "dup spill"
;  V05 tmp2              ref  class-hnd "Inlining Arg"
;  V06 tmp3              ref  "argument with side effect"
;  V07 cse0             long  "CSE - aggressive"
;  V08 cse1              int  "CSE - aggressive"
;  V09 cse2              ref  "CSE - aggressive"
;  V10 cse3              ref  "CSE - aggressive"
;  V11 cse4              int  "CSE - aggressive"
In fgLocalVarLivenessInit
Tracked variable (11 out of 12) table:
V00 arg0          [   ref]: refCnt =    4, refCntWtd =   4   
V04 tmp1          [   ref]: refCnt =    3, refCntWtd =   6   
V05 tmp2          [   ref]: refCnt =    3, refCntWtd =   6   
V01 loc0          [   ref]: refCnt =    5, refCntWtd =   5   
V06 tmp3          [   ref]: refCnt =    2, refCntWtd =   4   
V09 cse2          [   ref]: refCnt =    3, refCntWtd =   3   
V10 cse3          [   ref]: refCnt =    3, refCntWtd =   3   
V08 cse1          [   int]: refCnt =    3, refCntWtd =   3   
V11 cse4          [   int]: refCnt =    3, refCntWtd =   3   
V02 loc1          [   ref]: refCnt =    2, refCntWtd =   2   
V07 cse0          [  long]: refCnt =    1, refCntWtd =   1   

*************** In fgPerBlockLocalVarLiveness()
BB01 USE(1)={V00                                        } + ByrefExposed + GcHeap
     DEF(10)={    V04 V05 V01 V06 V09 V10 V08 V11 V02 V07} + ByrefExposed* + GcHeap*

BB02 USE(0)={}
     DEF(0)={}

** Memory liveness computed, GcHeap states and ByrefExposed states match
*************** In fgInterBlockLocalVarLiveness()

BB liveness after fgLiveVarAnalysis():

BB01 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(0)={   }

BB02 IN (0)={}
     OUT(0)={}

Removing dead store:
N007 ( 17, 18) [000131] DA-XG-------              *  STORE_LCL_VAR long   V07 cse0         d:1 (last use)

*************** In fgUpdateFlowGraph()
Before updating the flow graph:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..056)        (return)                     i label target jmp hascall gcsafe idxlen new[] nullcheck LIR 
BB02 [0006]  0                             0       [???..???)        (throw )                     keep i internal rare label target LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

*************** In fgDebugCheckBBlist

*** lvaComputeRefCounts ***

*** lvaComputeRefCounts -- explicit counts ***
New refCnts for V05: refCnt =  1, refCntWtd = 2   
New refCnts for V05: refCnt =  2, refCntWtd = 4   
New refCnts for V05: refCnt =  3, refCntWtd = 6   
New refCnts for V09: refCnt =  1, refCntWtd = 1   
New refCnts for V09: refCnt =  2, refCntWtd = 2   
New refCnts for V10: refCnt =  1, refCntWtd = 1   
New refCnts for V10: refCnt =  2, refCntWtd = 2   
New refCnts for V00: refCnt =  1, refCntWtd = 1   
New refCnts for V06: refCnt =  1, refCntWtd = 2   
New refCnts for V06: refCnt =  2, refCntWtd = 4   
New refCnts for V04: refCnt =  1, refCntWtd = 2   
New refCnts for V04: refCnt =  2, refCntWtd = 4   
New refCnts for V01: refCnt =  1, refCntWtd = 1   
New refCnts for V00: refCnt =  2, refCntWtd = 2   
New refCnts for V02: refCnt =  1, refCntWtd = 1   
New refCnts for V04: refCnt =  3, refCntWtd = 6   
New refCnts for V01: refCnt =  2, refCntWtd = 2   
New refCnts for V01: refCnt =  3, refCntWtd = 3   
New refCnts for V11: refCnt =  1, refCntWtd = 1   
New refCnts for V11: refCnt =  2, refCntWtd = 2   
New refCnts for V08: refCnt =  1, refCntWtd = 1   
New refCnts for V08: refCnt =  2, refCntWtd = 2   
New refCnts for V11: refCnt =  3, refCntWtd = 3   
New refCnts for V08: refCnt =  3, refCntWtd = 3   
New refCnts for V01: refCnt =  4, refCntWtd = 4   
New refCnts for V02: refCnt =  2, refCntWtd = 2   
New refCnts for V09: refCnt =  3, refCntWtd = 3   
New refCnts for V10: refCnt =  3, refCntWtd = 3   
New refCnts for V01: refCnt =  5, refCntWtd = 5   

*** lvaComputeRefCounts -- implicit counts ***
New refCnts for V00: refCnt =  3, refCntWtd = 3   
New refCnts for V00: refCnt =  4, refCntWtd = 4   

*************** Finishing PHASE Lowering nodeinfo
Trees after Lowering nodeinfo

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..056)        (return)                     i label target jmp hascall gcsafe idxlen new[] nullcheck LIR 
BB02 [0006]  0                             0       [???..???)        (throw )                     keep i internal rare label target LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..056) (return), preds={} succs={}
               [000155] ------------                 IL_OFFSET void   IL offset: 0x0
N003 (  2, 10) [000044] ------------        t44 =    CNS_INT   long   0x7ffc7e4c17a0 $140
                                                  /--*  t44    long   
               [000169] ------------       t169 = *  PUTARG_REG long   REG rcx
N004 (  1,  1) [000045] ------------        t45 =    CNS_INT   int    1 $42
                                                  /--*  t45    int    
               [000170] ------------       t170 = *  PUTARG_REG int    REG rdx
                                                  /--*  t169   long   arg0 in rcx
                                                  +--*  t170   int    arg1 in rdx
N005 ( 17, 18) [000046] H-CXG-------        t46 = *  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE $201
N010 (  2, 10) [000083] I-----------        t83 =    CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock] $240
                                                  /--*  t83    long   
N011 (  4, 12) [000042] n---G-------        t42 = *  IND       ref    <l:$280, c:$2c0>
                                                  /--*  t42    ref    
N014 ( 22, 31) [000059] DA-XG-------              *  STORE_LCL_VAR ref    V05 tmp2         d:2
               [000156] ------------                 IL_OFFSET void   IL offset: 0x0
N001 (  1,  1) [000056] ------------        t56 =    LCL_VAR   ref    V05 tmp2         u:2 <l:$280, c:$2c0>
                                                  /--*  t56    ref    
N002 (  2,  2) [000057] ---X--------              *  NULLCHECK int    <l:$1c6, c:$1c5>
               [000157] ------------                 IL_OFFSET void   IL offset: 0x0
N003 (  1,  1) [000053] ------------        t53 =    LCL_VAR   ref    V05 tmp2         u:2 (last use) <l:$280, c:$2c0>
                                                  /--*  t53    ref    
               [000171] ------------       t171 = *  PUTARG_REG ref    REG rcx
N004 (  1,  1) [000054] ------------        t54 =    CNS_INT   int    -1 $41
                                                  /--*  t54    int    
               [000172] ------------       t172 = *  PUTARG_REG int    REG rdx
                                                  /--*  t171   ref    this in rcx
                                                  +--*  t172   int    arg1 in rdx
N005 ( 16, 10) [000055] --CXG-------        t55 = *  CALL      int    System.Threading.WaitHandle.WaitOneNoCheck $102
               [000158] ------------                 IL_OFFSET void   IL offset: 0x5
N001 ( 14,  5) [000001] --CXG-------                 CALL      void   HotkeyedMusicPlayer.ArgsTransport.EnsureRootKeyExists $VN.Void
               [000159] ------------                 IL_OFFSET void   IL offset: 0xa
N005 (  2, 10) [000086] H-----------        t86 =    CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer" $241
                                                  /--*  t86    long   
N006 (  4, 12) [000087] #---G-------        t87 = *  IND       ref    $1c7
                                                  /--*  t87    ref    
N008 (  4, 12) [000141] DA--G-------              *  STORE_LCL_VAR ref    V09 cse2         d:1
N009 (  1,  1) [000142] ------------       t142 =    LCL_VAR   ref    V09 cse2         u:1 $1c7
                                                  /--*  t142   ref    
               [000173] ------------       t173 = *  PUTARG_REG ref    REG rcx
N011 (  2, 10) [000088] H-----------        t88 =    CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance" $242
                                                  /--*  t88    long   
N012 (  4, 12) [000089] #---G-------        t89 = *  IND       ref    $1c8
                                                  /--*  t89    ref    
N014 (  4, 12) [000146] DA--G-------              *  STORE_LCL_VAR ref    V10 cse3         d:1
N015 (  1,  1) [000147] ------------       t147 =    LCL_VAR   ref    V10 cse3         u:1 $1c8
                                                  /--*  t147   ref    
               [000174] ------------       t174 = *  PUTARG_REG ref    REG rdx
N017 (  1,  1) [000004] ------------         t4 =    LCL_VAR   ref    V00 arg0         u:1 $80
                                                  /--*  t4     ref    
               [000175] ------------       t175 = *  PUTARG_REG ref    REG r8
                                                  /--*  t173   ref    arg0 in rcx
                                                  +--*  t174   ref    arg1 in rdx
                                                  +--*  t175   ref    arg2 in r8
N018 ( 25, 35) [000005] --CXG-------         t5 = *  CALL      ref    Microsoft.Win32.Registry.GetValue $2c8
                                                  /--*  t5     ref    
N020 ( 25, 35) [000094] DA-XG-----L-              *  STORE_LCL_VAR ref    V06 tmp3         d:2
N021 (  1,  1) [000095] ------------        t95 =    LCL_VAR   ref    V06 tmp3         u:2 (last use) $2c8
                                                  /--*  t95    ref    
               [000176] ------------       t176 = *  PUTARG_REG ref    REG rdx
N022 (  2, 10) [000006] H------N----         t6 =    CNS_INT(h) long   0xd1ffab1e class $243
                                                  /--*  t6     long   
               [000177] ------------       t177 = *  PUTARG_REG long   REG rcx
                                                  /--*  t176   ref    arg1 in rdx
                                                  +--*  t177   long   arg0 in rcx
N023 ( 45, 53) [000007] --CXG-------         t7 = *  CALL help ref    HELPER.CORINFO_HELP_CHKCASTARRAY $1cd
                                                  /--*  t7     ref    
N025 ( 45, 53) [000009] DA-XG-------              *  STORE_LCL_VAR ref    V04 tmp1         d:2
N003 (  1,  1) [000011] ------------        t11 =    LCL_VAR   ref    V04 tmp1         u:2 $2c8
                                                  /--*  t11    ref    
               [000165] -c----------       t165 = *  LEA(b+8)  ref   
                                                  /--*  t165   ref    
N004 (  3,  3) [000012] ---X--------        t12 = *  IND       int    $340
N005 (  1,  1) [000013] -c----------        t13 =    CNS_INT   int    1 $42
                                                  /--*  t12    int    
                                                  +--*  t13    int    
N006 (  5,  5) [000014] ---X--------        t14 = *  ADD       int    $342
                                                  /--*  t14    int    
N007 (  6,  7) [000016] ---X--------        t16 = *  CAST      long <- int $203
                                                  /--*  t16    long   
               [000178] ---X--------       t178 = *  PUTARG_REG long   REG rdx
N008 (  2, 10) [000015] H-----------        t15 =    CNS_INT(h) long   0xd1ffab1e class $243
                                                  /--*  t15    long   
               [000179] ------------       t179 = *  PUTARG_REG long   REG rcx
                                                  /--*  t178   long   arg1 in rdx
                                                  +--*  t179   long   arg0 in rcx
N009 ( 22, 24) [000017] --CXG-------        t17 = *  CALL help ref    HELPER.CORINFO_HELP_NEWARR_1_OBJ $1d1
                                                  /--*  t17    ref    
N011 ( 22, 24) [000019] DA-XG-------              *  STORE_LCL_VAR ref    V01 loc0         d:2
N003 (  1,  1) [000020] ------------        t20 =    LCL_VAR   ref    V00 arg0         u:1 (last use) $80
                                                  /--*  t20    ref    
               [000180] ------------       t180 = *  PUTARG_REG ref    REG rdx
N004 (  1,  1) [000066] ------------        t66 =    CNS_INT   int    124 $45
                                                  /--*  t66    int    
               [000181] ------------       t181 = *  PUTARG_REG int    REG rcx
                                                  /--*  t180   ref    arg1 in rdx
                                                  +--*  t181   int    arg0 in rcx
N005 ( 16,  9) [000062] --CXG-------        t62 = *  CALL      ref    System.String.Join $2cf
                                                  /--*  t62    ref    
N007 ( 20, 12) [000024] DA-XG-------              *  STORE_LCL_VAR ref    V02 loc1         d:2
N004 (  1,  1) [000010] ------------        t10 =    LCL_VAR   ref    V04 tmp1         u:2 (last use) $2c8
                                                  /--*  t10    ref    
               [000182] ------------       t182 = *  PUTARG_REG ref    REG rcx
N005 (  1,  1) [000025] ------------        t25 =    LCL_VAR   ref    V01 loc0         u:2 $281
                                                  /--*  t25    ref    
               [000183] ------------       t183 = *  PUTARG_REG ref    REG rdx
N006 (  1,  1) [000026] ------------        t26 =    CNS_INT   int    0 $40
                                                  /--*  t26    int    
               [000184] ------------       t184 = *  PUTARG_REG int    REG r8
N001 (  2, 10) [000185] Hc----------       t185 =    CNS_INT(h) long   0xd1ffab1e ftn
                                                  /--*  t185   long   
N002 (  4, 12) [000186] -c----------       t186 = *  IND       long   REG NA
                                                  /--*  t182   ref    this in rcx
                                                  +--*  t183   ref    arg1 in rdx
                                                  +--*  t184   int    arg2 in r8
                                                  +--*  t186   long   control expr
N007 ( 17, 12) [000027] --CXG-------              *  CALL      void   System.Array.CopyTo $VN.Void
               [000160] ------------                 IL_OFFSET void   IL offset: 0x38
N001 (  1,  1) [000029] ------------        t29 =    LCL_VAR   ref    V01 loc0         u:2 $281
                                                  /--*  t29    ref    
               [000167] -c----------       t167 = *  LEA(b+8)  ref   
                                                  /--*  t167   ref    
N002 (  3,  3) [000030] ---X--------        t30 = *  IND       int    $343
                                                  /--*  t30    int    
N004 (  3,  3) [000151] DA-X--------              *  STORE_LCL_VAR int    V11 cse4         d:1
N005 (  1,  1) [000152] ------------       t152 =    LCL_VAR   int    V11 cse4         u:1 $343
N007 (  1,  1) [000031] -c----------        t31 =    CNS_INT   int    -1 $41
                                                  /--*  t152   int    
                                                  +--*  t31    int    
N008 (  6,  6) [000032] ---X--------        t32 = *  ADD       int    $345
                                                  /--*  t32    int    
N010 (  6,  6) [000136] DA-X--------              *  STORE_LCL_VAR int    V08 cse1         d:1
N011 (  1,  1) [000137] ------------       t137 =    LCL_VAR   int    V08 cse1         u:1 $345
N013 (  1,  1) [000154] ------------       t154 =    LCL_VAR   int    V11 cse4         u:1 (last use) $301
                                                  /--*  t137   int    
                                                  +--*  t154   int    
N014 ( 12, 15) [000110] ---X--------              *  ARR_BOUNDS_CHECK_Rng void   $1d7
N015 (  1,  1) [000139] ------------       t139 =    LCL_VAR   int    V08 cse1         u:1 (last use) $344
                                                  /--*  t139   int    
N016 (  2,  3) [000111] ------------       t111 = *  CAST      long <- int $205
N021 (  1,  1) [000104] ------------       t104 =    LCL_VAR   ref    V01 loc0         u:2 $281
                                                  /--*  t104   ref    
                                                  +--*  t111   long   
N022 (  5,  6) [000116] ------------       t116 = *  LEA(b+(i*8)+16) byref 
N025 (  3,  2) [000033] ------------        t33 =    LCL_VAR   ref    V02 loc1         u:2 (last use) $2cf
                                                  /--*  t116   byref  
                                                  +--*  t33    ref    
               [000161] -A-XG-------              *  STOREIND  ref   
               [000162] ------------                 IL_OFFSET void   IL offset: 0x40
N005 (  1,  1) [000144] ------------       t144 =    LCL_VAR   ref    V09 cse2         u:1 (last use) $1c7
                                                  /--*  t144   ref    
               [000187] ------------       t187 = *  PUTARG_REG ref    REG rcx
N006 (  1,  1) [000149] ------------       t149 =    LCL_VAR   ref    V10 cse3         u:1 (last use) $1c8
                                                  /--*  t149   ref    
               [000188] ------------       t188 = *  PUTARG_REG ref    REG rdx
N007 (  1,  1) [000038] ------------        t38 =    LCL_VAR   ref    V01 loc0         u:2 (last use) $281
                                                  /--*  t38    ref    
               [000189] ------------       t189 = *  PUTARG_REG ref    REG r8
N008 (  1,  1) [000070] ------------        t70 =    CNS_INT   int    0 $40
                                                  /--*  t70    int    
               [000190] ------------       t190 = *  PUTARG_REG int    REG r9
                                                  /--*  t187   ref    arg0 in rcx
                                                  +--*  t188   ref    arg1 in rdx
                                                  +--*  t189   ref    arg2 in r8
                                                  +--*  t190   int    arg3 in r9
N009 ( 18, 13) [000071] --CXG-------              *  CALL      void   Microsoft.Win32.Registry.SetValue $VN.Void
               [000163] ------------                 IL_OFFSET void   IL offset: 0x50
N003 (  2, 10) [000128] I-----------       t128 =    CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock] $240
                                                  /--*  t128   long   
N004 (  4, 12) [000073] n---G-------        t73 = *  IND       ref    <l:$285, c:$2da>
                                                  /--*  t73    ref    
               [000191] ----G-------       t191 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t191   ref    this in rcx
N006 ( 19, 20) [000079] --CXG-------              *  CALL nullcheck void   System.Threading.Mutex.ReleaseMutex $VN.Void

------------ BB02 [???..???) (throw), preds={} succs={}
N001 ( 14,  5) [000168] --CXG-------                 CALL help void   HELPER.CORINFO_HELP_RNGCHKFAIL

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist
Trees before Calculate stack level slots

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..056)        (return)                     i label target jmp hascall gcsafe idxlen new[] nullcheck LIR 
BB02 [0006]  0                             0       [???..???)        (throw )                     keep i internal rare label target LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..056) (return), preds={} succs={}
               [000155] ------------                 IL_OFFSET void   IL offset: 0x0
N003 (  2, 10) [000044] ------------        t44 =    CNS_INT   long   0x7ffc7e4c17a0 $140
                                                  /--*  t44    long   
               [000169] ------------       t169 = *  PUTARG_REG long   REG rcx
N004 (  1,  1) [000045] ------------        t45 =    CNS_INT   int    1 $42
                                                  /--*  t45    int    
               [000170] ------------       t170 = *  PUTARG_REG int    REG rdx
                                                  /--*  t169   long   arg0 in rcx
                                                  +--*  t170   int    arg1 in rdx
N005 ( 17, 18) [000046] H-CXG-------        t46 = *  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE $201
N010 (  2, 10) [000083] I-----------        t83 =    CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock] $240
                                                  /--*  t83    long   
N011 (  4, 12) [000042] n---G-------        t42 = *  IND       ref    <l:$280, c:$2c0>
                                                  /--*  t42    ref    
N014 ( 22, 31) [000059] DA-XG-------              *  STORE_LCL_VAR ref    V05 tmp2         d:2
               [000156] ------------                 IL_OFFSET void   IL offset: 0x0
N001 (  1,  1) [000056] ------------        t56 =    LCL_VAR   ref    V05 tmp2         u:2 <l:$280, c:$2c0>
                                                  /--*  t56    ref    
N002 (  2,  2) [000057] ---X--------              *  NULLCHECK int    <l:$1c6, c:$1c5>
               [000157] ------------                 IL_OFFSET void   IL offset: 0x0
N003 (  1,  1) [000053] ------------        t53 =    LCL_VAR   ref    V05 tmp2         u:2 (last use) <l:$280, c:$2c0>
                                                  /--*  t53    ref    
               [000171] ------------       t171 = *  PUTARG_REG ref    REG rcx
N004 (  1,  1) [000054] ------------        t54 =    CNS_INT   int    -1 $41
                                                  /--*  t54    int    
               [000172] ------------       t172 = *  PUTARG_REG int    REG rdx
                                                  /--*  t171   ref    this in rcx
                                                  +--*  t172   int    arg1 in rdx
N005 ( 16, 10) [000055] --CXG-------        t55 = *  CALL      int    System.Threading.WaitHandle.WaitOneNoCheck $102
               [000158] ------------                 IL_OFFSET void   IL offset: 0x5
N001 ( 14,  5) [000001] --CXG-------                 CALL      void   HotkeyedMusicPlayer.ArgsTransport.EnsureRootKeyExists $VN.Void
               [000159] ------------                 IL_OFFSET void   IL offset: 0xa
N005 (  2, 10) [000086] H-----------        t86 =    CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer" $241
                                                  /--*  t86    long   
N006 (  4, 12) [000087] #---G-------        t87 = *  IND       ref    $1c7
                                                  /--*  t87    ref    
N008 (  4, 12) [000141] DA--G-------              *  STORE_LCL_VAR ref    V09 cse2         d:1
N009 (  1,  1) [000142] ------------       t142 =    LCL_VAR   ref    V09 cse2         u:1 $1c7
                                                  /--*  t142   ref    
               [000173] ------------       t173 = *  PUTARG_REG ref    REG rcx
N011 (  2, 10) [000088] H-----------        t88 =    CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance" $242
                                                  /--*  t88    long   
N012 (  4, 12) [000089] #---G-------        t89 = *  IND       ref    $1c8
                                                  /--*  t89    ref    
N014 (  4, 12) [000146] DA--G-------              *  STORE_LCL_VAR ref    V10 cse3         d:1
N015 (  1,  1) [000147] ------------       t147 =    LCL_VAR   ref    V10 cse3         u:1 $1c8
                                                  /--*  t147   ref    
               [000174] ------------       t174 = *  PUTARG_REG ref    REG rdx
N017 (  1,  1) [000004] ------------         t4 =    LCL_VAR   ref    V00 arg0         u:1 $80
                                                  /--*  t4     ref    
               [000175] ------------       t175 = *  PUTARG_REG ref    REG r8
                                                  /--*  t173   ref    arg0 in rcx
                                                  +--*  t174   ref    arg1 in rdx
                                                  +--*  t175   ref    arg2 in r8
N018 ( 25, 35) [000005] --CXG-------         t5 = *  CALL      ref    Microsoft.Win32.Registry.GetValue $2c8
                                                  /--*  t5     ref    
N020 ( 25, 35) [000094] DA-XG-----L-              *  STORE_LCL_VAR ref    V06 tmp3         d:2
N021 (  1,  1) [000095] ------------        t95 =    LCL_VAR   ref    V06 tmp3         u:2 (last use) $2c8
                                                  /--*  t95    ref    
               [000176] ------------       t176 = *  PUTARG_REG ref    REG rdx
N022 (  2, 10) [000006] H------N----         t6 =    CNS_INT(h) long   0xd1ffab1e class $243
                                                  /--*  t6     long   
               [000177] ------------       t177 = *  PUTARG_REG long   REG rcx
                                                  /--*  t176   ref    arg1 in rdx
                                                  +--*  t177   long   arg0 in rcx
N023 ( 45, 53) [000007] --CXG-------         t7 = *  CALL help ref    HELPER.CORINFO_HELP_CHKCASTARRAY $1cd
                                                  /--*  t7     ref    
N025 ( 45, 53) [000009] DA-XG-------              *  STORE_LCL_VAR ref    V04 tmp1         d:2
N003 (  1,  1) [000011] ------------        t11 =    LCL_VAR   ref    V04 tmp1         u:2 $2c8
                                                  /--*  t11    ref    
               [000165] -c----------       t165 = *  LEA(b+8)  ref   
                                                  /--*  t165   ref    
N004 (  3,  3) [000012] ---X--------        t12 = *  IND       int    $340
N005 (  1,  1) [000013] -c----------        t13 =    CNS_INT   int    1 $42
                                                  /--*  t12    int    
                                                  +--*  t13    int    
N006 (  5,  5) [000014] ---X--------        t14 = *  ADD       int    $342
                                                  /--*  t14    int    
N007 (  6,  7) [000016] ---X--------        t16 = *  CAST      long <- int $203
                                                  /--*  t16    long   
               [000178] ---X--------       t178 = *  PUTARG_REG long   REG rdx
N008 (  2, 10) [000015] H-----------        t15 =    CNS_INT(h) long   0xd1ffab1e class $243
                                                  /--*  t15    long   
               [000179] ------------       t179 = *  PUTARG_REG long   REG rcx
                                                  /--*  t178   long   arg1 in rdx
                                                  +--*  t179   long   arg0 in rcx
N009 ( 22, 24) [000017] --CXG-------        t17 = *  CALL help ref    HELPER.CORINFO_HELP_NEWARR_1_OBJ $1d1
                                                  /--*  t17    ref    
N011 ( 22, 24) [000019] DA-XG-------              *  STORE_LCL_VAR ref    V01 loc0         d:2
N003 (  1,  1) [000020] ------------        t20 =    LCL_VAR   ref    V00 arg0         u:1 (last use) $80
                                                  /--*  t20    ref    
               [000180] ------------       t180 = *  PUTARG_REG ref    REG rdx
N004 (  1,  1) [000066] ------------        t66 =    CNS_INT   int    124 $45
                                                  /--*  t66    int    
               [000181] ------------       t181 = *  PUTARG_REG int    REG rcx
                                                  /--*  t180   ref    arg1 in rdx
                                                  +--*  t181   int    arg0 in rcx
N005 ( 16,  9) [000062] --CXG-------        t62 = *  CALL      ref    System.String.Join $2cf
                                                  /--*  t62    ref    
N007 ( 20, 12) [000024] DA-XG-------              *  STORE_LCL_VAR ref    V02 loc1         d:2
N004 (  1,  1) [000010] ------------        t10 =    LCL_VAR   ref    V04 tmp1         u:2 (last use) $2c8
                                                  /--*  t10    ref    
               [000182] ------------       t182 = *  PUTARG_REG ref    REG rcx
N005 (  1,  1) [000025] ------------        t25 =    LCL_VAR   ref    V01 loc0         u:2 $281
                                                  /--*  t25    ref    
               [000183] ------------       t183 = *  PUTARG_REG ref    REG rdx
N006 (  1,  1) [000026] ------------        t26 =    CNS_INT   int    0 $40
                                                  /--*  t26    int    
               [000184] ------------       t184 = *  PUTARG_REG int    REG r8
N001 (  2, 10) [000185] Hc----------       t185 =    CNS_INT(h) long   0xd1ffab1e ftn
                                                  /--*  t185   long   
N002 (  4, 12) [000186] -c----------       t186 = *  IND       long   REG NA
                                                  /--*  t182   ref    this in rcx
                                                  +--*  t183   ref    arg1 in rdx
                                                  +--*  t184   int    arg2 in r8
                                                  +--*  t186   long   control expr
N007 ( 17, 12) [000027] --CXG-------              *  CALL      void   System.Array.CopyTo $VN.Void
               [000160] ------------                 IL_OFFSET void   IL offset: 0x38
N001 (  1,  1) [000029] ------------        t29 =    LCL_VAR   ref    V01 loc0         u:2 $281
                                                  /--*  t29    ref    
               [000167] -c----------       t167 = *  LEA(b+8)  ref   
                                                  /--*  t167   ref    
N002 (  3,  3) [000030] ---X--------        t30 = *  IND       int    $343
                                                  /--*  t30    int    
N004 (  3,  3) [000151] DA-X--------              *  STORE_LCL_VAR int    V11 cse4         d:1
N005 (  1,  1) [000152] ------------       t152 =    LCL_VAR   int    V11 cse4         u:1 $343
N007 (  1,  1) [000031] -c----------        t31 =    CNS_INT   int    -1 $41
                                                  /--*  t152   int    
                                                  +--*  t31    int    
N008 (  6,  6) [000032] ---X--------        t32 = *  ADD       int    $345
                                                  /--*  t32    int    
N010 (  6,  6) [000136] DA-X--------              *  STORE_LCL_VAR int    V08 cse1         d:1
N011 (  1,  1) [000137] ------------       t137 =    LCL_VAR   int    V08 cse1         u:1 $345
N013 (  1,  1) [000154] ------------       t154 =    LCL_VAR   int    V11 cse4         u:1 (last use) $301
                                                  /--*  t137   int    
                                                  +--*  t154   int    
N014 ( 12, 15) [000110] ---X--------              *  ARR_BOUNDS_CHECK_Rng void   $1d7
N015 (  1,  1) [000139] ------------       t139 =    LCL_VAR   int    V08 cse1         u:1 (last use) $344
                                                  /--*  t139   int    
N016 (  2,  3) [000111] ------------       t111 = *  CAST      long <- int $205
N021 (  1,  1) [000104] ------------       t104 =    LCL_VAR   ref    V01 loc0         u:2 $281
                                                  /--*  t104   ref    
                                                  +--*  t111   long   
N022 (  5,  6) [000116] ------------       t116 = *  LEA(b+(i*8)+16) byref 
N025 (  3,  2) [000033] ------------        t33 =    LCL_VAR   ref    V02 loc1         u:2 (last use) $2cf
                                                  /--*  t116   byref  
                                                  +--*  t33    ref    
               [000161] -A-XG-------              *  STOREIND  ref   
               [000162] ------------                 IL_OFFSET void   IL offset: 0x40
N005 (  1,  1) [000144] ------------       t144 =    LCL_VAR   ref    V09 cse2         u:1 (last use) $1c7
                                                  /--*  t144   ref    
               [000187] ------------       t187 = *  PUTARG_REG ref    REG rcx
N006 (  1,  1) [000149] ------------       t149 =    LCL_VAR   ref    V10 cse3         u:1 (last use) $1c8
                                                  /--*  t149   ref    
               [000188] ------------       t188 = *  PUTARG_REG ref    REG rdx
N007 (  1,  1) [000038] ------------        t38 =    LCL_VAR   ref    V01 loc0         u:2 (last use) $281
                                                  /--*  t38    ref    
               [000189] ------------       t189 = *  PUTARG_REG ref    REG r8
N008 (  1,  1) [000070] ------------        t70 =    CNS_INT   int    0 $40
                                                  /--*  t70    int    
               [000190] ------------       t190 = *  PUTARG_REG int    REG r9
                                                  /--*  t187   ref    arg0 in rcx
                                                  +--*  t188   ref    arg1 in rdx
                                                  +--*  t189   ref    arg2 in r8
                                                  +--*  t190   int    arg3 in r9
N009 ( 18, 13) [000071] --CXG-------              *  CALL      void   Microsoft.Win32.Registry.SetValue $VN.Void
               [000163] ------------                 IL_OFFSET void   IL offset: 0x50
N003 (  2, 10) [000128] I-----------       t128 =    CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock] $240
                                                  /--*  t128   long   
N004 (  4, 12) [000073] n---G-------        t73 = *  IND       ref    <l:$285, c:$2da>
                                                  /--*  t73    ref    
               [000191] ----G-------       t191 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t191   ref    this in rcx
N006 ( 19, 20) [000079] --CXG-------              *  CALL nullcheck void   System.Threading.Mutex.ReleaseMutex $VN.Void

------------ BB02 [???..???) (throw), preds={} succs={}
N001 ( 14,  5) [000168] --CXG-------                 CALL help void   HELPER.CORINFO_HELP_RNGCHKFAIL

-------------------------------------------------------------------------------------------------------------------

*************** Starting PHASE Calculate stack level slots

*************** Finishing PHASE Calculate stack level slots [no changes]

*************** Starting PHASE Linear scan register alloc
Clearing modified regs.

buildIntervals ========

-----------------
LIVENESS:
-----------------
BB01 use def in out
{V00}
{V01 V02 V04 V05 V06 V07 V08 V09 V10 V11}
{V00}
{}
BB02 use def in out
{}
{}
{}
{}
Interval  0: ref RefPositions {} physReg:NA Preferences=[allInt]
  Interval  0: (V00) ref RefPositions {} physReg:NA Preferences=[allInt]
Interval  1: ref RefPositions {} physReg:NA Preferences=[allInt]
  Interval  1: (V01) ref RefPositions {} physReg:NA Preferences=[allInt]
Interval  2: ref RefPositions {} physReg:NA Preferences=[allInt]
  Interval  2: (V02) ref RefPositions {} physReg:NA Preferences=[allInt]
Interval  3: ref RefPositions {} physReg:NA Preferences=[allInt]
  Interval  3: (V04) ref RefPositions {} physReg:NA Preferences=[allInt]
Interval  4: ref RefPositions {} physReg:NA Preferences=[allInt]
  Interval  4: (V05) ref RefPositions {} physReg:NA Preferences=[allInt]
Interval  5: ref RefPositions {} physReg:NA Preferences=[allInt]
  Interval  5: (V06) ref RefPositions {} physReg:NA Preferences=[allInt]
Interval  6: int RefPositions {} physReg:NA Preferences=[allInt]
  Interval  6: (V08) int RefPositions {} physReg:NA Preferences=[allInt]
Interval  7: ref RefPositions {} physReg:NA Preferences=[allInt]
  Interval  7: (V09) ref RefPositions {} physReg:NA Preferences=[allInt]
Interval  8: ref RefPositions {} physReg:NA Preferences=[allInt]
  Interval  8: (V10) ref RefPositions {} physReg:NA Preferences=[allInt]
Interval  9: int RefPositions {} physReg:NA Preferences=[allInt]
  Interval  9: (V11) int RefPositions {} physReg:NA Preferences=[allInt]

FP callee save candidate vars: None

floatVarCount = 0; hasLoops = 0, singleExit = 1
TUPLE STYLE DUMP BEFORE LSRA

New BlockSet epoch 3, # of blocks (including unused BB00): 3, bitset array size: 1 (short)
LSRA Block Sequence: BB01(  1   ) 
BB02(  0   ) 

BB01 [000..056) (return), preds={} succs={}
=====
  N000.                    IL_OFFSET IL offset: 0x0
  N003. t44             =  CNS_INT   0x7ffc7e4c17a0
  N000. t169            =  PUTARG_REG; t44
  N004. t45             =  CNS_INT   1
  N000. t170            =  PUTARG_REG; t45
  N005.                    CALL help; t169,t170
  N010. t83             =  CNS_INT(h) 0xd1ffab1e static Fseq[_registryLock]
  N011. t42             =  IND      ; t83
  N014.                    V05(t59); t42
  N000.                    IL_OFFSET IL offset: 0x0
  N001.                    V05(t56)
  N002.                    NULLCHECK; t56
  N000.                    IL_OFFSET IL offset: 0x0
  N003.                    V05(t53*)
  N000. t171            =  PUTARG_REG; t53*
  N004. t54             =  CNS_INT   -1
  N000. t172            =  PUTARG_REG; t54
  N005.                    CALL     ; t171,t172
  N000.                    IL_OFFSET IL offset: 0x5
  N001.                    CALL     
  N000.                    IL_OFFSET IL offset: 0xa
  N005. t86             =  CNS_INT(h) 0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer"
  N006. t87             =  IND      ; t86
  N008.                    V09(t141); t87
  N009.                    V09(t142)
  N000. t173            =  PUTARG_REG; t142
  N011. t88             =  CNS_INT(h) 0xD1FFAB1E "ArgsFromTheSecondInstance"
  N012. t89             =  IND      ; t88
  N014.                    V10(t146); t89
  N015.                    V10(t147)
  N000. t174            =  PUTARG_REG; t147
  N017.                    V00(t4)
  N000. t175            =  PUTARG_REG; t4
  N018. t5              =  CALL     ; t173,t174,t175
  N020.                    V06(t94); t5
  N021.                    V06(t95*)
  N000. t176            =  PUTARG_REG; t95*
  N022. t6              =  CNS_INT(h) 0xd1ffab1e class
  N000. t177            =  PUTARG_REG; t6
  N023. t7              =  CALL help; t176,t177
  N025.                    V04(t9); t7
  N003.                    V04(t11)
  N000. t165            =  LEA(b+8) ; t11
  N004. t12             =  IND      ; t165
  N005.                    CNS_INT   1
  N006. t14             =  ADD      ; t12
  N007. t16             =  CAST     ; t14
  N000. t178            =  PUTARG_REG; t16
  N008. t15             =  CNS_INT(h) 0xd1ffab1e class
  N000. t179            =  PUTARG_REG; t15
  N009. t17             =  CALL help; t178,t179
  N011.                    V01(t19); t17
  N003.                    V00(t20*)
  N000. t180            =  PUTARG_REG; t20*
  N004. t66             =  CNS_INT   124
  N000. t181            =  PUTARG_REG; t66
  N005. t62             =  CALL     ; t180,t181
  N007.                    V02(t24); t62
  N004.                    V04(t10*)
  N000. t182            =  PUTARG_REG; t10*
  N005.                    V01(t25)
  N000. t183            =  PUTARG_REG; t25
  N006. t26             =  CNS_INT   0
  N000. t184            =  PUTARG_REG; t26
  N001.                    CNS_INT(h) 0xd1ffab1e ftn
  N002.                    IND      
  N007.                    CALL     ; t182,t183,t184
  N000.                    IL_OFFSET IL offset: 0x38
  N001.                    V01(t29)
  N000. t167            =  LEA(b+8) ; t29
  N002. t30             =  IND      ; t167
  N004.                    V11(t151); t30
  N005.                    V11(t152)
  N007.                    CNS_INT   -1
  N008. t32             =  ADD      ; t152
  N010.                    V08(t136); t32
  N011.                    V08(t137)
  N013.                    V11(t154*)
  N014.                    ARR_BOUNDS_CHECK_Rng; t137,t154*
  N015.                    V08(t139*)
  N016. t111            =  CAST     ; t139*
  N021.                    V01(t104)
  N022. t116            =  LEA(b+(i*8)+16); t104,t111
  N025.                    V02(t33*)
  N000.                    STOREIND ; t116,t33*
  N000.                    IL_OFFSET IL offset: 0x40
  N005.                    V09(t144*)
  N000. t187            =  PUTARG_REG; t144*
  N006.                    V10(t149*)
  N000. t188            =  PUTARG_REG; t149*
  N007.                    V01(t38*)
  N000. t189            =  PUTARG_REG; t38*
  N008. t70             =  CNS_INT   0
  N000. t190            =  PUTARG_REG; t70
  N009.                    CALL     ; t187,t188,t189,t190
  N000.                    IL_OFFSET IL offset: 0x50
  N003. t128            =  CNS_INT(h) 0xd1ffab1e static Fseq[_registryLock]
  N004. t73             =  IND      ; t128
  N000. t191            =  PUTARG_REG; t73
  N006.                    CALL nullcheck; t191

BB02 [???..???) (throw), preds={} succs={}
=====
  N001.                    CALL help




buildIntervals second part ========
Int arg V00 in reg rcx
<RefPosition #0   @0   RefTypeParamDef <Ivl:0 V00>  BB00 regmask=[rcx] minReg=1 fixed>

NEW BLOCK BB01
<RefPosition #1   @1   RefTypeBB  BB01 regmask=[] minReg=1>

DefList: {  }
N003 (???,???) [000155] ------------              *  IL_OFFSET void   IL offset: 0x0 REG NA

DefList: {  }
N005 (  2, 10) [000044] ------------              *  CNS_INT   long   0x7ffc7e4c17a0 REG NA $140
Interval 10: long RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #2   @6   RefTypeDef <Ivl:10> CNS_INT BB01 regmask=[allInt] minReg=1>

DefList: { N005.t44. CNS_INT }
N007 (???,???) [000169] ------------              *  PUTARG_REG long   REG rcx
<RefPosition #3   @7   RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #4   @7   RefTypeUse <Ivl:10>  BB01 regmask=[rcx] minReg=1 last fixed>
Interval 11: long RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #5   @8   RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #6   @8   RefTypeDef <Ivl:11> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>

DefList: { N007.t169. PUTARG_REG }
N009 (  1,  1) [000045] ------------              *  CNS_INT   int    1 REG NA $42
Interval 12: int RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #7   @10  RefTypeDef <Ivl:12> CNS_INT BB01 regmask=[allInt] minReg=1>

DefList: { N007.t169. PUTARG_REG; N009.t45. CNS_INT }
N011 (???,???) [000170] ------------              *  PUTARG_REG int    REG rdx
<RefPosition #8   @11  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #9   @11  RefTypeUse <Ivl:12>  BB01 regmask=[rdx] minReg=1 last fixed>
Interval 13: int RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #10  @12  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #11  @12  RefTypeDef <Ivl:13> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed>

DefList: { N007.t169. PUTARG_REG; N011.t170. PUTARG_REG }
N013 ( 17, 18) [000046] H-CXG-------              *  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE REG NA $201
<RefPosition #12  @13  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #13  @13  RefTypeUse <Ivl:11>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #14  @13  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #15  @13  RefTypeUse <Ivl:13>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #16  @14  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #17  @14  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #18  @14  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #19  @14  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #20  @14  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1>
<RefPosition #21  @14  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1>
<RefPosition #22  @14  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1>
Interval 14: long RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #23  @14  RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #24  @14  RefTypeDef <Ivl:14> CALL BB01 regmask=[rax] minReg=1 fixed>

DefList: {  }
N015 (  2, 10) [000083] I-----------              *  CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock] REG NA $240
Interval 15: long RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #25  @16  RefTypeDef <Ivl:15> CNS_INT BB01 regmask=[allInt] minReg=1>

DefList: { N015.t83. CNS_INT }
N017 (  4, 12) [000042] n---G-------              *  IND       ref    REG NA <l:$280, c:$2c0>
<RefPosition #26  @17  RefTypeUse <Ivl:15>  BB01 regmask=[allInt] minReg=1 last>
Interval 16: ref RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #27  @18  RefTypeDef <Ivl:16> IND BB01 regmask=[allInt] minReg=1>

DefList: { N017.t42. IND }
N019 ( 22, 31) [000059] DA-XG-------              *  STORE_LCL_VAR ref    V05 tmp2         d:2 NA REG NA
<RefPosition #28  @19  RefTypeUse <Ivl:16>  BB01 regmask=[allInt] minReg=1 last>
Assigning related <V05/L4> to <I16>
<RefPosition #29  @20  RefTypeDef <Ivl:4 V05> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1 last>

DefList: {  }
N021 (???,???) [000156] ------------              *  IL_OFFSET void   IL offset: 0x0 REG NA

DefList: {  }
N023 (  1,  1) [000056] ------------              *  LCL_VAR   ref    V05 tmp2         u:2 NA REG NA <l:$280, c:$2c0>

DefList: {  }
N025 (  2,  2) [000057] ---X--------              *  NULLCHECK int    REG NA <l:$1c6, c:$1c5>
<RefPosition #30  @25  RefTypeUse <Ivl:4 V05> LCL_VAR BB01 regmask=[allInt] minReg=1 last>

DefList: {  }
N027 (???,???) [000157] ------------              *  IL_OFFSET void   IL offset: 0x0 REG NA

DefList: {  }
N029 (  1,  1) [000053] ------------              *  LCL_VAR   ref    V05 tmp2         u:2 NA (last use) REG NA <l:$280, c:$2c0>

DefList: {  }
N031 (???,???) [000171] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #31  @31  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #32  @31  RefTypeUse <Ivl:4 V05> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed>
Interval 17: ref RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #33  @32  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #34  @32  RefTypeDef <Ivl:17> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>

DefList: { N031.t171. PUTARG_REG }
N033 (  1,  1) [000054] ------------              *  CNS_INT   int    -1 REG NA $41
Interval 18: int RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #35  @34  RefTypeDef <Ivl:18> CNS_INT BB01 regmask=[allInt] minReg=1>

DefList: { N031.t171. PUTARG_REG; N033.t54. CNS_INT }
N035 (???,???) [000172] ------------              *  PUTARG_REG int    REG rdx
<RefPosition #36  @35  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #37  @35  RefTypeUse <Ivl:18>  BB01 regmask=[rdx] minReg=1 last fixed>
Interval 19: int RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #38  @36  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #39  @36  RefTypeDef <Ivl:19> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed>

DefList: { N031.t171. PUTARG_REG; N035.t172. PUTARG_REG }
N037 ( 16, 10) [000055] --CXG-------              *  CALL      int    System.Threading.WaitHandle.WaitOneNoCheck REG NA $102
<RefPosition #40  @37  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #41  @37  RefTypeUse <Ivl:17>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #42  @37  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #43  @37  RefTypeUse <Ivl:19>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #44  @38  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #45  @38  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #46  @38  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #47  @38  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #48  @38  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1>
<RefPosition #49  @38  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1>
<RefPosition #50  @38  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1>
Interval 20: int RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #51  @38  RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #52  @38  RefTypeDef <Ivl:20> CALL BB01 regmask=[rax] minReg=1 fixed>

DefList: {  }
N039 (???,???) [000158] ------------              *  IL_OFFSET void   IL offset: 0x5 REG NA

DefList: {  }
N041 ( 14,  5) [000001] --CXG-------              *  CALL      void   HotkeyedMusicPlayer.ArgsTransport.EnsureRootKeyExists REG NA $VN.Void
<RefPosition #53  @42  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #54  @42  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #55  @42  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #56  @42  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #57  @42  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1>
<RefPosition #58  @42  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1>
<RefPosition #59  @42  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1>

DefList: {  }
N043 (???,???) [000159] ------------              *  IL_OFFSET void   IL offset: 0xa REG NA

DefList: {  }
N045 (  2, 10) [000086] H-----------              *  CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer" REG NA $241
Interval 21: long RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #60  @46  RefTypeDef <Ivl:21> CNS_INT BB01 regmask=[allInt] minReg=1>

DefList: { N045.t86. CNS_INT }
N047 (  4, 12) [000087] #---G-------              *  IND       ref    REG NA $1c7
<RefPosition #61  @47  RefTypeUse <Ivl:21>  BB01 regmask=[allInt] minReg=1 last>
Interval 22: ref RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #62  @48  RefTypeDef <Ivl:22> IND BB01 regmask=[allInt] minReg=1>

DefList: { N047.t87. IND }
N049 (  4, 12) [000141] DA--G-------              *  STORE_LCL_VAR ref    V09 cse2         d:1 NA REG NA
<RefPosition #63  @49  RefTypeUse <Ivl:22>  BB01 regmask=[allInt] minReg=1 last>
Assigning related <V09/L7> to <I22>
<RefPosition #64  @50  RefTypeDef <Ivl:7 V09> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1 last>

DefList: {  }
N051 (  1,  1) [000142] ------------              *  LCL_VAR   ref    V09 cse2         u:1 NA REG NA $1c7

DefList: {  }
N053 (???,???) [000173] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #65  @53  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #66  @53  RefTypeUse <Ivl:7 V09> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed>
Setting putarg_reg as a pass-through of a non-last use lclVar
Interval 23: ref RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #67  @54  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #68  @54  RefTypeDef <Ivl:23> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>
Assigning related <V09/L7> to <I23>

DefList: { N053.t173. PUTARG_REG }
N055 (  2, 10) [000088] H-----------              *  CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance" REG NA $242
Interval 24: long RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #69  @56  RefTypeDef <Ivl:24> CNS_INT BB01 regmask=[allInt] minReg=1>

DefList: { N053.t173. PUTARG_REG; N055.t88. CNS_INT }
N057 (  4, 12) [000089] #---G-------              *  IND       ref    REG NA $1c8
<RefPosition #70  @57  RefTypeUse <Ivl:24>  BB01 regmask=[allInt] minReg=1 last>
Interval 25: ref RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #71  @58  RefTypeDef <Ivl:25> IND BB01 regmask=[allInt] minReg=1>

DefList: { N053.t173. PUTARG_REG; N057.t89. IND }
N059 (  4, 12) [000146] DA--G-------              *  STORE_LCL_VAR ref    V10 cse3         d:1 NA REG NA
<RefPosition #72  @59  RefTypeUse <Ivl:25>  BB01 regmask=[allInt] minReg=1 last>
Assigning related <V10/L8> to <I25>
<RefPosition #73  @60  RefTypeDef <Ivl:8 V10> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1 last>

DefList: { N053.t173. PUTARG_REG }
N061 (  1,  1) [000147] ------------              *  LCL_VAR   ref    V10 cse3         u:1 NA REG NA $1c8

DefList: { N053.t173. PUTARG_REG }
N063 (???,???) [000174] ------------              *  PUTARG_REG ref    REG rdx
<RefPosition #74  @63  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #75  @63  RefTypeUse <Ivl:8 V10> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed>
Setting putarg_reg as a pass-through of a non-last use lclVar
Interval 26: ref RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #76  @64  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #77  @64  RefTypeDef <Ivl:26> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed>
Assigning related <V10/L8> to <I26>

DefList: { N053.t173. PUTARG_REG; N063.t174. PUTARG_REG }
N065 (  1,  1) [000004] ------------              *  LCL_VAR   ref    V00 arg0         u:1 NA REG NA $80

DefList: { N053.t173. PUTARG_REG; N063.t174. PUTARG_REG }
N067 (???,???) [000175] ------------              *  PUTARG_REG ref    REG r8
<RefPosition #78  @67  RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #79  @67  RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[r8] minReg=1 last fixed>
Setting putarg_reg as a pass-through of a non-last use lclVar
Interval 27: ref RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #80  @68  RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #81  @68  RefTypeDef <Ivl:27> PUTARG_REG BB01 regmask=[r8] minReg=1 fixed>
Assigning related <V00/L0> to <I27>

DefList: { N053.t173. PUTARG_REG; N063.t174. PUTARG_REG; N067.t175. PUTARG_REG }
N069 ( 25, 35) [000005] --CXG-------              *  CALL      ref    Microsoft.Win32.Registry.GetValue REG NA $2c8
<RefPosition #82  @69  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #83  @69  RefTypeUse <Ivl:23>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #84  @69  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #85  @69  RefTypeUse <Ivl:26>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #86  @69  RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #87  @69  RefTypeUse <Ivl:27>  BB01 regmask=[r8] minReg=1 last fixed>
<RefPosition #88  @70  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #89  @70  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #90  @70  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #91  @70  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #92  @70  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1>
<RefPosition #93  @70  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1>
<RefPosition #94  @70  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1>
Interval 28: ref RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #95  @70  RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #96  @70  RefTypeDef <Ivl:28> CALL BB01 regmask=[rax] minReg=1 fixed>

DefList: { N069.t5. CALL }
N071 ( 25, 35) [000094] DA-XG-----L-              *  STORE_LCL_VAR ref    V06 tmp3         d:2 NA REG NA
<RefPosition #97  @71  RefTypeUse <Ivl:28>  BB01 regmask=[allInt] minReg=1 last>
Assigning related <V06/L5> to <I28>
<RefPosition #98  @72  RefTypeDef <Ivl:5 V06> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1 last>

DefList: {  }
N073 (  1,  1) [000095] ------------              *  LCL_VAR   ref    V06 tmp3         u:2 NA (last use) REG NA $2c8

DefList: {  }
N075 (???,???) [000176] ------------              *  PUTARG_REG ref    REG rdx
<RefPosition #99  @75  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #100 @75  RefTypeUse <Ivl:5 V06> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed>
Interval 29: ref RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #101 @76  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #102 @76  RefTypeDef <Ivl:29> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed>

DefList: { N075.t176. PUTARG_REG }
N077 (  2, 10) [000006] H------N----              *  CNS_INT(h) long   0xd1ffab1e class REG NA $243
Interval 30: long RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #103 @78  RefTypeDef <Ivl:30> CNS_INT BB01 regmask=[allInt] minReg=1>

DefList: { N075.t176. PUTARG_REG; N077.t6. CNS_INT }
N079 (???,???) [000177] ------------              *  PUTARG_REG long   REG rcx
<RefPosition #104 @79  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #105 @79  RefTypeUse <Ivl:30>  BB01 regmask=[rcx] minReg=1 last fixed>
Interval 31: long RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #106 @80  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #107 @80  RefTypeDef <Ivl:31> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>

DefList: { N075.t176. PUTARG_REG; N079.t177. PUTARG_REG }
N081 ( 45, 53) [000007] --CXG-------              *  CALL help ref    HELPER.CORINFO_HELP_CHKCASTARRAY REG NA $1cd
<RefPosition #108 @81  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #109 @81  RefTypeUse <Ivl:29>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #110 @81  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #111 @81  RefTypeUse <Ivl:31>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #112 @82  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #113 @82  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #114 @82  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #115 @82  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #116 @82  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1>
<RefPosition #117 @82  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1>
<RefPosition #118 @82  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1>
Interval 32: ref RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #119 @82  RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #120 @82  RefTypeDef <Ivl:32> CALL BB01 regmask=[rax] minReg=1 fixed>

DefList: { N081.t7. CALL }
N083 ( 45, 53) [000009] DA-XG-------              *  STORE_LCL_VAR ref    V04 tmp1         d:2 NA REG NA
<RefPosition #121 @83  RefTypeUse <Ivl:32>  BB01 regmask=[allInt] minReg=1 last>
Assigning related <V04/L3> to <I32>
<RefPosition #122 @84  RefTypeDef <Ivl:3 V04> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1 last>

DefList: {  }
N085 (  1,  1) [000011] ------------              *  LCL_VAR   ref    V04 tmp1         u:2 NA REG NA $2c8

DefList: {  }
N087 (???,???) [000165] -c----------              *  LEA(b+8)  ref    REG NA
Contained
DefList: {  }
N089 (  3,  3) [000012] ---X--------              *  IND       int    REG NA $340
<RefPosition #123 @89  RefTypeUse <Ivl:3 V04> LCL_VAR BB01 regmask=[allInt] minReg=1 last>
Interval 33: int RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #124 @90  RefTypeDef <Ivl:33> IND BB01 regmask=[allInt] minReg=1>

DefList: { N089.t12. IND }
N091 (  1,  1) [000013] -c----------              *  CNS_INT   int    1 REG NA $42
Contained
DefList: { N089.t12. IND }
N093 (  5,  5) [000014] ---X--------              *  ADD       int    REG NA $342
<RefPosition #125 @93  RefTypeUse <Ivl:33>  BB01 regmask=[allInt] minReg=1 last>
Interval 34: int RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #126 @94  RefTypeDef <Ivl:34> ADD BB01 regmask=[allInt] minReg=1>
Assigning related <I34> to <I33>

DefList: { N093.t14. ADD }
N095 (  6,  7) [000016] ---X--------              *  CAST      long <- int REG NA $203
<RefPosition #127 @95  RefTypeUse <Ivl:34>  BB01 regmask=[allInt] minReg=1 last>
Interval 35: long RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #128 @96  RefTypeDef <Ivl:35> CAST BB01 regmask=[allInt] minReg=1>

DefList: { N095.t16. CAST }
N097 (???,???) [000178] ---X--------              *  PUTARG_REG long   REG rdx
<RefPosition #129 @97  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #130 @97  RefTypeUse <Ivl:35>  BB01 regmask=[rdx] minReg=1 last fixed>
Interval 36: long RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #131 @98  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #132 @98  RefTypeDef <Ivl:36> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed>

DefList: { N097.t178. PUTARG_REG }
N099 (  2, 10) [000015] H-----------              *  CNS_INT(h) long   0xd1ffab1e class REG NA $243
Interval 37: long RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #133 @100 RefTypeDef <Ivl:37> CNS_INT BB01 regmask=[allInt] minReg=1>

DefList: { N097.t178. PUTARG_REG; N099.t15. CNS_INT }
N101 (???,???) [000179] ------------              *  PUTARG_REG long   REG rcx
<RefPosition #134 @101 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #135 @101 RefTypeUse <Ivl:37>  BB01 regmask=[rcx] minReg=1 last fixed>
Interval 38: long RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #136 @102 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #137 @102 RefTypeDef <Ivl:38> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>

DefList: { N097.t178. PUTARG_REG; N101.t179. PUTARG_REG }
N103 ( 22, 24) [000017] --CXG-------              *  CALL help ref    HELPER.CORINFO_HELP_NEWARR_1_OBJ REG NA $1d1
<RefPosition #138 @103 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #139 @103 RefTypeUse <Ivl:36>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #140 @103 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #141 @103 RefTypeUse <Ivl:38>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #142 @104 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #143 @104 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #144 @104 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #145 @104 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #146 @104 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1>
<RefPosition #147 @104 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1>
<RefPosition #148 @104 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1>
Interval 39: ref RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #149 @104 RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #150 @104 RefTypeDef <Ivl:39> CALL BB01 regmask=[rax] minReg=1 fixed>

DefList: { N103.t17. CALL }
N105 ( 22, 24) [000019] DA-XG-------              *  STORE_LCL_VAR ref    V01 loc0         d:2 NA REG NA
<RefPosition #151 @105 RefTypeUse <Ivl:39>  BB01 regmask=[allInt] minReg=1 last>
Assigning related <V01/L1> to <I39>
<RefPosition #152 @106 RefTypeDef <Ivl:1 V01> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1 last>

DefList: {  }
N107 (  1,  1) [000020] ------------              *  LCL_VAR   ref    V00 arg0         u:1 NA (last use) REG NA $80

DefList: {  }
N109 (???,???) [000180] ------------              *  PUTARG_REG ref    REG rdx
<RefPosition #153 @109 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #154 @109 RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed>
Interval 40: ref RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #155 @110 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #156 @110 RefTypeDef <Ivl:40> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed>

DefList: { N109.t180. PUTARG_REG }
N111 (  1,  1) [000066] ------------              *  CNS_INT   int    124 REG NA $45
Interval 41: int RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #157 @112 RefTypeDef <Ivl:41> CNS_INT BB01 regmask=[allInt] minReg=1>

DefList: { N109.t180. PUTARG_REG; N111.t66. CNS_INT }
N113 (???,???) [000181] ------------              *  PUTARG_REG int    REG rcx
<RefPosition #158 @113 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #159 @113 RefTypeUse <Ivl:41>  BB01 regmask=[rcx] minReg=1 last fixed>
Interval 42: int RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #160 @114 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #161 @114 RefTypeDef <Ivl:42> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>

DefList: { N109.t180. PUTARG_REG; N113.t181. PUTARG_REG }
N115 ( 16,  9) [000062] --CXG-------              *  CALL      ref    System.String.Join REG NA $2cf
<RefPosition #162 @115 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #163 @115 RefTypeUse <Ivl:40>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #164 @115 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #165 @115 RefTypeUse <Ivl:42>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #166 @116 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #167 @116 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #168 @116 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #169 @116 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #170 @116 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1>
<RefPosition #171 @116 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1>
<RefPosition #172 @116 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1>
Interval 43: ref RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #173 @116 RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #174 @116 RefTypeDef <Ivl:43> CALL BB01 regmask=[rax] minReg=1 fixed>

DefList: { N115.t62. CALL }
N117 ( 20, 12) [000024] DA-XG-------              *  STORE_LCL_VAR ref    V02 loc1         d:2 NA REG NA
<RefPosition #175 @117 RefTypeUse <Ivl:43>  BB01 regmask=[allInt] minReg=1 last>
Assigning related <V02/L2> to <I43>
<RefPosition #176 @118 RefTypeDef <Ivl:2 V02> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1 last>

DefList: {  }
N119 (  1,  1) [000010] ------------              *  LCL_VAR   ref    V04 tmp1         u:2 NA (last use) REG NA $2c8

DefList: {  }
N121 (???,???) [000182] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #177 @121 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #178 @121 RefTypeUse <Ivl:3 V04> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed>
Interval 44: ref RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #179 @122 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #180 @122 RefTypeDef <Ivl:44> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>

DefList: { N121.t182. PUTARG_REG }
N123 (  1,  1) [000025] ------------              *  LCL_VAR   ref    V01 loc0         u:2 NA REG NA $281

DefList: { N121.t182. PUTARG_REG }
N125 (???,???) [000183] ------------              *  PUTARG_REG ref    REG rdx
<RefPosition #181 @125 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #182 @125 RefTypeUse <Ivl:1 V01> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed>
Setting putarg_reg as a pass-through of a non-last use lclVar
Interval 45: ref RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #183 @126 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #184 @126 RefTypeDef <Ivl:45> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed>
Assigning related <V01/L1> to <I45>

DefList: { N121.t182. PUTARG_REG; N125.t183. PUTARG_REG }
N127 (  1,  1) [000026] ------------              *  CNS_INT   int    0 REG NA $40
Interval 46: int RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #185 @128 RefTypeDef <Ivl:46> CNS_INT BB01 regmask=[allInt] minReg=1>

DefList: { N121.t182. PUTARG_REG; N125.t183. PUTARG_REG; N127.t26. CNS_INT }
N129 (???,???) [000184] ------------              *  PUTARG_REG int    REG r8
<RefPosition #186 @129 RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #187 @129 RefTypeUse <Ivl:46>  BB01 regmask=[r8] minReg=1 last fixed>
Interval 47: int RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #188 @130 RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #189 @130 RefTypeDef <Ivl:47> PUTARG_REG BB01 regmask=[r8] minReg=1 fixed>

DefList: { N121.t182. PUTARG_REG; N125.t183. PUTARG_REG; N129.t184. PUTARG_REG }
N131 (  2, 10) [000185] Hc----------              *  CNS_INT(h) long   0xd1ffab1e ftn REG NA
Contained
DefList: { N121.t182. PUTARG_REG; N125.t183. PUTARG_REG; N129.t184. PUTARG_REG }
N133 (  4, 12) [000186] -c----------              *  IND       long   REG NA
Contained
DefList: { N121.t182. PUTARG_REG; N125.t183. PUTARG_REG; N129.t184. PUTARG_REG }
N135 ( 17, 12) [000027] --CXG-------              *  CALL      void   System.Array.CopyTo REG NA $VN.Void
<RefPosition #190 @135 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #191 @135 RefTypeUse <Ivl:44>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #192 @135 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #193 @135 RefTypeUse <Ivl:45>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #194 @135 RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #195 @135 RefTypeUse <Ivl:47>  BB01 regmask=[r8] minReg=1 last fixed>
<RefPosition #196 @136 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #197 @136 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #198 @136 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #199 @136 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #200 @136 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1>
<RefPosition #201 @136 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1>
<RefPosition #202 @136 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1>

DefList: {  }
N137 (???,???) [000160] ------------              *  IL_OFFSET void   IL offset: 0x38 REG NA

DefList: {  }
N139 (  1,  1) [000029] ------------              *  LCL_VAR   ref    V01 loc0         u:2 NA REG NA $281

DefList: {  }
N141 (???,???) [000167] -c----------              *  LEA(b+8)  ref    REG NA
Contained
DefList: {  }
N143 (  3,  3) [000030] ---X--------              *  IND       int    REG NA $343
<RefPosition #203 @143 RefTypeUse <Ivl:1 V01> LCL_VAR BB01 regmask=[allInt] minReg=1 last>
Interval 48: int RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #204 @144 RefTypeDef <Ivl:48> IND BB01 regmask=[allInt] minReg=1>

DefList: { N143.t30. IND }
N145 (  3,  3) [000151] DA-X--------              *  STORE_LCL_VAR int    V11 cse4         d:1 NA REG NA
<RefPosition #205 @145 RefTypeUse <Ivl:48>  BB01 regmask=[allInt] minReg=1 last>
Assigning related <V11/L9> to <I48>
<RefPosition #206 @146 RefTypeDef <Ivl:9 V11> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1 last>

DefList: {  }
N147 (  1,  1) [000152] ------------              *  LCL_VAR   int    V11 cse4         u:1 NA REG NA $343

DefList: {  }
N149 (  1,  1) [000031] -c----------              *  CNS_INT   int    -1 REG NA $41
Contained
DefList: {  }
N151 (  6,  6) [000032] ---X--------              *  ADD       int    REG NA $345
<RefPosition #207 @151 RefTypeUse <Ivl:9 V11> LCL_VAR BB01 regmask=[allInt] minReg=1 last>
Interval 49: int RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #208 @152 RefTypeDef <Ivl:49> ADD BB01 regmask=[allInt] minReg=1>

DefList: { N151.t32. ADD }
N153 (  6,  6) [000136] DA-X--------              *  STORE_LCL_VAR int    V08 cse1         d:1 NA REG NA
<RefPosition #209 @153 RefTypeUse <Ivl:49>  BB01 regmask=[allInt] minReg=1 last>
Assigning related <V08/L6> to <I49>
<RefPosition #210 @154 RefTypeDef <Ivl:6 V08> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1 last>

DefList: {  }
N155 (  1,  1) [000137] ------------              *  LCL_VAR   int    V08 cse1         u:1 NA REG NA $345

DefList: {  }
N157 (  1,  1) [000154] ------------              *  LCL_VAR   int    V11 cse4         u:1 NA (last use) REG NA $301

DefList: {  }
N159 ( 12, 15) [000110] ---X--------              *  ARR_BOUNDS_CHECK_Rng void   REG NA $1d7
<RefPosition #211 @159 RefTypeUse <Ivl:6 V08> LCL_VAR BB01 regmask=[allInt] minReg=1 last>
<RefPosition #212 @159 RefTypeUse <Ivl:9 V11> LCL_VAR BB01 regmask=[allInt] minReg=1 last>

DefList: {  }
N161 (  1,  1) [000139] ------------              *  LCL_VAR   int    V08 cse1         u:1 NA (last use) REG NA $344

DefList: {  }
N163 (  2,  3) [000111] ------------              *  CAST      long <- int REG NA $205
<RefPosition #213 @163 RefTypeUse <Ivl:6 V08> LCL_VAR BB01 regmask=[allInt] minReg=1 last>
Interval 50: long RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #214 @164 RefTypeDef <Ivl:50> CAST BB01 regmask=[allInt] minReg=1>

DefList: { N163.t111. CAST }
N165 (  1,  1) [000104] ------------              *  LCL_VAR   ref    V01 loc0         u:2 NA REG NA $281

DefList: { N163.t111. CAST }
N167 (  5,  6) [000116] ------------              *  LEA(b+(i*8)+16) byref  REG NA
<RefPosition #215 @167 RefTypeUse <Ivl:1 V01> LCL_VAR BB01 regmask=[allInt] minReg=1 last>
<RefPosition #216 @167 RefTypeUse <Ivl:50>  BB01 regmask=[allInt] minReg=1 last>
Interval 51: byref RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #217 @168 RefTypeDef <Ivl:51> LEA BB01 regmask=[allInt] minReg=1>

DefList: { N167.t116. LEA }
N169 (  3,  2) [000033] ------------              *  LCL_VAR   ref    V02 loc1         u:2 NA (last use) REG NA $2cf

DefList: { N167.t116. LEA }
N171 (???,???) [000161] -A-XG-------              *  STOREIND  ref    REG NA
<RefPosition #218 @171 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #219 @171 RefTypeUse <Ivl:51>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #220 @171 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #221 @171 RefTypeUse <Ivl:2 V02> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #222 @172 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #223 @172 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #224 @172 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #225 @172 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #226 @172 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1>
<RefPosition #227 @172 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1>
<RefPosition #228 @172 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1>
<RefPosition #229 @172 RefTypeKill <Reg:mm0>  BB01 regmask=[mm0] minReg=1>
<RefPosition #230 @172 RefTypeKill <Reg:mm1>  BB01 regmask=[mm1] minReg=1>
<RefPosition #231 @172 RefTypeKill <Reg:mm2>  BB01 regmask=[mm2] minReg=1>
<RefPosition #232 @172 RefTypeKill <Reg:mm3>  BB01 regmask=[mm3] minReg=1>
<RefPosition #233 @172 RefTypeKill <Reg:mm4>  BB01 regmask=[mm4] minReg=1>
<RefPosition #234 @172 RefTypeKill <Reg:mm5>  BB01 regmask=[mm5] minReg=1>

DefList: {  }
N173 (???,???) [000162] ------------              *  IL_OFFSET void   IL offset: 0x40 REG NA

DefList: {  }
N175 (  1,  1) [000144] ------------              *  LCL_VAR   ref    V09 cse2         u:1 NA (last use) REG NA $1c7

DefList: {  }
N177 (???,???) [000187] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #235 @177 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #236 @177 RefTypeUse <Ivl:7 V09> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed>
Interval 52: ref RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #237 @178 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #238 @178 RefTypeDef <Ivl:52> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>

DefList: { N177.t187. PUTARG_REG }
N179 (  1,  1) [000149] ------------              *  LCL_VAR   ref    V10 cse3         u:1 NA (last use) REG NA $1c8

DefList: { N177.t187. PUTARG_REG }
N181 (???,???) [000188] ------------              *  PUTARG_REG ref    REG rdx
<RefPosition #239 @181 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #240 @181 RefTypeUse <Ivl:8 V10> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed>
Interval 53: ref RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #241 @182 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #242 @182 RefTypeDef <Ivl:53> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed>

DefList: { N177.t187. PUTARG_REG; N181.t188. PUTARG_REG }
N183 (  1,  1) [000038] ------------              *  LCL_VAR   ref    V01 loc0         u:2 NA (last use) REG NA $281

DefList: { N177.t187. PUTARG_REG; N181.t188. PUTARG_REG }
N185 (???,???) [000189] ------------              *  PUTARG_REG ref    REG r8
<RefPosition #243 @185 RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #244 @185 RefTypeUse <Ivl:1 V01> LCL_VAR BB01 regmask=[r8] minReg=1 last fixed>
Interval 54: ref RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #245 @186 RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #246 @186 RefTypeDef <Ivl:54> PUTARG_REG BB01 regmask=[r8] minReg=1 fixed>

DefList: { N177.t187. PUTARG_REG; N181.t188. PUTARG_REG; N185.t189. PUTARG_REG }
N187 (  1,  1) [000070] ------------              *  CNS_INT   int    0 REG NA $40
Interval 55: int RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #247 @188 RefTypeDef <Ivl:55> CNS_INT BB01 regmask=[allInt] minReg=1>

DefList: { N177.t187. PUTARG_REG; N181.t188. PUTARG_REG; N185.t189. PUTARG_REG; N187.t70. CNS_INT }
N189 (???,???) [000190] ------------              *  PUTARG_REG int    REG r9
<RefPosition #248 @189 RefTypeFixedReg <Reg:r9 >  BB01 regmask=[r9] minReg=1>
<RefPosition #249 @189 RefTypeUse <Ivl:55>  BB01 regmask=[r9] minReg=1 last fixed>
Interval 56: int RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #250 @190 RefTypeFixedReg <Reg:r9 >  BB01 regmask=[r9] minReg=1>
<RefPosition #251 @190 RefTypeDef <Ivl:56> PUTARG_REG BB01 regmask=[r9] minReg=1 fixed>

DefList: { N177.t187. PUTARG_REG; N181.t188. PUTARG_REG; N185.t189. PUTARG_REG; N189.t190. PUTARG_REG }
N191 ( 18, 13) [000071] --CXG-------              *  CALL      void   Microsoft.Win32.Registry.SetValue REG NA $VN.Void
<RefPosition #252 @191 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #253 @191 RefTypeUse <Ivl:52>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #254 @191 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #255 @191 RefTypeUse <Ivl:53>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #256 @191 RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #257 @191 RefTypeUse <Ivl:54>  BB01 regmask=[r8] minReg=1 last fixed>
<RefPosition #258 @191 RefTypeFixedReg <Reg:r9 >  BB01 regmask=[r9] minReg=1>
<RefPosition #259 @191 RefTypeUse <Ivl:56>  BB01 regmask=[r9] minReg=1 last fixed>
<RefPosition #260 @192 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #261 @192 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #262 @192 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #263 @192 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #264 @192 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1>
<RefPosition #265 @192 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1>
<RefPosition #266 @192 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1>

DefList: {  }
N193 (???,???) [000163] ------------              *  IL_OFFSET void   IL offset: 0x50 REG NA

DefList: {  }
N195 (  2, 10) [000128] I-----------              *  CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock] REG NA $240
Interval 57: long RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #267 @196 RefTypeDef <Ivl:57> CNS_INT BB01 regmask=[allInt] minReg=1>

DefList: { N195.t128. CNS_INT }
N197 (  4, 12) [000073] n---G-------              *  IND       ref    REG NA <l:$285, c:$2da>
<RefPosition #268 @197 RefTypeUse <Ivl:57>  BB01 regmask=[allInt] minReg=1 last>
Interval 58: ref RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #269 @198 RefTypeDef <Ivl:58> IND BB01 regmask=[allInt] minReg=1>

DefList: { N197.t73. IND }
N199 (???,???) [000191] ----G-------              *  PUTARG_REG ref    REG rcx
<RefPosition #270 @199 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #271 @199 RefTypeUse <Ivl:58>  BB01 regmask=[rcx] minReg=1 last fixed>
Interval 59: ref RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #272 @200 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #273 @200 RefTypeDef <Ivl:59> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>

DefList: { N199.t191. PUTARG_REG }
N201 ( 19, 20) [000079] --CXG-------              *  CALL nullcheck void   System.Threading.Mutex.ReleaseMutex REG NA $VN.Void
<RefPosition #274 @201 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #275 @201 RefTypeUse <Ivl:59>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #276 @202 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #277 @202 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #278 @202 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #279 @202 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #280 @202 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1>
<RefPosition #281 @202 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1>
<RefPosition #282 @202 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1>



CHECKING LAST USES for BB01, liveout={}
==============================
use: {V00}
def: {V01 V02 V04 V05 V06 V07 V08 V09 V10 V11}

NEW BLOCK BB02


No predecessor; 

Setting BB01 as the predecessor for determining incoming variable registers of BB02
<RefPosition #283 @203 RefTypeBB  BB02 regmask=[] minReg=1>

firstColdLoc = 205
DefList: {  }
N205 ( 14,  5) [000168] --CXG-------              *  CALL help void   HELPER.CORINFO_HELP_RNGCHKFAIL REG NA
<RefPosition #284 @206 RefTypeKill <Reg:rax>  BB02 regmask=[rax] minReg=1>
<RefPosition #285 @206 RefTypeKill <Reg:rcx>  BB02 regmask=[rcx] minReg=1>
<RefPosition #286 @206 RefTypeKill <Reg:rdx>  BB02 regmask=[rdx] minReg=1>
<RefPosition #287 @206 RefTypeKill <Reg:r8 >  BB02 regmask=[r8] minReg=1>
<RefPosition #288 @206 RefTypeKill <Reg:r9 >  BB02 regmask=[r9] minReg=1>
<RefPosition #289 @206 RefTypeKill <Reg:r10>  BB02 regmask=[r10] minReg=1>
<RefPosition #290 @206 RefTypeKill <Reg:r11>  BB02 regmask=[r11] minReg=1>



CHECKING LAST USES for BB02, liveout={}
==============================
use: {}
def: {}

Linear scan intervals BEFORE VALIDATING INTERVALS:
Interval  0: (V00) ref RefPositions {#0@0 #79@67 #154@109} physReg:rcx Preferences=[rbx rbp rsi rdi r12-r15]
Interval  1: (V01) ref RefPositions {#152@106 #182@125 #203@143 #215@167 #244@185} physReg:NA Preferences=[rbx rbp rsi rdi r12-r15]
Interval  2: (V02) ref RefPositions {#176@118 #221@171} physReg:NA Preferences=[rbx rbp rsi rdi r12-r15]
Interval  3: (V04) ref RefPositions {#122@84 #123@89 #178@121} physReg:NA Preferences=[rbx rbp rsi rdi r12-r15]
Interval  4: (V05) ref RefPositions {#29@20 #30@25 #32@31} physReg:NA Preferences=[rcx]
Interval  5: (V06) ref RefPositions {#98@72 #100@75} physReg:NA Preferences=[rdx]
Interval  6: (V08) int RefPositions {#210@154 #211@159 #213@163} physReg:NA Preferences=[allInt]
Interval  7: (V09) ref RefPositions {#64@50 #66@53 #236@177} physReg:NA Preferences=[rbx rbp rsi rdi r12-r15]
Interval  8: (V10) ref RefPositions {#73@60 #75@63 #240@181} physReg:NA Preferences=[rbx rbp rsi rdi r12-r15]
Interval  9: (V11) int RefPositions {#206@146 #207@151 #212@159} physReg:NA Preferences=[allInt]
Interval 10: long (constant) RefPositions {#2@6 #4@7} physReg:NA Preferences=[rcx]
Interval 11: long RefPositions {#6@8 #13@13} physReg:NA Preferences=[rcx]
Interval 12: int (constant) RefPositions {#7@10 #9@11} physReg:NA Preferences=[rdx]
Interval 13: int RefPositions {#11@12 #15@13} physReg:NA Preferences=[rdx]
Interval 14: long RefPositions {#24@14} physReg:NA Preferences=[rax]
Interval 15: long (constant) RefPositions {#25@16 #26@17} physReg:NA Preferences=[allInt]
Interval 16: ref RefPositions {#27@18 #28@19} physReg:NA Preferences=[allInt] RelatedInterval <V05/L4>
Interval 17: ref RefPositions {#34@32 #41@37} physReg:NA Preferences=[rcx]
Interval 18: int (constant) RefPositions {#35@34 #37@35} physReg:NA Preferences=[rdx]
Interval 19: int RefPositions {#39@36 #43@37} physReg:NA Preferences=[rdx]
Interval 20: int RefPositions {#52@38} physReg:NA Preferences=[rax]
Interval 21: long (constant) RefPositions {#60@46 #61@47} physReg:NA Preferences=[allInt]
Interval 22: ref RefPositions {#62@48 #63@49} physReg:NA Preferences=[allInt] RelatedInterval <V09/L7>
Interval 23: ref (specialPutArg) RefPositions {#68@54 #83@69} physReg:NA Preferences=[rcx] RelatedInterval <V09/L7>
Interval 24: long (constant) RefPositions {#69@56 #70@57} physReg:NA Preferences=[allInt]
Interval 25: ref RefPositions {#71@58 #72@59} physReg:NA Preferences=[allInt] RelatedInterval <V10/L8>
Interval 26: ref (specialPutArg) RefPositions {#77@64 #85@69} physReg:NA Preferences=[rdx] RelatedInterval <V10/L8>
Interval 27: ref (specialPutArg) RefPositions {#81@68 #87@69} physReg:NA Preferences=[r8] RelatedInterval <V00/L0>
Interval 28: ref RefPositions {#96@70 #97@71} physReg:NA Preferences=[rax] RelatedInterval <V06/L5>
Interval 29: ref RefPositions {#102@76 #109@81} physReg:NA Preferences=[rdx]
Interval 30: long (constant) RefPositions {#103@78 #105@79} physReg:NA Preferences=[rcx]
Interval 31: long RefPositions {#107@80 #111@81} physReg:NA Preferences=[rcx]
Interval 32: ref RefPositions {#120@82 #121@83} physReg:NA Preferences=[rax] RelatedInterval <V04/L3>
Interval 33: int RefPositions {#124@90 #125@93} physReg:NA Preferences=[allInt] RelatedInterval <I34>
Interval 34: int RefPositions {#126@94 #127@95} physReg:NA Preferences=[allInt]
Interval 35: long RefPositions {#128@96 #130@97} physReg:NA Preferences=[rdx]
Interval 36: long RefPositions {#132@98 #139@103} physReg:NA Preferences=[rdx]
Interval 37: long (constant) RefPositions {#133@100 #135@101} physReg:NA Preferences=[rcx]
Interval 38: long RefPositions {#137@102 #141@103} physReg:NA Preferences=[rcx]
Interval 39: ref RefPositions {#150@104 #151@105} physReg:NA Preferences=[rax] RelatedInterval <V01/L1>
Interval 40: ref RefPositions {#156@110 #163@115} physReg:NA Preferences=[rdx]
Interval 41: int (constant) RefPositions {#157@112 #159@113} physReg:NA Preferences=[rcx]
Interval 42: int RefPositions {#161@114 #165@115} physReg:NA Preferences=[rcx]
Interval 43: ref RefPositions {#174@116 #175@117} physReg:NA Preferences=[rax] RelatedInterval <V02/L2>
Interval 44: ref RefPositions {#180@122 #191@135} physReg:NA Preferences=[rcx]
Interval 45: ref (specialPutArg) RefPositions {#184@126 #193@135} physReg:NA Preferences=[rdx] RelatedInterval <V01/L1>
Interval 46: int (constant) RefPositions {#185@128 #187@129} physReg:NA Preferences=[r8]
Interval 47: int RefPositions {#189@130 #195@135} physReg:NA Preferences=[r8]
Interval 48: int RefPositions {#204@144 #205@145} physReg:NA Preferences=[allInt] RelatedInterval <V11/L9>
Interval 49: int RefPositions {#208@152 #209@153} physReg:NA Preferences=[allInt] RelatedInterval <V08/L6>
Interval 50: long RefPositions {#214@164 #216@167} physReg:NA Preferences=[allInt]
Interval 51: byref RefPositions {#217@168 #219@171} physReg:NA Preferences=[rcx]
Interval 52: ref RefPositions {#238@178 #253@191} physReg:NA Preferences=[rcx]
Interval 53: ref RefPositions {#242@182 #255@191} physReg:NA Preferences=[rdx]
Interval 54: ref RefPositions {#246@186 #257@191} physReg:NA Preferences=[r8]
Interval 55: int (constant) RefPositions {#247@188 #249@189} physReg:NA Preferences=[r9]
Interval 56: int RefPositions {#251@190 #259@191} physReg:NA Preferences=[r9]
Interval 57: long (constant) RefPositions {#267@196 #268@197} physReg:NA Preferences=[allInt]
Interval 58: ref RefPositions {#269@198 #271@199} physReg:NA Preferences=[rcx]
Interval 59: ref RefPositions {#273@200 #275@201} physReg:NA Preferences=[rcx]

------------
REFPOSITIONS BEFORE VALIDATING INTERVALS: 
------------
<RefPosition #0   @0   RefTypeParamDef <Ivl:0 V00>  BB00 regmask=[rcx] minReg=1 fixed regOptional>
<RefPosition #1   @1   RefTypeBB  BB01 regmask=[] minReg=1>
<RefPosition #2   @6   RefTypeDef <Ivl:10> CNS_INT BB01 regmask=[rcx] minReg=1>
<RefPosition #3   @7   RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #4   @7   RefTypeUse <Ivl:10>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #5   @8   RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #6   @8   RefTypeDef <Ivl:11> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #7   @10  RefTypeDef <Ivl:12> CNS_INT BB01 regmask=[rdx] minReg=1>
<RefPosition #8   @11  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #9   @11  RefTypeUse <Ivl:12>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #10  @12  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #11  @12  RefTypeDef <Ivl:13> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed>
<RefPosition #12  @13  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #13  @13  RefTypeUse <Ivl:11>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #14  @13  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #15  @13  RefTypeUse <Ivl:13>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #16  @14  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #17  @14  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #18  @14  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #19  @14  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #20  @14  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #21  @14  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #22  @14  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #23  @14  RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #24  @14  RefTypeDef <Ivl:14> CALL BB01 regmask=[rax] minReg=1 last fixed local>
<RefPosition #25  @16  RefTypeDef <Ivl:15> CNS_INT BB01 regmask=[allInt] minReg=1>
<RefPosition #26  @17  RefTypeUse <Ivl:15>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #27  @18  RefTypeDef <Ivl:16> IND BB01 regmask=[allInt] minReg=1>
<RefPosition #28  @19  RefTypeUse <Ivl:16>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #29  @20  RefTypeDef <Ivl:4 V05> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #30  @25  RefTypeUse <Ivl:4 V05> LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #31  @31  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #32  @31  RefTypeUse <Ivl:4 V05> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #33  @32  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #34  @32  RefTypeDef <Ivl:17> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #35  @34  RefTypeDef <Ivl:18> CNS_INT BB01 regmask=[rdx] minReg=1>
<RefPosition #36  @35  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #37  @35  RefTypeUse <Ivl:18>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #38  @36  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #39  @36  RefTypeDef <Ivl:19> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed>
<RefPosition #40  @37  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #41  @37  RefTypeUse <Ivl:17>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #42  @37  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #43  @37  RefTypeUse <Ivl:19>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #44  @38  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #45  @38  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #46  @38  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #47  @38  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #48  @38  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #49  @38  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #50  @38  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #51  @38  RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #52  @38  RefTypeDef <Ivl:20> CALL BB01 regmask=[rax] minReg=1 last fixed local>
<RefPosition #53  @42  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #54  @42  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #55  @42  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #56  @42  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #57  @42  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #58  @42  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #59  @42  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #60  @46  RefTypeDef <Ivl:21> CNS_INT BB01 regmask=[allInt] minReg=1>
<RefPosition #61  @47  RefTypeUse <Ivl:21>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #62  @48  RefTypeDef <Ivl:22> IND BB01 regmask=[allInt] minReg=1>
<RefPosition #63  @49  RefTypeUse <Ivl:22>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #64  @50  RefTypeDef <Ivl:7 V09> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #65  @53  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #66  @53  RefTypeUse <Ivl:7 V09> LCL_VAR BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #67  @54  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #68  @54  RefTypeDef <Ivl:23> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #69  @56  RefTypeDef <Ivl:24> CNS_INT BB01 regmask=[allInt] minReg=1>
<RefPosition #70  @57  RefTypeUse <Ivl:24>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #71  @58  RefTypeDef <Ivl:25> IND BB01 regmask=[allInt] minReg=1>
<RefPosition #72  @59  RefTypeUse <Ivl:25>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #73  @60  RefTypeDef <Ivl:8 V10> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #74  @63  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #75  @63  RefTypeUse <Ivl:8 V10> LCL_VAR BB01 regmask=[rdx] minReg=1 fixed>
<RefPosition #76  @64  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #77  @64  RefTypeDef <Ivl:26> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed>
<RefPosition #78  @67  RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #79  @67  RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[r8] minReg=1 fixed>
<RefPosition #80  @68  RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #81  @68  RefTypeDef <Ivl:27> PUTARG_REG BB01 regmask=[r8] minReg=1 fixed>
<RefPosition #82  @69  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #83  @69  RefTypeUse <Ivl:23>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #84  @69  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #85  @69  RefTypeUse <Ivl:26>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #86  @69  RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #87  @69  RefTypeUse <Ivl:27>  BB01 regmask=[r8] minReg=1 last fixed>
<RefPosition #88  @70  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #89  @70  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #90  @70  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #91  @70  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #92  @70  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #93  @70  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #94  @70  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #95  @70  RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #96  @70  RefTypeDef <Ivl:28> CALL BB01 regmask=[rax] minReg=1 fixed>
<RefPosition #97  @71  RefTypeUse <Ivl:28>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #98  @72  RefTypeDef <Ivl:5 V06> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #99  @75  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #100 @75  RefTypeUse <Ivl:5 V06> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #101 @76  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #102 @76  RefTypeDef <Ivl:29> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed>
<RefPosition #103 @78  RefTypeDef <Ivl:30> CNS_INT BB01 regmask=[rcx] minReg=1>
<RefPosition #104 @79  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #105 @79  RefTypeUse <Ivl:30>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #106 @80  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #107 @80  RefTypeDef <Ivl:31> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #108 @81  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #109 @81  RefTypeUse <Ivl:29>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #110 @81  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #111 @81  RefTypeUse <Ivl:31>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #112 @82  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #113 @82  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #114 @82  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #115 @82  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #116 @82  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #117 @82  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #118 @82  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #119 @82  RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #120 @82  RefTypeDef <Ivl:32> CALL BB01 regmask=[rax] minReg=1 fixed>
<RefPosition #121 @83  RefTypeUse <Ivl:32>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #122 @84  RefTypeDef <Ivl:3 V04> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #123 @89  RefTypeUse <Ivl:3 V04> LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #124 @90  RefTypeDef <Ivl:33> IND BB01 regmask=[allInt] minReg=1>
<RefPosition #125 @93  RefTypeUse <Ivl:33>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #126 @94  RefTypeDef <Ivl:34> ADD BB01 regmask=[allInt] minReg=1>
<RefPosition #127 @95  RefTypeUse <Ivl:34>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #128 @96  RefTypeDef <Ivl:35> CAST BB01 regmask=[rdx] minReg=1>
<RefPosition #129 @97  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #130 @97  RefTypeUse <Ivl:35>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #131 @98  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #132 @98  RefTypeDef <Ivl:36> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed>
<RefPosition #133 @100 RefTypeDef <Ivl:37> CNS_INT BB01 regmask=[rcx] minReg=1>
<RefPosition #134 @101 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #135 @101 RefTypeUse <Ivl:37>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #136 @102 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #137 @102 RefTypeDef <Ivl:38> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #138 @103 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #139 @103 RefTypeUse <Ivl:36>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #140 @103 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #141 @103 RefTypeUse <Ivl:38>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #142 @104 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #143 @104 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #144 @104 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #145 @104 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #146 @104 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #147 @104 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #148 @104 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #149 @104 RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #150 @104 RefTypeDef <Ivl:39> CALL BB01 regmask=[rax] minReg=1 fixed>
<RefPosition #151 @105 RefTypeUse <Ivl:39>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #152 @106 RefTypeDef <Ivl:1 V01> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #153 @109 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #154 @109 RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #155 @110 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #156 @110 RefTypeDef <Ivl:40> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed>
<RefPosition #157 @112 RefTypeDef <Ivl:41> CNS_INT BB01 regmask=[rcx] minReg=1>
<RefPosition #158 @113 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #159 @113 RefTypeUse <Ivl:41>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #160 @114 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #161 @114 RefTypeDef <Ivl:42> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #162 @115 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #163 @115 RefTypeUse <Ivl:40>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #164 @115 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #165 @115 RefTypeUse <Ivl:42>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #166 @116 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #167 @116 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #168 @116 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #169 @116 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #170 @116 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #171 @116 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #172 @116 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #173 @116 RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #174 @116 RefTypeDef <Ivl:43> CALL BB01 regmask=[rax] minReg=1 fixed>
<RefPosition #175 @117 RefTypeUse <Ivl:43>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #176 @118 RefTypeDef <Ivl:2 V02> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #177 @121 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #178 @121 RefTypeUse <Ivl:3 V04> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #179 @122 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #180 @122 RefTypeDef <Ivl:44> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #181 @125 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #182 @125 RefTypeUse <Ivl:1 V01> LCL_VAR BB01 regmask=[rdx] minReg=1 fixed>
<RefPosition #183 @126 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #184 @126 RefTypeDef <Ivl:45> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed>
<RefPosition #185 @128 RefTypeDef <Ivl:46> CNS_INT BB01 regmask=[r8] minReg=1>
<RefPosition #186 @129 RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #187 @129 RefTypeUse <Ivl:46>  BB01 regmask=[r8] minReg=1 last fixed>
<RefPosition #188 @130 RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #189 @130 RefTypeDef <Ivl:47> PUTARG_REG BB01 regmask=[r8] minReg=1 fixed>
<RefPosition #190 @135 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #191 @135 RefTypeUse <Ivl:44>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #192 @135 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #193 @135 RefTypeUse <Ivl:45>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #194 @135 RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #195 @135 RefTypeUse <Ivl:47>  BB01 regmask=[r8] minReg=1 last fixed>
<RefPosition #196 @136 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #197 @136 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #198 @136 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #199 @136 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #200 @136 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #201 @136 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #202 @136 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #203 @143 RefTypeUse <Ivl:1 V01> LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #204 @144 RefTypeDef <Ivl:48> IND BB01 regmask=[allInt] minReg=1>
<RefPosition #205 @145 RefTypeUse <Ivl:48>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #206 @146 RefTypeDef <Ivl:9 V11> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #207 @151 RefTypeUse <Ivl:9 V11> LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #208 @152 RefTypeDef <Ivl:49> ADD BB01 regmask=[allInt] minReg=1>
<RefPosition #209 @153 RefTypeUse <Ivl:49>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #210 @154 RefTypeDef <Ivl:6 V08> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #211 @159 RefTypeUse <Ivl:6 V08> LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #212 @159 RefTypeUse <Ivl:9 V11> LCL_VAR BB01 regmask=[allInt] minReg=1 last regOptional>
<RefPosition #213 @163 RefTypeUse <Ivl:6 V08> LCL_VAR BB01 regmask=[allInt] minReg=1 last>
<RefPosition #214 @164 RefTypeDef <Ivl:50> CAST BB01 regmask=[allInt] minReg=1>
<RefPosition #215 @167 RefTypeUse <Ivl:1 V01> LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #216 @167 RefTypeUse <Ivl:50>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #217 @168 RefTypeDef <Ivl:51> LEA BB01 regmask=[rcx] minReg=1>
<RefPosition #218 @171 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #219 @171 RefTypeUse <Ivl:51>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #220 @171 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #221 @171 RefTypeUse <Ivl:2 V02> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #222 @172 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #223 @172 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #224 @172 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #225 @172 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #226 @172 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #227 @172 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #228 @172 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #229 @172 RefTypeKill <Reg:mm0>  BB01 regmask=[mm0] minReg=1 last>
<RefPosition #230 @172 RefTypeKill <Reg:mm1>  BB01 regmask=[mm1] minReg=1 last>
<RefPosition #231 @172 RefTypeKill <Reg:mm2>  BB01 regmask=[mm2] minReg=1 last>
<RefPosition #232 @172 RefTypeKill <Reg:mm3>  BB01 regmask=[mm3] minReg=1 last>
<RefPosition #233 @172 RefTypeKill <Reg:mm4>  BB01 regmask=[mm4] minReg=1 last>
<RefPosition #234 @172 RefTypeKill <Reg:mm5>  BB01 regmask=[mm5] minReg=1 last>
<RefPosition #235 @177 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #236 @177 RefTypeUse <Ivl:7 V09> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #237 @178 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #238 @178 RefTypeDef <Ivl:52> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #239 @181 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #240 @181 RefTypeUse <Ivl:8 V10> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #241 @182 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #242 @182 RefTypeDef <Ivl:53> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed>
<RefPosition #243 @185 RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #244 @185 RefTypeUse <Ivl:1 V01> LCL_VAR BB01 regmask=[r8] minReg=1 last fixed>
<RefPosition #245 @186 RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #246 @186 RefTypeDef <Ivl:54> PUTARG_REG BB01 regmask=[r8] minReg=1 fixed>
<RefPosition #247 @188 RefTypeDef <Ivl:55> CNS_INT BB01 regmask=[r9] minReg=1>
<RefPosition #248 @189 RefTypeFixedReg <Reg:r9 >  BB01 regmask=[r9] minReg=1>
<RefPosition #249 @189 RefTypeUse <Ivl:55>  BB01 regmask=[r9] minReg=1 last fixed>
<RefPosition #250 @190 RefTypeFixedReg <Reg:r9 >  BB01 regmask=[r9] minReg=1>
<RefPosition #251 @190 RefTypeDef <Ivl:56> PUTARG_REG BB01 regmask=[r9] minReg=1 fixed>
<RefPosition #252 @191 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #253 @191 RefTypeUse <Ivl:52>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #254 @191 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #255 @191 RefTypeUse <Ivl:53>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #256 @191 RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #257 @191 RefTypeUse <Ivl:54>  BB01 regmask=[r8] minReg=1 last fixed>
<RefPosition #258 @191 RefTypeFixedReg <Reg:r9 >  BB01 regmask=[r9] minReg=1>
<RefPosition #259 @191 RefTypeUse <Ivl:56>  BB01 regmask=[r9] minReg=1 last fixed>
<RefPosition #260 @192 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #261 @192 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #262 @192 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #263 @192 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #264 @192 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #265 @192 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #266 @192 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #267 @196 RefTypeDef <Ivl:57> CNS_INT BB01 regmask=[allInt] minReg=1>
<RefPosition #268 @197 RefTypeUse <Ivl:57>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #269 @198 RefTypeDef <Ivl:58> IND BB01 regmask=[rcx] minReg=1>
<RefPosition #270 @199 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #271 @199 RefTypeUse <Ivl:58>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #272 @200 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #273 @200 RefTypeDef <Ivl:59> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #274 @201 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #275 @201 RefTypeUse <Ivl:59>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #276 @202 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #277 @202 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #278 @202 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #279 @202 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #280 @202 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #281 @202 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #282 @202 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #283 @203 RefTypeBB  BB02 regmask=[] minReg=1>
<RefPosition #284 @206 RefTypeKill <Reg:rax>  BB02 regmask=[rax] minReg=1 last>
<RefPosition #285 @206 RefTypeKill <Reg:rcx>  BB02 regmask=[rcx] minReg=1 last>
<RefPosition #286 @206 RefTypeKill <Reg:rdx>  BB02 regmask=[rdx] minReg=1 last>
<RefPosition #287 @206 RefTypeKill <Reg:r8 >  BB02 regmask=[r8] minReg=1 last>
<RefPosition #288 @206 RefTypeKill <Reg:r9 >  BB02 regmask=[r9] minReg=1 last>
<RefPosition #289 @206 RefTypeKill <Reg:r10>  BB02 regmask=[r10] minReg=1 last>
<RefPosition #290 @206 RefTypeKill <Reg:r11>  BB02 regmask=[r11] minReg=1 last>
-----------------
<RefPosition #0   @0   RefTypeParamDef <Ivl:0 V00>  BB00 regmask=[rcx] minReg=1 fixed regOptional>
<RefPosition #79  @67  RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[r8] minReg=1 fixed>
<RefPosition #154 @109 RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed>
-----------------
<RefPosition #122 @84  RefTypeDef <Ivl:3 V04> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #123 @89  RefTypeUse <Ivl:3 V04> LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #178 @121 RefTypeUse <Ivl:3 V04> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed>
-----------------
<RefPosition #29  @20  RefTypeDef <Ivl:4 V05> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #30  @25  RefTypeUse <Ivl:4 V05> LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #32  @31  RefTypeUse <Ivl:4 V05> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed>
-----------------
<RefPosition #152 @106 RefTypeDef <Ivl:1 V01> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #182 @125 RefTypeUse <Ivl:1 V01> LCL_VAR BB01 regmask=[rdx] minReg=1 fixed>
<RefPosition #203 @143 RefTypeUse <Ivl:1 V01> LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #215 @167 RefTypeUse <Ivl:1 V01> LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #244 @185 RefTypeUse <Ivl:1 V01> LCL_VAR BB01 regmask=[r8] minReg=1 last fixed>
-----------------
<RefPosition #98  @72  RefTypeDef <Ivl:5 V06> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #100 @75  RefTypeUse <Ivl:5 V06> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed>
-----------------
<RefPosition #64  @50  RefTypeDef <Ivl:7 V09> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #66  @53  RefTypeUse <Ivl:7 V09> LCL_VAR BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #236 @177 RefTypeUse <Ivl:7 V09> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed>
-----------------
<RefPosition #73  @60  RefTypeDef <Ivl:8 V10> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #75  @63  RefTypeUse <Ivl:8 V10> LCL_VAR BB01 regmask=[rdx] minReg=1 fixed>
<RefPosition #240 @181 RefTypeUse <Ivl:8 V10> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed>
-----------------
<RefPosition #210 @154 RefTypeDef <Ivl:6 V08> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #211 @159 RefTypeUse <Ivl:6 V08> LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #213 @163 RefTypeUse <Ivl:6 V08> LCL_VAR BB01 regmask=[allInt] minReg=1 last>
-----------------
<RefPosition #206 @146 RefTypeDef <Ivl:9 V11> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #207 @151 RefTypeUse <Ivl:9 V11> LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #212 @159 RefTypeUse <Ivl:9 V11> LCL_VAR BB01 regmask=[allInt] minReg=1 last regOptional>
-----------------
<RefPosition #176 @118 RefTypeDef <Ivl:2 V02> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #221 @171 RefTypeUse <Ivl:2 V02> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed>
TUPLE STYLE DUMP WITH REF POSITIONS
Incoming Parameters:  V00
BB01 [000..056) (return), preds={} succs={}
=====
  N003.                    IL_OFFSET IL offset: 0x0
  N005.                    CNS_INT   0x7ffc7e4c17a0
        Def:<I10>(#2)
  N007.                    PUTARG_REG
                               Use:<I10>(#4) Fixed:rcx(#3) *
        Def:<I11>(#6) rcx
  N009.                    CNS_INT   1
        Def:<I12>(#7)
  N011.                    PUTARG_REG
                               Use:<I12>(#9) Fixed:rdx(#8) *
        Def:<I13>(#11) rdx
  N013.                    CALL help
                               Use:<I11>(#13) Fixed:rcx(#12) *
                               Use:<I13>(#15) Fixed:rdx(#14) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I14>(#24) rax LocalDefUse *
  N015.                    CNS_INT(h) 0xd1ffab1e static Fseq[_registryLock]
        Def:<I15>(#25)
  N017.                    IND      
                               Use:<I15>(#26) *
        Def:<I16>(#27) Pref:<V05/L4>
  N019.                    V05(L4)
                               Use:<I16>(#28) *
        Def:<V05/L4>(#29)
  N021.                    IL_OFFSET IL offset: 0x0
  N023.                    V05(L4)
  N025.                    NULLCHECK
                               Use:<V05/L4>(#30)
  N027.                    IL_OFFSET IL offset: 0x0
  N029.                    V05(L4)
  N031.                    PUTARG_REG
                               Use:<V05/L4>(#32) Fixed:rcx(#31) *
        Def:<I17>(#34) rcx
  N033.                    CNS_INT   -1
        Def:<I18>(#35)
  N035.                    PUTARG_REG
                               Use:<I18>(#37) Fixed:rdx(#36) *
        Def:<I19>(#39) rdx
  N037.                    CALL     
                               Use:<I17>(#41) Fixed:rcx(#40) *
                               Use:<I19>(#43) Fixed:rdx(#42) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I20>(#52) rax LocalDefUse *
  N039.                    IL_OFFSET IL offset: 0x5
  N041.                    CALL     
        Kill: rax rcx rdx r8 r9 r10 r11 
  N043.                    IL_OFFSET IL offset: 0xa
  N045.                    CNS_INT(h) 0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer"
        Def:<I21>(#60)
  N047.                    IND      
                               Use:<I21>(#61) *
        Def:<I22>(#62) Pref:<V09/L7>
  N049.                    V09(L7)
                               Use:<I22>(#63) *
        Def:<V09/L7>(#64)
  N051.                    V09(L7)
  N053.                    PUTARG_REG
                               Use:<V09/L7>(#66) Fixed:rcx(#65)
        Def:<I23>(#68) rcx Pref:<V09/L7>
  N055.                    CNS_INT(h) 0xD1FFAB1E "ArgsFromTheSecondInstance"
        Def:<I24>(#69)
  N057.                    IND      
                               Use:<I24>(#70) *
        Def:<I25>(#71) Pref:<V10/L8>
  N059.                    V10(L8)
                               Use:<I25>(#72) *
        Def:<V10/L8>(#73)
  N061.                    V10(L8)
  N063.                    PUTARG_REG
                               Use:<V10/L8>(#75) Fixed:rdx(#74)
        Def:<I26>(#77) rdx Pref:<V10/L8>
  N065.                    V00(L0)
  N067.                    PUTARG_REG
                               Use:<V00/L0>(#79) Fixed:r8(#78)
        Def:<I27>(#81) r8 Pref:<V00/L0>
  N069.                    CALL     
                               Use:<I23>(#83) Fixed:rcx(#82) *
                               Use:<I26>(#85) Fixed:rdx(#84) *
                               Use:<I27>(#87) Fixed:r8(#86) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I28>(#96) rax Pref:<V06/L5>
  N071.                    V06(L5)
                               Use:<I28>(#97) *
        Def:<V06/L5>(#98)
  N073.                    V06(L5)
  N075.                    PUTARG_REG
                               Use:<V06/L5>(#100) Fixed:rdx(#99) *
        Def:<I29>(#102) rdx
  N077.                    CNS_INT(h) 0xd1ffab1e class
        Def:<I30>(#103)
  N079.                    PUTARG_REG
                               Use:<I30>(#105) Fixed:rcx(#104) *
        Def:<I31>(#107) rcx
  N081.                    CALL help
                               Use:<I29>(#109) Fixed:rdx(#108) *
                               Use:<I31>(#111) Fixed:rcx(#110) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I32>(#120) rax Pref:<V04/L3>
  N083.                    V04(L3)
                               Use:<I32>(#121) *
        Def:<V04/L3>(#122)
  N085.                    V04(L3)
  N087.                    LEA(b+8) 
  N089.                    IND      
                               Use:<V04/L3>(#123)
        Def:<I33>(#124) Pref:<I34>
  N091.                    CNS_INT   1
  N093.                    ADD      
                               Use:<I33>(#125) *
        Def:<I34>(#126)
  N095.                    CAST     
                               Use:<I34>(#127) *
        Def:<I35>(#128)
  N097.                    PUTARG_REG
                               Use:<I35>(#130) Fixed:rdx(#129) *
        Def:<I36>(#132) rdx
  N099.                    CNS_INT(h) 0xd1ffab1e class
        Def:<I37>(#133)
  N101.                    PUTARG_REG
                               Use:<I37>(#135) Fixed:rcx(#134) *
        Def:<I38>(#137) rcx
  N103.                    CALL help
                               Use:<I36>(#139) Fixed:rdx(#138) *
                               Use:<I38>(#141) Fixed:rcx(#140) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I39>(#150) rax Pref:<V01/L1>
  N105.                    V01(L1)
                               Use:<I39>(#151) *
        Def:<V01/L1>(#152)
  N107.                    V00(L0)
  N109.                    PUTARG_REG
                               Use:<V00/L0>(#154) Fixed:rdx(#153) *
        Def:<I40>(#156) rdx
  N111.                    CNS_INT   124
        Def:<I41>(#157)
  N113.                    PUTARG_REG
                               Use:<I41>(#159) Fixed:rcx(#158) *
        Def:<I42>(#161) rcx
  N115.                    CALL     
                               Use:<I40>(#163) Fixed:rdx(#162) *
                               Use:<I42>(#165) Fixed:rcx(#164) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I43>(#174) rax Pref:<V02/L2>
  N117.                    V02(L2)
                               Use:<I43>(#175) *
        Def:<V02/L2>(#176)
  N119.                    V04(L3)
  N121.                    PUTARG_REG
                               Use:<V04/L3>(#178) Fixed:rcx(#177) *
        Def:<I44>(#180) rcx
  N123.                    V01(L1)
  N125.                    PUTARG_REG
                               Use:<V01/L1>(#182) Fixed:rdx(#181)
        Def:<I45>(#184) rdx Pref:<V01/L1>
  N127.                    CNS_INT   0
        Def:<I46>(#185)
  N129.                    PUTARG_REG
                               Use:<I46>(#187) Fixed:r8(#186) *
        Def:<I47>(#189) r8
  N131.                    CNS_INT(h) 0xd1ffab1e ftn
  N133.                    IND      
  N135.                    CALL     
                               Use:<I44>(#191) Fixed:rcx(#190) *
                               Use:<I45>(#193) Fixed:rdx(#192) *
                               Use:<I47>(#195) Fixed:r8(#194) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N137.                    IL_OFFSET IL offset: 0x38
  N139.                    V01(L1)
  N141.                    LEA(b+8) 
  N143.                    IND      
                               Use:<V01/L1>(#203)
        Def:<I48>(#204) Pref:<V11/L9>
  N145.                    V11(L9)
                               Use:<I48>(#205) *
        Def:<V11/L9>(#206)
  N147.                    V11(L9)
  N149.                    CNS_INT   -1
  N151.                    ADD      
                               Use:<V11/L9>(#207)
        Def:<I49>(#208) Pref:<V08/L6>
  N153.                    V08(L6)
                               Use:<I49>(#209) *
        Def:<V08/L6>(#210)
  N155.                    V08(L6)
  N157.                    V11(L9)
  N159.                    ARR_BOUNDS_CHECK_Rng
                               Use:<V08/L6>(#211)
                               Use:<V11/L9>(#212) *
  N161.                    V08(L6)
  N163.                    CAST     
                               Use:<V08/L6>(#213) *
        Def:<I50>(#214)
  N165.                    V01(L1)
  N167.                    LEA(b+(i*8)+16)
                               Use:<V01/L1>(#215)
                               Use:<I50>(#216) *
        Def:<I51>(#217)
  N169.                    V02(L2)
  N171.                    STOREIND 
                               Use:<I51>(#219) Fixed:rcx(#218) *
                               Use:<V02/L2>(#221) Fixed:rdx(#220) *
        Kill: rax rcx rdx r8 r9 r10 r11 mm0 mm1 mm2 mm3 mm4 mm5 
  N173.                    IL_OFFSET IL offset: 0x40
  N175.                    V09(L7)
  N177.                    PUTARG_REG
                               Use:<V09/L7>(#236) Fixed:rcx(#235) *
        Def:<I52>(#238) rcx
  N179.                    V10(L8)
  N181.                    PUTARG_REG
                               Use:<V10/L8>(#240) Fixed:rdx(#239) *
        Def:<I53>(#242) rdx
  N183.                    V01(L1)
  N185.                    PUTARG_REG
                               Use:<V01/L1>(#244) Fixed:r8(#243) *
        Def:<I54>(#246) r8
  N187.                    CNS_INT   0
        Def:<I55>(#247)
  N189.                    PUTARG_REG
                               Use:<I55>(#249) Fixed:r9(#248) *
        Def:<I56>(#251) r9
  N191.                    CALL     
                               Use:<I52>(#253) Fixed:rcx(#252) *
                               Use:<I53>(#255) Fixed:rdx(#254) *
                               Use:<I54>(#257) Fixed:r8(#256) *
                               Use:<I56>(#259) Fixed:r9(#258) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N193.                    IL_OFFSET IL offset: 0x50
  N195.                    CNS_INT(h) 0xd1ffab1e static Fseq[_registryLock]
        Def:<I57>(#267)
  N197.                    IND      
                               Use:<I57>(#268) *
        Def:<I58>(#269)
  N199.                    PUTARG_REG
                               Use:<I58>(#271) Fixed:rcx(#270) *
        Def:<I59>(#273) rcx
  N201.                    CALL nullcheck
                               Use:<I59>(#275) Fixed:rcx(#274) *
        Kill: rax rcx rdx r8 r9 r10 r11 

BB02 [???..???) (throw), preds={} succs={}
=====
  N205.                    CALL help
        Kill: rax rcx rdx r8 r9 r10 r11 




Linear scan intervals after buildIntervals:
Interval  0: (V00) ref RefPositions {#0@0 #79@67 #154@109} physReg:rcx Preferences=[rbx rbp rsi rdi r12-r15]
Interval  1: (V01) ref RefPositions {#152@106 #182@125 #203@143 #215@167 #244@185} physReg:NA Preferences=[rbx rbp rsi rdi r12-r15]
Interval  2: (V02) ref RefPositions {#176@118 #221@171} physReg:NA Preferences=[rbx rbp rsi rdi r12-r15]
Interval  3: (V04) ref RefPositions {#122@84 #123@89 #178@121} physReg:NA Preferences=[rbx rbp rsi rdi r12-r15]
Interval  4: (V05) ref RefPositions {#29@20 #30@25 #32@31} physReg:NA Preferences=[rcx]
Interval  5: (V06) ref RefPositions {#98@72 #100@75} physReg:NA Preferences=[rdx]
Interval  6: (V08) int RefPositions {#210@154 #211@159 #213@163} physReg:NA Preferences=[allInt]
Interval  7: (V09) ref RefPositions {#64@50 #66@53 #236@177} physReg:NA Preferences=[rbx rbp rsi rdi r12-r15]
Interval  8: (V10) ref RefPositions {#73@60 #75@63 #240@181} physReg:NA Preferences=[rbx rbp rsi rdi r12-r15]
Interval  9: (V11) int RefPositions {#206@146 #207@151 #212@159} physReg:NA Preferences=[allInt]
Interval 10: long (constant) RefPositions {#2@6 #4@7} physReg:NA Preferences=[rcx]
Interval 11: long RefPositions {#6@8 #13@13} physReg:NA Preferences=[rcx]
Interval 12: int (constant) RefPositions {#7@10 #9@11} physReg:NA Preferences=[rdx]
Interval 13: int RefPositions {#11@12 #15@13} physReg:NA Preferences=[rdx]
Interval 14: long RefPositions {#24@14} physReg:NA Preferences=[rax]
Interval 15: long (constant) RefPositions {#25@16 #26@17} physReg:NA Preferences=[allInt]
Interval 16: ref RefPositions {#27@18 #28@19} physReg:NA Preferences=[allInt] RelatedInterval <V05/L4>
Interval 17: ref RefPositions {#34@32 #41@37} physReg:NA Preferences=[rcx]
Interval 18: int (constant) RefPositions {#35@34 #37@35} physReg:NA Preferences=[rdx]
Interval 19: int RefPositions {#39@36 #43@37} physReg:NA Preferences=[rdx]
Interval 20: int RefPositions {#52@38} physReg:NA Preferences=[rax]
Interval 21: long (constant) RefPositions {#60@46 #61@47} physReg:NA Preferences=[allInt]
Interval 22: ref RefPositions {#62@48 #63@49} physReg:NA Preferences=[allInt] RelatedInterval <V09/L7>
Interval 23: ref (specialPutArg) RefPositions {#68@54 #83@69} physReg:NA Preferences=[rcx] RelatedInterval <V09/L7>
Interval 24: long (constant) RefPositions {#69@56 #70@57} physReg:NA Preferences=[allInt]
Interval 25: ref RefPositions {#71@58 #72@59} physReg:NA Preferences=[allInt] RelatedInterval <V10/L8>
Interval 26: ref (specialPutArg) RefPositions {#77@64 #85@69} physReg:NA Preferences=[rdx] RelatedInterval <V10/L8>
Interval 27: ref (specialPutArg) RefPositions {#81@68 #87@69} physReg:NA Preferences=[r8] RelatedInterval <V00/L0>
Interval 28: ref RefPositions {#96@70 #97@71} physReg:NA Preferences=[rax] RelatedInterval <V06/L5>
Interval 29: ref RefPositions {#102@76 #109@81} physReg:NA Preferences=[rdx]
Interval 30: long (constant) RefPositions {#103@78 #105@79} physReg:NA Preferences=[rcx]
Interval 31: long RefPositions {#107@80 #111@81} physReg:NA Preferences=[rcx]
Interval 32: ref RefPositions {#120@82 #121@83} physReg:NA Preferences=[rax] RelatedInterval <V04/L3>
Interval 33: int RefPositions {#124@90 #125@93} physReg:NA Preferences=[allInt] RelatedInterval <I34>
Interval 34: int RefPositions {#126@94 #127@95} physReg:NA Preferences=[allInt]
Interval 35: long RefPositions {#128@96 #130@97} physReg:NA Preferences=[rdx]
Interval 36: long RefPositions {#132@98 #139@103} physReg:NA Preferences=[rdx]
Interval 37: long (constant) RefPositions {#133@100 #135@101} physReg:NA Preferences=[rcx]
Interval 38: long RefPositions {#137@102 #141@103} physReg:NA Preferences=[rcx]
Interval 39: ref RefPositions {#150@104 #151@105} physReg:NA Preferences=[rax] RelatedInterval <V01/L1>
Interval 40: ref RefPositions {#156@110 #163@115} physReg:NA Preferences=[rdx]
Interval 41: int (constant) RefPositions {#157@112 #159@113} physReg:NA Preferences=[rcx]
Interval 42: int RefPositions {#161@114 #165@115} physReg:NA Preferences=[rcx]
Interval 43: ref RefPositions {#174@116 #175@117} physReg:NA Preferences=[rax] RelatedInterval <V02/L2>
Interval 44: ref RefPositions {#180@122 #191@135} physReg:NA Preferences=[rcx]
Interval 45: ref (specialPutArg) RefPositions {#184@126 #193@135} physReg:NA Preferences=[rdx] RelatedInterval <V01/L1>
Interval 46: int (constant) RefPositions {#185@128 #187@129} physReg:NA Preferences=[r8]
Interval 47: int RefPositions {#189@130 #195@135} physReg:NA Preferences=[r8]
Interval 48: int RefPositions {#204@144 #205@145} physReg:NA Preferences=[allInt] RelatedInterval <V11/L9>
Interval 49: int RefPositions {#208@152 #209@153} physReg:NA Preferences=[allInt] RelatedInterval <V08/L6>
Interval 50: long RefPositions {#214@164 #216@167} physReg:NA Preferences=[allInt]
Interval 51: byref RefPositions {#217@168 #219@171} physReg:NA Preferences=[rcx]
Interval 52: ref RefPositions {#238@178 #253@191} physReg:NA Preferences=[rcx]
Interval 53: ref RefPositions {#242@182 #255@191} physReg:NA Preferences=[rdx]
Interval 54: ref RefPositions {#246@186 #257@191} physReg:NA Preferences=[r8]
Interval 55: int (constant) RefPositions {#247@188 #249@189} physReg:NA Preferences=[r9]
Interval 56: int RefPositions {#251@190 #259@191} physReg:NA Preferences=[r9]
Interval 57: long (constant) RefPositions {#267@196 #268@197} physReg:NA Preferences=[allInt]
Interval 58: ref RefPositions {#269@198 #271@199} physReg:NA Preferences=[rcx]
Interval 59: ref RefPositions {#273@200 #275@201} physReg:NA Preferences=[rcx]

*************** In LinearScan::allocateRegisters()

Linear scan intervals before allocateRegisters:
Interval  0: (V00) ref RefPositions {#0@0 #79@67 #154@109} physReg:rcx Preferences=[rbx rbp rsi rdi r12-r15]
Interval  1: (V01) ref RefPositions {#152@106 #182@125 #203@143 #215@167 #244@185} physReg:NA Preferences=[rbx rbp rsi rdi r12-r15]
Interval  2: (V02) ref RefPositions {#176@118 #221@171} physReg:NA Preferences=[rbx rbp rsi rdi r12-r15]
Interval  3: (V04) ref RefPositions {#122@84 #123@89 #178@121} physReg:NA Preferences=[rbx rbp rsi rdi r12-r15]
Interval  4: (V05) ref RefPositions {#29@20 #30@25 #32@31} physReg:NA Preferences=[rcx]
Interval  5: (V06) ref RefPositions {#98@72 #100@75} physReg:NA Preferences=[rdx]
Interval  6: (V08) int RefPositions {#210@154 #211@159 #213@163} physReg:NA Preferences=[allInt]
Interval  7: (V09) ref RefPositions {#64@50 #66@53 #236@177} physReg:NA Preferences=[rbx rbp rsi rdi r12-r15]
Interval  8: (V10) ref RefPositions {#73@60 #75@63 #240@181} physReg:NA Preferences=[rbx rbp rsi rdi r12-r15]
Interval  9: (V11) int RefPositions {#206@146 #207@151 #212@159} physReg:NA Preferences=[allInt]
Interval 10: long (constant) RefPositions {#2@6 #4@7} physReg:NA Preferences=[rcx]
Interval 11: long RefPositions {#6@8 #13@13} physReg:NA Preferences=[rcx]
Interval 12: int (constant) RefPositions {#7@10 #9@11} physReg:NA Preferences=[rdx]
Interval 13: int RefPositions {#11@12 #15@13} physReg:NA Preferences=[rdx]
Interval 14: long RefPositions {#24@14} physReg:NA Preferences=[rax]
Interval 15: long (constant) RefPositions {#25@16 #26@17} physReg:NA Preferences=[allInt]
Interval 16: ref RefPositions {#27@18 #28@19} physReg:NA Preferences=[allInt] RelatedInterval <V05/L4>
Interval 17: ref RefPositions {#34@32 #41@37} physReg:NA Preferences=[rcx]
Interval 18: int (constant) RefPositions {#35@34 #37@35} physReg:NA Preferences=[rdx]
Interval 19: int RefPositions {#39@36 #43@37} physReg:NA Preferences=[rdx]
Interval 20: int RefPositions {#52@38} physReg:NA Preferences=[rax]
Interval 21: long (constant) RefPositions {#60@46 #61@47} physReg:NA Preferences=[allInt]
Interval 22: ref RefPositions {#62@48 #63@49} physReg:NA Preferences=[allInt] RelatedInterval <V09/L7>
Interval 23: ref (specialPutArg) RefPositions {#68@54 #83@69} physReg:NA Preferences=[rcx] RelatedInterval <V09/L7>
Interval 24: long (constant) RefPositions {#69@56 #70@57} physReg:NA Preferences=[allInt]
Interval 25: ref RefPositions {#71@58 #72@59} physReg:NA Preferences=[allInt] RelatedInterval <V10/L8>
Interval 26: ref (specialPutArg) RefPositions {#77@64 #85@69} physReg:NA Preferences=[rdx] RelatedInterval <V10/L8>
Interval 27: ref (specialPutArg) RefPositions {#81@68 #87@69} physReg:NA Preferences=[r8] RelatedInterval <V00/L0>
Interval 28: ref RefPositions {#96@70 #97@71} physReg:NA Preferences=[rax] RelatedInterval <V06/L5>
Interval 29: ref RefPositions {#102@76 #109@81} physReg:NA Preferences=[rdx]
Interval 30: long (constant) RefPositions {#103@78 #105@79} physReg:NA Preferences=[rcx]
Interval 31: long RefPositions {#107@80 #111@81} physReg:NA Preferences=[rcx]
Interval 32: ref RefPositions {#120@82 #121@83} physReg:NA Preferences=[rax] RelatedInterval <V04/L3>
Interval 33: int RefPositions {#124@90 #125@93} physReg:NA Preferences=[allInt] RelatedInterval <I34>
Interval 34: int RefPositions {#126@94 #127@95} physReg:NA Preferences=[allInt]
Interval 35: long RefPositions {#128@96 #130@97} physReg:NA Preferences=[rdx]
Interval 36: long RefPositions {#132@98 #139@103} physReg:NA Preferences=[rdx]
Interval 37: long (constant) RefPositions {#133@100 #135@101} physReg:NA Preferences=[rcx]
Interval 38: long RefPositions {#137@102 #141@103} physReg:NA Preferences=[rcx]
Interval 39: ref RefPositions {#150@104 #151@105} physReg:NA Preferences=[rax] RelatedInterval <V01/L1>
Interval 40: ref RefPositions {#156@110 #163@115} physReg:NA Preferences=[rdx]
Interval 41: int (constant) RefPositions {#157@112 #159@113} physReg:NA Preferences=[rcx]
Interval 42: int RefPositions {#161@114 #165@115} physReg:NA Preferences=[rcx]
Interval 43: ref RefPositions {#174@116 #175@117} physReg:NA Preferences=[rax] RelatedInterval <V02/L2>
Interval 44: ref RefPositions {#180@122 #191@135} physReg:NA Preferences=[rcx]
Interval 45: ref (specialPutArg) RefPositions {#184@126 #193@135} physReg:NA Preferences=[rdx] RelatedInterval <V01/L1>
Interval 46: int (constant) RefPositions {#185@128 #187@129} physReg:NA Preferences=[r8]
Interval 47: int RefPositions {#189@130 #195@135} physReg:NA Preferences=[r8]
Interval 48: int RefPositions {#204@144 #205@145} physReg:NA Preferences=[allInt] RelatedInterval <V11/L9>
Interval 49: int RefPositions {#208@152 #209@153} physReg:NA Preferences=[allInt] RelatedInterval <V08/L6>
Interval 50: long RefPositions {#214@164 #216@167} physReg:NA Preferences=[allInt]
Interval 51: byref RefPositions {#217@168 #219@171} physReg:NA Preferences=[rcx]
Interval 52: ref RefPositions {#238@178 #253@191} physReg:NA Preferences=[rcx]
Interval 53: ref RefPositions {#242@182 #255@191} physReg:NA Preferences=[rdx]
Interval 54: ref RefPositions {#246@186 #257@191} physReg:NA Preferences=[r8]
Interval 55: int (constant) RefPositions {#247@188 #249@189} physReg:NA Preferences=[r9]
Interval 56: int RefPositions {#251@190 #259@191} physReg:NA Preferences=[r9]
Interval 57: long (constant) RefPositions {#267@196 #268@197} physReg:NA Preferences=[allInt]
Interval 58: ref RefPositions {#269@198 #271@199} physReg:NA Preferences=[rcx]
Interval 59: ref RefPositions {#273@200 #275@201} physReg:NA Preferences=[rcx]

------------
REFPOSITIONS BEFORE ALLOCATION: 
------------
<RefPosition #0   @0   RefTypeParamDef <Ivl:0 V00>  BB00 regmask=[rcx] minReg=1 fixed regOptional>
<RefPosition #1   @1   RefTypeBB  BB01 regmask=[] minReg=1>
<RefPosition #2   @6   RefTypeDef <Ivl:10> CNS_INT BB01 regmask=[rcx] minReg=1>
<RefPosition #3   @7   RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #4   @7   RefTypeUse <Ivl:10>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #5   @8   RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #6   @8   RefTypeDef <Ivl:11> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #7   @10  RefTypeDef <Ivl:12> CNS_INT BB01 regmask=[rdx] minReg=1>
<RefPosition #8   @11  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #9   @11  RefTypeUse <Ivl:12>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #10  @12  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #11  @12  RefTypeDef <Ivl:13> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed>
<RefPosition #12  @13  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #13  @13  RefTypeUse <Ivl:11>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #14  @13  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #15  @13  RefTypeUse <Ivl:13>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #16  @14  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #17  @14  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #18  @14  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #19  @14  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #20  @14  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #21  @14  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #22  @14  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #23  @14  RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #24  @14  RefTypeDef <Ivl:14> CALL BB01 regmask=[rax] minReg=1 last fixed local>
<RefPosition #25  @16  RefTypeDef <Ivl:15> CNS_INT BB01 regmask=[allInt] minReg=1>
<RefPosition #26  @17  RefTypeUse <Ivl:15>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #27  @18  RefTypeDef <Ivl:16> IND BB01 regmask=[allInt] minReg=1>
<RefPosition #28  @19  RefTypeUse <Ivl:16>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #29  @20  RefTypeDef <Ivl:4 V05> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #30  @25  RefTypeUse <Ivl:4 V05> LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #31  @31  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #32  @31  RefTypeUse <Ivl:4 V05> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #33  @32  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #34  @32  RefTypeDef <Ivl:17> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #35  @34  RefTypeDef <Ivl:18> CNS_INT BB01 regmask=[rdx] minReg=1>
<RefPosition #36  @35  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #37  @35  RefTypeUse <Ivl:18>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #38  @36  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #39  @36  RefTypeDef <Ivl:19> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed>
<RefPosition #40  @37  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #41  @37  RefTypeUse <Ivl:17>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #42  @37  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #43  @37  RefTypeUse <Ivl:19>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #44  @38  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #45  @38  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #46  @38  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #47  @38  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #48  @38  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #49  @38  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #50  @38  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #51  @38  RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #52  @38  RefTypeDef <Ivl:20> CALL BB01 regmask=[rax] minReg=1 last fixed local>
<RefPosition #53  @42  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #54  @42  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #55  @42  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #56  @42  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #57  @42  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #58  @42  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #59  @42  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #60  @46  RefTypeDef <Ivl:21> CNS_INT BB01 regmask=[allInt] minReg=1>
<RefPosition #61  @47  RefTypeUse <Ivl:21>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #62  @48  RefTypeDef <Ivl:22> IND BB01 regmask=[allInt] minReg=1>
<RefPosition #63  @49  RefTypeUse <Ivl:22>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #64  @50  RefTypeDef <Ivl:7 V09> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #65  @53  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #66  @53  RefTypeUse <Ivl:7 V09> LCL_VAR BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #67  @54  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #68  @54  RefTypeDef <Ivl:23> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #69  @56  RefTypeDef <Ivl:24> CNS_INT BB01 regmask=[allInt] minReg=1>
<RefPosition #70  @57  RefTypeUse <Ivl:24>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #71  @58  RefTypeDef <Ivl:25> IND BB01 regmask=[allInt] minReg=1>
<RefPosition #72  @59  RefTypeUse <Ivl:25>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #73  @60  RefTypeDef <Ivl:8 V10> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #74  @63  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #75  @63  RefTypeUse <Ivl:8 V10> LCL_VAR BB01 regmask=[rdx] minReg=1 fixed>
<RefPosition #76  @64  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #77  @64  RefTypeDef <Ivl:26> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed>
<RefPosition #78  @67  RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #79  @67  RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[r8] minReg=1 fixed>
<RefPosition #80  @68  RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #81  @68  RefTypeDef <Ivl:27> PUTARG_REG BB01 regmask=[r8] minReg=1 fixed>
<RefPosition #82  @69  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #83  @69  RefTypeUse <Ivl:23>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #84  @69  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #85  @69  RefTypeUse <Ivl:26>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #86  @69  RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #87  @69  RefTypeUse <Ivl:27>  BB01 regmask=[r8] minReg=1 last fixed>
<RefPosition #88  @70  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #89  @70  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #90  @70  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #91  @70  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #92  @70  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #93  @70  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #94  @70  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #95  @70  RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #96  @70  RefTypeDef <Ivl:28> CALL BB01 regmask=[rax] minReg=1 fixed>
<RefPosition #97  @71  RefTypeUse <Ivl:28>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #98  @72  RefTypeDef <Ivl:5 V06> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #99  @75  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #100 @75  RefTypeUse <Ivl:5 V06> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #101 @76  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #102 @76  RefTypeDef <Ivl:29> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed>
<RefPosition #103 @78  RefTypeDef <Ivl:30> CNS_INT BB01 regmask=[rcx] minReg=1>
<RefPosition #104 @79  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #105 @79  RefTypeUse <Ivl:30>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #106 @80  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #107 @80  RefTypeDef <Ivl:31> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #108 @81  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #109 @81  RefTypeUse <Ivl:29>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #110 @81  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #111 @81  RefTypeUse <Ivl:31>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #112 @82  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #113 @82  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #114 @82  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #115 @82  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #116 @82  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #117 @82  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #118 @82  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #119 @82  RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #120 @82  RefTypeDef <Ivl:32> CALL BB01 regmask=[rax] minReg=1 fixed>
<RefPosition #121 @83  RefTypeUse <Ivl:32>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #122 @84  RefTypeDef <Ivl:3 V04> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #123 @89  RefTypeUse <Ivl:3 V04> LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #124 @90  RefTypeDef <Ivl:33> IND BB01 regmask=[allInt] minReg=1>
<RefPosition #125 @93  RefTypeUse <Ivl:33>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #126 @94  RefTypeDef <Ivl:34> ADD BB01 regmask=[allInt] minReg=1>
<RefPosition #127 @95  RefTypeUse <Ivl:34>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #128 @96  RefTypeDef <Ivl:35> CAST BB01 regmask=[rdx] minReg=1>
<RefPosition #129 @97  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #130 @97  RefTypeUse <Ivl:35>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #131 @98  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #132 @98  RefTypeDef <Ivl:36> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed>
<RefPosition #133 @100 RefTypeDef <Ivl:37> CNS_INT BB01 regmask=[rcx] minReg=1>
<RefPosition #134 @101 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #135 @101 RefTypeUse <Ivl:37>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #136 @102 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #137 @102 RefTypeDef <Ivl:38> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #138 @103 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #139 @103 RefTypeUse <Ivl:36>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #140 @103 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #141 @103 RefTypeUse <Ivl:38>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #142 @104 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #143 @104 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #144 @104 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #145 @104 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #146 @104 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #147 @104 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #148 @104 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #149 @104 RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #150 @104 RefTypeDef <Ivl:39> CALL BB01 regmask=[rax] minReg=1 fixed>
<RefPosition #151 @105 RefTypeUse <Ivl:39>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #152 @106 RefTypeDef <Ivl:1 V01> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #153 @109 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #154 @109 RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #155 @110 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #156 @110 RefTypeDef <Ivl:40> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed>
<RefPosition #157 @112 RefTypeDef <Ivl:41> CNS_INT BB01 regmask=[rcx] minReg=1>
<RefPosition #158 @113 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #159 @113 RefTypeUse <Ivl:41>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #160 @114 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #161 @114 RefTypeDef <Ivl:42> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #162 @115 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #163 @115 RefTypeUse <Ivl:40>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #164 @115 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #165 @115 RefTypeUse <Ivl:42>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #166 @116 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #167 @116 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #168 @116 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #169 @116 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #170 @116 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #171 @116 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #172 @116 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #173 @116 RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #174 @116 RefTypeDef <Ivl:43> CALL BB01 regmask=[rax] minReg=1 fixed>
<RefPosition #175 @117 RefTypeUse <Ivl:43>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #176 @118 RefTypeDef <Ivl:2 V02> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #177 @121 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #178 @121 RefTypeUse <Ivl:3 V04> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #179 @122 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #180 @122 RefTypeDef <Ivl:44> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #181 @125 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #182 @125 RefTypeUse <Ivl:1 V01> LCL_VAR BB01 regmask=[rdx] minReg=1 fixed>
<RefPosition #183 @126 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #184 @126 RefTypeDef <Ivl:45> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed>
<RefPosition #185 @128 RefTypeDef <Ivl:46> CNS_INT BB01 regmask=[r8] minReg=1>
<RefPosition #186 @129 RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #187 @129 RefTypeUse <Ivl:46>  BB01 regmask=[r8] minReg=1 last fixed>
<RefPosition #188 @130 RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #189 @130 RefTypeDef <Ivl:47> PUTARG_REG BB01 regmask=[r8] minReg=1 fixed>
<RefPosition #190 @135 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #191 @135 RefTypeUse <Ivl:44>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #192 @135 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #193 @135 RefTypeUse <Ivl:45>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #194 @135 RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #195 @135 RefTypeUse <Ivl:47>  BB01 regmask=[r8] minReg=1 last fixed>
<RefPosition #196 @136 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #197 @136 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #198 @136 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #199 @136 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #200 @136 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #201 @136 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #202 @136 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #203 @143 RefTypeUse <Ivl:1 V01> LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #204 @144 RefTypeDef <Ivl:48> IND BB01 regmask=[allInt] minReg=1>
<RefPosition #205 @145 RefTypeUse <Ivl:48>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #206 @146 RefTypeDef <Ivl:9 V11> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #207 @151 RefTypeUse <Ivl:9 V11> LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #208 @152 RefTypeDef <Ivl:49> ADD BB01 regmask=[allInt] minReg=1>
<RefPosition #209 @153 RefTypeUse <Ivl:49>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #210 @154 RefTypeDef <Ivl:6 V08> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #211 @159 RefTypeUse <Ivl:6 V08> LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #212 @159 RefTypeUse <Ivl:9 V11> LCL_VAR BB01 regmask=[allInt] minReg=1 last regOptional>
<RefPosition #213 @163 RefTypeUse <Ivl:6 V08> LCL_VAR BB01 regmask=[allInt] minReg=1 last>
<RefPosition #214 @164 RefTypeDef <Ivl:50> CAST BB01 regmask=[allInt] minReg=1>
<RefPosition #215 @167 RefTypeUse <Ivl:1 V01> LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #216 @167 RefTypeUse <Ivl:50>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #217 @168 RefTypeDef <Ivl:51> LEA BB01 regmask=[rcx] minReg=1>
<RefPosition #218 @171 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #219 @171 RefTypeUse <Ivl:51>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #220 @171 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #221 @171 RefTypeUse <Ivl:2 V02> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #222 @172 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #223 @172 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #224 @172 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #225 @172 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #226 @172 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #227 @172 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #228 @172 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #229 @172 RefTypeKill <Reg:mm0>  BB01 regmask=[mm0] minReg=1 last>
<RefPosition #230 @172 RefTypeKill <Reg:mm1>  BB01 regmask=[mm1] minReg=1 last>
<RefPosition #231 @172 RefTypeKill <Reg:mm2>  BB01 regmask=[mm2] minReg=1 last>
<RefPosition #232 @172 RefTypeKill <Reg:mm3>  BB01 regmask=[mm3] minReg=1 last>
<RefPosition #233 @172 RefTypeKill <Reg:mm4>  BB01 regmask=[mm4] minReg=1 last>
<RefPosition #234 @172 RefTypeKill <Reg:mm5>  BB01 regmask=[mm5] minReg=1 last>
<RefPosition #235 @177 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #236 @177 RefTypeUse <Ivl:7 V09> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #237 @178 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #238 @178 RefTypeDef <Ivl:52> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #239 @181 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #240 @181 RefTypeUse <Ivl:8 V10> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #241 @182 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #242 @182 RefTypeDef <Ivl:53> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed>
<RefPosition #243 @185 RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #244 @185 RefTypeUse <Ivl:1 V01> LCL_VAR BB01 regmask=[r8] minReg=1 last fixed>
<RefPosition #245 @186 RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #246 @186 RefTypeDef <Ivl:54> PUTARG_REG BB01 regmask=[r8] minReg=1 fixed>
<RefPosition #247 @188 RefTypeDef <Ivl:55> CNS_INT BB01 regmask=[r9] minReg=1>
<RefPosition #248 @189 RefTypeFixedReg <Reg:r9 >  BB01 regmask=[r9] minReg=1>
<RefPosition #249 @189 RefTypeUse <Ivl:55>  BB01 regmask=[r9] minReg=1 last fixed>
<RefPosition #250 @190 RefTypeFixedReg <Reg:r9 >  BB01 regmask=[r9] minReg=1>
<RefPosition #251 @190 RefTypeDef <Ivl:56> PUTARG_REG BB01 regmask=[r9] minReg=1 fixed>
<RefPosition #252 @191 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #253 @191 RefTypeUse <Ivl:52>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #254 @191 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #255 @191 RefTypeUse <Ivl:53>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #256 @191 RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #257 @191 RefTypeUse <Ivl:54>  BB01 regmask=[r8] minReg=1 last fixed>
<RefPosition #258 @191 RefTypeFixedReg <Reg:r9 >  BB01 regmask=[r9] minReg=1>
<RefPosition #259 @191 RefTypeUse <Ivl:56>  BB01 regmask=[r9] minReg=1 last fixed>
<RefPosition #260 @192 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #261 @192 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #262 @192 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #263 @192 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #264 @192 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #265 @192 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #266 @192 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #267 @196 RefTypeDef <Ivl:57> CNS_INT BB01 regmask=[allInt] minReg=1>
<RefPosition #268 @197 RefTypeUse <Ivl:57>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #269 @198 RefTypeDef <Ivl:58> IND BB01 regmask=[rcx] minReg=1>
<RefPosition #270 @199 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #271 @199 RefTypeUse <Ivl:58>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #272 @200 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #273 @200 RefTypeDef <Ivl:59> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #274 @201 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #275 @201 RefTypeUse <Ivl:59>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #276 @202 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #277 @202 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #278 @202 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #279 @202 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #280 @202 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #281 @202 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #282 @202 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #283 @203 RefTypeBB  BB02 regmask=[] minReg=1>
<RefPosition #284 @206 RefTypeKill <Reg:rax>  BB02 regmask=[rax] minReg=1 last>
<RefPosition #285 @206 RefTypeKill <Reg:rcx>  BB02 regmask=[rcx] minReg=1 last>
<RefPosition #286 @206 RefTypeKill <Reg:rdx>  BB02 regmask=[rdx] minReg=1 last>
<RefPosition #287 @206 RefTypeKill <Reg:r8 >  BB02 regmask=[r8] minReg=1 last>
<RefPosition #288 @206 RefTypeKill <Reg:r9 >  BB02 regmask=[r9] minReg=1 last>
<RefPosition #289 @206 RefTypeKill <Reg:r10>  BB02 regmask=[r10] minReg=1 last>
<RefPosition #290 @206 RefTypeKill <Reg:r11>  BB02 regmask=[r11] minReg=1 last>

VAR REFPOSITIONS BEFORE ALLOCATION
--- V00  (Interval 0)
<RefPosition #0   @0   RefTypeParamDef <Ivl:0 V00>  BB00 regmask=[rcx] minReg=1 fixed regOptional>
<RefPosition #79  @67  RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[r8] minReg=1 fixed>
<RefPosition #154 @109 RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed>
--- V01  (Interval 1)
<RefPosition #152 @106 RefTypeDef <Ivl:1 V01> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #182 @125 RefTypeUse <Ivl:1 V01> LCL_VAR BB01 regmask=[rdx] minReg=1 fixed>
<RefPosition #203 @143 RefTypeUse <Ivl:1 V01> LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #215 @167 RefTypeUse <Ivl:1 V01> LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #244 @185 RefTypeUse <Ivl:1 V01> LCL_VAR BB01 regmask=[r8] minReg=1 last fixed>
--- V02  (Interval 2)
<RefPosition #176 @118 RefTypeDef <Ivl:2 V02> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #221 @171 RefTypeUse <Ivl:2 V02> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed>
--- V03
--- V04  (Interval 3)
<RefPosition #122 @84  RefTypeDef <Ivl:3 V04> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #123 @89  RefTypeUse <Ivl:3 V04> LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #178 @121 RefTypeUse <Ivl:3 V04> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed>
--- V05  (Interval 4)
<RefPosition #29  @20  RefTypeDef <Ivl:4 V05> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #30  @25  RefTypeUse <Ivl:4 V05> LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #32  @31  RefTypeUse <Ivl:4 V05> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed>
--- V06  (Interval 5)
<RefPosition #98  @72  RefTypeDef <Ivl:5 V06> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #100 @75  RefTypeUse <Ivl:5 V06> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed>
--- V07
--- V08  (Interval 6)
<RefPosition #210 @154 RefTypeDef <Ivl:6 V08> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #211 @159 RefTypeUse <Ivl:6 V08> LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #213 @163 RefTypeUse <Ivl:6 V08> LCL_VAR BB01 regmask=[allInt] minReg=1 last>
--- V09  (Interval 7)
<RefPosition #64  @50  RefTypeDef <Ivl:7 V09> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #66  @53  RefTypeUse <Ivl:7 V09> LCL_VAR BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #236 @177 RefTypeUse <Ivl:7 V09> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed>
--- V10  (Interval 8)
<RefPosition #73  @60  RefTypeDef <Ivl:8 V10> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #75  @63  RefTypeUse <Ivl:8 V10> LCL_VAR BB01 regmask=[rdx] minReg=1 fixed>
<RefPosition #240 @181 RefTypeUse <Ivl:8 V10> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed>
--- V11  (Interval 9)
<RefPosition #206 @146 RefTypeDef <Ivl:9 V11> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #207 @151 RefTypeUse <Ivl:9 V11> LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #212 @159 RefTypeUse <Ivl:9 V11> LCL_VAR BB01 regmask=[allInt] minReg=1 last regOptional>



Allocating Registers
--------------------
The following table has one or more rows for each RefPosition that is handled during allocation.
The first column provides the basic information about the RefPosition, with its type (e.g. Def,
Use, Fixd) followed by a '*' if it is a last use, and a 'D' if it is delayRegFree, and then the
action taken during allocation (e.g. Alloc a new register, or Keep an existing one).
The subsequent columns show the Interval occupying each register, if any, followed by 'a' if it is
active, a 'p' if it is a large vector that has been partially spilled, and 'i'if it is inactive.
Columns are only printed up to the last modifed register, which may increase during allocation,
in which case additional columns will appear.  
Registers which are not marked modified have ---- in their column.

--------------------------------+----+----+----+----+----+----+----+----+----+
Loc RP#  Name Type  Action Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------+----+----+----+----+----+----+----+----+----+
                                |    |V0 a|    |    |    |    |    |    |    |
  0.#0   V0   Parm   Alloc rsi  |    |    |    |    |    |V0 a|    |    |    |
  1.#1   BB1 PredBB0            |    |    |    |    |    |V0 a|    |    |    |
  6.#2   C10  Def    Alloc rcx  |    |C10a|    |    |    |V0 a|    |    |    |
  7.#3   rcx  Fixd   Keep  rcx  |    |C10a|    |    |    |V0 a|    |    |    |
  7.#4   C10  Use *  Keep  rcx  |    |C10a|    |    |    |V0 a|    |    |    |
  8.#5   rcx  Fixd   Keep  rcx  |    |    |    |    |    |V0 a|    |    |    |
  8.#6   I11  Def    Alloc rcx  |    |I11a|    |    |    |V0 a|    |    |    |
 10.#7   C12  Def    Alloc rdx  |    |I11a|C12a|    |    |V0 a|    |    |    |
 11.#8   rdx  Fixd   Keep  rdx  |    |I11a|C12a|    |    |V0 a|    |    |    |
 11.#9   C12  Use *  Keep  rdx  |    |I11a|C12a|    |    |V0 a|    |    |    |
 12.#10  rdx  Fixd   Keep  rdx  |    |I11a|    |    |    |V0 a|    |    |    |
 12.#11  I13  Def    Alloc rdx  |    |I11a|I13a|    |    |V0 a|    |    |    |
 13.#12  rcx  Fixd   Keep  rcx  |    |I11a|I13a|    |    |V0 a|    |    |    |
 13.#13  I11  Use *  Keep  rcx  |    |I11a|I13a|    |    |V0 a|    |    |    |
 13.#14  rdx  Fixd   Keep  rdx  |    |I11a|I13a|    |    |V0 a|    |    |    |
 13.#15  I13  Use *  Keep  rdx  |    |I11a|I13a|    |    |V0 a|    |    |    |
 14.#16  rax  Kill   Keep  rax  |    |    |    |    |    |V0 a|    |    |    |
 14.#17  rcx  Kill   Keep  rcx  |    |    |    |    |    |V0 a|    |    |    |
 14.#18  rdx  Kill   Keep  rdx  |    |    |    |    |    |V0 a|    |    |    |
 14.#19  r8   Kill   Keep  r8   |    |    |    |    |    |V0 a|    |    |    |
 14.#20  r9   Kill   Keep  r9   |    |    |    |    |    |V0 a|    |    |    |
 14.#21  r10  Kill   Keep  r10  |    |    |    |    |    |V0 a|    |    |    |
 14.#22  r11  Kill   Keep  r11  |    |    |    |    |    |V0 a|    |    |    |
 14.#23  rax  Fixd   Keep  rax  |    |    |    |    |    |V0 a|    |    |    |
 14.#24  I14  Def *  Alloc rax  |I14a|    |    |    |    |V0 a|    |    |    |
 16.#25  C15  Def    Alloc rcx  |    |C15a|    |    |    |V0 a|    |    |    |
 17.#26  C15  Use *  Keep  rcx  |    |C15a|    |    |    |V0 a|    |    |    |
 18.#27  I16  Def    Alloc rcx  |    |I16a|    |    |    |V0 a|    |    |    |
 19.#28  I16  Use *  Keep  rcx  |    |I16a|    |    |    |V0 a|    |    |    |
 20.#29  V5   Def    Alloc rcx  |    |V5 a|    |    |    |V0 a|    |    |    |
 25.#30  V5   Use    Keep  rcx  |    |V5 a|    |    |    |V0 a|    |    |    |
 31.#31  rcx  Fixd   Keep  rcx  |    |V5 a|    |    |    |V0 a|    |    |    |
 31.#32  V5   Use *  Keep  rcx  |    |V5 a|    |    |    |V0 a|    |    |    |
 32.#33  rcx  Fixd   Keep  rcx  |    |    |    |    |    |V0 a|    |    |    |
 32.#34  I17  Def    Alloc rcx  |    |I17a|    |    |    |V0 a|    |    |    |
 34.#35  C18  Def    Alloc rdx  |    |I17a|C18a|    |    |V0 a|    |    |    |
 35.#36  rdx  Fixd   Keep  rdx  |    |I17a|C18a|    |    |V0 a|    |    |    |
 35.#37  C18  Use *  Keep  rdx  |    |I17a|C18a|    |    |V0 a|    |    |    |
 36.#38  rdx  Fixd   Keep  rdx  |    |I17a|    |    |    |V0 a|    |    |    |
 36.#39  I19  Def    Alloc rdx  |    |I17a|I19a|    |    |V0 a|    |    |    |
 37.#40  rcx  Fixd   Keep  rcx  |    |I17a|I19a|    |    |V0 a|    |    |    |
 37.#41  I17  Use *  Keep  rcx  |    |I17a|I19a|    |    |V0 a|    |    |    |
 37.#42  rdx  Fixd   Keep  rdx  |    |I17a|I19a|    |    |V0 a|    |    |    |
 37.#43  I19  Use *  Keep  rdx  |    |I17a|I19a|    |    |V0 a|    |    |    |
 38.#44  rax  Kill   Keep  rax  |    |    |    |    |    |V0 a|    |    |    |
 38.#45  rcx  Kill   Keep  rcx  |    |    |    |    |    |V0 a|    |    |    |
 38.#46  rdx  Kill   Keep  rdx  |    |    |    |    |    |V0 a|    |    |    |
 38.#47  r8   Kill   Keep  r8   |    |    |    |    |    |V0 a|    |    |    |
 38.#48  r9   Kill   Keep  r9   |    |    |    |    |    |V0 a|    |    |    |
 38.#49  r10  Kill   Keep  r10  |    |    |    |    |    |V0 a|    |    |    |
 38.#50  r11  Kill   Keep  r11  |    |    |    |    |    |V0 a|    |    |    |
 38.#51  rax  Fixd   Keep  rax  |    |    |    |    |    |V0 a|    |    |    |
--------------------------------+----+----+----+----+----+----+----+----+----+
Loc RP#  Name Type  Action Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------+----+----+----+----+----+----+----+----+----+
 38.#52  I20  Def *  Alloc rax  |I20a|    |    |    |    |V0 a|    |    |    |
 42.#53  rax  Kill   Keep  rax  |    |    |    |    |    |V0 a|    |    |    |
 42.#54  rcx  Kill   Keep  rcx  |    |    |    |    |    |V0 a|    |    |    |
 42.#55  rdx  Kill   Keep  rdx  |    |    |    |    |    |V0 a|    |    |    |
 42.#56  r8   Kill   Keep  r8   |    |    |    |    |    |V0 a|    |    |    |
 42.#57  r9   Kill   Keep  r9   |    |    |    |    |    |V0 a|    |    |    |
 42.#58  r10  Kill   Keep  r10  |    |    |    |    |    |V0 a|    |    |    |
 42.#59  r11  Kill   Keep  r11  |    |    |    |    |    |V0 a|    |    |    |
 46.#60  C21  Def    Alloc rcx  |    |C21a|    |    |    |V0 a|    |    |    |
 47.#61  C21  Use *  Keep  rcx  |    |C21a|    |    |    |V0 a|    |    |    |
 48.#62  I22  Def    Alloc rdi  |    |C21i|    |    |    |V0 a|I22a|    |    |
 49.#63  I22  Use *  Keep  rdi  |    |C21i|    |    |    |V0 a|I22a|    |    |
 50.#64  V9   Def    Alloc rdi  |    |C21i|    |    |    |V0 a|V9 a|    |    |
 53.#65  rcx  Fixd   Keep  rcx  |    |    |    |    |    |V0 a|V9 a|    |    |
 53.#66  V9   Use    Copy  rcx  |    |V9 a|    |    |    |V0 a|V9 a|    |    |
 54.#67  rcx  Fixd   Keep  rcx  |    |V9 a|    |    |    |V0 a|V9 a|    |    |
 54.#68  I23  Def    Alloc rcx  |    |I23a|    |    |    |V0 a|V9 a|    |    |
 56.#69  C24  Def    Alloc rdx  |    |I23a|C24a|    |    |V0 a|V9 a|    |    |
 57.#70  C24  Use *  Keep  rdx  |    |I23a|C24a|    |    |V0 a|V9 a|    |    |
 58.#71  I25  Def    Alloc rbx  |    |I23a|C24i|I25a|    |V0 a|V9 a|    |    |
 59.#72  I25  Use *  Keep  rbx  |    |I23a|C24i|I25a|    |V0 a|V9 a|    |    |
 60.#73  V10  Def    Alloc rbx  |    |I23a|C24i|V10a|    |V0 a|V9 a|    |    |
 63.#74  rdx  Fixd   Keep  rdx  |    |I23a|    |V10a|    |V0 a|V9 a|    |    |
 63.#75  V10  Use    Copy  rdx  |    |I23a|V10a|V10a|    |V0 a|V9 a|    |    |
 64.#76  rdx  Fixd   Keep  rdx  |    |I23a|V10a|V10a|    |V0 a|V9 a|    |    |
 64.#77  I26  Def    Alloc rdx  |    |I23a|I26a|V10a|    |V0 a|V9 a|    |    |
 67.#78  r8   Fixd   Keep  r8   |    |I23a|I26a|V10a|    |V0 a|V9 a|    |    |
 67.#79  V0   Use    Copy  r8   |    |I23a|I26a|V10a|    |V0 a|V9 a|V0 a|    |
 68.#80  r8   Fixd   Keep  r8   |    |I23a|I26a|V10a|    |V0 a|V9 a|V0 a|    |
 68.#81  I27  Def    Alloc r8   |    |I23a|I26a|V10a|    |V0 a|V9 a|I27a|    |
 69.#82  rcx  Fixd   Keep  rcx  |    |I23a|I26a|V10a|    |V0 a|V9 a|I27a|    |
 69.#83  I23  Use *  Keep  rcx  |    |I23a|I26a|V10a|    |V0 a|V9 a|I27a|    |
 69.#84  rdx  Fixd   Keep  rdx  |    |I23a|I26a|V10a|    |V0 a|V9 a|I27a|    |
 69.#85  I26  Use *  Keep  rdx  |    |I23a|I26a|V10a|    |V0 a|V9 a|I27a|    |
 69.#86  r8   Fixd   Keep  r8   |    |I23a|I26a|V10a|    |V0 a|V9 a|I27a|    |
 69.#87  I27  Use *  Keep  r8   |    |I23a|I26a|V10a|    |V0 a|V9 a|I27a|    |
 70.#88  rax  Kill   Keep  rax  |    |    |    |V10a|    |V0 a|V9 a|    |    |
 70.#89  rcx  Kill   Keep  rcx  |    |    |    |V10a|    |V0 a|V9 a|    |    |
 70.#90  rdx  Kill   Keep  rdx  |    |    |    |V10a|    |V0 a|V9 a|    |    |
 70.#91  r8   Kill   Keep  r8   |    |    |    |V10a|    |V0 a|V9 a|    |    |
 70.#92  r9   Kill   Keep  r9   |    |    |    |V10a|    |V0 a|V9 a|    |    |
 70.#93  r10  Kill   Keep  r10  |    |    |    |V10a|    |V0 a|V9 a|    |    |
 70.#94  r11  Kill   Keep  r11  |    |    |    |V10a|    |V0 a|V9 a|    |    |
 70.#95  rax  Fixd   Keep  rax  |    |    |    |V10a|    |V0 a|V9 a|    |    |
 70.#96  I28  Def    Alloc rax  |I28a|    |    |V10a|    |V0 a|V9 a|    |    |
 71.#97  I28  Use *  Keep  rax  |I28a|    |    |V10a|    |V0 a|V9 a|    |    |
 72.#98  V6   Def    Alloc rdx  |    |    |V6 a|V10a|    |V0 a|V9 a|    |    |
 75.#99  rdx  Fixd   Keep  rdx  |    |    |V6 a|V10a|    |V0 a|V9 a|    |    |
 75.#100 V6   Use *  Keep  rdx  |    |    |V6 a|V10a|    |V0 a|V9 a|    |    |
 76.#101 rdx  Fixd   Keep  rdx  |    |    |    |V10a|    |V0 a|V9 a|    |    |
 76.#102 I29  Def    Alloc rdx  |    |    |I29a|V10a|    |V0 a|V9 a|    |    |
--------------------------------+----+----+----+----+----+----+----+----+----+
Loc RP#  Name Type  Action Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------+----+----+----+----+----+----+----+----+----+
 78.#103 C30  Def    Alloc rcx  |    |C30a|I29a|V10a|    |V0 a|V9 a|    |    |
 79.#104 rcx  Fixd   Keep  rcx  |    |C30a|I29a|V10a|    |V0 a|V9 a|    |    |
 79.#105 C30  Use *  Keep  rcx  |    |C30a|I29a|V10a|    |V0 a|V9 a|    |    |
 80.#106 rcx  Fixd   Keep  rcx  |    |    |I29a|V10a|    |V0 a|V9 a|    |    |
 80.#107 I31  Def    Alloc rcx  |    |I31a|I29a|V10a|    |V0 a|V9 a|    |    |
 81.#108 rdx  Fixd   Keep  rdx  |    |I31a|I29a|V10a|    |V0 a|V9 a|    |    |
 81.#109 I29  Use *  Keep  rdx  |    |I31a|I29a|V10a|    |V0 a|V9 a|    |    |
 81.#110 rcx  Fixd   Keep  rcx  |    |I31a|I29a|V10a|    |V0 a|V9 a|    |    |
 81.#111 I31  Use *  Keep  rcx  |    |I31a|I29a|V10a|    |V0 a|V9 a|    |    |
 82.#112 rax  Kill   Keep  rax  |    |    |    |V10a|    |V0 a|V9 a|    |    |
 82.#113 rcx  Kill   Keep  rcx  |    |    |    |V10a|    |V0 a|V9 a|    |    |
 82.#114 rdx  Kill   Keep  rdx  |    |    |    |V10a|    |V0 a|V9 a|    |    |
 82.#115 r8   Kill   Keep  r8   |    |    |    |V10a|    |V0 a|V9 a|    |    |
 82.#116 r9   Kill   Keep  r9   |    |    |    |V10a|    |V0 a|V9 a|    |    |
 82.#117 r10  Kill   Keep  r10  |    |    |    |V10a|    |V0 a|V9 a|    |    |
 82.#118 r11  Kill   Keep  r11  |    |    |    |V10a|    |V0 a|V9 a|    |    |
 82.#119 rax  Fixd   Keep  rax  |    |    |    |V10a|    |V0 a|V9 a|    |    |
 82.#120 I32  Def    Alloc rax  |I32a|    |    |V10a|    |V0 a|V9 a|    |    |
 83.#121 I32  Use *  Keep  rax  |I32a|    |    |V10a|    |V0 a|V9 a|    |    |
 84.#122 V4   Def    Alloc rbp  |    |    |    |V10a|V4 a|V0 a|V9 a|    |    |
 89.#123 V4   Use    Keep  rbp  |    |    |    |V10a|V4 a|V0 a|V9 a|    |    |
 90.#124 I33  Def    Alloc rdx  |    |    |I33a|V10a|V4 a|V0 a|V9 a|    |    |
 93.#125 I33  Use *  Keep  rdx  |    |    |I33a|V10a|V4 a|V0 a|V9 a|    |    |
 94.#126 I34  Def    Alloc rdx  |    |    |I34a|V10a|V4 a|V0 a|V9 a|    |    |
 95.#127 I34  Use *  Keep  rdx  |    |    |I34a|V10a|V4 a|V0 a|V9 a|    |    |
 96.#128 I35  Def    Alloc rdx  |    |    |I35a|V10a|V4 a|V0 a|V9 a|    |    |
 97.#129 rdx  Fixd   Keep  rdx  |    |    |I35a|V10a|V4 a|V0 a|V9 a|    |    |
 97.#130 I35  Use *  Keep  rdx  |    |    |I35a|V10a|V4 a|V0 a|V9 a|    |    |
 98.#131 rdx  Fixd   Keep  rdx  |    |    |    |V10a|V4 a|V0 a|V9 a|    |    |
 98.#132 I36  Def    Alloc rdx  |    |    |I36a|V10a|V4 a|V0 a|V9 a|    |    |
100.#133 C37  Def    Alloc rcx  |    |C37a|I36a|V10a|V4 a|V0 a|V9 a|    |    |
101.#134 rcx  Fixd   Keep  rcx  |    |C37a|I36a|V10a|V4 a|V0 a|V9 a|    |    |
101.#135 C37  Use *  Keep  rcx  |    |C37a|I36a|V10a|V4 a|V0 a|V9 a|    |    |
102.#136 rcx  Fixd   Keep  rcx  |    |    |I36a|V10a|V4 a|V0 a|V9 a|    |    |
102.#137 I38  Def    Alloc rcx  |    |I38a|I36a|V10a|V4 a|V0 a|V9 a|    |    |
103.#138 rdx  Fixd   Keep  rdx  |    |I38a|I36a|V10a|V4 a|V0 a|V9 a|    |    |
103.#139 I36  Use *  Keep  rdx  |    |I38a|I36a|V10a|V4 a|V0 a|V9 a|    |    |
103.#140 rcx  Fixd   Keep  rcx  |    |I38a|I36a|V10a|V4 a|V0 a|V9 a|    |    |
103.#141 I38  Use *  Keep  rcx  |    |I38a|I36a|V10a|V4 a|V0 a|V9 a|    |    |
104.#142 rax  Kill   Keep  rax  |    |    |    |V10a|V4 a|V0 a|V9 a|    |    |
104.#143 rcx  Kill   Keep  rcx  |    |    |    |V10a|V4 a|V0 a|V9 a|    |    |
104.#144 rdx  Kill   Keep  rdx  |    |    |    |V10a|V4 a|V0 a|V9 a|    |    |
104.#145 r8   Kill   Keep  r8   |    |    |    |V10a|V4 a|V0 a|V9 a|    |    |
104.#146 r9   Kill   Keep  r9   |    |    |    |V10a|V4 a|V0 a|V9 a|    |    |
104.#147 r10  Kill   Keep  r10  |    |    |    |V10a|V4 a|V0 a|V9 a|    |    |
104.#148 r11  Kill   Keep  r11  |    |    |    |V10a|V4 a|V0 a|V9 a|    |    |
104.#149 rax  Fixd   Keep  rax  |    |    |    |V10a|V4 a|V0 a|V9 a|    |    |
104.#150 I39  Def    Alloc rax  |I39a|    |    |V10a|V4 a|V0 a|V9 a|    |    |
105.#151 I39  Use *  Keep  rax  |I39a|    |    |V10a|V4 a|V0 a|V9 a|    |    |
--------------------------------+----+----+----+----+----+----+----+----+----+----+
Loc RP#  Name Type  Action Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |r14 |
--------------------------------+----+----+----+----+----+----+----+----+----+----+
106.#152 V1   Def    Alloc r14  |    |    |    |V10a|V4 a|V0 a|V9 a|    |    |V1 a|
109.#153 rdx  Fixd   Keep  rdx  |    |    |    |V10a|V4 a|V0 a|V9 a|    |    |V1 a|
109.#154 V0   Use *  Copy  rdx  |    |    |V0 a|V10a|V4 a|V0 a|V9 a|    |    |V1 a|
110.#155 rdx  Fixd   Keep  rdx  |    |    |    |V10a|V4 a|    |V9 a|    |    |V1 a|
110.#156 I40  Def    Alloc rdx  |    |    |I40a|V10a|V4 a|    |V9 a|    |    |V1 a|
112.#157 C41  Def    Alloc rcx  |    |C41a|I40a|V10a|V4 a|    |V9 a|    |    |V1 a|
113.#158 rcx  Fixd   Keep  rcx  |    |C41a|I40a|V10a|V4 a|    |V9 a|    |    |V1 a|
113.#159 C41  Use *  Keep  rcx  |    |C41a|I40a|V10a|V4 a|    |V9 a|    |    |V1 a|
114.#160 rcx  Fixd   Keep  rcx  |    |    |I40a|V10a|V4 a|    |V9 a|    |    |V1 a|
114.#161 I42  Def    Alloc rcx  |    |I42a|I40a|V10a|V4 a|    |V9 a|    |    |V1 a|
115.#162 rdx  Fixd   Keep  rdx  |    |I42a|I40a|V10a|V4 a|    |V9 a|    |    |V1 a|
115.#163 I40  Use *  Keep  rdx  |    |I42a|I40a|V10a|V4 a|    |V9 a|    |    |V1 a|
115.#164 rcx  Fixd   Keep  rcx  |    |I42a|I40a|V10a|V4 a|    |V9 a|    |    |V1 a|
115.#165 I42  Use *  Keep  rcx  |    |I42a|I40a|V10a|V4 a|    |V9 a|    |    |V1 a|
116.#166 rax  Kill   Keep  rax  |    |    |    |V10a|V4 a|    |V9 a|    |    |V1 a|
116.#167 rcx  Kill   Keep  rcx  |    |    |    |V10a|V4 a|    |V9 a|    |    |V1 a|
116.#168 rdx  Kill   Keep  rdx  |    |    |    |V10a|V4 a|    |V9 a|    |    |V1 a|
116.#169 r8   Kill   Keep  r8   |    |    |    |V10a|V4 a|    |V9 a|    |    |V1 a|
116.#170 r9   Kill   Keep  r9   |    |    |    |V10a|V4 a|    |V9 a|    |    |V1 a|
116.#171 r10  Kill   Keep  r10  |    |    |    |V10a|V4 a|    |V9 a|    |    |V1 a|
116.#172 r11  Kill   Keep  r11  |    |    |    |V10a|V4 a|    |V9 a|    |    |V1 a|
116.#173 rax  Fixd   Keep  rax  |    |    |    |V10a|V4 a|    |V9 a|    |    |V1 a|
116.#174 I43  Def    Alloc rax  |I43a|    |    |V10a|V4 a|    |V9 a|    |    |V1 a|
117.#175 I43  Use *  Keep  rax  |I43a|    |    |V10a|V4 a|    |V9 a|    |    |V1 a|
118.#176 V2   Def    Alloc rsi  |    |    |    |V10a|V4 a|V2 a|V9 a|    |    |V1 a|
121.#177 rcx  Fixd   Keep  rcx  |    |    |    |V10a|V4 a|V2 a|V9 a|    |    |V1 a|
121.#178 V4   Use *  Copy  rcx  |    |V4 a|    |V10a|V4 a|V2 a|V9 a|    |    |V1 a|
122.#179 rcx  Fixd   Keep  rcx  |    |    |    |V10a|    |V2 a|V9 a|    |    |V1 a|
122.#180 I44  Def    Alloc rcx  |    |I44a|    |V10a|    |V2 a|V9 a|    |    |V1 a|
125.#181 rdx  Fixd   Keep  rdx  |    |I44a|    |V10a|    |V2 a|V9 a|    |    |V1 a|
125.#182 V1   Use    Copy  rdx  |    |I44a|V1 a|V10a|    |V2 a|V9 a|    |    |V1 a|
126.#183 rdx  Fixd   Keep  rdx  |    |I44a|V1 a|V10a|    |V2 a|V9 a|    |    |V1 a|
126.#184 I45  Def    Alloc rdx  |    |I44a|I45a|V10a|    |V2 a|V9 a|    |    |V1 a|
128.#185 C46  Def    Alloc r8   |    |I44a|I45a|V10a|    |V2 a|V9 a|C46a|    |V1 a|
129.#186 r8   Fixd   Keep  r8   |    |I44a|I45a|V10a|    |V2 a|V9 a|C46a|    |V1 a|
129.#187 C46  Use *  Keep  r8   |    |I44a|I45a|V10a|    |V2 a|V9 a|C46a|    |V1 a|
130.#188 r8   Fixd   Keep  r8   |    |I44a|I45a|V10a|    |V2 a|V9 a|    |    |V1 a|
130.#189 I47  Def    Alloc r8   |    |I44a|I45a|V10a|    |V2 a|V9 a|I47a|    |V1 a|
135.#190 rcx  Fixd   Keep  rcx  |    |I44a|I45a|V10a|    |V2 a|V9 a|I47a|    |V1 a|
135.#191 I44  Use *  Keep  rcx  |    |I44a|I45a|V10a|    |V2 a|V9 a|I47a|    |V1 a|
135.#192 rdx  Fixd   Keep  rdx  |    |I44a|I45a|V10a|    |V2 a|V9 a|I47a|    |V1 a|
135.#193 I45  Use *  Keep  rdx  |    |I44a|I45a|V10a|    |V2 a|V9 a|I47a|    |V1 a|
135.#194 r8   Fixd   Keep  r8   |    |I44a|I45a|V10a|    |V2 a|V9 a|I47a|    |V1 a|
135.#195 I47  Use *  Keep  r8   |    |I44a|I45a|V10a|    |V2 a|V9 a|I47a|    |V1 a|
136.#196 rax  Kill   Keep  rax  |    |    |    |V10a|    |V2 a|V9 a|    |    |V1 a|
136.#197 rcx  Kill   Keep  rcx  |    |    |    |V10a|    |V2 a|V9 a|    |    |V1 a|
136.#198 rdx  Kill   Keep  rdx  |    |    |    |V10a|    |V2 a|V9 a|    |    |V1 a|
136.#199 r8   Kill   Keep  r8   |    |    |    |V10a|    |V2 a|V9 a|    |    |V1 a|
136.#200 r9   Kill   Keep  r9   |    |    |    |V10a|    |V2 a|V9 a|    |    |V1 a|
136.#201 r10  Kill   Keep  r10  |    |    |    |V10a|    |V2 a|V9 a|    |    |V1 a|
136.#202 r11  Kill   Keep  r11  |    |    |    |V10a|    |V2 a|V9 a|    |    |V1 a|
--------------------------------+----+----+----+----+----+----+----+----+----+----+
Loc RP#  Name Type  Action Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |r14 |
--------------------------------+----+----+----+----+----+----+----+----+----+----+
143.#203 V1   Use    Keep  r14  |    |    |    |V10a|    |V2 a|V9 a|    |    |V1 a|
144.#204 I48  Def    Alloc rdx  |    |    |I48a|V10a|    |V2 a|V9 a|    |    |V1 a|
145.#205 I48  Use *  Keep  rdx  |    |    |I48a|V10a|    |V2 a|V9 a|    |    |V1 a|
146.#206 V11  Def    Alloc rdx  |    |    |V11a|V10a|    |V2 a|V9 a|    |    |V1 a|
151.#207 V11  Use    Keep  rdx  |    |    |V11a|V10a|    |V2 a|V9 a|    |    |V1 a|
152.#208 I49  Def    Alloc rcx  |    |I49a|V11a|V10a|    |V2 a|V9 a|    |    |V1 a|
153.#209 I49  Use *  Keep  rcx  |    |I49a|V11a|V10a|    |V2 a|V9 a|    |    |V1 a|
154.#210 V8   Def    Alloc rcx  |    |V8 a|V11a|V10a|    |V2 a|V9 a|    |    |V1 a|
159.#211 V8   Use    Keep  rcx  |    |V8 a|V11a|V10a|    |V2 a|V9 a|    |    |V1 a|
159.#212 V11  Use *  Keep  rdx  |    |V8 a|V11a|V10a|    |V2 a|V9 a|    |    |V1 a|
163.#213 V8   Use *  Keep  rcx  |    |V8 a|    |V10a|    |V2 a|V9 a|    |    |V1 a|
164.#214 I50  Def    Alloc rdx  |    |    |I50a|V10a|    |V2 a|V9 a|    |    |V1 a|
167.#215 V1   Use    Keep  r14  |    |    |I50a|V10a|    |V2 a|V9 a|    |    |V1 a|
167.#216 I50  Use *  Keep  rdx  |    |    |I50a|V10a|    |V2 a|V9 a|    |    |V1 a|
168.#217 I51  Def    Alloc rcx  |    |I51a|    |V10a|    |V2 a|V9 a|    |    |V1 a|
171.#218 rcx  Fixd   Keep  rcx  |    |I51a|    |V10a|    |V2 a|V9 a|    |    |V1 a|
171.#219 I51  Use *  Keep  rcx  |    |I51a|    |V10a|    |V2 a|V9 a|    |    |V1 a|
171.#220 rdx  Fixd   Keep  rdx  |    |I51a|    |V10a|    |V2 a|V9 a|    |    |V1 a|
171.#221 V2   Use *  Copy  rdx  |    |I51a|V2 a|V10a|    |V2 a|V9 a|    |    |V1 a|
172.#222 rax  Kill   Keep  rax  |    |    |    |V10a|    |    |V9 a|    |    |V1 a|
172.#223 rcx  Kill   Keep  rcx  |    |    |    |V10a|    |    |V9 a|    |    |V1 a|
172.#224 rdx  Kill   Keep  rdx  |    |    |    |V10a|    |    |V9 a|    |    |V1 a|
172.#225 r8   Kill   Keep  r8   |    |    |    |V10a|    |    |V9 a|    |    |V1 a|
172.#226 r9   Kill   Keep  r9   |    |    |    |V10a|    |    |V9 a|    |    |V1 a|
172.#227 r10  Kill   Keep  r10  |    |    |    |V10a|    |    |V9 a|    |    |V1 a|
172.#228 r11  Kill   Keep  r11  |    |    |    |V10a|    |    |V9 a|    |    |V1 a|
172.#229 mm0  Kill   Keep  mm0  |    |    |    |V10a|    |    |V9 a|    |    |V1 a|
172.#230 mm1  Kill   Keep  mm1  |    |    |    |V10a|    |    |V9 a|    |    |V1 a|
172.#231 mm2  Kill   Keep  mm2  |    |    |    |V10a|    |    |V9 a|    |    |V1 a|
172.#232 mm3  Kill   Keep  mm3  |    |    |    |V10a|    |    |V9 a|    |    |V1 a|
172.#233 mm4  Kill   Keep  mm4  |    |    |    |V10a|    |    |V9 a|    |    |V1 a|
172.#234 mm5  Kill   Keep  mm5  |    |    |    |V10a|    |    |V9 a|    |    |V1 a|
177.#235 rcx  Fixd   Keep  rcx  |    |    |    |V10a|    |    |V9 a|    |    |V1 a|
177.#236 V9   Use *  Copy  rcx  |    |V9 a|    |V10a|    |    |V9 a|    |    |V1 a|
178.#237 rcx  Fixd   Keep  rcx  |    |    |    |V10a|    |    |    |    |    |V1 a|
178.#238 I52  Def    Alloc rcx  |    |I52a|    |V10a|    |    |    |    |    |V1 a|
181.#239 rdx  Fixd   Keep  rdx  |    |I52a|    |V10a|    |    |    |    |    |V1 a|
181.#240 V10  Use *  Copy  rdx  |    |I52a|V10a|V10a|    |    |    |    |    |V1 a|
182.#241 rdx  Fixd   Keep  rdx  |    |I52a|    |    |    |    |    |    |    |V1 a|
182.#242 I53  Def    Alloc rdx  |    |I52a|I53a|    |    |    |    |    |    |V1 a|
185.#243 r8   Fixd   Keep  r8   |    |I52a|I53a|    |    |    |    |    |    |V1 a|
185.#244 V1   Use *  Copy  r8   |    |I52a|I53a|    |    |    |    |V1 a|    |V1 a|
186.#245 r8   Fixd   Keep  r8   |    |I52a|I53a|    |    |    |    |    |    |    |
186.#246 I54  Def    Alloc r8   |    |I52a|I53a|    |    |    |    |I54a|    |    |
188.#247 C55  Def    Alloc r9   |    |I52a|I53a|    |    |    |    |I54a|C55a|    |
189.#248 r9   Fixd   Keep  r9   |    |I52a|I53a|    |    |    |    |I54a|C55a|    |
189.#249 C55  Use *  Keep  r9   |    |I52a|I53a|    |    |    |    |I54a|C55a|    |
190.#250 r9   Fixd   Keep  r9   |    |I52a|I53a|    |    |    |    |I54a|    |    |
190.#251 I56  Def    Alloc r9   |    |I52a|I53a|    |    |    |    |I54a|I56a|    |
191.#252 rcx  Fixd   Keep  rcx  |    |I52a|I53a|    |    |    |    |I54a|I56a|    |
191.#253 I52  Use *  Keep  rcx  |    |I52a|I53a|    |    |    |    |I54a|I56a|    |
191.#254 rdx  Fixd   Keep  rdx  |    |I52a|I53a|    |    |    |    |I54a|I56a|    |
--------------------------------+----+----+----+----+----+----+----+----+----+----+
Loc RP#  Name Type  Action Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |r14 |
--------------------------------+----+----+----+----+----+----+----+----+----+----+
191.#255 I53  Use *  Keep  rdx  |    |I52a|I53a|    |    |    |    |I54a|I56a|    |
191.#256 r8   Fixd   Keep  r8   |    |I52a|I53a|    |    |    |    |I54a|I56a|    |
191.#257 I54  Use *  Keep  r8   |    |I52a|I53a|    |    |    |    |I54a|I56a|    |
191.#258 r9   Fixd   Keep  r9   |    |I52a|I53a|    |    |    |    |I54a|I56a|    |
191.#259 I56  Use *  Keep  r9   |    |I52a|I53a|    |    |    |    |I54a|I56a|    |
192.#260 rax  Kill   Keep  rax  |    |    |    |    |    |    |    |    |    |    |
192.#261 rcx  Kill   Keep  rcx  |    |    |    |    |    |    |    |    |    |    |
192.#262 rdx  Kill   Keep  rdx  |    |    |    |    |    |    |    |    |    |    |
192.#263 r8   Kill   Keep  r8   |    |    |    |    |    |    |    |    |    |    |
192.#264 r9   Kill   Keep  r9   |    |    |    |    |    |    |    |    |    |    |
192.#265 r10  Kill   Keep  r10  |    |    |    |    |    |    |    |    |    |    |
192.#266 r11  Kill   Keep  r11  |    |    |    |    |    |    |    |    |    |    |
196.#267 C57  Def    Alloc rcx  |    |C57a|    |    |    |    |    |    |    |    |
197.#268 C57  Use *  Keep  rcx  |    |C57a|    |    |    |    |    |    |    |    |
198.#269 I58  Def    Alloc rcx  |    |I58a|    |    |    |    |    |    |    |    |
199.#270 rcx  Fixd   Keep  rcx  |    |I58a|    |    |    |    |    |    |    |    |
199.#271 I58  Use *  Keep  rcx  |    |I58a|    |    |    |    |    |    |    |    |
200.#272 rcx  Fixd   Keep  rcx  |    |    |    |    |    |    |    |    |    |    |
200.#273 I59  Def    Alloc rcx  |    |I59a|    |    |    |    |    |    |    |    |
201.#274 rcx  Fixd   Keep  rcx  |    |I59a|    |    |    |    |    |    |    |    |
201.#275 I59  Use *  Keep  rcx  |    |I59a|    |    |    |    |    |    |    |    |
202.#276 rax  Kill   Keep  rax  |    |    |    |    |    |    |    |    |    |    |
202.#277 rcx  Kill   Keep  rcx  |    |    |    |    |    |    |    |    |    |    |
202.#278 rdx  Kill   Keep  rdx  |    |    |    |    |    |    |    |    |    |    |
202.#279 r8   Kill   Keep  r8   |    |    |    |    |    |    |    |    |    |    |
202.#280 r9   Kill   Keep  r9   |    |    |    |    |    |    |    |    |    |    |
202.#281 r10  Kill   Keep  r10  |    |    |    |    |    |    |    |    |    |    |
202.#282 r11  Kill   Keep  r11  |    |    |    |    |    |    |    |    |    |    |
--------------------------------+----+----+----+----+----+----+----+----+----+----+
Loc RP#  Name Type  Action Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |r14 |
--------------------------------+----+----+----+----+----+----+----+----+----+----+
203.#283 BB2 PredBB1            |    |    |    |    |    |    |    |    |    |    |
206.#284 rax  Kill   Keep  rax  |    |    |    |    |    |    |    |    |    |    |
206.#285 rcx  Kill   Keep  rcx  |    |    |    |    |    |    |    |    |    |    |
206.#286 rdx  Kill   Keep  rdx  |    |    |    |    |    |    |    |    |    |    |
206.#287 r8   Kill   Keep  r8   |    |    |    |    |    |    |    |    |    |    |
206.#288 r9   Kill   Keep  r9   |    |    |    |    |    |    |    |    |    |    |
206.#289 r10  Kill   Keep  r10  |    |    |    |    |    |    |    |    |    |    |
206.#290 r11  Kill   Keep  r11  |    |    |    |    |    |    |    |    |    |    |

------------
REFPOSITIONS AFTER ALLOCATION: 
------------
<RefPosition #0   @0   RefTypeParamDef <Ivl:0 V00>  BB00 regmask=[rsi] minReg=1 regOptional>
<RefPosition #1   @1   RefTypeBB  BB01 regmask=[] minReg=1>
<RefPosition #2   @6   RefTypeDef <Ivl:10> CNS_INT BB01 regmask=[rcx] minReg=1>
<RefPosition #3   @7   RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #4   @7   RefTypeUse <Ivl:10>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #5   @8   RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #6   @8   RefTypeDef <Ivl:11> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #7   @10  RefTypeDef <Ivl:12> CNS_INT BB01 regmask=[rdx] minReg=1>
<RefPosition #8   @11  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #9   @11  RefTypeUse <Ivl:12>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #10  @12  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #11  @12  RefTypeDef <Ivl:13> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed>
<RefPosition #12  @13  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #13  @13  RefTypeUse <Ivl:11>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #14  @13  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #15  @13  RefTypeUse <Ivl:13>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #16  @14  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #17  @14  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #18  @14  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #19  @14  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #20  @14  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #21  @14  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #22  @14  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #23  @14  RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #24  @14  RefTypeDef <Ivl:14> CALL BB01 regmask=[rax] minReg=1 last fixed local>
<RefPosition #25  @16  RefTypeDef <Ivl:15> CNS_INT BB01 regmask=[rcx] minReg=1>
<RefPosition #26  @17  RefTypeUse <Ivl:15>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #27  @18  RefTypeDef <Ivl:16> IND BB01 regmask=[rcx] minReg=1>
<RefPosition #28  @19  RefTypeUse <Ivl:16>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #29  @20  RefTypeDef <Ivl:4 V05> STORE_LCL_VAR BB01 regmask=[rcx] minReg=1>
<RefPosition #30  @25  RefTypeUse <Ivl:4 V05> LCL_VAR BB01 regmask=[rcx] minReg=1>
<RefPosition #31  @31  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #32  @31  RefTypeUse <Ivl:4 V05> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #33  @32  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #34  @32  RefTypeDef <Ivl:17> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #35  @34  RefTypeDef <Ivl:18> CNS_INT BB01 regmask=[rdx] minReg=1>
<RefPosition #36  @35  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #37  @35  RefTypeUse <Ivl:18>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #38  @36  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #39  @36  RefTypeDef <Ivl:19> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed>
<RefPosition #40  @37  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #41  @37  RefTypeUse <Ivl:17>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #42  @37  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #43  @37  RefTypeUse <Ivl:19>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #44  @38  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #45  @38  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #46  @38  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #47  @38  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #48  @38  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #49  @38  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #50  @38  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #51  @38  RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #52  @38  RefTypeDef <Ivl:20> CALL BB01 regmask=[rax] minReg=1 last fixed local>
<RefPosition #53  @42  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #54  @42  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #55  @42  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #56  @42  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #57  @42  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #58  @42  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #59  @42  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #60  @46  RefTypeDef <Ivl:21> CNS_INT BB01 regmask=[rcx] minReg=1>
<RefPosition #61  @47  RefTypeUse <Ivl:21>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #62  @48  RefTypeDef <Ivl:22> IND BB01 regmask=[rdi] minReg=1>
<RefPosition #63  @49  RefTypeUse <Ivl:22>  BB01 regmask=[rdi] minReg=1 last>
<RefPosition #64  @50  RefTypeDef <Ivl:7 V09> STORE_LCL_VAR BB01 regmask=[rdi] minReg=1>
<RefPosition #65  @53  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #66  @53  RefTypeUse <Ivl:7 V09> LCL_VAR BB01 regmask=[rcx] minReg=1 copy fixed>
<RefPosition #67  @54  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #68  @54  RefTypeDef <Ivl:23> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #69  @56  RefTypeDef <Ivl:24> CNS_INT BB01 regmask=[rdx] minReg=1>
<RefPosition #70  @57  RefTypeUse <Ivl:24>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #71  @58  RefTypeDef <Ivl:25> IND BB01 regmask=[rbx] minReg=1>
<RefPosition #72  @59  RefTypeUse <Ivl:25>  BB01 regmask=[rbx] minReg=1 last>
<RefPosition #73  @60  RefTypeDef <Ivl:8 V10> STORE_LCL_VAR BB01 regmask=[rbx] minReg=1>
<RefPosition #74  @63  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #75  @63  RefTypeUse <Ivl:8 V10> LCL_VAR BB01 regmask=[rdx] minReg=1 copy fixed>
<RefPosition #76  @64  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #77  @64  RefTypeDef <Ivl:26> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed>
<RefPosition #78  @67  RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #79  @67  RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[r8] minReg=1 copy fixed>
<RefPosition #80  @68  RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #81  @68  RefTypeDef <Ivl:27> PUTARG_REG BB01 regmask=[r8] minReg=1 fixed>
<RefPosition #82  @69  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #83  @69  RefTypeUse <Ivl:23>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #84  @69  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #85  @69  RefTypeUse <Ivl:26>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #86  @69  RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #87  @69  RefTypeUse <Ivl:27>  BB01 regmask=[r8] minReg=1 last fixed>
<RefPosition #88  @70  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #89  @70  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #90  @70  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #91  @70  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #92  @70  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #93  @70  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #94  @70  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #95  @70  RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #96  @70  RefTypeDef <Ivl:28> CALL BB01 regmask=[rax] minReg=1 fixed>
<RefPosition #97  @71  RefTypeUse <Ivl:28>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #98  @72  RefTypeDef <Ivl:5 V06> STORE_LCL_VAR BB01 regmask=[rdx] minReg=1>
<RefPosition #99  @75  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #100 @75  RefTypeUse <Ivl:5 V06> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #101 @76  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #102 @76  RefTypeDef <Ivl:29> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed>
<RefPosition #103 @78  RefTypeDef <Ivl:30> CNS_INT BB01 regmask=[rcx] minReg=1>
<RefPosition #104 @79  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #105 @79  RefTypeUse <Ivl:30>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #106 @80  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #107 @80  RefTypeDef <Ivl:31> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #108 @81  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #109 @81  RefTypeUse <Ivl:29>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #110 @81  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #111 @81  RefTypeUse <Ivl:31>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #112 @82  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #113 @82  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #114 @82  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #115 @82  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #116 @82  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #117 @82  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #118 @82  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #119 @82  RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #120 @82  RefTypeDef <Ivl:32> CALL BB01 regmask=[rax] minReg=1 fixed>
<RefPosition #121 @83  RefTypeUse <Ivl:32>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #122 @84  RefTypeDef <Ivl:3 V04> STORE_LCL_VAR BB01 regmask=[rbp] minReg=1>
<RefPosition #123 @89  RefTypeUse <Ivl:3 V04> LCL_VAR BB01 regmask=[rbp] minReg=1>
<RefPosition #124 @90  RefTypeDef <Ivl:33> IND BB01 regmask=[rdx] minReg=1>
<RefPosition #125 @93  RefTypeUse <Ivl:33>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #126 @94  RefTypeDef <Ivl:34> ADD BB01 regmask=[rdx] minReg=1>
<RefPosition #127 @95  RefTypeUse <Ivl:34>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #128 @96  RefTypeDef <Ivl:35> CAST BB01 regmask=[rdx] minReg=1>
<RefPosition #129 @97  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #130 @97  RefTypeUse <Ivl:35>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #131 @98  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #132 @98  RefTypeDef <Ivl:36> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed>
<RefPosition #133 @100 RefTypeDef <Ivl:37> CNS_INT BB01 regmask=[rcx] minReg=1>
<RefPosition #134 @101 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #135 @101 RefTypeUse <Ivl:37>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #136 @102 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #137 @102 RefTypeDef <Ivl:38> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #138 @103 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #139 @103 RefTypeUse <Ivl:36>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #140 @103 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #141 @103 RefTypeUse <Ivl:38>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #142 @104 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #143 @104 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #144 @104 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #145 @104 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #146 @104 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #147 @104 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #148 @104 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #149 @104 RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #150 @104 RefTypeDef <Ivl:39> CALL BB01 regmask=[rax] minReg=1 fixed>
<RefPosition #151 @105 RefTypeUse <Ivl:39>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #152 @106 RefTypeDef <Ivl:1 V01> STORE_LCL_VAR BB01 regmask=[r14] minReg=1>
<RefPosition #153 @109 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #154 @109 RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[rdx] minReg=1 last copy fixed>
<RefPosition #155 @110 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #156 @110 RefTypeDef <Ivl:40> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed>
<RefPosition #157 @112 RefTypeDef <Ivl:41> CNS_INT BB01 regmask=[rcx] minReg=1>
<RefPosition #158 @113 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #159 @113 RefTypeUse <Ivl:41>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #160 @114 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #161 @114 RefTypeDef <Ivl:42> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #162 @115 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #163 @115 RefTypeUse <Ivl:40>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #164 @115 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #165 @115 RefTypeUse <Ivl:42>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #166 @116 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #167 @116 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #168 @116 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #169 @116 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #170 @116 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #171 @116 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #172 @116 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #173 @116 RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #174 @116 RefTypeDef <Ivl:43> CALL BB01 regmask=[rax] minReg=1 fixed>
<RefPosition #175 @117 RefTypeUse <Ivl:43>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #176 @118 RefTypeDef <Ivl:2 V02> STORE_LCL_VAR BB01 regmask=[rsi] minReg=1>
<RefPosition #177 @121 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #178 @121 RefTypeUse <Ivl:3 V04> LCL_VAR BB01 regmask=[rcx] minReg=1 last copy fixed>
<RefPosition #179 @122 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #180 @122 RefTypeDef <Ivl:44> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #181 @125 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #182 @125 RefTypeUse <Ivl:1 V01> LCL_VAR BB01 regmask=[rdx] minReg=1 copy fixed>
<RefPosition #183 @126 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #184 @126 RefTypeDef <Ivl:45> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed>
<RefPosition #185 @128 RefTypeDef <Ivl:46> CNS_INT BB01 regmask=[r8] minReg=1>
<RefPosition #186 @129 RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #187 @129 RefTypeUse <Ivl:46>  BB01 regmask=[r8] minReg=1 last fixed>
<RefPosition #188 @130 RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #189 @130 RefTypeDef <Ivl:47> PUTARG_REG BB01 regmask=[r8] minReg=1 fixed>
<RefPosition #190 @135 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #191 @135 RefTypeUse <Ivl:44>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #192 @135 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #193 @135 RefTypeUse <Ivl:45>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #194 @135 RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #195 @135 RefTypeUse <Ivl:47>  BB01 regmask=[r8] minReg=1 last fixed>
<RefPosition #196 @136 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #197 @136 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #198 @136 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #199 @136 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #200 @136 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #201 @136 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #202 @136 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #203 @143 RefTypeUse <Ivl:1 V01> LCL_VAR BB01 regmask=[r14] minReg=1>
<RefPosition #204 @144 RefTypeDef <Ivl:48> IND BB01 regmask=[rdx] minReg=1>
<RefPosition #205 @145 RefTypeUse <Ivl:48>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #206 @146 RefTypeDef <Ivl:9 V11> STORE_LCL_VAR BB01 regmask=[rdx] minReg=1>
<RefPosition #207 @151 RefTypeUse <Ivl:9 V11> LCL_VAR BB01 regmask=[rdx] minReg=1>
<RefPosition #208 @152 RefTypeDef <Ivl:49> ADD BB01 regmask=[rcx] minReg=1>
<RefPosition #209 @153 RefTypeUse <Ivl:49>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #210 @154 RefTypeDef <Ivl:6 V08> STORE_LCL_VAR BB01 regmask=[rcx] minReg=1>
<RefPosition #211 @159 RefTypeUse <Ivl:6 V08> LCL_VAR BB01 regmask=[rcx] minReg=1>
<RefPosition #212 @159 RefTypeUse <Ivl:9 V11> LCL_VAR BB01 regmask=[rdx] minReg=1 last regOptional>
<RefPosition #213 @163 RefTypeUse <Ivl:6 V08> LCL_VAR BB01 regmask=[rcx] minReg=1 last>
<RefPosition #214 @164 RefTypeDef <Ivl:50> CAST BB01 regmask=[rdx] minReg=1>
<RefPosition #215 @167 RefTypeUse <Ivl:1 V01> LCL_VAR BB01 regmask=[r14] minReg=1>
<RefPosition #216 @167 RefTypeUse <Ivl:50>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #217 @168 RefTypeDef <Ivl:51> LEA BB01 regmask=[rcx] minReg=1>
<RefPosition #218 @171 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #219 @171 RefTypeUse <Ivl:51>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #220 @171 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #221 @171 RefTypeUse <Ivl:2 V02> LCL_VAR BB01 regmask=[rdx] minReg=1 last copy fixed>
<RefPosition #222 @172 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #223 @172 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #224 @172 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #225 @172 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #226 @172 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #227 @172 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #228 @172 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #229 @172 RefTypeKill <Reg:mm0>  BB01 regmask=[mm0] minReg=1 last>
<RefPosition #230 @172 RefTypeKill <Reg:mm1>  BB01 regmask=[mm1] minReg=1 last>
<RefPosition #231 @172 RefTypeKill <Reg:mm2>  BB01 regmask=[mm2] minReg=1 last>
<RefPosition #232 @172 RefTypeKill <Reg:mm3>  BB01 regmask=[mm3] minReg=1 last>
<RefPosition #233 @172 RefTypeKill <Reg:mm4>  BB01 regmask=[mm4] minReg=1 last>
<RefPosition #234 @172 RefTypeKill <Reg:mm5>  BB01 regmask=[mm5] minReg=1 last>
<RefPosition #235 @177 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #236 @177 RefTypeUse <Ivl:7 V09> LCL_VAR BB01 regmask=[rcx] minReg=1 last copy fixed>
<RefPosition #237 @178 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #238 @178 RefTypeDef <Ivl:52> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #239 @181 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #240 @181 RefTypeUse <Ivl:8 V10> LCL_VAR BB01 regmask=[rdx] minReg=1 last copy fixed>
<RefPosition #241 @182 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #242 @182 RefTypeDef <Ivl:53> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed>
<RefPosition #243 @185 RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #244 @185 RefTypeUse <Ivl:1 V01> LCL_VAR BB01 regmask=[r8] minReg=1 last copy fixed>
<RefPosition #245 @186 RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #246 @186 RefTypeDef <Ivl:54> PUTARG_REG BB01 regmask=[r8] minReg=1 fixed>
<RefPosition #247 @188 RefTypeDef <Ivl:55> CNS_INT BB01 regmask=[r9] minReg=1>
<RefPosition #248 @189 RefTypeFixedReg <Reg:r9 >  BB01 regmask=[r9] minReg=1>
<RefPosition #249 @189 RefTypeUse <Ivl:55>  BB01 regmask=[r9] minReg=1 last fixed>
<RefPosition #250 @190 RefTypeFixedReg <Reg:r9 >  BB01 regmask=[r9] minReg=1>
<RefPosition #251 @190 RefTypeDef <Ivl:56> PUTARG_REG BB01 regmask=[r9] minReg=1 fixed>
<RefPosition #252 @191 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #253 @191 RefTypeUse <Ivl:52>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #254 @191 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #255 @191 RefTypeUse <Ivl:53>  BB01 regmask=[rdx] minReg=1 last fixed>
<RefPosition #256 @191 RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #257 @191 RefTypeUse <Ivl:54>  BB01 regmask=[r8] minReg=1 last fixed>
<RefPosition #258 @191 RefTypeFixedReg <Reg:r9 >  BB01 regmask=[r9] minReg=1>
<RefPosition #259 @191 RefTypeUse <Ivl:56>  BB01 regmask=[r9] minReg=1 last fixed>
<RefPosition #260 @192 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #261 @192 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #262 @192 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #263 @192 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #264 @192 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #265 @192 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #266 @192 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #267 @196 RefTypeDef <Ivl:57> CNS_INT BB01 regmask=[rcx] minReg=1>
<RefPosition #268 @197 RefTypeUse <Ivl:57>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #269 @198 RefTypeDef <Ivl:58> IND BB01 regmask=[rcx] minReg=1>
<RefPosition #270 @199 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #271 @199 RefTypeUse <Ivl:58>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #272 @200 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #273 @200 RefTypeDef <Ivl:59> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #274 @201 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #275 @201 RefTypeUse <Ivl:59>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #276 @202 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #277 @202 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #278 @202 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #279 @202 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #280 @202 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #281 @202 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #282 @202 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #283 @203 RefTypeBB  BB02 regmask=[] minReg=1>
<RefPosition #284 @206 RefTypeKill <Reg:rax>  BB02 regmask=[rax] minReg=1 last>
<RefPosition #285 @206 RefTypeKill <Reg:rcx>  BB02 regmask=[rcx] minReg=1 last>
<RefPosition #286 @206 RefTypeKill <Reg:rdx>  BB02 regmask=[rdx] minReg=1 last>
<RefPosition #287 @206 RefTypeKill <Reg:r8 >  BB02 regmask=[r8] minReg=1 last>
<RefPosition #288 @206 RefTypeKill <Reg:r9 >  BB02 regmask=[r9] minReg=1 last>
<RefPosition #289 @206 RefTypeKill <Reg:r10>  BB02 regmask=[r10] minReg=1 last>
<RefPosition #290 @206 RefTypeKill <Reg:r11>  BB02 regmask=[r11] minReg=1 last>

VAR REFPOSITIONS AFTER ALLOCATION
--- V00  (Interval 0)
<RefPosition #0   @0   RefTypeParamDef <Ivl:0 V00>  BB00 regmask=[rsi] minReg=1 regOptional>
<RefPosition #79  @67  RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[r8] minReg=1 copy fixed>
<RefPosition #154 @109 RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[rdx] minReg=1 last copy fixed>
--- V01  (Interval 1)
<RefPosition #152 @106 RefTypeDef <Ivl:1 V01> STORE_LCL_VAR BB01 regmask=[r14] minReg=1>
<RefPosition #182 @125 RefTypeUse <Ivl:1 V01> LCL_VAR BB01 regmask=[rdx] minReg=1 copy fixed>
<RefPosition #203 @143 RefTypeUse <Ivl:1 V01> LCL_VAR BB01 regmask=[r14] minReg=1>
<RefPosition #215 @167 RefTypeUse <Ivl:1 V01> LCL_VAR BB01 regmask=[r14] minReg=1>
<RefPosition #244 @185 RefTypeUse <Ivl:1 V01> LCL_VAR BB01 regmask=[r8] minReg=1 last copy fixed>
--- V02  (Interval 2)
<RefPosition #176 @118 RefTypeDef <Ivl:2 V02> STORE_LCL_VAR BB01 regmask=[rsi] minReg=1>
<RefPosition #221 @171 RefTypeUse <Ivl:2 V02> LCL_VAR BB01 regmask=[rdx] minReg=1 last copy fixed>
--- V03
--- V04  (Interval 3)
<RefPosition #122 @84  RefTypeDef <Ivl:3 V04> STORE_LCL_VAR BB01 regmask=[rbp] minReg=1>
<RefPosition #123 @89  RefTypeUse <Ivl:3 V04> LCL_VAR BB01 regmask=[rbp] minReg=1>
<RefPosition #178 @121 RefTypeUse <Ivl:3 V04> LCL_VAR BB01 regmask=[rcx] minReg=1 last copy fixed>
--- V05  (Interval 4)
<RefPosition #29  @20  RefTypeDef <Ivl:4 V05> STORE_LCL_VAR BB01 regmask=[rcx] minReg=1>
<RefPosition #30  @25  RefTypeUse <Ivl:4 V05> LCL_VAR BB01 regmask=[rcx] minReg=1>
<RefPosition #32  @31  RefTypeUse <Ivl:4 V05> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed>
--- V06  (Interval 5)
<RefPosition #98  @72  RefTypeDef <Ivl:5 V06> STORE_LCL_VAR BB01 regmask=[rdx] minReg=1>
<RefPosition #100 @75  RefTypeUse <Ivl:5 V06> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed>
--- V07
--- V08  (Interval 6)
<RefPosition #210 @154 RefTypeDef <Ivl:6 V08> STORE_LCL_VAR BB01 regmask=[rcx] minReg=1>
<RefPosition #211 @159 RefTypeUse <Ivl:6 V08> LCL_VAR BB01 regmask=[rcx] minReg=1>
<RefPosition #213 @163 RefTypeUse <Ivl:6 V08> LCL_VAR BB01 regmask=[rcx] minReg=1 last>
--- V09  (Interval 7)
<RefPosition #64  @50  RefTypeDef <Ivl:7 V09> STORE_LCL_VAR BB01 regmask=[rdi] minReg=1>
<RefPosition #66  @53  RefTypeUse <Ivl:7 V09> LCL_VAR BB01 regmask=[rcx] minReg=1 copy fixed>
<RefPosition #236 @177 RefTypeUse <Ivl:7 V09> LCL_VAR BB01 regmask=[rcx] minReg=1 last copy fixed>
--- V10  (Interval 8)
<RefPosition #73  @60  RefTypeDef <Ivl:8 V10> STORE_LCL_VAR BB01 regmask=[rbx] minReg=1>
<RefPosition #75  @63  RefTypeUse <Ivl:8 V10> LCL_VAR BB01 regmask=[rdx] minReg=1 copy fixed>
<RefPosition #240 @181 RefTypeUse <Ivl:8 V10> LCL_VAR BB01 regmask=[rdx] minReg=1 last copy fixed>
--- V11  (Interval 9)
<RefPosition #206 @146 RefTypeDef <Ivl:9 V11> STORE_LCL_VAR BB01 regmask=[rdx] minReg=1>
<RefPosition #207 @151 RefTypeUse <Ivl:9 V11> LCL_VAR BB01 regmask=[rdx] minReg=1>
<RefPosition #212 @159 RefTypeUse <Ivl:9 V11> LCL_VAR BB01 regmask=[rdx] minReg=1 last regOptional>

Active intervals at end of allocation:

-----------------------
RESOLVING BB BOUNDARIES
-----------------------
Resolution Candidates: {V00}
Has NoCritical Edges

Prior to Resolution

BB01
use def in out
{V00}
{V01 V02 V04 V05 V06 V07 V08 V09 V10 V11}
{V00}
{}
Var=Reg beg of BB01: V00=rsi 
Var=Reg end of BB01: none

BB02
use def in out
{}
{}
{}
{}
Var=Reg beg of BB02: none
Var=Reg end of BB02: none


RESOLVING EDGES
  Set V00 argument initial register to rsi
Trees after linear scan register allocator (LSRA)

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..056)        (return)                     i label target jmp hascall gcsafe idxlen new[] nullcheck LIR 
BB02 [0006]  0                             0       [???..???)        (throw )                     keep i internal rare label target LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..056) (return), preds={} succs={}
N003 (???,???) [000155] ------------                 IL_OFFSET void   IL offset: 0x0 REG NA
N005 (  2, 10) [000044] ------------        t44 =    CNS_INT   long   0x7ffc7e4c17a0 REG rcx $140
                                                  /--*  t44    long   
N007 (???,???) [000169] ------------       t169 = *  PUTARG_REG long   REG rcx
N009 (  1,  1) [000045] ------------        t45 =    CNS_INT   int    1 REG rdx $42
                                                  /--*  t45    int    
N011 (???,???) [000170] ------------       t170 = *  PUTARG_REG int    REG rdx
                                                  /--*  t169   long   arg0 in rcx
                                                  +--*  t170   int    arg1 in rdx
N013 ( 17, 18) [000046] H-CXG-------        t46 = *  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE REG rax $201
N015 (  2, 10) [000083] I-----------        t83 =    CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock] REG rcx $240
                                                  /--*  t83    long   
N017 (  4, 12) [000042] n---G-------        t42 = *  IND       ref    REG rcx <l:$280, c:$2c0>
                                                  /--*  t42    ref    
N019 ( 22, 31) [000059] DA-XG-------              *  STORE_LCL_VAR ref    V05 tmp2         d:2 rcx REG rcx
N021 (???,???) [000156] ------------                 IL_OFFSET void   IL offset: 0x0 REG NA
N023 (  1,  1) [000056] ------------        t56 =    LCL_VAR   ref    V05 tmp2         u:2 rcx REG rcx <l:$280, c:$2c0>
                                                  /--*  t56    ref    
N025 (  2,  2) [000057] ---X--------              *  NULLCHECK int    REG NA <l:$1c6, c:$1c5>
N027 (???,???) [000157] ------------                 IL_OFFSET void   IL offset: 0x0 REG NA
N029 (  1,  1) [000053] ------------        t53 =    LCL_VAR   ref    V05 tmp2         u:2 rcx (last use) REG rcx <l:$280, c:$2c0>
                                                  /--*  t53    ref    
N031 (???,???) [000171] ------------       t171 = *  PUTARG_REG ref    REG rcx
N033 (  1,  1) [000054] ------------        t54 =    CNS_INT   int    -1 REG rdx $41
                                                  /--*  t54    int    
N035 (???,???) [000172] ------------       t172 = *  PUTARG_REG int    REG rdx
                                                  /--*  t171   ref    this in rcx
                                                  +--*  t172   int    arg1 in rdx
N037 ( 16, 10) [000055] --CXG-------        t55 = *  CALL      int    System.Threading.WaitHandle.WaitOneNoCheck REG rax $102
N039 (???,???) [000158] ------------                 IL_OFFSET void   IL offset: 0x5 REG NA
N041 ( 14,  5) [000001] --CXG-------                 CALL      void   HotkeyedMusicPlayer.ArgsTransport.EnsureRootKeyExists REG NA $VN.Void
N043 (???,???) [000159] ------------                 IL_OFFSET void   IL offset: 0xa REG NA
N045 (  2, 10) [000086] H-----------        t86 =    CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer" REG rcx $241
                                                  /--*  t86    long   
N047 (  4, 12) [000087] #---G-------        t87 = *  IND       ref    REG rdi $1c7
                                                  /--*  t87    ref    
N049 (  4, 12) [000141] DA--G-------              *  STORE_LCL_VAR ref    V09 cse2         d:1 rdi REG rdi
N051 (  1,  1) [000142] ------------       t142 =    LCL_VAR   ref    V09 cse2         u:1 rdi REG rdi $1c7
                                                  /--*  t142   ref    
N053 (???,???) [000173] ------------       t173 = *  PUTARG_REG ref    REG rcx
N055 (  2, 10) [000088] H-----------        t88 =    CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance" REG rdx $242
                                                  /--*  t88    long   
N057 (  4, 12) [000089] #---G-------        t89 = *  IND       ref    REG rbx $1c8
                                                  /--*  t89    ref    
N059 (  4, 12) [000146] DA--G-------              *  STORE_LCL_VAR ref    V10 cse3         d:1 rbx REG rbx
N061 (  1,  1) [000147] ------------       t147 =    LCL_VAR   ref    V10 cse3         u:1 rbx REG rbx $1c8
                                                  /--*  t147   ref    
N063 (???,???) [000174] ------------       t174 = *  PUTARG_REG ref    REG rdx
N065 (  1,  1) [000004] ------------         t4 =    LCL_VAR   ref    V00 arg0         u:1 rsi REG rsi $80
                                                  /--*  t4     ref    
N067 (???,???) [000175] ------------       t175 = *  PUTARG_REG ref    REG r8
                                                  /--*  t173   ref    arg0 in rcx
                                                  +--*  t174   ref    arg1 in rdx
                                                  +--*  t175   ref    arg2 in r8
N069 ( 25, 35) [000005] --CXG-------         t5 = *  CALL      ref    Microsoft.Win32.Registry.GetValue REG rax $2c8
                                                  /--*  t5     ref    
N071 ( 25, 35) [000094] DA-XG-----L-              *  STORE_LCL_VAR ref    V06 tmp3         d:2 rdx REG rdx
N073 (  1,  1) [000095] ------------        t95 =    LCL_VAR   ref    V06 tmp3         u:2 rdx (last use) REG rdx $2c8
                                                  /--*  t95    ref    
N075 (???,???) [000176] ------------       t176 = *  PUTARG_REG ref    REG rdx
N077 (  2, 10) [000006] H------N----         t6 =    CNS_INT(h) long   0xd1ffab1e class REG rcx $243
                                                  /--*  t6     long   
N079 (???,???) [000177] ------------       t177 = *  PUTARG_REG long   REG rcx
                                                  /--*  t176   ref    arg1 in rdx
                                                  +--*  t177   long   arg0 in rcx
N081 ( 45, 53) [000007] --CXG-------         t7 = *  CALL help ref    HELPER.CORINFO_HELP_CHKCASTARRAY REG rax $1cd
                                                  /--*  t7     ref    
N083 ( 45, 53) [000009] DA-XG-------              *  STORE_LCL_VAR ref    V04 tmp1         d:2 rbp REG rbp
N085 (  1,  1) [000011] ------------        t11 =    LCL_VAR   ref    V04 tmp1         u:2 rbp REG rbp $2c8
                                                  /--*  t11    ref    
N087 (???,???) [000165] -c----------       t165 = *  LEA(b+8)  ref    REG NA
                                                  /--*  t165   ref    
N089 (  3,  3) [000012] ---X--------        t12 = *  IND       int    REG rdx $340
N091 (  1,  1) [000013] -c----------        t13 =    CNS_INT   int    1 REG NA $42
                                                  /--*  t12    int    
                                                  +--*  t13    int    
N093 (  5,  5) [000014] ---X--------        t14 = *  ADD       int    REG rdx $342
                                                  /--*  t14    int    
N095 (  6,  7) [000016] ---X--------        t16 = *  CAST      long <- int REG rdx $203
                                                  /--*  t16    long   
N097 (???,???) [000178] ---X--------       t178 = *  PUTARG_REG long   REG rdx
N099 (  2, 10) [000015] H-----------        t15 =    CNS_INT(h) long   0xd1ffab1e class REG rcx $243
                                                  /--*  t15    long   
N101 (???,???) [000179] ------------       t179 = *  PUTARG_REG long   REG rcx
                                                  /--*  t178   long   arg1 in rdx
                                                  +--*  t179   long   arg0 in rcx
N103 ( 22, 24) [000017] --CXG-------        t17 = *  CALL help ref    HELPER.CORINFO_HELP_NEWARR_1_OBJ REG rax $1d1
                                                  /--*  t17    ref    
N105 ( 22, 24) [000019] DA-XG-------              *  STORE_LCL_VAR ref    V01 loc0         d:2 r14 REG r14
N107 (  1,  1) [000020] ------------        t20 =    LCL_VAR   ref    V00 arg0         u:1 rsi (last use) REG rsi $80
                                                  /--*  t20    ref    
N109 (???,???) [000180] ------------       t180 = *  PUTARG_REG ref    REG rdx
N111 (  1,  1) [000066] ------------        t66 =    CNS_INT   int    124 REG rcx $45
                                                  /--*  t66    int    
N113 (???,???) [000181] ------------       t181 = *  PUTARG_REG int    REG rcx
                                                  /--*  t180   ref    arg1 in rdx
                                                  +--*  t181   int    arg0 in rcx
N115 ( 16,  9) [000062] --CXG-------        t62 = *  CALL      ref    System.String.Join REG rax $2cf
                                                  /--*  t62    ref    
N117 ( 20, 12) [000024] DA-XG-------              *  STORE_LCL_VAR ref    V02 loc1         d:2 rsi REG rsi
N119 (  1,  1) [000010] ------------        t10 =    LCL_VAR   ref    V04 tmp1         u:2 rbp (last use) REG rbp $2c8
                                                  /--*  t10    ref    
N121 (???,???) [000182] ------------       t182 = *  PUTARG_REG ref    REG rcx
N123 (  1,  1) [000025] ------------        t25 =    LCL_VAR   ref    V01 loc0         u:2 r14 REG r14 $281
                                                  /--*  t25    ref    
N125 (???,???) [000183] ------------       t183 = *  PUTARG_REG ref    REG rdx
N127 (  1,  1) [000026] ------------        t26 =    CNS_INT   int    0 REG r8 $40
                                                  /--*  t26    int    
N129 (???,???) [000184] ------------       t184 = *  PUTARG_REG int    REG r8
N131 (  2, 10) [000185] Hc----------       t185 =    CNS_INT(h) long   0xd1ffab1e ftn REG NA
                                                  /--*  t185   long   
N133 (  4, 12) [000186] -c----------       t186 = *  IND       long   REG NA
                                                  /--*  t182   ref    this in rcx
                                                  +--*  t183   ref    arg1 in rdx
                                                  +--*  t184   int    arg2 in r8
                                                  +--*  t186   long   control expr
N135 ( 17, 12) [000027] --CXG-------              *  CALL      void   System.Array.CopyTo REG NA $VN.Void
N137 (???,???) [000160] ------------                 IL_OFFSET void   IL offset: 0x38 REG NA
N139 (  1,  1) [000029] ------------        t29 =    LCL_VAR   ref    V01 loc0         u:2 r14 REG r14 $281
                                                  /--*  t29    ref    
N141 (???,???) [000167] -c----------       t167 = *  LEA(b+8)  ref    REG NA
                                                  /--*  t167   ref    
N143 (  3,  3) [000030] ---X--------        t30 = *  IND       int    REG rdx $343
                                                  /--*  t30    int    
N145 (  3,  3) [000151] DA-X--------              *  STORE_LCL_VAR int    V11 cse4         d:1 rdx REG rdx
N147 (  1,  1) [000152] ------------       t152 =    LCL_VAR   int    V11 cse4         u:1 rdx REG rdx $343
N149 (  1,  1) [000031] -c----------        t31 =    CNS_INT   int    -1 REG NA $41
                                                  /--*  t152   int    
                                                  +--*  t31    int    
N151 (  6,  6) [000032] ---X--------        t32 = *  ADD       int    REG rcx $345
                                                  /--*  t32    int    
N153 (  6,  6) [000136] DA-X--------              *  STORE_LCL_VAR int    V08 cse1         d:1 rcx REG rcx
N155 (  1,  1) [000137] ------------       t137 =    LCL_VAR   int    V08 cse1         u:1 rcx REG rcx $345
N157 (  1,  1) [000154] ------------       t154 =    LCL_VAR   int    V11 cse4         u:1 rdx (last use) REG rdx $301
                                                  /--*  t137   int    
                                                  +--*  t154   int    
N159 ( 12, 15) [000110] ---X--------              *  ARR_BOUNDS_CHECK_Rng void   REG NA $1d7
N161 (  1,  1) [000139] ------------       t139 =    LCL_VAR   int    V08 cse1         u:1 rcx (last use) REG rcx $344
                                                  /--*  t139   int    
N163 (  2,  3) [000111] ------------       t111 = *  CAST      long <- int REG rdx $205
N165 (  1,  1) [000104] ------------       t104 =    LCL_VAR   ref    V01 loc0         u:2 r14 REG r14 $281
                                                  /--*  t104   ref    
                                                  +--*  t111   long   
N167 (  5,  6) [000116] ------------       t116 = *  LEA(b+(i*8)+16) byref  REG rcx
N169 (  3,  2) [000033] ------------        t33 =    LCL_VAR   ref    V02 loc1         u:2 rsi (last use) REG rsi $2cf
                                                  /--*  t116   byref  
                                                  +--*  t33    ref    
N171 (???,???) [000161] -A-XG-------              *  STOREIND  ref    REG NA
N173 (???,???) [000162] ------------                 IL_OFFSET void   IL offset: 0x40 REG NA
N175 (  1,  1) [000144] ------------       t144 =    LCL_VAR   ref    V09 cse2         u:1 rdi (last use) REG rdi $1c7
                                                  /--*  t144   ref    
N177 (???,???) [000187] ------------       t187 = *  PUTARG_REG ref    REG rcx
N179 (  1,  1) [000149] ------------       t149 =    LCL_VAR   ref    V10 cse3         u:1 rbx (last use) REG rbx $1c8
                                                  /--*  t149   ref    
N181 (???,???) [000188] ------------       t188 = *  PUTARG_REG ref    REG rdx
N183 (  1,  1) [000038] ------------        t38 =    LCL_VAR   ref    V01 loc0         u:2 r14 (last use) REG r14 $281
                                                  /--*  t38    ref    
N185 (???,???) [000189] ------------       t189 = *  PUTARG_REG ref    REG r8
N187 (  1,  1) [000070] ------------        t70 =    CNS_INT   int    0 REG r9 $40
                                                  /--*  t70    int    
N189 (???,???) [000190] ------------       t190 = *  PUTARG_REG int    REG r9
                                                  /--*  t187   ref    arg0 in rcx
                                                  +--*  t188   ref    arg1 in rdx
                                                  +--*  t189   ref    arg2 in r8
                                                  +--*  t190   int    arg3 in r9
N191 ( 18, 13) [000071] --CXG-------              *  CALL      void   Microsoft.Win32.Registry.SetValue REG NA $VN.Void
N193 (???,???) [000163] ------------                 IL_OFFSET void   IL offset: 0x50 REG NA
N195 (  2, 10) [000128] I-----------       t128 =    CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock] REG rcx $240
                                                  /--*  t128   long   
N197 (  4, 12) [000073] n---G-------        t73 = *  IND       ref    REG rcx <l:$285, c:$2da>
                                                  /--*  t73    ref    
N199 (???,???) [000191] ----G-------       t191 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t191   ref    this in rcx
N201 ( 19, 20) [000079] --CXG-------              *  CALL nullcheck void   System.Threading.Mutex.ReleaseMutex REG NA $VN.Void

------------ BB02 [???..???) (throw), preds={} succs={}
N205 ( 14,  5) [000168] --CXG-------                 CALL help void   HELPER.CORINFO_HELP_RNGCHKFAIL REG NA

-------------------------------------------------------------------------------------------------------------------

Final allocation
--------------------------------+----+----+----+----+----+----+----+----+----+----+
Loc RP#  Name Type  Action Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |r14 |
--------------------------------+----+----+----+----+----+----+----+----+----+----+
  0.#0   V0   Parm   Alloc rsi  |    |    |    |    |    |V0 a|    |    |    |    |
  1.#1   BB1 PredBB0            |    |    |    |    |    |V0 a|    |    |    |    |
  6.#2   C10  Def    Alloc rcx  |    |C10a|    |    |    |V0 a|    |    |    |    |
  7.#3   rcx  Fixd   Keep  rcx  |    |C10a|    |    |    |V0 a|    |    |    |    |
  7.#4   C10  Use *  Keep  rcx  |    |C10i|    |    |    |V0 a|    |    |    |    |
  8.#5   rcx  Fixd   Keep  rcx  |    |    |    |    |    |V0 a|    |    |    |    |
  8.#6   I11  Def    Alloc rcx  |    |I11a|    |    |    |V0 a|    |    |    |    |
 10.#7   C12  Def    Alloc rdx  |    |I11a|C12a|    |    |V0 a|    |    |    |    |
 11.#8   rdx  Fixd   Keep  rdx  |    |I11a|C12a|    |    |V0 a|    |    |    |    |
 11.#9   C12  Use *  Keep  rdx  |    |I11a|C12i|    |    |V0 a|    |    |    |    |
 12.#10  rdx  Fixd   Keep  rdx  |    |I11a|    |    |    |V0 a|    |    |    |    |
 12.#11  I13  Def    Alloc rdx  |    |I11a|I13a|    |    |V0 a|    |    |    |    |
 13.#12  rcx  Fixd   Keep  rcx  |    |I11a|I13a|    |    |V0 a|    |    |    |    |
 13.#13  I11  Use *  Keep  rcx  |    |I11i|I13a|    |    |V0 a|    |    |    |    |
 13.#14  rdx  Fixd   Keep  rdx  |    |    |I13a|    |    |V0 a|    |    |    |    |
 13.#15  I13  Use *  Keep  rdx  |    |    |I13i|    |    |V0 a|    |    |    |    |
 14.#16  rax  Kill   Keep  rax  |    |    |    |    |    |V0 a|    |    |    |    |
 14.#17  rcx  Kill   Keep  rcx  |    |    |    |    |    |V0 a|    |    |    |    |
 14.#18  rdx  Kill   Keep  rdx  |    |    |    |    |    |V0 a|    |    |    |    |
 14.#19  r8   Kill   Keep  r8   |    |    |    |    |    |V0 a|    |    |    |    |
 14.#20  r9   Kill   Keep  r9   |    |    |    |    |    |V0 a|    |    |    |    |
 14.#21  r10  Kill   Keep  r10  |    |    |    |    |    |V0 a|    |    |    |    |
 14.#22  r11  Kill   Keep  r11  |    |    |    |    |    |V0 a|    |    |    |    |
 14.#23  rax  Fixd   Keep  rax  |    |    |    |    |    |V0 a|    |    |    |    |
 14.#24  I14  Def *  Alloc rax  |I14i|    |    |    |    |V0 a|    |    |    |    |
 16.#25  C15  Def    Alloc rcx  |    |C15a|    |    |    |V0 a|    |    |    |    |
 17.#26  C15  Use *  Keep  rcx  |    |C15i|    |    |    |V0 a|    |    |    |    |
 18.#27  I16  Def    Alloc rcx  |    |I16a|    |    |    |V0 a|    |    |    |    |
 19.#28  I16  Use *  Keep  rcx  |    |I16i|    |    |    |V0 a|    |    |    |    |
 20.#29  V5   Def    Alloc rcx  |    |V5 a|    |    |    |V0 a|    |    |    |    |
 25.#30  V5   Use    Keep  rcx  |    |V5 a|    |    |    |V0 a|    |    |    |    |
 31.#31  rcx  Fixd   Keep  rcx  |    |V5 a|    |    |    |V0 a|    |    |    |    |
 31.#32  V5   Use *  Keep  rcx  |    |V5 i|    |    |    |V0 a|    |    |    |    |
 32.#33  rcx  Fixd   Keep  rcx  |    |    |    |    |    |V0 a|    |    |    |    |
 32.#34  I17  Def    Alloc rcx  |    |I17a|    |    |    |V0 a|    |    |    |    |
 34.#35  C18  Def    Alloc rdx  |    |I17a|C18a|    |    |V0 a|    |    |    |    |
 35.#36  rdx  Fixd   Keep  rdx  |    |I17a|C18a|    |    |V0 a|    |    |    |    |
 35.#37  C18  Use *  Keep  rdx  |    |I17a|C18i|    |    |V0 a|    |    |    |    |
 36.#38  rdx  Fixd   Keep  rdx  |    |I17a|    |    |    |V0 a|    |    |    |    |
 36.#39  I19  Def    Alloc rdx  |    |I17a|I19a|    |    |V0 a|    |    |    |    |
 37.#40  rcx  Fixd   Keep  rcx  |    |I17a|I19a|    |    |V0 a|    |    |    |    |
 37.#41  I17  Use *  Keep  rcx  |    |I17i|I19a|    |    |V0 a|    |    |    |    |
 37.#42  rdx  Fixd   Keep  rdx  |    |    |I19a|    |    |V0 a|    |    |    |    |
 37.#43  I19  Use *  Keep  rdx  |    |    |I19i|    |    |V0 a|    |    |    |    |
 38.#44  rax  Kill   Keep  rax  |    |    |    |    |    |V0 a|    |    |    |    |
 38.#45  rcx  Kill   Keep  rcx  |    |    |    |    |    |V0 a|    |    |    |    |
 38.#46  rdx  Kill   Keep  rdx  |    |    |    |    |    |V0 a|    |    |    |    |
 38.#47  r8   Kill   Keep  r8   |    |    |    |    |    |V0 a|    |    |    |    |
 38.#48  r9   Kill   Keep  r9   |    |    |    |    |    |V0 a|    |    |    |    |
 38.#49  r10  Kill   Keep  r10  |    |    |    |    |    |V0 a|    |    |    |    |
 38.#50  r11  Kill   Keep  r11  |    |    |    |    |    |V0 a|    |    |    |    |
 38.#51  rax  Fixd   Keep  rax  |    |    |    |    |    |V0 a|    |    |    |    |
 38.#52  I20  Def *  Alloc rax  |I20i|    |    |    |    |V0 a|    |    |    |    |
 42.#53  rax  Kill   Keep  rax  |    |    |    |    |    |V0 a|    |    |    |    |
 42.#54  rcx  Kill   Keep  rcx  |    |    |    |    |    |V0 a|    |    |    |    |
 42.#55  rdx  Kill   Keep  rdx  |    |    |    |    |    |V0 a|    |    |    |    |
 42.#56  r8   Kill   Keep  r8   |    |    |    |    |    |V0 a|    |    |    |    |
 42.#57  r9   Kill   Keep  r9   |    |    |    |    |    |V0 a|    |    |    |    |
 42.#58  r10  Kill   Keep  r10  |    |    |    |    |    |V0 a|    |    |    |    |
 42.#59  r11  Kill   Keep  r11  |    |    |    |    |    |V0 a|    |    |    |    |
 46.#60  C21  Def    Alloc rcx  |    |C21a|    |    |    |V0 a|    |    |    |    |
 47.#61  C21  Use *  Keep  rcx  |    |C21i|    |    |    |V0 a|    |    |    |    |
 48.#62  I22  Def    Alloc rdi  |    |    |    |    |    |V0 a|I22a|    |    |    |
 49.#63  I22  Use *  Keep  rdi  |    |    |    |    |    |V0 a|I22i|    |    |    |
 50.#64  V9   Def    Alloc rdi  |    |    |    |    |    |V0 a|V9 a|    |    |    |
 53.#65  rcx  Fixd   Keep  rcx  |    |    |    |    |    |V0 a|V9 a|    |    |    |
--------------------------------+----+----+----+----+----+----+----+----+----+----+
Loc RP#  Name Type  Action Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |r14 |
--------------------------------+----+----+----+----+----+----+----+----+----+----+
 53.#66  V9   Use    Copy  rcx  |    |V9 a|    |    |    |V0 a|V9 a|    |    |    |
 54.#67  rcx  Fixd   Keep  rcx  |    |    |    |    |    |V0 a|V9 a|    |    |    |
 54.#68  I23  Def    Alloc rcx  |    |I23a|    |    |    |V0 a|V9 a|    |    |    |
 56.#69  C24  Def    Alloc rdx  |    |I23a|C24a|    |    |V0 a|V9 a|    |    |    |
 57.#70  C24  Use *  Keep  rdx  |    |I23a|C24i|    |    |V0 a|V9 a|    |    |    |
 58.#71  I25  Def    Alloc rbx  |    |I23a|    |I25a|    |V0 a|V9 a|    |    |    |
 59.#72  I25  Use *  Keep  rbx  |    |I23a|    |I25i|    |V0 a|V9 a|    |    |    |
 60.#73  V10  Def    Alloc rbx  |    |I23a|    |V10a|    |V0 a|V9 a|    |    |    |
 63.#74  rdx  Fixd   Keep  rdx  |    |I23a|    |V10a|    |V0 a|V9 a|    |    |    |
 63.#75  V10  Use    Copy  rdx  |    |I23a|V10a|V10a|    |V0 a|V9 a|    |    |    |
 64.#76  rdx  Fixd   Keep  rdx  |    |I23a|    |V10a|    |V0 a|V9 a|    |    |    |
 64.#77  I26  Def    Alloc rdx  |    |I23a|I26a|V10a|    |V0 a|V9 a|    |    |    |
 67.#78  r8   Fixd   Keep  r8   |    |I23a|I26a|V10a|    |V0 a|V9 a|    |    |    |
 67.#79  V0   Use    Copy  r8   |    |I23a|I26a|V10a|    |V0 a|V9 a|V0 a|    |    |
 68.#80  r8   Fixd   Keep  r8   |    |I23a|I26a|V10a|    |V0 a|V9 a|    |    |    |
 68.#81  I27  Def    Alloc r8   |    |I23a|I26a|V10a|    |V0 a|V9 a|I27a|    |    |
 69.#82  rcx  Fixd   Keep  rcx  |    |I23a|I26a|V10a|    |V0 a|V9 a|I27a|    |    |
 69.#83  I23  Use *  Keep  rcx  |    |I23i|I26a|V10a|    |V0 a|V9 a|I27a|    |    |
 69.#84  rdx  Fixd   Keep  rdx  |    |    |I26a|V10a|    |V0 a|V9 a|I27a|    |    |
 69.#85  I26  Use *  Keep  rdx  |    |    |I26i|V10a|    |V0 a|V9 a|I27a|    |    |
 69.#86  r8   Fixd   Keep  r8   |    |    |    |V10a|    |V0 a|V9 a|I27a|    |    |
 69.#87  I27  Use *  Keep  r8   |    |    |    |V10a|    |V0 a|V9 a|I27i|    |    |
 70.#88  rax  Kill   Keep  rax  |    |    |    |V10a|    |V0 a|V9 a|    |    |    |
 70.#89  rcx  Kill   Keep  rcx  |    |    |    |V10a|    |V0 a|V9 a|    |    |    |
 70.#90  rdx  Kill   Keep  rdx  |    |    |    |V10a|    |V0 a|V9 a|    |    |    |
 70.#91  r8   Kill   Keep  r8   |    |    |    |V10a|    |V0 a|V9 a|    |    |    |
 70.#92  r9   Kill   Keep  r9   |    |    |    |V10a|    |V0 a|V9 a|    |    |    |
 70.#93  r10  Kill   Keep  r10  |    |    |    |V10a|    |V0 a|V9 a|    |    |    |
 70.#94  r11  Kill   Keep  r11  |    |    |    |V10a|    |V0 a|V9 a|    |    |    |
 70.#95  rax  Fixd   Keep  rax  |    |    |    |V10a|    |V0 a|V9 a|    |    |    |
 70.#96  I28  Def    Alloc rax  |I28a|    |    |V10a|    |V0 a|V9 a|    |    |    |
 71.#97  I28  Use *  Keep  rax  |I28i|    |    |V10a|    |V0 a|V9 a|    |    |    |
 72.#98  V6   Def    Alloc rdx  |    |    |V6 a|V10a|    |V0 a|V9 a|    |    |    |
 75.#99  rdx  Fixd   Keep  rdx  |    |    |V6 a|V10a|    |V0 a|V9 a|    |    |    |
 75.#100 V6   Use *  Keep  rdx  |    |    |V6 i|V10a|    |V0 a|V9 a|    |    |    |
 76.#101 rdx  Fixd   Keep  rdx  |    |    |    |V10a|    |V0 a|V9 a|    |    |    |
 76.#102 I29  Def    Alloc rdx  |    |    |I29a|V10a|    |V0 a|V9 a|    |    |    |
 78.#103 C30  Def    Alloc rcx  |    |C30a|I29a|V10a|    |V0 a|V9 a|    |    |    |
 79.#104 rcx  Fixd   Keep  rcx  |    |C30a|I29a|V10a|    |V0 a|V9 a|    |    |    |
 79.#105 C30  Use *  Keep  rcx  |    |C30i|I29a|V10a|    |V0 a|V9 a|    |    |    |
 80.#106 rcx  Fixd   Keep  rcx  |    |    |I29a|V10a|    |V0 a|V9 a|    |    |    |
 80.#107 I31  Def    Alloc rcx  |    |I31a|I29a|V10a|    |V0 a|V9 a|    |    |    |
 81.#108 rdx  Fixd   Keep  rdx  |    |I31a|I29a|V10a|    |V0 a|V9 a|    |    |    |
 81.#109 I29  Use *  Keep  rdx  |    |I31a|I29i|V10a|    |V0 a|V9 a|    |    |    |
 81.#110 rcx  Fixd   Keep  rcx  |    |I31a|    |V10a|    |V0 a|V9 a|    |    |    |
 81.#111 I31  Use *  Keep  rcx  |    |I31i|    |V10a|    |V0 a|V9 a|    |    |    |
 82.#112 rax  Kill   Keep  rax  |    |    |    |V10a|    |V0 a|V9 a|    |    |    |
 82.#113 rcx  Kill   Keep  rcx  |    |    |    |V10a|    |V0 a|V9 a|    |    |    |
 82.#114 rdx  Kill   Keep  rdx  |    |    |    |V10a|    |V0 a|V9 a|    |    |    |
 82.#115 r8   Kill   Keep  r8   |    |    |    |V10a|    |V0 a|V9 a|    |    |    |
 82.#116 r9   Kill   Keep  r9   |    |    |    |V10a|    |V0 a|V9 a|    |    |    |
 82.#117 r10  Kill   Keep  r10  |    |    |    |V10a|    |V0 a|V9 a|    |    |    |
 82.#118 r11  Kill   Keep  r11  |    |    |    |V10a|    |V0 a|V9 a|    |    |    |
 82.#119 rax  Fixd   Keep  rax  |    |    |    |V10a|    |V0 a|V9 a|    |    |    |
 82.#120 I32  Def    Alloc rax  |I32a|    |    |V10a|    |V0 a|V9 a|    |    |    |
 83.#121 I32  Use *  Keep  rax  |I32i|    |    |V10a|    |V0 a|V9 a|    |    |    |
 84.#122 V4   Def    Alloc rbp  |    |    |    |V10a|V4 a|V0 a|V9 a|    |    |    |
 89.#123 V4   Use    Keep  rbp  |    |    |    |V10a|V4 a|V0 a|V9 a|    |    |    |
 90.#124 I33  Def    Alloc rdx  |    |    |I33a|V10a|V4 a|V0 a|V9 a|    |    |    |
 93.#125 I33  Use *  Keep  rdx  |    |    |I33i|V10a|V4 a|V0 a|V9 a|    |    |    |
 94.#126 I34  Def    Alloc rdx  |    |    |I34a|V10a|V4 a|V0 a|V9 a|    |    |    |
 95.#127 I34  Use *  Keep  rdx  |    |    |I34i|V10a|V4 a|V0 a|V9 a|    |    |    |
 96.#128 I35  Def    Alloc rdx  |    |    |I35a|V10a|V4 a|V0 a|V9 a|    |    |    |
 97.#129 rdx  Fixd   Keep  rdx  |    |    |I35a|V10a|V4 a|V0 a|V9 a|    |    |    |
 97.#130 I35  Use *  Keep  rdx  |    |    |I35i|V10a|V4 a|V0 a|V9 a|    |    |    |
 98.#131 rdx  Fixd   Keep  rdx  |    |    |    |V10a|V4 a|V0 a|V9 a|    |    |    |
 98.#132 I36  Def    Alloc rdx  |    |    |I36a|V10a|V4 a|V0 a|V9 a|    |    |    |
100.#133 C37  Def    Alloc rcx  |    |C37a|I36a|V10a|V4 a|V0 a|V9 a|    |    |    |
101.#134 rcx  Fixd   Keep  rcx  |    |C37a|I36a|V10a|V4 a|V0 a|V9 a|    |    |    |
101.#135 C37  Use *  Keep  rcx  |    |C37i|I36a|V10a|V4 a|V0 a|V9 a|    |    |    |
102.#136 rcx  Fixd   Keep  rcx  |    |    |I36a|V10a|V4 a|V0 a|V9 a|    |    |    |
102.#137 I38  Def    Alloc rcx  |    |I38a|I36a|V10a|V4 a|V0 a|V9 a|    |    |    |
103.#138 rdx  Fixd   Keep  rdx  |    |I38a|I36a|V10a|V4 a|V0 a|V9 a|    |    |    |
103.#139 I36  Use *  Keep  rdx  |    |I38a|I36i|V10a|V4 a|V0 a|V9 a|    |    |    |
103.#140 rcx  Fixd   Keep  rcx  |    |I38a|    |V10a|V4 a|V0 a|V9 a|    |    |    |
103.#141 I38  Use *  Keep  rcx  |    |I38i|    |V10a|V4 a|V0 a|V9 a|    |    |    |
104.#142 rax  Kill   Keep  rax  |    |    |    |V10a|V4 a|V0 a|V9 a|    |    |    |
104.#143 rcx  Kill   Keep  rcx  |    |    |    |V10a|V4 a|V0 a|V9 a|    |    |    |
104.#144 rdx  Kill   Keep  rdx  |    |    |    |V10a|V4 a|V0 a|V9 a|    |    |    |
104.#145 r8   Kill   Keep  r8   |    |    |    |V10a|V4 a|V0 a|V9 a|    |    |    |
104.#146 r9   Kill   Keep  r9   |    |    |    |V10a|V4 a|V0 a|V9 a|    |    |    |
104.#147 r10  Kill   Keep  r10  |    |    |    |V10a|V4 a|V0 a|V9 a|    |    |    |
104.#148 r11  Kill   Keep  r11  |    |    |    |V10a|V4 a|V0 a|V9 a|    |    |    |
104.#149 rax  Fixd   Keep  rax  |    |    |    |V10a|V4 a|V0 a|V9 a|    |    |    |
104.#150 I39  Def    Alloc rax  |I39a|    |    |V10a|V4 a|V0 a|V9 a|    |    |    |
105.#151 I39  Use *  Keep  rax  |I39i|    |    |V10a|V4 a|V0 a|V9 a|    |    |    |
106.#152 V1   Def    Alloc r14  |    |    |    |V10a|V4 a|V0 a|V9 a|    |    |V1 a|
109.#153 rdx  Fixd   Keep  rdx  |    |    |    |V10a|V4 a|V0 a|V9 a|    |    |V1 a|
--------------------------------+----+----+----+----+----+----+----+----+----+----+
Loc RP#  Name Type  Action Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |r14 |
--------------------------------+----+----+----+----+----+----+----+----+----+----+
109.#154 V0   Use *  Copy  rdx  |    |    |V0 i|V10a|V4 a|V0 i|V9 a|    |    |V1 a|
110.#155 rdx  Fixd   Keep  rdx  |    |    |    |V10a|V4 a|    |V9 a|    |    |V1 a|
110.#156 I40  Def    Alloc rdx  |    |    |I40a|V10a|V4 a|    |V9 a|    |    |V1 a|
112.#157 C41  Def    Alloc rcx  |    |C41a|I40a|V10a|V4 a|    |V9 a|    |    |V1 a|
113.#158 rcx  Fixd   Keep  rcx  |    |C41a|I40a|V10a|V4 a|    |V9 a|    |    |V1 a|
113.#159 C41  Use *  Keep  rcx  |    |C41i|I40a|V10a|V4 a|    |V9 a|    |    |V1 a|
114.#160 rcx  Fixd   Keep  rcx  |    |    |I40a|V10a|V4 a|    |V9 a|    |    |V1 a|
114.#161 I42  Def    Alloc rcx  |    |I42a|I40a|V10a|V4 a|    |V9 a|    |    |V1 a|
115.#162 rdx  Fixd   Keep  rdx  |    |I42a|I40a|V10a|V4 a|    |V9 a|    |    |V1 a|
115.#163 I40  Use *  Keep  rdx  |    |I42a|I40i|V10a|V4 a|    |V9 a|    |    |V1 a|
115.#164 rcx  Fixd   Keep  rcx  |    |I42a|    |V10a|V4 a|    |V9 a|    |    |V1 a|
115.#165 I42  Use *  Keep  rcx  |    |I42i|    |V10a|V4 a|    |V9 a|    |    |V1 a|
116.#166 rax  Kill   Keep  rax  |    |    |    |V10a|V4 a|    |V9 a|    |    |V1 a|
116.#167 rcx  Kill   Keep  rcx  |    |    |    |V10a|V4 a|    |V9 a|    |    |V1 a|
116.#168 rdx  Kill   Keep  rdx  |    |    |    |V10a|V4 a|    |V9 a|    |    |V1 a|
116.#169 r8   Kill   Keep  r8   |    |    |    |V10a|V4 a|    |V9 a|    |    |V1 a|
116.#170 r9   Kill   Keep  r9   |    |    |    |V10a|V4 a|    |V9 a|    |    |V1 a|
116.#171 r10  Kill   Keep  r10  |    |    |    |V10a|V4 a|    |V9 a|    |    |V1 a|
116.#172 r11  Kill   Keep  r11  |    |    |    |V10a|V4 a|    |V9 a|    |    |V1 a|
116.#173 rax  Fixd   Keep  rax  |    |    |    |V10a|V4 a|    |V9 a|    |    |V1 a|
116.#174 I43  Def    Alloc rax  |I43a|    |    |V10a|V4 a|    |V9 a|    |    |V1 a|
117.#175 I43  Use *  Keep  rax  |I43i|    |    |V10a|V4 a|    |V9 a|    |    |V1 a|
118.#176 V2   Def    Alloc rsi  |    |    |    |V10a|V4 a|V2 a|V9 a|    |    |V1 a|
121.#177 rcx  Fixd   Keep  rcx  |    |    |    |V10a|V4 a|V2 a|V9 a|    |    |V1 a|
121.#178 V4   Use *  Copy  rcx  |    |V4 i|    |V10a|V4 i|V2 a|V9 a|    |    |V1 a|
122.#179 rcx  Fixd   Keep  rcx  |    |    |    |V10a|    |V2 a|V9 a|    |    |V1 a|
122.#180 I44  Def    Alloc rcx  |    |I44a|    |V10a|    |V2 a|V9 a|    |    |V1 a|
125.#181 rdx  Fixd   Keep  rdx  |    |I44a|    |V10a|    |V2 a|V9 a|    |    |V1 a|
125.#182 V1   Use    Copy  rdx  |    |I44a|V1 a|V10a|    |V2 a|V9 a|    |    |V1 a|
126.#183 rdx  Fixd   Keep  rdx  |    |I44a|    |V10a|    |V2 a|V9 a|    |    |V1 a|
126.#184 I45  Def    Alloc rdx  |    |I44a|I45a|V10a|    |V2 a|V9 a|    |    |V1 a|
128.#185 C46  Def    Alloc r8   |    |I44a|I45a|V10a|    |V2 a|V9 a|C46a|    |V1 a|
129.#186 r8   Fixd   Keep  r8   |    |I44a|I45a|V10a|    |V2 a|V9 a|C46a|    |V1 a|
129.#187 C46  Use *  Keep  r8   |    |I44a|I45a|V10a|    |V2 a|V9 a|C46i|    |V1 a|
130.#188 r8   Fixd   Keep  r8   |    |I44a|I45a|V10a|    |V2 a|V9 a|    |    |V1 a|
130.#189 I47  Def    Alloc r8   |    |I44a|I45a|V10a|    |V2 a|V9 a|I47a|    |V1 a|
135.#190 rcx  Fixd   Keep  rcx  |    |I44a|I45a|V10a|    |V2 a|V9 a|I47a|    |V1 a|
135.#191 I44  Use *  Keep  rcx  |    |I44i|I45a|V10a|    |V2 a|V9 a|I47a|    |V1 a|
135.#192 rdx  Fixd   Keep  rdx  |    |    |I45a|V10a|    |V2 a|V9 a|I47a|    |V1 a|
135.#193 I45  Use *  Keep  rdx  |    |    |I45i|V10a|    |V2 a|V9 a|I47a|    |V1 a|
135.#194 r8   Fixd   Keep  r8   |    |    |    |V10a|    |V2 a|V9 a|I47a|    |V1 a|
135.#195 I47  Use *  Keep  r8   |    |    |    |V10a|    |V2 a|V9 a|I47i|    |V1 a|
136.#196 rax  Kill   Keep  rax  |    |    |    |V10a|    |V2 a|V9 a|    |    |V1 a|
136.#197 rcx  Kill   Keep  rcx  |    |    |    |V10a|    |V2 a|V9 a|    |    |V1 a|
136.#198 rdx  Kill   Keep  rdx  |    |    |    |V10a|    |V2 a|V9 a|    |    |V1 a|
136.#199 r8   Kill   Keep  r8   |    |    |    |V10a|    |V2 a|V9 a|    |    |V1 a|
136.#200 r9   Kill   Keep  r9   |    |    |    |V10a|    |V2 a|V9 a|    |    |V1 a|
136.#201 r10  Kill   Keep  r10  |    |    |    |V10a|    |V2 a|V9 a|    |    |V1 a|
136.#202 r11  Kill   Keep  r11  |    |    |    |V10a|    |V2 a|V9 a|    |    |V1 a|
143.#203 V1   Use    Keep  r14  |    |    |    |V10a|    |V2 a|V9 a|    |    |V1 a|
144.#204 I48  Def    Alloc rdx  |    |    |I48a|V10a|    |V2 a|V9 a|    |    |V1 a|
145.#205 I48  Use *  Keep  rdx  |    |    |I48i|V10a|    |V2 a|V9 a|    |    |V1 a|
146.#206 V11  Def    Alloc rdx  |    |    |V11a|V10a|    |V2 a|V9 a|    |    |V1 a|
151.#207 V11  Use    Keep  rdx  |    |    |V11a|V10a|    |V2 a|V9 a|    |    |V1 a|
152.#208 I49  Def    Alloc rcx  |    |I49a|V11a|V10a|    |V2 a|V9 a|    |    |V1 a|
153.#209 I49  Use *  Keep  rcx  |    |I49i|V11a|V10a|    |V2 a|V9 a|    |    |V1 a|
154.#210 V8   Def    Alloc rcx  |    |V8 a|V11a|V10a|    |V2 a|V9 a|    |    |V1 a|
159.#211 V8   Use    Keep  rcx  |    |V8 a|V11a|V10a|    |V2 a|V9 a|    |    |V1 a|
159.#212 V11  Use *  Keep  rdx  |    |V8 a|V11i|V10a|    |V2 a|V9 a|    |    |V1 a|
163.#213 V8   Use *  Keep  rcx  |    |V8 i|    |V10a|    |V2 a|V9 a|    |    |V1 a|
164.#214 I50  Def    Alloc rdx  |    |    |I50a|V10a|    |V2 a|V9 a|    |    |V1 a|
167.#215 V1   Use    Keep  r14  |    |    |I50a|V10a|    |V2 a|V9 a|    |    |V1 a|
167.#216 I50  Use *  Keep  rdx  |    |    |I50i|V10a|    |V2 a|V9 a|    |    |V1 a|
168.#217 I51  Def    Alloc rcx  |    |I51a|    |V10a|    |V2 a|V9 a|    |    |V1 a|
171.#218 rcx  Fixd   Keep  rcx  |    |I51a|    |V10a|    |V2 a|V9 a|    |    |V1 a|
171.#219 I51  Use *  Keep  rcx  |    |I51i|    |V10a|    |V2 a|V9 a|    |    |V1 a|
171.#220 rdx  Fixd   Keep  rdx  |    |    |    |V10a|    |V2 a|V9 a|    |    |V1 a|
--------------------------------+----+----+----+----+----+----+----+----+----+----+
Loc RP#  Name Type  Action Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |r14 |
--------------------------------+----+----+----+----+----+----+----+----+----+----+
171.#221 V2   Use *  Copy  rdx  |    |    |V2 i|V10a|    |V2 i|V9 a|    |    |V1 a|
172.#222 rax  Kill   Keep  rax  |    |    |    |V10a|    |    |V9 a|    |    |V1 a|
172.#223 rcx  Kill   Keep  rcx  |    |    |    |V10a|    |    |V9 a|    |    |V1 a|
172.#224 rdx  Kill   Keep  rdx  |    |    |    |V10a|    |    |V9 a|    |    |V1 a|
172.#225 r8   Kill   Keep  r8   |    |    |    |V10a|    |    |V9 a|    |    |V1 a|
172.#226 r9   Kill   Keep  r9   |    |    |    |V10a|    |    |V9 a|    |    |V1 a|
172.#227 r10  Kill   Keep  r10  |    |    |    |V10a|    |    |V9 a|    |    |V1 a|
172.#228 r11  Kill   Keep  r11  |    |    |    |V10a|    |    |V9 a|    |    |V1 a|
172.#229 mm0  Kill   Keep  mm0  |    |    |    |V10a|    |    |V9 a|    |    |V1 a|
172.#230 mm1  Kill   Keep  mm1  |    |    |    |V10a|    |    |V9 a|    |    |V1 a|
172.#231 mm2  Kill   Keep  mm2  |    |    |    |V10a|    |    |V9 a|    |    |V1 a|
172.#232 mm3  Kill   Keep  mm3  |    |    |    |V10a|    |    |V9 a|    |    |V1 a|
172.#233 mm4  Kill   Keep  mm4  |    |    |    |V10a|    |    |V9 a|    |    |V1 a|
172.#234 mm5  Kill   Keep  mm5  |    |    |    |V10a|    |    |V9 a|    |    |V1 a|
177.#235 rcx  Fixd   Keep  rcx  |    |    |    |V10a|    |    |V9 a|    |    |V1 a|
177.#236 V9   Use *  Copy  rcx  |    |V9 i|    |V10a|    |    |V9 i|    |    |V1 a|
178.#237 rcx  Fixd   Keep  rcx  |    |    |    |V10a|    |    |    |    |    |V1 a|
178.#238 I52  Def    Alloc rcx  |    |I52a|    |V10a|    |    |    |    |    |V1 a|
181.#239 rdx  Fixd   Keep  rdx  |    |I52a|    |V10a|    |    |    |    |    |V1 a|
181.#240 V10  Use *  Copy  rdx  |    |I52a|V10i|V10i|    |    |    |    |    |V1 a|
182.#241 rdx  Fixd   Keep  rdx  |    |I52a|    |    |    |    |    |    |    |V1 a|
182.#242 I53  Def    Alloc rdx  |    |I52a|I53a|    |    |    |    |    |    |V1 a|
185.#243 r8   Fixd   Keep  r8   |    |I52a|I53a|    |    |    |    |    |    |V1 a|
185.#244 V1   Use *  Copy  r8   |    |I52a|I53a|    |    |    |    |V1 i|    |V1 i|
186.#245 r8   Fixd   Keep  r8   |    |I52a|I53a|    |    |    |    |    |    |    |
186.#246 I54  Def    Alloc r8   |    |I52a|I53a|    |    |    |    |I54a|    |    |
188.#247 C55  Def    Alloc r9   |    |I52a|I53a|    |    |    |    |I54a|C55a|    |
189.#248 r9   Fixd   Keep  r9   |    |I52a|I53a|    |    |    |    |I54a|C55a|    |
189.#249 C55  Use *  Keep  r9   |    |I52a|I53a|    |    |    |    |I54a|C55i|    |
190.#250 r9   Fixd   Keep  r9   |    |I52a|I53a|    |    |    |    |I54a|    |    |
190.#251 I56  Def    Alloc r9   |    |I52a|I53a|    |    |    |    |I54a|I56a|    |
191.#252 rcx  Fixd   Keep  rcx  |    |I52a|I53a|    |    |    |    |I54a|I56a|    |
191.#253 I52  Use *  Keep  rcx  |    |I52i|I53a|    |    |    |    |I54a|I56a|    |
191.#254 rdx  Fixd   Keep  rdx  |    |    |I53a|    |    |    |    |I54a|I56a|    |
191.#255 I53  Use *  Keep  rdx  |    |    |I53i|    |    |    |    |I54a|I56a|    |
191.#256 r8   Fixd   Keep  r8   |    |    |    |    |    |    |    |I54a|I56a|    |
191.#257 I54  Use *  Keep  r8   |    |    |    |    |    |    |    |I54i|I56a|    |
191.#258 r9   Fixd   Keep  r9   |    |    |    |    |    |    |    |    |I56a|    |
191.#259 I56  Use *  Keep  r9   |    |    |    |    |    |    |    |    |I56i|    |
192.#260 rax  Kill   Keep  rax  |    |    |    |    |    |    |    |    |    |    |
192.#261 rcx  Kill   Keep  rcx  |    |    |    |    |    |    |    |    |    |    |
192.#262 rdx  Kill   Keep  rdx  |    |    |    |    |    |    |    |    |    |    |
192.#263 r8   Kill   Keep  r8   |    |    |    |    |    |    |    |    |    |    |
192.#264 r9   Kill   Keep  r9   |    |    |    |    |    |    |    |    |    |    |
192.#265 r10  Kill   Keep  r10  |    |    |    |    |    |    |    |    |    |    |
192.#266 r11  Kill   Keep  r11  |    |    |    |    |    |    |    |    |    |    |
196.#267 C57  Def    Alloc rcx  |    |C57a|    |    |    |    |    |    |    |    |
197.#268 C57  Use *  Keep  rcx  |    |C57i|    |    |    |    |    |    |    |    |
198.#269 I58  Def    Alloc rcx  |    |I58a|    |    |    |    |    |    |    |    |
199.#270 rcx  Fixd   Keep  rcx  |    |I58a|    |    |    |    |    |    |    |    |
199.#271 I58  Use *  Keep  rcx  |    |I58i|    |    |    |    |    |    |    |    |
200.#272 rcx  Fixd   Keep  rcx  |    |    |    |    |    |    |    |    |    |    |
200.#273 I59  Def    Alloc rcx  |    |I59a|    |    |    |    |    |    |    |    |
201.#274 rcx  Fixd   Keep  rcx  |    |I59a|    |    |    |    |    |    |    |    |
201.#275 I59  Use *  Keep  rcx  |    |I59i|    |    |    |    |    |    |    |    |
202.#276 rax  Kill   Keep  rax  |    |    |    |    |    |    |    |    |    |    |
202.#277 rcx  Kill   Keep  rcx  |    |    |    |    |    |    |    |    |    |    |
202.#278 rdx  Kill   Keep  rdx  |    |    |    |    |    |    |    |    |    |    |
202.#279 r8   Kill   Keep  r8   |    |    |    |    |    |    |    |    |    |    |
202.#280 r9   Kill   Keep  r9   |    |    |    |    |    |    |    |    |    |    |
202.#281 r10  Kill   Keep  r10  |    |    |    |    |    |    |    |    |    |    |
202.#282 r11  Kill   Keep  r11  |    |    |    |    |    |    |    |    |    |    |
--------------------------------+----+----+----+----+----+----+----+----+----+----+
Loc RP#  Name Type  Action Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |r14 |
--------------------------------+----+----+----+----+----+----+----+----+----+----+
203.#283 BB2 PredBB1            |    |    |    |    |    |    |    |    |    |    |
206.#284 rax  Kill   Keep  rax  |    |    |    |    |    |    |    |    |    |    |
206.#285 rcx  Kill   Keep  rcx  |    |    |    |    |    |    |    |    |    |    |
206.#286 rdx  Kill   Keep  rdx  |    |    |    |    |    |    |    |    |    |    |
206.#287 r8   Kill   Keep  r8   |    |    |    |    |    |    |    |    |    |    |
206.#288 r9   Kill   Keep  r9   |    |    |    |    |    |    |    |    |    |    |
206.#289 r10  Kill   Keep  r10  |    |    |    |    |    |    |    |    |    |    |
206.#290 r11  Kill   Keep  r11  |    |    |    |    |    |    |    |    |    |    |

Recording the maximum number of concurrent spills:

----------
LSRA Stats
----------
Total Tracked Vars:  11
Total Reg Cand Vars: 10
Total number of Intervals: 59
Total number of RefPositions: 290
Total Spill Count: 0    Weighted: 0.000000
Total CopyReg Count: 0   Weighted: 0.000000
Total ResolutionMov Count: 0    Weighted: 0.000000
Total number of split edges: 0
Total Number of spill temps created: 0

TUPLE STYLE DUMP WITH REGISTER ASSIGNMENTS
Incoming Parameters:  V00(rcx=>rsi)
BB01 [000..056) (return), preds={} succs={}
=====
  N003.                    IL_OFFSET IL offset: 0x0
  N005. rcx             =  CNS_INT   0x7ffc7e4c17a0
  N007. rcx             =  PUTARG_REG; rcx
  N009. rdx             =  CNS_INT   1
  N011. rdx             =  PUTARG_REG; rdx
* N013. rax             =  CALL help; rcx,rdx
  N015. rcx             =  CNS_INT(h) 0xd1ffab1e static Fseq[_registryLock]
  N017. rcx             =  IND      ; rcx
* N019.                    V05(rcx); rcx
  N021.                    IL_OFFSET IL offset: 0x0
  N023.                    V05(rcx)
  N025.                    NULLCHECK; rcx
  N027.                    IL_OFFSET IL offset: 0x0
  N029.                    V05(rcx*)
  N031. rcx             =  PUTARG_REG; rcx*
  N033. rdx             =  CNS_INT   -1
  N035. rdx             =  PUTARG_REG; rdx
* N037. rax             =  CALL     ; rcx,rdx
  N039.                    IL_OFFSET IL offset: 0x5
  N041.                    CALL     
  N043.                    IL_OFFSET IL offset: 0xa
  N045. rcx             =  CNS_INT(h) 0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer"
  N047. rdi             =  IND      ; rcx
* N049.                    V09(rdi); rdi
  N051.                    V09(rdi)
  N053. rcx             =  PUTARG_REG; rdi
  N055. rdx             =  CNS_INT(h) 0xD1FFAB1E "ArgsFromTheSecondInstance"
  N057. rbx             =  IND      ; rdx
* N059.                    V10(rbx); rbx
  N061.                    V10(rbx)
  N063. rdx             =  PUTARG_REG; rbx
  N065.                    V00(rsi)
  N067. r8              =  PUTARG_REG; rsi
  N069. rax             =  CALL     ; rcx,rdx,r8
* N071.                    V06(rdx); rax
  N073.                    V06(rdx*)
  N075. rdx             =  PUTARG_REG; rdx*
  N077. rcx             =  CNS_INT(h) 0xd1ffab1e class
  N079. rcx             =  PUTARG_REG; rcx
  N081. rax             =  CALL help; rdx,rcx
* N083.                    V04(rbp); rax
  N085.                    V04(rbp)
  N087. STK             =  LEA(b+8) ; rbp
  N089. rdx             =  IND      ; STK
  N091.                    CNS_INT   1
  N093. rdx             =  ADD      ; rdx
  N095. rdx             =  CAST     ; rdx
  N097. rdx             =  PUTARG_REG; rdx
  N099. rcx             =  CNS_INT(h) 0xd1ffab1e class
  N101. rcx             =  PUTARG_REG; rcx
  N103. rax             =  CALL help; rdx,rcx
* N105.                    V01(r14); rax
  N107.                    V00(rsi*)
  N109. rdx             =  PUTARG_REG; rsi*
  N111. rcx             =  CNS_INT   124
  N113. rcx             =  PUTARG_REG; rcx
  N115. rax             =  CALL     ; rdx,rcx
* N117.                    V02(rsi); rax
  N119.                    V04(rbp*)
  N121. rcx             =  PUTARG_REG; rbp*
  N123.                    V01(r14)
  N125. rdx             =  PUTARG_REG; r14
  N127. r8              =  CNS_INT   0
  N129. r8              =  PUTARG_REG; r8
  N131.                    CNS_INT(h) 0xd1ffab1e ftn
  N133.                    IND      
  N135.                    CALL     ; rcx,rdx,r8
  N137.                    IL_OFFSET IL offset: 0x38
  N139.                    V01(r14)
  N141. STK             =  LEA(b+8) ; r14
  N143. rdx             =  IND      ; STK
* N145.                    V11(rdx); rdx
  N147.                    V11(rdx)
  N149.                    CNS_INT   -1
  N151. rcx             =  ADD      ; rdx
* N153.                    V08(rcx); rcx
  N155.                    V08(rcx)
  N157.                    V11(rdx*)
  N159.                    ARR_BOUNDS_CHECK_Rng; rcx,rdx*
  N161.                    V08(rcx*)
  N163. rdx             =  CAST     ; rcx*
  N165.                    V01(r14)
  N167. rcx             =  LEA(b+(i*8)+16); r14,rdx
  N169.                    V02(rsi*)
  N171.                    STOREIND ; rcx,rsi*
  N173.                    IL_OFFSET IL offset: 0x40
  N175.                    V09(rdi*)
  N177. rcx             =  PUTARG_REG; rdi*
  N179.                    V10(rbx*)
  N181. rdx             =  PUTARG_REG; rbx*
  N183.                    V01(r14*)
  N185. r8              =  PUTARG_REG; r14*
  N187. r9              =  CNS_INT   0
  N189. r9              =  PUTARG_REG; r9
  N191.                    CALL     ; rcx,rdx,r8,r9
  N193.                    IL_OFFSET IL offset: 0x50
  N195. rcx             =  CNS_INT(h) 0xd1ffab1e static Fseq[_registryLock]
  N197. rcx             =  IND      ; rcx
  N199. rcx             =  PUTARG_REG; rcx
  N201.                    CALL nullcheck; rcx
Var=Reg end of BB01: none

BB02 [???..???) (throw), preds={} succs={}
=====
Predecessor for variable locations: BB01
Var=Reg beg of BB02: none
  N205.                    CALL help
Var=Reg end of BB02: none




*************** Finishing PHASE Linear scan register alloc
*************** In genGenerateCode()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..056)        (return)                     i label target jmp hascall gcsafe idxlen new[] nullcheck LIR 
BB02 [0006]  0                             0       [???..???)        (throw )                     keep i internal rare label target LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

*************** Starting PHASE Generate code
*************** In fgDebugCheckBBlist
Finalizing stack frame
Recording Var Locations at start of BB01
  V00(rsi)
Modified regs: [rax rcx rdx rbx rbp rsi rdi r8-r11 r14 mm0-mm5]
Callee-saved registers pushed: 5 [rbx rbp rsi rdi r14]
*************** In lvaAssignFrameOffsets(FINAL_FRAME_LAYOUT)
Assign V03 OutArgs, size=32, stkOffs=-0x50
--- delta bump 8 for RA
--- delta bump 72 for RSP frame
--- virtual stack offset to actual stack offset delta is 80
-- V00 was 0, now 80
-- V03 was -80, now 0
; Final local variable assignments
;
;  V00 arg0         [V00,T00] (  4,  4   )     ref  ->  rsi         class-hnd
;  V01 loc0         [V01,T03] (  5,  5   )     ref  ->  r14         class-hnd exact
;  V02 loc1         [V02,T09] (  2,  2   )     ref  ->  rsi         class-hnd
;  V03 OutArgs      [V03    ] (  1,  1   )  lclBlk (32) [rsp+0x00]   "OutgoingArgSpace"
;  V04 tmp1         [V04,T01] (  3,  6   )     ref  ->  rbp         class-hnd "dup spill"
;  V05 tmp2         [V05,T02] (  3,  6   )     ref  ->  rcx         class-hnd "Inlining Arg"
;  V06 tmp3         [V06,T04] (  2,  4   )     ref  ->  rdx         "argument with side effect"
;* V07 cse0         [V07,T10] (  0,  0   )    long  ->  zero-ref    "CSE - aggressive"
;  V08 cse1         [V08,T07] (  3,  3   )     int  ->  rcx         "CSE - aggressive"
;  V09 cse2         [V09,T05] (  3,  3   )     ref  ->  rdi         "CSE - aggressive"
;  V10 cse3         [V10,T06] (  3,  3   )     ref  ->  rbx         "CSE - aggressive"
;  V11 cse4         [V11,T08] (  3,  3   )     int  ->  rdx         "CSE - aggressive"
;
; Lcl frame size = 32
Setting stack level from -572662307 to 0

=============== Generating BB01 [000..056) (return), preds={} succs={} flags=0x00000002.203f0420: i label target jmp hascall gcsafe idxlen new[] nullcheck LIR 
BB01 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(0)={   }

Recording Var Locations at start of BB01
  V00(rsi)
Change life 0000000000000000 {} -> 0000000000000001 {V00}
							V00 in reg rsi is becoming live  [------]
							Live regs: 00000000 {} => 00000040 {rsi}
							Live regs: (unchanged) 00000040 {rsi}
							GC regs: (unchanged) 00000040 {rsi}
							Byref regs: (unchanged) 00000000 {}

      L_M21721_BB01:
Label: IG02, GCvars=0000000000000000 {}, gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}

Scope info: begin block BB01, IL range [000..056)
Scope info: open scopes =
   0 (V00 arg0) [000..056)
Added IP mapping: 0x0000 STACK_EMPTY (G_M21721_IG02,ins#0,ofs#0) label
Generating: N003 (???,???) [000155] ------------                 IL_OFFSET void   IL offset: 0x0 REG NA
Generating: N005 (  2, 10) [000044] ------------        t44 =    CNS_INT   long   0x7ffc7e4c17a0 REG rcx $140
IN0001:        mov      rcx, 0xD1FFAB1E
                                                              /--*  t44    long   
Generating: N007 (???,???) [000169] ------------       t169 = *  PUTARG_REG long   REG rcx
Generating: N009 (  1,  1) [000045] ------------        t45 =    CNS_INT   int    1 REG rdx $42
IN0002:        mov      edx, 1
                                                              /--*  t45    int    
Generating: N011 (???,???) [000170] ------------       t170 = *  PUTARG_REG int    REG rdx
                                                              /--*  t169   long   arg0 in rcx
                                                              +--*  t170   int    arg1 in rdx
Generating: N013 ( 17, 18) [000046] H-CXG-------        t46 = *  CALL help long   HELPER.CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE REG rax $201
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}
IN0003:        call     CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
Generating: N015 (  2, 10) [000083] I-----------        t83 =    CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock] REG rcx $240
IN0004:        mov      rcx, 0xD1FFAB1E
                                                              /--*  t83    long   
Generating: N017 (  4, 12) [000042] n---G-------        t42 = *  IND       ref    REG rcx <l:$280, c:$2c0>
IN0005:        mov      rcx, gword ptr [rcx]
							GC regs: 00000040 {rsi} => 00000042 {rcx rsi}
                                                              /--*  t42    ref    
Generating: N019 ( 22, 31) [000059] DA-XG-------              *  STORE_LCL_VAR ref    V05 tmp2         d:2 rcx REG rcx
							GC regs: 00000042 {rcx rsi} => 00000040 {rsi}
							V05 in reg rcx is becoming live  [000059]
							Live regs: 00000040 {rsi} => 00000042 {rcx rsi}
							Live vars: {V00} => {V00 V05}
							GC regs: 00000040 {rsi} => 00000042 {rcx rsi}
genIPmappingAdd: ignoring duplicate IL offset 0x0
Generating: N021 (???,???) [000156] ------------                 IL_OFFSET void   IL offset: 0x0 REG NA
Generating: N023 (  1,  1) [000056] ------------        t56 =    LCL_VAR   ref    V05 tmp2         u:2 rcx REG rcx <l:$280, c:$2c0>
                                                              /--*  t56    ref    
Generating: N025 (  2,  2) [000057] ---X--------              *  NULLCHECK int    REG NA <l:$1c6, c:$1c5>
IN0006:        cmp      dword ptr [rcx], ecx
genIPmappingAdd: ignoring duplicate IL offset 0x0
Generating: N027 (???,???) [000157] ------------                 IL_OFFSET void   IL offset: 0x0 REG NA
Generating: N029 (  1,  1) [000053] ------------        t53 =    LCL_VAR   ref    V05 tmp2         u:2 rcx (last use) REG rcx <l:$280, c:$2c0>
                                                              /--*  t53    ref    
Generating: N031 (???,???) [000171] ------------       t171 = *  PUTARG_REG ref    REG rcx
							V05 in reg rcx is becoming dead  [000053]
							Live regs: 00000042 {rcx rsi} => 00000040 {rsi}
							Live vars: {V00 V05} => {V00}
							GC regs: 00000042 {rcx rsi} => 00000040 {rsi}
							GC regs: 00000040 {rsi} => 00000042 {rcx rsi}
Generating: N033 (  1,  1) [000054] ------------        t54 =    CNS_INT   int    -1 REG rdx $41
IN0007:        mov      edx, -1
                                                              /--*  t54    int    
Generating: N035 (???,???) [000172] ------------       t172 = *  PUTARG_REG int    REG rdx
                                                              /--*  t171   ref    this in rcx
                                                              +--*  t172   int    arg1 in rdx
Generating: N037 ( 16, 10) [000055] --CXG-------        t55 = *  CALL      int    System.Threading.WaitHandle.WaitOneNoCheck REG rax $102
							GC regs: 00000042 {rcx rsi} => 00000040 {rsi}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}
IN0008:        call     System.Threading.WaitHandle:WaitOneNoCheck(int):bool:this
Added IP mapping: 0x0005 STACK_EMPTY (G_M21721_IG02,ins#8,ofs#45)
Generating: N039 (???,???) [000158] ------------                 IL_OFFSET void   IL offset: 0x5 REG NA
Generating: N041 ( 14,  5) [000001] --CXG-------                 CALL      void   HotkeyedMusicPlayer.ArgsTransport.EnsureRootKeyExists REG NA $VN.Void
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}
IN0009:        call     HotkeyedMusicPlayer.ArgsTransport:EnsureRootKeyExists()
Added IP mapping: 0x000A STACK_EMPTY (G_M21721_IG02,ins#9,ofs#50)
Generating: N043 (???,???) [000159] ------------                 IL_OFFSET void   IL offset: 0xa REG NA
Generating: N045 (  2, 10) [000086] H-----------        t86 =    CNS_INT(h) long   0xD1FFAB1E "HKEY_CURRENT_USER\Software\Accretion\HotkeyedMusicPlayer" REG rcx $241
IN000a:        mov      rcx, 0xD1FFAB1E
                                                              /--*  t86    long   
Generating: N047 (  4, 12) [000087] #---G-------        t87 = *  IND       ref    REG rdi $1c7
IN000b:        mov      rdi, gword ptr [rcx]
							GC regs: 00000040 {rsi} => 000000C0 {rsi rdi}
                                                              /--*  t87    ref    
Generating: N049 (  4, 12) [000141] DA--G-------              *  STORE_LCL_VAR ref    V09 cse2         d:1 rdi REG rdi
							GC regs: 000000C0 {rsi rdi} => 00000040 {rsi}
							V09 in reg rdi is becoming live  [000141]
							Live regs: 00000040 {rsi} => 000000C0 {rsi rdi}
							Live vars: {V00} => {V00 V09}
							GC regs: 00000040 {rsi} => 000000C0 {rsi rdi}
Generating: N051 (  1,  1) [000142] ------------       t142 =    LCL_VAR   ref    V09 cse2         u:1 rdi REG rdi $1c7
                                                              /--*  t142   ref    
Generating: N053 (???,???) [000173] ------------       t173 = *  PUTARG_REG ref    REG rcx
IN000c:        mov      rcx, rdi
							GC regs: 000000C0 {rsi rdi} => 000000C2 {rcx rsi rdi}
Generating: N055 (  2, 10) [000088] H-----------        t88 =    CNS_INT(h) long   0xD1FFAB1E "ArgsFromTheSecondInstance" REG rdx $242
IN000d:        mov      rdx, 0xD1FFAB1E
                                                              /--*  t88    long   
Generating: N057 (  4, 12) [000089] #---G-------        t89 = *  IND       ref    REG rbx $1c8
IN000e:        mov      rbx, gword ptr [rdx]
							GC regs: 000000C2 {rcx rsi rdi} => 000000CA {rcx rbx rsi rdi}
                                                              /--*  t89    ref    
Generating: N059 (  4, 12) [000146] DA--G-------              *  STORE_LCL_VAR ref    V10 cse3         d:1 rbx REG rbx
							GC regs: 000000CA {rcx rbx rsi rdi} => 000000C2 {rcx rsi rdi}
							V10 in reg rbx is becoming live  [000146]
							Live regs: 000000C0 {rsi rdi} => 000000C8 {rbx rsi rdi}
							Live vars: {V00 V09} => {V00 V09 V10}
							GC regs: 000000C2 {rcx rsi rdi} => 000000CA {rcx rbx rsi rdi}
Generating: N061 (  1,  1) [000147] ------------       t147 =    LCL_VAR   ref    V10 cse3         u:1 rbx REG rbx $1c8
                                                              /--*  t147   ref    
Generating: N063 (???,???) [000174] ------------       t174 = *  PUTARG_REG ref    REG rdx
IN000f:        mov      rdx, rbx
							GC regs: 000000CA {rcx rbx rsi rdi} => 000000CE {rcx rdx rbx rsi rdi}
Generating: N065 (  1,  1) [000004] ------------         t4 =    LCL_VAR   ref    V00 arg0         u:1 rsi REG rsi $80
                                                              /--*  t4     ref    
Generating: N067 (???,???) [000175] ------------       t175 = *  PUTARG_REG ref    REG r8
IN0010:        mov      r8, rsi
							GC regs: 000000CE {rcx rdx rbx rsi rdi} => 000001CE {rcx rdx rbx rsi rdi r8}
                                                              /--*  t173   ref    arg0 in rcx
                                                              +--*  t174   ref    arg1 in rdx
                                                              +--*  t175   ref    arg2 in r8
Generating: N069 ( 25, 35) [000005] --CXG-------         t5 = *  CALL      ref    Microsoft.Win32.Registry.GetValue REG rax $2c8
							GC regs: 000001CE {rcx rdx rbx rsi rdi r8} => 000001CC {rdx rbx rsi rdi r8}
							GC regs: 000001CC {rdx rbx rsi rdi r8} => 000001C8 {rbx rsi rdi r8}
							GC regs: 000001C8 {rbx rsi rdi r8} => 000000C8 {rbx rsi rdi}
							Call: GCvars=0000000000000000 {}, gcrefRegs=000000C8 {rbx rsi rdi}, byrefRegs=00000000 {}
IN0011:        call     Microsoft.Win32.Registry:GetValue(System.String,System.String,System.Object):System.Object
							GC regs: 000000C8 {rbx rsi rdi} => 000000C9 {rax rbx rsi rdi}
                                                              /--*  t5     ref    
Generating: N071 ( 25, 35) [000094] DA-XG-----L-              *  STORE_LCL_VAR ref    V06 tmp3         d:2 rdx REG rdx
							GC regs: 000000C9 {rax rbx rsi rdi} => 000000C8 {rbx rsi rdi}
IN0012:        mov      rdx, rax
							V06 in reg rdx is becoming live  [000094]
							Live regs: 000000C8 {rbx rsi rdi} => 000000CC {rdx rbx rsi rdi}
							Live vars: {V00 V09 V10} => {V00 V06 V09 V10}
							GC regs: 000000C8 {rbx rsi rdi} => 000000CC {rdx rbx rsi rdi}
Generating: N073 (  1,  1) [000095] ------------        t95 =    LCL_VAR   ref    V06 tmp3         u:2 rdx (last use) REG rdx $2c8
                                                              /--*  t95    ref    
Generating: N075 (???,???) [000176] ------------       t176 = *  PUTARG_REG ref    REG rdx
							V06 in reg rdx is becoming dead  [000095]
							Live regs: 000000CC {rdx rbx rsi rdi} => 000000C8 {rbx rsi rdi}
							Live vars: {V00 V06 V09 V10} => {V00 V09 V10}
							GC regs: 000000CC {rdx rbx rsi rdi} => 000000C8 {rbx rsi rdi}
							GC regs: 000000C8 {rbx rsi rdi} => 000000CC {rdx rbx rsi rdi}
Generating: N077 (  2, 10) [000006] H------N----         t6 =    CNS_INT(h) long   0xd1ffab1e class REG rcx $243
IN0013:        mov      rcx, 0xD1FFAB1E
                                                              /--*  t6     long   
Generating: N079 (???,???) [000177] ------------       t177 = *  PUTARG_REG long   REG rcx
                                                              /--*  t176   ref    arg1 in rdx
                                                              +--*  t177   long   arg0 in rcx
Generating: N081 ( 45, 53) [000007] --CXG-------         t7 = *  CALL help ref    HELPER.CORINFO_HELP_CHKCASTARRAY REG rax $1cd
							GC regs: 000000CC {rdx rbx rsi rdi} => 000000C8 {rbx rsi rdi}
							Call: GCvars=0000000000000000 {}, gcrefRegs=000000C8 {rbx rsi rdi}, byrefRegs=00000000 {}
IN0014:        call     CORINFO_HELP_CHKCASTARRAY
							GC regs: 000000C8 {rbx rsi rdi} => 000000C9 {rax rbx rsi rdi}
                                                              /--*  t7     ref    
Generating: N083 ( 45, 53) [000009] DA-XG-------              *  STORE_LCL_VAR ref    V04 tmp1         d:2 rbp REG rbp
							GC regs: 000000C9 {rax rbx rsi rdi} => 000000C8 {rbx rsi rdi}
IN0015:        mov      rbp, rax
							V04 in reg rbp is becoming live  [000009]
							Live regs: 000000C8 {rbx rsi rdi} => 000000E8 {rbx rbp rsi rdi}
							Live vars: {V00 V09 V10} => {V00 V04 V09 V10}
							GC regs: 000000C8 {rbx rsi rdi} => 000000E8 {rbx rbp rsi rdi}
Generating: N085 (  1,  1) [000011] ------------        t11 =    LCL_VAR   ref    V04 tmp1         u:2 rbp REG rbp $2c8
                                                              /--*  t11    ref    
Generating: N087 (???,???) [000165] -c----------       t165 = *  LEA(b+8)  ref    REG NA
                                                              /--*  t165   ref    
Generating: N089 (  3,  3) [000012] ---X--------        t12 = *  IND       int    REG rdx $340
IN0016:        mov      edx, dword ptr [rbp+8]
Generating: N091 (  1,  1) [000013] -c----------        t13 =    CNS_INT   int    1 REG NA $42
                                                              /--*  t12    int    
                                                              +--*  t13    int    
Generating: N093 (  5,  5) [000014] ---X--------        t14 = *  ADD       int    REG rdx $342
IN0017:        inc      edx
                                                              /--*  t14    int    
Generating: N095 (  6,  7) [000016] ---X--------        t16 = *  CAST      long <- int REG rdx $203
IN0018:        movsxd   rdx, edx
                                                              /--*  t16    long   
Generating: N097 (???,???) [000178] ---X--------       t178 = *  PUTARG_REG long   REG rdx
Generating: N099 (  2, 10) [000015] H-----------        t15 =    CNS_INT(h) long   0xd1ffab1e class REG rcx $243
IN0019:        mov      rcx, 0xD1FFAB1E
                                                              /--*  t15    long   
Generating: N101 (???,???) [000179] ------------       t179 = *  PUTARG_REG long   REG rcx
                                                              /--*  t178   long   arg1 in rdx
                                                              +--*  t179   long   arg0 in rcx
Generating: N103 ( 22, 24) [000017] --CXG-------        t17 = *  CALL help ref    HELPER.CORINFO_HELP_NEWARR_1_OBJ REG rax $1d1
							Call: GCvars=0000000000000000 {}, gcrefRegs=000000E8 {rbx rbp rsi rdi}, byrefRegs=00000000 {}
IN001a:        call     CORINFO_HELP_NEWARR_1_OBJ
							GC regs: 000000E8 {rbx rbp rsi rdi} => 000000E9 {rax rbx rbp rsi rdi}
                                                              /--*  t17    ref    
Generating: N105 ( 22, 24) [000019] DA-XG-------              *  STORE_LCL_VAR ref    V01 loc0         d:2 r14 REG r14
							GC regs: 000000E9 {rax rbx rbp rsi rdi} => 000000E8 {rbx rbp rsi rdi}
IN001b:        mov      r14, rax
							V01 in reg r14 is becoming live  [000019]
							Live regs: 000000E8 {rbx rbp rsi rdi} => 000040E8 {rbx rbp rsi rdi r14}
							Live vars: {V00 V04 V09 V10} => {V00 V01 V04 V09 V10}
							GC regs: 000000E8 {rbx rbp rsi rdi} => 000040E8 {rbx rbp rsi rdi r14}
Generating: N107 (  1,  1) [000020] ------------        t20 =    LCL_VAR   ref    V00 arg0         u:1 rsi (last use) REG rsi $80
                                                              /--*  t20    ref    
Generating: N109 (???,???) [000180] ------------       t180 = *  PUTARG_REG ref    REG rdx
							V00 in reg rsi is becoming dead  [000020]
							Live regs: 000040E8 {rbx rbp rsi rdi r14} => 000040A8 {rbx rbp rdi r14}
							Live vars: {V00 V01 V04 V09 V10} => {V01 V04 V09 V10}
							GC regs: 000040E8 {rbx rbp rsi rdi r14} => 000040A8 {rbx rbp rdi r14}
IN001c:        mov      rdx, rsi
							GC regs: 000040A8 {rbx rbp rdi r14} => 000040AC {rdx rbx rbp rdi r14}
Generating: N111 (  1,  1) [000066] ------------        t66 =    CNS_INT   int    124 REG rcx $45
IN001d:        mov      ecx, 124
                                                              /--*  t66    int    
Generating: N113 (???,???) [000181] ------------       t181 = *  PUTARG_REG int    REG rcx
                                                              /--*  t180   ref    arg1 in rdx
                                                              +--*  t181   int    arg0 in rcx
Generating: N115 ( 16,  9) [000062] --CXG-------        t62 = *  CALL      ref    System.String.Join REG rax $2cf
							GC regs: 000040AC {rdx rbx rbp rdi r14} => 000040A8 {rbx rbp rdi r14}
							Call: GCvars=0000000000000000 {}, gcrefRegs=000040A8 {rbx rbp rdi r14}, byrefRegs=00000000 {}
IN001e:        call     System.String:Join(ushort,System.String[]):System.String
							GC regs: 000040A8 {rbx rbp rdi r14} => 000040A9 {rax rbx rbp rdi r14}
                                                              /--*  t62    ref    
Generating: N117 ( 20, 12) [000024] DA-XG-------              *  STORE_LCL_VAR ref    V02 loc1         d:2 rsi REG rsi
							GC regs: 000040A9 {rax rbx rbp rdi r14} => 000040A8 {rbx rbp rdi r14}
IN001f:        mov      rsi, rax
							V02 in reg rsi is becoming live  [000024]
							Live regs: 000040A8 {rbx rbp rdi r14} => 000040E8 {rbx rbp rsi rdi r14}
							Live vars: {V01 V04 V09 V10} => {V01 V02 V04 V09 V10}
							GC regs: 000040A8 {rbx rbp rdi r14} => 000040E8 {rbx rbp rsi rdi r14}
Generating: N119 (  1,  1) [000010] ------------        t10 =    LCL_VAR   ref    V04 tmp1         u:2 rbp (last use) REG rbp $2c8
                                                              /--*  t10    ref    
Generating: N121 (???,???) [000182] ------------       t182 = *  PUTARG_REG ref    REG rcx
							V04 in reg rbp is becoming dead  [000010]
							Live regs: 000040E8 {rbx rbp rsi rdi r14} => 000040C8 {rbx rsi rdi r14}
							Live vars: {V01 V02 V04 V09 V10} => {V01 V02 V09 V10}
							GC regs: 000040E8 {rbx rbp rsi rdi r14} => 000040C8 {rbx rsi rdi r14}
IN0020:        mov      rcx, rbp
							GC regs: 000040C8 {rbx rsi rdi r14} => 000040CA {rcx rbx rsi rdi r14}
Generating: N123 (  1,  1) [000025] ------------        t25 =    LCL_VAR   ref    V01 loc0         u:2 r14 REG r14 $281
                                                              /--*  t25    ref    
Generating: N125 (???,???) [000183] ------------       t183 = *  PUTARG_REG ref    REG rdx
IN0021:        mov      rdx, r14
							GC regs: 000040CA {rcx rbx rsi rdi r14} => 000040CE {rcx rdx rbx rsi rdi r14}
Generating: N127 (  1,  1) [000026] ------------        t26 =    CNS_INT   int    0 REG r8 $40
IN0022:        xor      r8d, r8d
                                                              /--*  t26    int    
Generating: N129 (???,???) [000184] ------------       t184 = *  PUTARG_REG int    REG r8
Generating: N131 (  2, 10) [000185] Hc----------       t185 =    CNS_INT(h) long   0xd1ffab1e ftn REG NA
                                                              /--*  t185   long   
Generating: N133 (  4, 12) [000186] -c----------       t186 = *  IND       long   REG NA
                                                              /--*  t182   ref    this in rcx
                                                              +--*  t183   ref    arg1 in rdx
                                                              +--*  t184   int    arg2 in r8
                                                              +--*  t186   long   control expr
Generating: N135 ( 17, 12) [000027] --CXG-------              *  CALL      void   System.Array.CopyTo REG NA $VN.Void
							GC regs: 000040CE {rcx rdx rbx rsi rdi r14} => 000040CC {rdx rbx rsi rdi r14}
							GC regs: 000040CC {rdx rbx rsi rdi r14} => 000040C8 {rbx rsi rdi r14}
							Call: GCvars=0000000000000000 {}, gcrefRegs=000040C8 {rbx rsi rdi r14}, byrefRegs=00000000 {}
IN0023:        call     [System.Array:CopyTo(System.Array,int):this]
Added IP mapping: 0x0038 STACK_EMPTY (G_M21721_IG02,ins#35,ofs#168)
Generating: N137 (???,???) [000160] ------------                 IL_OFFSET void   IL offset: 0x38 REG NA
Generating: N139 (  1,  1) [000029] ------------        t29 =    LCL_VAR   ref    V01 loc0         u:2 r14 REG r14 $281
                                                              /--*  t29    ref    
Generating: N141 (???,???) [000167] -c----------       t167 = *  LEA(b+8)  ref    REG NA
                                                              /--*  t167   ref    
Generating: N143 (  3,  3) [000030] ---X--------        t30 = *  IND       int    REG rdx $343
IN0024:        mov      edx, dword ptr [r14+8]
                                                              /--*  t30    int    
Generating: N145 (  3,  3) [000151] DA-X--------              *  STORE_LCL_VAR int    V11 cse4         d:1 rdx REG rdx
							V11 in reg rdx is becoming live  [000151]
							Live regs: 000040C8 {rbx rsi rdi r14} => 000040CC {rdx rbx rsi rdi r14}
							Live vars: {V01 V02 V09 V10} => {V01 V02 V09 V10 V11}
Generating: N147 (  1,  1) [000152] ------------       t152 =    LCL_VAR   int    V11 cse4         u:1 rdx REG rdx $343
Generating: N149 (  1,  1) [000031] -c----------        t31 =    CNS_INT   int    -1 REG NA $41
                                                              /--*  t152   int    
                                                              +--*  t31    int    
Generating: N151 (  6,  6) [000032] ---X--------        t32 = *  ADD       int    REG rcx $345
IN0025:        lea      ecx, [rdx-1]
                                                              /--*  t32    int    
Generating: N153 (  6,  6) [000136] DA-X--------              *  STORE_LCL_VAR int    V08 cse1         d:1 rcx REG rcx
							V08 in reg rcx is becoming live  [000136]
							Live regs: 000040CC {rdx rbx rsi rdi r14} => 000040CE {rcx rdx rbx rsi rdi r14}
							Live vars: {V01 V02 V09 V10 V11} => {V01 V02 V08 V09 V10 V11}
Generating: N155 (  1,  1) [000137] ------------       t137 =    LCL_VAR   int    V08 cse1         u:1 rcx REG rcx $345
Generating: N157 (  1,  1) [000154] ------------       t154 =    LCL_VAR   int    V11 cse4         u:1 rdx (last use) REG rdx $301
                                                              /--*  t137   int    
                                                              +--*  t154   int    
Generating: N159 ( 12, 15) [000110] ---X--------              *  ARR_BOUNDS_CHECK_Rng void   REG NA $1d7
							V11 in reg rdx is becoming dead  [000154]
							Live regs: 000040CE {rcx rdx rbx rsi rdi r14} => 000040CA {rcx rbx rsi rdi r14}
							Live vars: {V01 V02 V08 V09 V10 V11} => {V01 V02 V08 V09 V10}
IN0026:        cmp      ecx, edx
IN0027:        jae      L_M21721_BB02
Generating: N161 (  1,  1) [000139] ------------       t139 =    LCL_VAR   int    V08 cse1         u:1 rcx (last use) REG rcx $344
                                                              /--*  t139   int    
Generating: N163 (  2,  3) [000111] ------------       t111 = *  CAST      long <- int REG rdx $205
							V08 in reg rcx is becoming dead  [000139]
							Live regs: 000040CA {rcx rbx rsi rdi r14} => 000040C8 {rbx rsi rdi r14}
							Live vars: {V01 V02 V08 V09 V10} => {V01 V02 V09 V10}
IN0028:        movsxd   rdx, ecx
Generating: N165 (  1,  1) [000104] ------------       t104 =    LCL_VAR   ref    V01 loc0         u:2 r14 REG r14 $281
                                                              /--*  t104   ref    
                                                              +--*  t111   long   
Generating: N167 (  5,  6) [000116] ------------       t116 = *  LEA(b+(i*8)+16) byref  REG rcx
IN0029:        lea      rcx, bword ptr [r14+8*rdx+16]
							Byref regs: 00000000 {} => 00000002 {rcx}
Generating: N169 (  3,  2) [000033] ------------        t33 =    LCL_VAR   ref    V02 loc1         u:2 rsi (last use) REG rsi $2cf
                                                              /--*  t116   byref  
                                                              +--*  t33    ref    
Generating: N171 (???,???) [000161] -A-XG-------              *  STOREIND  ref    REG NA
							Byref regs: 00000002 {rcx} => 00000000 {}
							V02 in reg rsi is becoming dead  [000033]
							Live regs: 000040C8 {rbx rsi rdi r14} => 00004088 {rbx rdi r14}
							Live vars: {V01 V02 V09 V10} => {V01 V09 V10}
							GC regs: 000040C8 {rbx rsi rdi r14} => 00004088 {rbx rdi r14}
IN002a:        mov      rdx, rsi
NoGC Call: savedSet=0000F0E8 {rbx rbp rsi rdi r12 r13 r14 r15}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00004088 {rbx rdi r14}, byrefRegs=00000000 {}
IN002b:        call     CORINFO_HELP_ASSIGN_REF
Added IP mapping: 0x0040 STACK_EMPTY (G_M21721_IG02,ins#43,ofs#199)
Generating: N173 (???,???) [000162] ------------                 IL_OFFSET void   IL offset: 0x40 REG NA
Generating: N175 (  1,  1) [000144] ------------       t144 =    LCL_VAR   ref    V09 cse2         u:1 rdi (last use) REG rdi $1c7
                                                              /--*  t144   ref    
Generating: N177 (???,???) [000187] ------------       t187 = *  PUTARG_REG ref    REG rcx
							V09 in reg rdi is becoming dead  [000144]
							Live regs: 00004088 {rbx rdi r14} => 00004008 {rbx r14}
							Live vars: {V01 V09 V10} => {V01 V10}
							GC regs: 00004088 {rbx rdi r14} => 00004008 {rbx r14}
IN002c:        mov      rcx, rdi
							GC regs: 00004008 {rbx r14} => 0000400A {rcx rbx r14}
Generating: N179 (  1,  1) [000149] ------------       t149 =    LCL_VAR   ref    V10 cse3         u:1 rbx (last use) REG rbx $1c8
                                                              /--*  t149   ref    
Generating: N181 (???,???) [000188] ------------       t188 = *  PUTARG_REG ref    REG rdx
							V10 in reg rbx is becoming dead  [000149]
							Live regs: 00004008 {rbx r14} => 00004000 {r14}
							Live vars: {V01 V10} => {V01}
							GC regs: 0000400A {rcx rbx r14} => 00004002 {rcx r14}
IN002d:        mov      rdx, rbx
							GC regs: 00004002 {rcx r14} => 00004006 {rcx rdx r14}
Generating: N183 (  1,  1) [000038] ------------        t38 =    LCL_VAR   ref    V01 loc0         u:2 r14 (last use) REG r14 $281
                                                              /--*  t38    ref    
Generating: N185 (???,???) [000189] ------------       t189 = *  PUTARG_REG ref    REG r8
							V01 in reg r14 is becoming dead  [000038]
							Live regs: 00004000 {r14} => 00000000 {}
							Live vars: {V01} => {}
							GC regs: 00004006 {rcx rdx r14} => 00000006 {rcx rdx}
IN002e:        mov      r8, r14
							GC regs: 00000006 {rcx rdx} => 00000106 {rcx rdx r8}
Generating: N187 (  1,  1) [000070] ------------        t70 =    CNS_INT   int    0 REG r9 $40
IN002f:        xor      r9d, r9d
                                                              /--*  t70    int    
Generating: N189 (???,???) [000190] ------------       t190 = *  PUTARG_REG int    REG r9
                                                              /--*  t187   ref    arg0 in rcx
                                                              +--*  t188   ref    arg1 in rdx
                                                              +--*  t189   ref    arg2 in r8
                                                              +--*  t190   int    arg3 in r9
Generating: N191 ( 18, 13) [000071] --CXG-------              *  CALL      void   Microsoft.Win32.Registry.SetValue REG NA $VN.Void
							GC regs: 00000106 {rcx rdx r8} => 00000104 {rdx r8}
							GC regs: 00000104 {rdx r8} => 00000100 {r8}
							GC regs: 00000100 {r8} => 00000000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN0030:        call     Microsoft.Win32.Registry:SetValue(System.String,System.String,System.Object,int)
Added IP mapping: 0x0050 STACK_EMPTY (G_M21721_IG02,ins#48,ofs#216)
Generating: N193 (???,???) [000163] ------------                 IL_OFFSET void   IL offset: 0x50 REG NA
Generating: N195 (  2, 10) [000128] I-----------       t128 =    CNS_INT(h) long   0xd1ffab1e static Fseq[_registryLock] REG rcx $240
IN0031:        mov      rcx, 0xD1FFAB1E
                                                              /--*  t128   long   
Generating: N197 (  4, 12) [000073] n---G-------        t73 = *  IND       ref    REG rcx <l:$285, c:$2da>
IN0032:        mov      rcx, gword ptr [rcx]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t73    ref    
Generating: N199 (???,???) [000191] ----G-------       t191 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t191   ref    this in rcx
Generating: N201 ( 19, 20) [000079] --CXG-------              *  CALL nullcheck void   System.Threading.Mutex.ReleaseMutex REG NA $VN.Void
							GC regs: 00000002 {rcx} => 00000000 {}
IN0033:        cmp      dword ptr [rcx], ecx

Scope info: end block BB01, IL range [000..056)
Scope info: ending scope, LVnum=0 [000..056)
Scope info: ending scope, LVnum=1 [000..056)
Scope info: ending scope, LVnum=2 [000..056)
Scope info: open scopes =
   <none>
Added IP mapping: EPILOG STACK_EMPTY (G_M21721_IG02,ins#51,ofs#231) label
Reserving epilog IG for block BB01

      G_M21721_IG02:        ; offs=000000H, funclet=00, bbWeight=1   
*************** After placeholder IG creation
G_M21721_IG01:        ; func=00, offs=000000H, size=0000H, gcrefRegs=00000000 {} <-- Prolog IG
G_M21721_IG02:        ; offs=000000H, size=00E7H, gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref
G_M21721_IG03:        ; epilog placeholder, next placeholder=<END>, BB01 [0000], epilog, extend <-- First placeholder <-- Last placeholder
                      ;   PrevGCVars=0000000000000000 {}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000000 {}, InitGCrefRegs=00000040 {rsi}, InitByrefRegs=00000000 {}
G_M21721_IG04:        ; offs=0001E7H, size=0000H, gcrefRegs=00000000 {} <-- Current IG

=============== Generating BB02 [???..???) (throw), preds={} succs={} flags=0x00000000.20031070: keep i internal rare label target LIR 
BB02 IN (0)={}
     OUT(0)={}

Recording Var Locations at start of BB02
  <none>

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M21721_BB02:
Label: IG04, GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB02, IL range [???..???)
Scope info: ignoring block beginning
Added IP mapping: NO_MAP STACK_EMPTY (G_M21721_IG04,ins#0,ofs#0) label
Generating: N205 ( 14,  5) [000168] --CXG-------                 CALL help void   HELPER.CORINFO_HELP_RNGCHKFAIL REG NA
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN0034:        call     CORINFO_HELP_RNGCHKFAIL

Scope info: end block BB02, IL range [???..???)
Scope info: ignoring block end
IN0035:        int3     
Liveness not changing: 0000000000000000 {}

# compCycleEstimate =    217, compSizeEstimate =   207 HotkeyedMusicPlayer.ArgsTransport:EnqueueArgs(System.String[])
; Final local variable assignments
;
;  V00 arg0         [V00,T00] (  4,  4   )     ref  ->  rsi         class-hnd
;  V01 loc0         [V01,T03] (  5,  5   )     ref  ->  r14         class-hnd exact
;  V02 loc1         [V02,T09] (  2,  2   )     ref  ->  rsi         class-hnd
;  V03 OutArgs      [V03    ] (  1,  1   )  lclBlk (32) [rsp+0x00]   "OutgoingArgSpace"
;  V04 tmp1         [V04,T01] (  3,  6   )     ref  ->  rbp         class-hnd "dup spill"
;  V05 tmp2         [V05,T02] (  3,  6   )     ref  ->  rcx         class-hnd "Inlining Arg"
;  V06 tmp3         [V06,T04] (  2,  4   )     ref  ->  rdx         "argument with side effect"
;* V07 cse0         [V07,T10] (  0,  0   )    long  ->  zero-ref    "CSE - aggressive"
;  V08 cse1         [V08,T07] (  3,  3   )     int  ->  rcx         "CSE - aggressive"
;  V09 cse2         [V09,T05] (  3,  3   )     ref  ->  rdi         "CSE - aggressive"
;  V10 cse3         [V10,T06] (  3,  3   )     ref  ->  rbx         "CSE - aggressive"
;  V11 cse4         [V11,T08] (  3,  3   )     int  ->  rdx         "CSE - aggressive"
;
; Lcl frame size = 32
*************** Before prolog / epilog generation
G_M21721_IG01:        ; func=00, offs=000000H, size=0000H, gcrefRegs=00000000 {} <-- Prolog IG
G_M21721_IG02:        ; offs=000000H, size=00E7H, gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref
G_M21721_IG03:        ; epilog placeholder, next placeholder=<END>, BB01 [0000], epilog, extend <-- First placeholder <-- Last placeholder
                      ;   PrevGCVars=0000000000000000 {}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000000 {}, InitGCrefRegs=00000040 {rsi}, InitByrefRegs=00000000 {}
G_M21721_IG04:        ; offs=0001E7H, size=0000H, gcrefRegs=00000000 {} <-- Current IG
Recording Var Locations at start of BB01
  V00(rsi)

      G_M21721_IG04:        ; offs=0001E7H, funclet=00, bbWeight=0   
*************** In genFnProlog()
Added IP mapping to front: PROLOG STACK_EMPTY (G_M21721_IG01,ins#0,ofs#0) label

__prolog:
IN0036:        push     r14
IN0037:        push     rdi
IN0038:        push     rsi
IN0039:        push     rbp
IN003a:        push     rbx
IN003b:        sub      rsp, 32
*************** In genFnPrologCalleeRegArgs() for int regs
IN003c:        mov      rsi, rcx
*************** In genEnregisterIncomingStackArgs()


      G_M21721_IG01:        ; offs=000000H, funclet=00, bbWeight=1   
*************** In genFnEpilog()

__epilog:
gcVarPtrSetCur=0000000000000000 {}, gcRegGCrefSetCur=00000040 {rsi}, gcRegByrefSetCur=00000000 {}
IN003d:        add      rsp, 32
IN003e:        pop      rbx
IN003f:        pop      rbp
IN0040:        pop      rsi
IN0041:        pop      rdi
IN0042:        pop      r14
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}
IN0043:        jmp      System.Threading.Mutex:ReleaseMutex():this

      G_M21721_IG03:        ; offs=0000E7H, funclet=00, bbWeight=1   
0 prologs, 1 epilogs, 0 funclet prologs, 0 funclet epilogs
*************** After prolog / epilog generation
G_M21721_IG01:        ; func=00, offs=000000H, size=000DH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref, nogc <-- Prolog IG
G_M21721_IG02:        ; offs=00000DH, size=00E7H, gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref
G_M21721_IG03:        ; offs=0000F4H, size=000FH, epilog, nogc, extend
G_M21721_IG04:        ; offs=000103H, size=0006H, gcVars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, gcvars, byref
*************** In emitJumpDistBind()
Binding: IN0027: 000000 jae      L_M21721_BB02
Binding L_M21721_BB02 to G_M21721_IG04
Estimate of fwd jump [D1FFAB1E/039]: 00BE -> 0103 = 0043
Shrinking jump [D1FFAB1E/039]
Adjusted offset of BB03 from 00F4 to 00F0
Adjusted offset of BB04 from 0103 to 00FF
Total shrinkage =   4, min extra jump size = 4294967295

*************** Finishing PHASE Generate code

*************** Starting PHASE Emit code

Hot  code size = 0x105 bytes
Cold code size = 0x0 bytes
reserveUnwindInfo(isFunclet=FALSE, isColdCode=FALSE, unwindSize=0x10)
*************** In emitEndCodeGen()
Converting emitMaxStackDepth from bytes (0) to elements (0)

***************************************************************************
Instructions as they come out of the scheduler


G_M21721_IG01:        ; func=00, offs=000000H, size=000DH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref, nogc <-- Prolog IG
IN0036: 000000 push     r14
IN0037: 000002 push     rdi
IN0038: 000003 push     rsi
IN0039: 000004 push     rbp
IN003a: 000005 push     rbx
IN003b: 000006 sub      rsp, 32
IN003c: 00000A mov      rsi, rcx
       ; gcrRegs +[rsi]
						;; bbWeight=1    PerfScore 5.50
G_M21721_IG02:        ; func=00, offs=00000DH, size=00E3H, gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref, isz
IN0001: 00000D mov      rcx, 0xD1FFAB1E
IN0002: 000017 mov      edx, 1
IN0003: 00001C call     CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
       ; gcr arg pop 0
IN0004: 000021 mov      rcx, 0xD1FFAB1E
IN0005: 00002B mov      rcx, gword ptr [rcx]
       ; gcrRegs +[rcx]
IN0006: 00002E cmp      dword ptr [rcx], ecx
IN0007: 000030 mov      edx, -1
IN0008: 000035 call     System.Threading.WaitHandle:WaitOneNoCheck(int):bool:this
       ; gcrRegs -[rcx]
       ; gcr arg pop 0
IN0009: 00003A call     HotkeyedMusicPlayer.ArgsTransport:EnsureRootKeyExists()
       ; gcr arg pop 0
IN000a: 00003F mov      rcx, 0xD1FFAB1E
IN000b: 000049 mov      rdi, gword ptr [rcx]
       ; gcrRegs +[rdi]
IN000c: 00004C mov      rcx, rdi
       ; gcrRegs +[rcx]
IN000d: 00004F mov      rdx, 0xD1FFAB1E
IN000e: 000059 mov      rbx, gword ptr [rdx]
       ; gcrRegs +[rbx]
IN000f: 00005C mov      rdx, rbx
       ; gcrRegs +[rdx]
IN0010: 00005F mov      r8, rsi
       ; gcrRegs +[r8]
IN0011: 000062 call     Microsoft.Win32.Registry:GetValue(System.String,System.String,System.Object):System.Object
       ; gcrRegs -[rcx rdx r8] +[rax]
       ; gcr arg pop 0
IN0012: 000067 mov      rdx, rax
       ; gcrRegs +[rdx]
IN0013: 00006A mov      rcx, 0xD1FFAB1E
IN0014: 000074 call     CORINFO_HELP_CHKCASTARRAY
       ; gcrRegs -[rdx]
       ; gcr arg pop 0
IN0015: 000079 mov      rbp, rax
       ; gcrRegs +[rbp]
IN0016: 00007C mov      edx, dword ptr [rbp+8]
IN0017: 00007F inc      edx
IN0018: 000081 movsxd   rdx, edx
IN0019: 000084 mov      rcx, 0xD1FFAB1E
IN001a: 00008E call     CORINFO_HELP_NEWARR_1_OBJ
       ; gcr arg pop 0
IN001b: 000093 mov      r14, rax
       ; gcrRegs +[r14]
IN001c: 000096 mov      rdx, rsi
       ; gcrRegs +[rdx]
IN001d: 000099 mov      ecx, 124
IN001e: 00009E call     System.String:Join(ushort,System.String[]):System.String
       ; gcrRegs -[rdx rsi]
       ; gcr arg pop 0
IN001f: 0000A3 mov      rsi, rax
       ; gcrRegs +[rsi]
IN0020: 0000A6 mov      rcx, rbp
       ; gcrRegs +[rcx]
IN0021: 0000A9 mov      rdx, r14
       ; gcrRegs +[rdx]
IN0022: 0000AC xor      r8d, r8d
IN0023: 0000AF call     [System.Array:CopyTo(System.Array,int):this]
       ; gcrRegs -[rax rcx rdx rbp]
       ; gcr arg pop 0
IN0024: 0000B5 mov      edx, dword ptr [r14+8]
IN0025: 0000B9 lea      ecx, [rdx-1]
IN0026: 0000BC cmp      ecx, edx
IN0027: 0000BE jae      SHORT G_M21721_IG04
IN0028: 0000C0 movsxd   rdx, ecx
IN0029: 0000C3 lea      rcx, bword ptr [r14+8*rdx+16]
       ; byrRegs +[rcx]
IN002a: 0000C8 mov      rdx, rsi
       ; gcrRegs +[rdx]
IN002b: 0000CB call     CORINFO_HELP_ASSIGN_REF
       ; gcrRegs -[rdx rsi]
       ; byrRegs -[rcx]
IN002c: 0000D0 mov      rcx, rdi
       ; gcrRegs +[rcx]
IN002d: 0000D3 mov      rdx, rbx
       ; gcrRegs +[rdx]
IN002e: 0000D6 mov      r8, r14
       ; gcrRegs +[r8]
IN002f: 0000D9 xor      r9d, r9d
IN0030: 0000DC call     Microsoft.Win32.Registry:SetValue(System.String,System.String,System.Object,int)
       ; gcrRegs -[rcx rdx rbx rdi r8 r14]
       ; gcr arg pop 0
IN0031: 0000E1 mov      rcx, 0xD1FFAB1E
IN0032: 0000EB mov      rcx, gword ptr [rcx]
       ; gcrRegs +[rcx]
IN0033: 0000EE cmp      dword ptr [rcx], ecx
						;; bbWeight=1    PerfScore 38.00
G_M21721_IG03:        ; func=00, offs=0000F0H, size=000FH, epilog, nogc, extend
IN003d: 0000F0 add      rsp, 32
IN003e: 0000F4 pop      rbx
IN003f: 0000F5 pop      rbp
IN0040: 0000F6 pop      rsi
IN0041: 0000F7 pop      rdi
IN0042: 0000F8 pop      r14
IN0043: 0000FA jmp      System.Threading.Mutex:ReleaseMutex():this
       ; gcr arg pop 0
						;; bbWeight=1    PerfScore 4.75
G_M21721_IG04:        ; func=00, offs=0000FFH, size=0006H, gcVars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, gcvars, byref
       ; gcrRegs -[rcx]
IN0034: 0000FF call     CORINFO_HELP_RNGCHKFAIL
       ; gcr arg pop 0
IN0035: 000104 int3     
						;; bbWeight=0    PerfScore 0.00Allocated method code size =  261 , actual size =  261

; Total bytes of code 261, prolog size 10, PerfScore 74.35, instruction count 67 (MethodHash=1effab26) for method HotkeyedMusicPlayer.ArgsTransport:EnqueueArgs(System.String[])
; ============================================================

*************** After end code gen, before unwindEmit()
G_M21721_IG01:        ; func=00, offs=000000H, size=000DH, bbWeight=1    PerfScore 5.50, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref, nogc <-- Prolog IG

IN0036: 000000 push     r14
IN0037: 000002 push     rdi
IN0038: 000003 push     rsi
IN0039: 000004 push     rbp
IN003a: 000005 push     rbx
IN003b: 000006 sub      rsp, 32
IN003c: 00000A mov      rsi, rcx

G_M21721_IG02:        ; offs=00000DH, size=00E3H, bbWeight=1    PerfScore 38.00, gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref, isz

IN0001: 00000D mov      rcx, 0xD1FFAB1E
IN0002: 000017 mov      edx, 1
IN0003: 00001C call     CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
IN0004: 000021 mov      rcx, 0xD1FFAB1E
IN0005: 00002B mov      rcx, gword ptr [rcx]
IN0006: 00002E cmp      dword ptr [rcx], ecx
IN0007: 000030 mov      edx, -1
IN0008: 000035 call     System.Threading.WaitHandle:WaitOneNoCheck(int):bool:this
IN0009: 00003A call     HotkeyedMusicPlayer.ArgsTransport:EnsureRootKeyExists()
IN000a: 00003F mov      rcx, 0xD1FFAB1E
IN000b: 000049 mov      rdi, gword ptr [rcx]
IN000c: 00004C mov      rcx, rdi
IN000d: 00004F mov      rdx, 0xD1FFAB1E
IN000e: 000059 mov      rbx, gword ptr [rdx]
IN000f: 00005C mov      rdx, rbx
IN0010: 00005F mov      r8, rsi
IN0011: 000062 call     Microsoft.Win32.Registry:GetValue(System.String,System.String,System.Object):System.Object
IN0012: 000067 mov      rdx, rax
IN0013: 00006A mov      rcx, 0xD1FFAB1E
IN0014: 000074 call     CORINFO_HELP_CHKCASTARRAY
IN0015: 000079 mov      rbp, rax
IN0016: 00007C mov      edx, dword ptr [rbp+8]
IN0017: 00007F inc      edx
IN0018: 000081 movsxd   rdx, edx
IN0019: 000084 mov      rcx, 0xD1FFAB1E
IN001a: 00008E call     CORINFO_HELP_NEWARR_1_OBJ
IN001b: 000093 mov      r14, rax
IN001c: 000096 mov      rdx, rsi
IN001d: 000099 mov      ecx, 124
IN001e: 00009E call     System.String:Join(ushort,System.String[]):System.String
IN001f: 0000A3 mov      rsi, rax
IN0020: 0000A6 mov      rcx, rbp
IN0021: 0000A9 mov      rdx, r14
IN0022: 0000AC xor      r8d, r8d
IN0023: 0000AF call     [System.Array:CopyTo(System.Array,int):this]
IN0024: 0000B5 mov      edx, dword ptr [r14+8]
IN0025: 0000B9 lea      ecx, [rdx-1]
IN0026: 0000BC cmp      ecx, edx
IN0027: 0000BE jae      SHORT G_M21721_IG04
IN0028: 0000C0 movsxd   rdx, ecx
IN0029: 0000C3 lea      rcx, bword ptr [r14+8*rdx+16]
IN002a: 0000C8 mov      rdx, rsi
IN002b: 0000CB call     CORINFO_HELP_ASSIGN_REF
IN002c: 0000D0 mov      rcx, rdi
IN002d: 0000D3 mov      rdx, rbx
IN002e: 0000D6 mov      r8, r14
IN002f: 0000D9 xor      r9d, r9d
IN0030: 0000DC call     Microsoft.Win32.Registry:SetValue(System.String,System.String,System.Object,int)
IN0031: 0000E1 mov      rcx, 0xD1FFAB1E
IN0032: 0000EB mov      rcx, gword ptr [rcx]
IN0033: 0000EE cmp      dword ptr [rcx], ecx

G_M21721_IG03:        ; offs=0000F0H, size=000FH, bbWeight=1    PerfScore 4.75, epilog, nogc, extend

IN003d: 0000F0 add      rsp, 32
IN003e: 0000F4 pop      rbx
IN003f: 0000F5 pop      rbp
IN0040: 0000F6 pop      rsi
IN0041: 0000F7 pop      rdi
IN0042: 0000F8 pop      r14
IN0043: 0000FA jmp      System.Threading.Mutex:ReleaseMutex():this

G_M21721_IG04:        ; offs=0000FFH, size=0006H, bbWeight=0    PerfScore 0.00, gcVars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, gcvars, byref

IN0034: 0000FF call     CORINFO_HELP_RNGCHKFAIL
IN0035: 000104 int3     


*************** Finishing PHASE Emit code

*************** Starting PHASE Emit GC+EH tables
Unwind Info:
  >> Start offset   : 0x000000 (not in unwind data)
  >>   End offset   : 0xd1ffab1e (not in unwind data)
  Version           : 1
  Flags             : 0x00
  SizeOfProlog      : 0x0A
  CountOfUnwindCodes: 6
  FrameRegister     : none (0)
  FrameOffset       : N/A (no FrameRegister) (Value=0)
  UnwindCodes       :
    CodeOffset: 0x0A UnwindOp: UWOP_ALLOC_SMALL (2)     OpInfo: 3 * 8 + 8 = 32 = 0x20
    CodeOffset: 0x06 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbx (3)
    CodeOffset: 0x05 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbp (5)
    CodeOffset: 0x04 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rsi (6)
    CodeOffset: 0x03 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rdi (7)
    CodeOffset: 0x02 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: r14 (14)
allocUnwindInfo(pHotCode=0x00000000D1FFAB1E, pColdCode=0x0000000000000000, startOffset=0x0, endOffset=0x105, unwindSize=0x10, pUnwindBlock=0x00000000D1FFAB1E, funKind=0 (main function))
*************** In genIPmappingGen()
IP mapping count : 9
IL offs PROLOG : 0x00000000 ( STACK_EMPTY )
IL offs 0x0000 : 0x0000000D ( STACK_EMPTY )
IL offs 0x0005 : 0x0000003A ( STACK_EMPTY )
IL offs 0x000A : 0x0000003F ( STACK_EMPTY )
IL offs 0x0038 : 0x000000B5 ( STACK_EMPTY )
IL offs 0x0040 : 0x000000D0 ( STACK_EMPTY )
IL offs 0x0050 : 0x000000E1 ( STACK_EMPTY )
IL offs EPILOG : 0x000000F0 ( STACK_EMPTY )
IL offs NO_MAP : 0x000000FF ( STACK_EMPTY )

*************** In genSetScopeInfo()
VarLocInfo count is 2
; Variable debug info: 2 live range(s), 1 var(s) for method HotkeyedMusicPlayer.ArgsTransport:EnqueueArgs(System.String[])
  0(   UNKNOWN) : From 00000000h to 0000000Dh, in rcx
  0(   UNKNOWN) : From 0000000Dh to 00000096h, in rsi
*************** In gcInfoBlockHdrSave()
Set code length to 261.
Set ReturnKind to Scalar.
Set Outgoing stack arg area size to 32.
Register slot id for reg rsi = 0.
Register slot id for reg rbx = 1.
Register slot id for reg rdi = 2.
Register slot id for reg rbp = 3.
Register slot id for reg r14 = 4.
Set state of slot 0 at instr offset 0x1c to Live.
Set state of slot 0 at instr offset 0x21 to Dead.
Set state of slot 0 at instr offset 0x35 to Live.
Set state of slot 0 at instr offset 0x3a to Dead.
Set state of slot 0 at instr offset 0x3a to Live.
Set state of slot 0 at instr offset 0x3f to Dead.
Set state of slot 1 at instr offset 0x62 to Live.
Set state of slot 0 at instr offset 0x62 to Live.
Set state of slot 2 at instr offset 0x62 to Live.
Set state of slot 1 at instr offset 0x67 to Dead.
Set state of slot 0 at instr offset 0x67 to Dead.
Set state of slot 2 at instr offset 0x67 to Dead.
Set state of slot 1 at instr offset 0x74 to Live.
Set state of slot 0 at instr offset 0x74 to Live.
Set state of slot 2 at instr offset 0x74 to Live.
Set state of slot 1 at instr offset 0x79 to Dead.
Set state of slot 0 at instr offset 0x79 to Dead.
Set state of slot 2 at instr offset 0x79 to Dead.
Set state of slot 1 at instr offset 0x8e to Live.
Set state of slot 3 at instr offset 0x8e to Live.
Set state of slot 0 at instr offset 0x8e to Live.
Set state of slot 2 at instr offset 0x8e to Live.
Set state of slot 1 at instr offset 0x93 to Dead.
Set state of slot 3 at instr offset 0x93 to Dead.
Set state of slot 0 at instr offset 0x93 to Dead.
Set state of slot 2 at instr offset 0x93 to Dead.
Set state of slot 1 at instr offset 0x9e to Live.
Set state of slot 3 at instr offset 0x9e to Live.
Set state of slot 2 at instr offset 0x9e to Live.
Set state of slot 4 at instr offset 0x9e to Live.
Set state of slot 1 at instr offset 0xa3 to Dead.
Set state of slot 3 at instr offset 0xa3 to Dead.
Set state of slot 2 at instr offset 0xa3 to Dead.
Set state of slot 4 at instr offset 0xa3 to Dead.
Set state of slot 1 at instr offset 0xaf to Live.
Set state of slot 0 at instr offset 0xaf to Live.
Set state of slot 2 at instr offset 0xaf to Live.
Set state of slot 4 at instr offset 0xaf to Live.
Set state of slot 1 at instr offset 0xb5 to Dead.
Set state of slot 0 at instr offset 0xb5 to Dead.
Set state of slot 2 at instr offset 0xb5 to Dead.
Set state of slot 4 at instr offset 0xb5 to Dead.
Defining 11 call sites:
    Offset 0x1c, size 5.
    Offset 0x35, size 5.
    Offset 0x3a, size 5.
    Offset 0x62, size 5.
    Offset 0x74, size 5.
    Offset 0x8e, size 5.
    Offset 0x9e, size 5.
    Offset 0xaf, size 6.
    Offset 0xdc, size 5.
    Offset 0xfa, size 5.
    Offset 0xff, size 5.

*************** Finishing PHASE Emit GC+EH tables
Method code size: 261

Allocations for HotkeyedMusicPlayer.ArgsTransport:EnqueueArgs(System.String[]) (MethodHash=1effab26)
count:       2259, size:     165699, max =       3072
allocateMemory:     196608, nraUsed:     171472

Alloc'd bytes by kind:
                  kind |       size |     pct
  ---------------------+------------+--------
         AssertionProp |       6460 |   3.90%
               ASTNode |      25968 |  15.67%
              InstDesc |       6428 |   3.88%
              ImpStack |        384 |   0.23%
            BasicBlock |       2520 |   1.52%
             fgArgInfo |       1472 |   0.89%
       fgArgInfoPtrArr |        184 |   0.11%
              FlowList |          0 |   0.00%
     TreeStatementList |        352 |   0.21%
               SiScope |        224 |   0.14%
       DominatorMemory |         96 |   0.06%
                  LSRA |       3440 |   2.08%
         LSRA_Interval |       4800 |   2.90%
      LSRA_RefPosition |      18624 |  11.24%
          Reachability |         16 |   0.01%
                   SSA |        824 |   0.50%
           ValueNumber |      16690 |  10.07%
              LvaTable |       1996 |   1.20%
            UnwindInfo |          0 |   0.00%
                hashBv |         40 |   0.02%
                bitset |        440 |   0.27%
          FixedBitVect |         96 |   0.06%
               Generic |       4074 |   2.46%
   LocalAddressVisitor |          0 |   0.00%
         FieldSeqStore |        272 |   0.16%
    ZeroOffsetFieldMap |        240 |   0.14%
          ArrayInfoMap |        192 |   0.12%
          MemoryPhiArg |          0 |   0.00%
                   CSE |       2560 |   1.54%
                    GC |       5227 |   3.15%
       CorTailCallInfo |          0 |   0.00%
              Inlining |       7288 |   4.40%
            ArrayStack |        256 |   0.15%
             DebugInfo |        408 |   0.25%
             DebugOnly |      48933 |  29.53%
               Codegen |       1176 |   0.71%
               LoopOpt |          0 |   0.00%
             LoopHoist |          0 |   0.00%
               Unknown |       1051 |   0.63%
            RangeCheck |       1808 |   1.09%
              CopyProp |        744 |   0.45%
           SideEffects |          0 |   0.00%
       ObjectAllocator |          0 |   0.00%
    VariableLiveRanges |          0 |   0.00%
           ClassLayout |          0 |   0.00%
       TailMergeThrows |          0 |   0.00%
             EarlyProp |         96 |   0.06%
              ZeroInit |        320 |   0.19%

****** DONE compiling HotkeyedMusicPlayer.ArgsTransport:EnqueueArgs(System.String[])