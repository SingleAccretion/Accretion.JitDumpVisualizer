****** START compiling SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] (MethodHash=41e2f9c8)
Generating code for Windows x64
OPTIONS: compCodeOpt = BLENDED_CODE
OPTIONS: compDbgCode = false
OPTIONS: compDbgInfo = true
OPTIONS: compDbgEnC  = false
OPTIONS: compProcedureSplitting   = false
OPTIONS: compProcedureSplittingEH = false
IL to import:
IL_0000  73 88 00 00 06    newobj       0x6000088
IL_0005  0a                stloc.0     
IL_0006  02                ldarg.0     
IL_0007  6f a4 00 00 0a    callvirt     0xA0000A4
IL_000c  0b                stloc.1     
IL_000d  2b 0f             br.s         15 (IL_001e)
IL_000f  12 01             ldloca.s     0x1
IL_0011  28 a5 00 00 0a    call         0xA0000A5
IL_0016  0c                stloc.2     
IL_0017  06                ldloc.0     
IL_0018  08                ldloc.2     
IL_0019  6f 85 00 00 06    callvirt     0x6000085
IL_001e  12 01             ldloca.s     0x1
IL_0020  28 a6 00 00 0a    call         0xA0000A6
IL_0025  2d e8             brtrue.s     -24 (IL_000f)
IL_0027  de 0e             leave.s      14 (IL_0037)
IL_0029  12 01             ldloca.s     0x1
IL_002b  fe 16 1d 00 00 1b constrained. 0x1B00001D
IL_0031  6f 78 00 00 0a    callvirt     0xA000078
IL_0036  dc                endfinally  
IL_0037  06                ldloc.0     
IL_0038  6f 86 00 00 06    callvirt     0x6000086
IL_003d  2a                ret         

lvaSetClass: setting class for V00 to (00000000D1FFAB1E) System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] 
Arg #0    passed in register(s) rcx

lvaSetClass: setting class for V01 to (00000000D1FFAB1E) Batcher 

lvaSetClass: setting class for V03 to (00000000D1FFAB1E) System.String 

lvaGrabTemp returning 4 (V04 tmp0) (a long lifetime temp) called for OutgoingArgSpace.
; Initial local variable assignments
;
;  V00 arg0              ref  class-hnd
;  V01 loc0              ref  class-hnd
;  V02 loc1           struct <System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24>
;  V03 loc2              ref  class-hnd
;  V04 OutArgs        lclBlk <na>  "OutgoingArgSpace"
*************** In compInitDebuggingInfo() for SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]
getVars() returned cVars = 0, extendOthers = true
info.compVarScopesCount = 4
    	VarNum 	LVNum 	      Name 	Beg 	End
 0: 	00h 	00h 	  V00 arg0 	000h   	03Eh
 1: 	01h 	01h 	  V01 loc0 	000h   	03Eh
 2: 	02h 	02h 	  V02 loc1 	000h   	03Eh
 3: 	03h 	03h 	  V03 loc2 	000h   	03Eh
info.compStmtOffsetsCount    = 0
info.compStmtOffsetsImplicit = 0005h ( STACK_EMPTY CALL_SITE )
*************** In fgFindBasicBlocks() for SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]
Marked V01 as a single def local
Marked V03 as a single def local
Jump targets:
  IL_000d
  IL_000f
  IL_001e
  IL_0029
  IL_0037
New Basic Block BB01 [0000] created.
BB01 [000..00D)
New Basic Block BB02 [0001] created.
BB02 [00D..00F)
New Basic Block BB03 [0002] created.
BB03 [00F..01E)
New Basic Block BB04 [0003] created.
BB04 [01E..027)
New Basic Block BB05 [0004] created.
BB05 [027..029)
New Basic Block BB06 [0005] created.
BB06 [029..037)
New Basic Block BB07 [0006] created.
BB07 [037..03E)
EH clause #0:
  Flags:         0x2 (finally)
  TryOffset:     0xd
  TryLength:     0x1c
  HandlerOffset: 0x29
  HandlerLength: 0xe
  ClassToken:    0x0
*************** After fgFindBasicBlocks() has created the EH table

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB02..BB05 [00D..029), Finally at BB06..BB06 [029..037)
*************** In fgNormalizeEH()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     
BB02 [0001]  1  0                          1       [00D..00F)-> BB04 (always) T0      try {       keep try label 
BB03 [0002]  1  0                          1       [00F..01E)                 T0                  bwd bwd-target 
BB04 [0003]  2  0                          1       [01E..027)-> BB03 ( cond ) T0                  bwd 
BB05 [0004]  1  0                          1       [027..029)-> BB07 (leave ) T0      }           
BB06 [0005]  1     0                       1       [029..037)        (finret)    H0   finally { } keep label target 
BB07 [0006]  1                             1       [037..03E)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB02..BB05 [00D..029), Finally at BB06..BB06 [029..037)
No EH normalization performed.
IL Code Size,Instr   62,  23, Basic Block count   7, Local Variable Num,Ref count   5, 10 for method SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]
OPTIONS: opts.MinOpts() == false
Basic block list for 'SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     
BB02 [0001]  1  0                          1       [00D..00F)-> BB04 (always) T0      try {       keep try label 
BB03 [0002]  1  0                          1       [00F..01E)                 T0                  bwd bwd-target 
BB04 [0003]  2  0                          1       [01E..027)-> BB03 ( cond ) T0                  bwd 
BB05 [0004]  1  0                          1       [027..029)-> BB07 (leave ) T0      }           
BB06 [0005]  1     0                       1       [029..037)        (finret)    H0   finally { } keep label target 
BB07 [0006]  1                             1       [037..03E)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

*************** Starting PHASE Pre-import

*************** Finishing PHASE Pre-import

*************** Starting PHASE Importation
*************** In impImport() for SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]

impImportBlockPending for BB01

Importing BB01 (PC=000) of 'SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'
    [ 0]   0 (0x000) newobj
lvaGrabTemp returning 5 (V05 tmp1) called for NewObj constructor temp.


STMT00000 (IL 0x000...  ???)
               [000003] -A----------              *  ASG       ref   
               [000002] D------N----              +--*  LCL_VAR   ref    V05 tmp1         
               [000001] ------------              \--*  ALLOCOBJ  ref   
               [000000] H-----------                 \--*  CNS_INT(h) long   0xd1ffab1e method
Marked V05 as a single def local

lvaSetClass: setting class for V05 to (00000000D1FFAB1E) Batcher  [exact]
 06000088
In Compiler::impImportCall: opcode is newobj, kind=0, callRetType is void, structSize is 0


STMT00001 (IL   ???...  ???)
               [000005] I-C-G-------              *  CALL      void   Batcher..ctor (exactContextHnd=0x00000000D1FFAB1E)
               [000004] ------------ this in rcx  \--*  LCL_VAR   ref    V05 tmp1         

    [ 1]   5 (0x005) stloc.0
lvaUpdateClass: Updating class for V01 from (00000000D1FFAB1E) Batcher to (00000000D1FFAB1E) Batcher [exact]


STMT00002 (IL 0x005...  ???)
               [000008] -A----------              *  ASG       ref   
               [000007] D------N----              +--*  LCL_VAR   ref    V01 loc0         
               [000006] ------------              \--*  LCL_VAR   ref    V05 tmp1         

    [ 0]   6 (0x006) ldarg.0
    [ 1]   7 (0x007) callvirt 0A0000A4
In Compiler::impImportCall: opcode is callvirt, kind=0, callRetType is struct, structSize is 24


STMT00003 (IL 0x006...  ???)
               [000010] I-C-G-------              *  CALL nullcheck struct System.Collections.Generic.List`1[__Canon][System.__Canon].GetEnumerator (exactContextHnd=0x00000000D1FFAB1E)
               [000009] ------------ this in rcx  \--*  LCL_VAR   ref    V00 arg0         

    [ 1]  12 (0x00c) stloc.1

STMT00004 (IL   ???...  ???)
               [000011] --C---------              *  RET_EXPR  void  (inl return from call [000010])

impImportBlockPending for BB02

impImportBlockPending for BB06

Importing BB02 (PC=013) of 'SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'
    [ 0]  13 (0x00d) br.s
impImportBlockPending for BB04

Importing BB04 (PC=030) of 'SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'
    [ 0]  30 (0x01e) ldloca.s 1
    [ 1]  32 (0x020) call 0A0000A6
In Compiler::impImportCall: opcode is call, kind=0, callRetType is bool, structSize is 0


STMT00005 (IL 0x01E...  ???)
               [000016] I-C-G-------              *  CALL      int    Enumerator[__Canon][System.__Canon].MoveNext (exactContextHnd=0x00000000D1FFAB1E)
               [000015] ------------ this in rcx  +--*  ADDR      byref 
               [000014] -------N----              |  \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000017] H----------- arg1         \--*  CNS_INT(h) long   0xd1ffab1e class

    [ 1]  37 (0x025) brtrue.s

STMT00006 (IL   ???...  ???)
               [000021] --C---------              *  JTRUE     void  
               [000020] --C---------              \--*  NE        int   
               [000018] --C---------                 +--*  RET_EXPR  int   (inl return from call [000016])
               [000019] ------------                 \--*  CNS_INT   int    0

impImportBlockPending for BB05

impImportBlockPending for BB03

Importing BB03 (PC=015) of 'SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'
    [ 0]  15 (0x00f) ldloca.s 1
    [ 1]  17 (0x011) call 0A0000A5
In Compiler::impImportCall: opcode is call, kind=0, callRetType is ref, structSize is 0


STMT00007 (IL 0x00F...  ???)
               [000024] I-C-G-------              *  CALL      ref    Enumerator[__Canon][System.__Canon].get_Current (exactContextHnd=0x00000000D1FFAB1E)
               [000023] ------------ this in rcx  +--*  ADDR      byref 
               [000022] -------N----              |  \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000025] H----------- arg1         \--*  CNS_INT(h) long   0xd1ffab1e class

    [ 1]  22 (0x016) stloc.2Named Intrinsic System.Collections.Generic.List`1.Enumerator.get_Current: Not recognized


STMT00008 (IL   ???...  ???)
               [000028] -AC---------              *  ASG       ref   
               [000027] D------N----              +--*  LCL_VAR   ref    V03 loc2         
               [000026] --C---------              \--*  RET_EXPR  ref   (inl return from call [000024])

    [ 0]  23 (0x017) ldloc.0
    [ 1]  24 (0x018) ldloc.2
    [ 2]  25 (0x019) callvirt 06000085
In Compiler::impImportCall: opcode is callvirt, kind=0, callRetType is void, structSize is 0
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'too many il bytes' for 'SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]' calling 'Batcher:Push(System.String):this'

INLINER: Marking Batcher:Push(System.String):this as NOINLINE because of too many il bytes
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'too many il bytes'


STMT00009 (IL 0x017...  ???)
               [000031] --C-G-------              *  CALL nullcheck void   Batcher.Push
               [000029] ------------ this in rcx  +--*  LCL_VAR   ref    V01 loc0         
               [000030] ------------ arg1         \--*  LCL_VAR   ref    V03 loc2         

impImportBlockPending for BB04

Importing BB05 (PC=039) of 'SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'
    [ 0]  39 (0x027) leave.s 0037
Before import CEE_LEAVE in BB05 (targetting BB07):

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i newobj 
BB02 [0001]  1  0                          1       [00D..00F)-> BB04 (always) T0      try {       keep i try label 
BB03 [0002]  1  0                          1       [00F..01E)                 T0                  i bwd bwd-target 
BB04 [0003]  2  0                          1       [01E..027)-> BB03 ( cond ) T0                  i bwd 
BB05 [0004]  1  0                          1       [027..029)-> BB07 (leave ) T0      }           
BB06 [0005]  1     0                       1       [029..037)        (finret)    H0   finally { } keep label target 
BB07 [0006]  1                             1       [037..03E)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB02..BB05 [00D..029), Finally at BB06..BB06 [029..037)
fgFindInsertPoint(regionIndex=0, putInTryRegion=true, startBlk=BB01, endBlk=BB00, nearBlk=BB05, jumpBlk=BB00, runRarely=false)
fgNewBBinRegion(jumpKind=8, tryIndex=0, hndIndex=0, putInFilter=false, runRarely=false, insertAtEnd=false): inserting after BB05
New Basic Block BB08 [0007] created.
impImportLeave - jumping out of a finally-protected try (EH#0), convert block BB05 to BBJ_ALWAYS, add BBJ_CALLFINALLY block BB08
New Basic Block BB09 [0008] created.
impImportLeave - jumping out of a finally-protected try (EH#0), created step (BBJ_ALWAYS) block BB09
impImportLeave - final destination of step blocks set to BB07

impImportBlockPending for BB07

After import CEE_LEAVE:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i newobj 
BB02 [0001]  1  0                          1       [00D..00F)-> BB04 (always) T0      try {       keep i try label 
BB03 [0002]  1  0                          1       [00F..01E)                 T0                  i bwd bwd-target 
BB04 [0003]  2  0                          1       [01E..027)-> BB03 ( cond ) T0                  i bwd 
BB05 [0004]  1  0                          1       [027..029)-> BB08 (always) T0      }           
BB08 [0007]  1                             1       [???..???)-> BB06 (callf )                     i internal 
BB09 [0008]  0                             1       [???..???)-> BB07 (ALWAYS)                     i internal KEEP 
BB06 [0005]  1     0                       1       [029..037)        (finret)    H0   finally { } keep label target 
BB07 [0006]  1                             1       [037..03E)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB02..BB05 [00D..029), Finally at BB06..BB06 [029..037)

impImportBlockPending for BB08

Importing BB07 (PC=055) of 'SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'
    [ 0]  55 (0x037) ldloc.0
    [ 1]  56 (0x038) callvirt 06000086 (Implicit Tail call: prefixFlags |= PREFIX_TAILCALL_IMPLICIT)
In Compiler::impImportCall: opcode is callvirt, kind=0, callRetType is ref, structSize is 0

GTF_CALL_M_IMPLICIT_TAILCALL set for call [000033]


STMT00010 (IL 0x037...  ???)
               [000033] I-C-G-------              *  CALL nullcheck ref    Batcher.CollectBatches (exactContextHnd=0x00000000D1FFAB1E)
               [000032] ------------ this in rcx  \--*  LCL_VAR   ref    V01 loc0         

    [ 1]  61 (0x03d) ret

STMT00011 (IL   ???...  ???)
               [000035] --C---------              *  RETURN    ref   
               [000034] --C---------              \--*  RET_EXPR  ref   (inl return from call [000033])

Importing BB06 (PC=041) of 'SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'
    [ 0]  41 (0x029) ldloca.s 1
    [ 1]  43 (0x02b) constrained. (1B00001D) callvirt 0A000078
In Compiler::impImportCall: opcode is callvirt, kind=0, callRetType is void, structSize is 0


STMT00012 (IL 0x029...  ???)
               [000038] I-C-G-------              *  CALL      void   Enumerator[__Canon][System.__Canon].Dispose (exactContextHnd=0x00000000D1FFAB1E)
               [000037] ------------ this in rcx  +--*  ADDR      byref 
               [000036] -------N----              |  \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000039] H----------- arg1         \--*  CNS_INT(h) long   0xd1ffab1e class

    [ 0]  54 (0x036) endfinally

STMT00013 (IL 0x036...  ???)
               [000040] ------------              *  RETFILT   void  

After impImport() added block for try,catch,finally
-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i newobj 
BB02 [0001]  1  0                          1       [00D..00F)-> BB04 (always) T0      try {       keep i try label 
BB03 [0002]  1  0                          1       [00F..01E)                 T0                  i bwd bwd-target 
BB04 [0003]  2  0                          1       [01E..027)-> BB03 ( cond ) T0                  i bwd 
BB05 [0004]  1  0                          1       [027..029)-> BB08 (always) T0      }           i 
BB08 [0007]  1                             1       [???..???)-> BB06 (callf )                     i internal 
BB09 [0008]  0                             1       [???..???)-> BB07 (ALWAYS)                     i internal KEEP 
BB06 [0005]  1     0                       1       [029..037)        (finret)    H0   finally { } keep i label target 
BB07 [0006]  1                             1       [037..03E)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------


** Note: root method IL was partially imported -- imported 58 of 62 bytes of method IL

*************** Finishing PHASE Importation
Trees after Importation

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i newobj 
BB02 [0001]  1  0                          1       [00D..00F)-> BB04 (always) T0      try {       keep i try label 
BB03 [0002]  1  0                          1       [00F..01E)                 T0                  i bwd bwd-target 
BB04 [0003]  2  0                          1       [01E..027)-> BB03 ( cond ) T0                  i bwd 
BB05 [0004]  1  0                          1       [027..029)-> BB08 (always) T0      }           i 
BB08 [0007]  1                             1       [???..???)-> BB06 (callf )                     i internal 
BB09 [0008]  0                             1       [???..???)-> BB07 (ALWAYS)                     i internal KEEP 
BB06 [0005]  1     0                       1       [029..037)        (finret)    H0   finally { } keep i label target 
BB07 [0006]  1                             1       [037..03E)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..00D), preds={} succs={BB02}

***** BB01
STMT00000 (IL 0x000...0x005)
               [000003] -A----------              *  ASG       ref   
               [000002] D------N----              +--*  LCL_VAR   ref    V05 tmp1         
               [000001] ------------              \--*  ALLOCOBJ  ref   
               [000000] H-----------                 \--*  CNS_INT(h) long   0xd1ffab1e method

***** BB01
STMT00001 (IL   ???...  ???)
               [000005] I-C-G-------              *  CALL      void   Batcher..ctor (exactContextHnd=0x00000000D1FFAB1E)
               [000004] ------------ this in rcx  \--*  LCL_VAR   ref    V05 tmp1         

***** BB01
STMT00002 (IL 0x005...  ???)
               [000008] -A----------              *  ASG       ref   
               [000007] D------N----              +--*  LCL_VAR   ref    V01 loc0         
               [000006] ------------              \--*  LCL_VAR   ref    V05 tmp1         

***** BB01
STMT00003 (IL 0x006...0x00C)
               [000010] I-C-G-------              *  CALL nullcheck void   System.Collections.Generic.List`1[__Canon][System.__Canon].GetEnumerator (exactContextHnd=0x00000000D1FFAB1E)
               [000009] ------------ this in rcx  +--*  LCL_VAR   ref    V00 arg0         
               [000013] ------------ arg1         \--*  ADDR      byref 
               [000012] -------N----                 \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         

***** BB01
STMT00004 (IL   ???...  ???)
               [000011] --C---------              *  RET_EXPR  void  (inl return from call [000010])

------------ BB02 [00D..00F) -> BB04 (always), preds={} succs={BB04}

------------ BB03 [00F..01E), preds={} succs={BB04}

***** BB03
STMT00007 (IL 0x00F...0x016)
               [000024] I-C-G-------              *  CALL      ref    Enumerator[__Canon][System.__Canon].get_Current (exactContextHnd=0x00000000D1FFAB1E)
               [000023] ------------ this in rcx  +--*  ADDR      byref 
               [000022] -------N----              |  \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000025] H----------- arg1         \--*  CNS_INT(h) long   0xd1ffab1e class

***** BB03
STMT00008 (IL   ???...  ???)
               [000028] -AC---------              *  ASG       ref   
               [000027] D------N----              +--*  LCL_VAR   ref    V03 loc2         
               [000026] --C---------              \--*  RET_EXPR  ref   (inl return from call [000024])

***** BB03
STMT00009 (IL 0x017...0x019)
               [000031] --C-G-------              *  CALL nullcheck void   Batcher.Push
               [000029] ------------ this in rcx  +--*  LCL_VAR   ref    V01 loc0         
               [000030] ------------ arg1         \--*  LCL_VAR   ref    V03 loc2         

------------ BB04 [01E..027) -> BB03 (cond), preds={} succs={BB05,BB03}

***** BB04
STMT00005 (IL 0x01E...0x025)
               [000016] I-C-G-------              *  CALL      int    Enumerator[__Canon][System.__Canon].MoveNext (exactContextHnd=0x00000000D1FFAB1E)
               [000015] ------------ this in rcx  +--*  ADDR      byref 
               [000014] -------N----              |  \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000017] H----------- arg1         \--*  CNS_INT(h) long   0xd1ffab1e class

***** BB04
STMT00006 (IL   ???...  ???)
               [000021] --C---------              *  JTRUE     void  
               [000020] --C---------              \--*  NE        int   
               [000018] --C---------                 +--*  RET_EXPR  int   (inl return from call [000016])
               [000019] ------------                 \--*  CNS_INT   int    0

------------ BB05 [027..029) -> BB08 (always), preds={} succs={BB08}

------------ BB08 [???..???) -> BB06 (callf), preds={} succs={BB06}

------------ BB09 [???..???) -> BB07 (ALWAYS), preds={} succs={BB07}

------------ BB06 [029..037) (finret), preds={} succs={BB09}

***** BB06
STMT00012 (IL 0x029...0x036)
               [000038] I-C-G-------              *  CALL      void   Enumerator[__Canon][System.__Canon].Dispose (exactContextHnd=0x00000000D1FFAB1E)
               [000037] ------------ this in rcx  +--*  ADDR      byref 
               [000036] -------N----              |  \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000039] H----------- arg1         \--*  CNS_INT(h) long   0xd1ffab1e class

***** BB06
STMT00013 (IL 0x036...  ???)
               [000040] ------------              *  RETFILT   void  

------------ BB07 [037..03E) (return), preds={} succs={}

***** BB07
STMT00010 (IL 0x037...0x03D)
               [000033] I-C-G-------              *  CALL nullcheck ref    Batcher.CollectBatches (exactContextHnd=0x00000000D1FFAB1E)
               [000032] ------------ this in rcx  \--*  LCL_VAR   ref    V01 loc0         

***** BB07
STMT00011 (IL   ???...  ???)
               [000035] --C---------              *  RETURN    ref   
               [000034] --C---------              \--*  RET_EXPR  ref   (inl return from call [000033])

-------------------------------------------------------------------------------------------------------------------

*************** Starting PHASE Indirect call transform

 -- no candidates to transform

*************** Finishing PHASE Indirect call transform [no changes]

*************** Starting PHASE Expand patchpoints

 -- no patchpoints to transform

*************** Finishing PHASE Expand patchpoints [no changes]

*************** Starting PHASE Post-import

*************** Finishing PHASE Post-import

*************** Starting PHASE Morph - Init

New BlockSet epoch 1, # of blocks (including unused BB00): 10, bitset array size: 1 (short)

*************** In fgRemoveEmptyBlocks

*************** Finishing PHASE Morph - Init
*************** In fgDebugCheckBBlist

*************** Starting PHASE Morph - Inlining
Expanding INLINE_CANDIDATE in statement STMT00001 in BB01:
STMT00001 (IL   ???...  ???)
               [000005] I-C-G-------              *  CALL      void   Batcher..ctor (exactContextHnd=0x00000000D1FFAB1E)
               [000004] ------------ this in rcx  \--*  LCL_VAR   ref    V05 tmp1         
thisArg: is a local var
               [000004] ------------              *  LCL_VAR   ref    V05 tmp1         

INLINER: inlineInfo.tokenLookupContextHandle for Batcher:.ctor():this set to 0x00000000D1FFAB1E:

Invoking compiler for the inlinee method Batcher:.ctor():this :
IL to import:
IL_0000  02                ldarg.0     
IL_0001  7e 5d 00 00 04    ldsfld       0x400005D
IL_0006  73 31 01 00 0a    newobj       0xA000131
IL_000b  7d 5e 00 00 04    stfld        0x400005E
IL_0010  02                ldarg.0     
IL_0011  7e 5d 00 00 04    ldsfld       0x400005D
IL_0016  73 32 01 00 0a    newobj       0xA000132
IL_001b  7d 5f 00 00 04    stfld        0x400005F
IL_0020  02                ldarg.0     
IL_0021  15                ldc.i4.m1   
IL_0022  7d 60 00 00 04    stfld        0x4000060
IL_0027  02                ldarg.0     
IL_0028  28 28 00 00 0a    call         0xA000028
IL_002d  2a                ret         

INLINER impTokenLookupContextHandle for Batcher:.ctor():this is 0x00000000D1FFAB1E.
*************** In fgFindBasicBlocks() for Batcher:.ctor():this
weight= 10 : state   3 [ ldarg.0 ]
weight=159 : state 112 [ ldsfld ]
weight=227 : state 103 [ newobj ]
weight= 31 : state 111 [ stfld ]
weight= 10 : state   3 [ ldarg.0 ]
weight=159 : state 112 [ ldsfld ]
weight=227 : state 103 [ newobj ]
weight= 31 : state 111 [ stfld ]
weight= 10 : state   3 [ ldarg.0 ]
weight= 22 : state  22 [ ldc.i4.m1 ]
weight= 31 : state 111 [ stfld ]
weight= 10 : state   3 [ ldarg.0 ]
weight= 79 : state  40 [ call ]
weight= 19 : state  42 [ ret ]

multiplier in instance constructors increased to 1.5.
Inline candidate looks like a wrapper method.  Multiplier increased to 2.5.
Inline candidate callsite is boring.  Multiplier increased to 3.8.
calleeNativeSizeEstimate=1025
callsiteNativeSizeEstimate=85
benefit multiplier=3.8
threshold=323
Native estimate for function size exceeds threshold for inlining 102.5 > 32.3 (multiplier = 3.8)


Inline expansion aborted, inline not profitable
INLINER: during 'fgInline' result 'failed this call site' reason 'unprofitable inline' for 'SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]' calling 'Batcher:.ctor():this'
INLINER: during 'fgInline' result 'failed this call site' reason 'unprofitable inline'
Expanding INLINE_CANDIDATE in statement STMT00003 in BB01:
STMT00003 (IL 0x006...0x00C)
               [000010] I-C-G-------              *  CALL nullcheck void   System.Collections.Generic.List`1[__Canon][System.__Canon].GetEnumerator (exactContextHnd=0x00000000D1FFAB1E)
               [000009] ------------ this in rcx  +--*  LCL_VAR   ref    V00 arg0         
               [000013] ------------ arg1         \--*  ADDR      byref 
               [000012] -------N----                 \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
thisArg: is a local var
               [000009] ------------              *  LCL_VAR   ref    V00 arg0         

INLINER: inlineInfo.tokenLookupContextHandle for System.Collections.Generic.List`1[__Canon][System.__Canon]:GetEnumerator():Enumerator[__Canon]:this set to 0x00000000D1FFAB1E:

Invoking compiler for the inlinee method System.Collections.Generic.List`1[__Canon][System.__Canon]:GetEnumerator():Enumerator[__Canon]:this :
IL to import:
IL_0000  02                ldarg.0     
IL_0001  73 5c 0c 00 0a    newobj       0xA000C5C
IL_0006  2a                ret         

INLINER impTokenLookupContextHandle for System.Collections.Generic.List`1[__Canon][System.__Canon]:GetEnumerator():Enumerator[__Canon]:this is 0x00000000D1FFAB1E.
*************** In fgFindBasicBlocks() for System.Collections.Generic.List`1[__Canon][System.__Canon]:GetEnumerator():Enumerator[__Canon]:this
Jump targets:
  none
Computing inlinee profile scale:
   ... call site not profiled
New Basic Block BB10 [0009] created.
BB10 [000..007)
Basic block list for 'System.Collections.Generic.List`1[__Canon][System.__Canon]:GetEnumerator():Enumerator[__Canon]:this'

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB10 [0009]  1                             1       [000..007)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

*************** Inline @[000010] Starting PHASE Pre-import

*************** Inline @[000010] Finishing PHASE Pre-import

*************** Inline @[000010] Starting PHASE Importation
*************** In impImport() for System.Collections.Generic.List`1[__Canon][System.__Canon]:GetEnumerator():Enumerator[__Canon]:this

impImportBlockPending for BB10

Importing BB10 (PC=000) of 'System.Collections.Generic.List`1[__Canon][System.__Canon]:GetEnumerator():Enumerator[__Canon]:this'
    [ 0]   0 (0x000) ldarg.0
    [ 1]   1 (0x001) newobj
lvaGrabTemp returning 6 (V06 tmp2) called for NewObj constructor temp.

Suppressing zero-init for V06 -- expect to zero in prolog
 0A000C5C
In Compiler::impImportCall: opcode is newobj, kind=0, callRetType is void, structSize is 0


               [000043] I-C-G-------              *  CALL      void   Enumerator[__Canon][System.__Canon]..ctor (exactContextHnd=0x00000000D1FFAB1E)
               [000042] ------------ this in rcx  +--*  ADDR      byref 
               [000041] -------N----              |  \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V06 tmp2         
               [000044] H----------- arg1         +--*  CNS_INT(h) long   0xd1ffab1e class
               [000009] ------------ arg2         \--*  LCL_VAR   ref    V00 this         

    [ 1]   6 (0x006) ret

    Inlinee Return expression (before normalization)  =>
               [000045] ------------              *  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V06 tmp2         

After impImport() added block for try,catch,finally
-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB10 [0009]  1                             1       [000..007)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------


*************** Inline @[000010] Finishing PHASE Importation
Trees after Importation

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB10 [0009]  1                             1       [000..007)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB10 [000..007) (return), preds={} succs={}

***** BB10
               [000043] I-C-G-------              *  CALL      void   Enumerator[__Canon][System.__Canon]..ctor (exactContextHnd=0x00000000D1FFAB1E)
               [000042] ------------ this in rcx  +--*  ADDR      byref 
               [000041] -------N----              |  \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V06 tmp2         
               [000044] H----------- arg1         +--*  CNS_INT(h) long   0xd1ffab1e class
               [000009] ------------ arg2         \--*  LCL_VAR   ref    V00 this         

-------------------------------------------------------------------------------------------------------------------

*************** Inline @[000010] Starting PHASE Indirect call transform

 -- no candidates to transform

*************** Inline @[000010] Finishing PHASE Indirect call transform [no changes]

*************** Inline @[000010] Starting PHASE Expand patchpoints

 -- no patchpoints to transform

*************** Inline @[000010] Finishing PHASE Expand patchpoints [no changes]

*************** Inline @[000010] Starting PHASE Post-import

*************** In fgRemoveEmptyBlocks

*************** Inline @[000010] Finishing PHASE Post-import


----------- Statements (and blocks) added due to the inlining of call [000010] -----------

Arguments setup:

Inlinee method body:
STMT00014 (IL 0x006...  ???)
               [000043] I-C-G-------              *  CALL      void   Enumerator[__Canon][System.__Canon]..ctor (exactContextHnd=0x00000000D1FFAB1E)
               [000042] ------------ this in rcx  +--*  ADDR      byref 
               [000041] -------N----              |  \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V06 tmp2         
               [000044] H----------- arg1         +--*  CNS_INT(h) long   0xd1ffab1e class
               [000009] ------------ arg2         \--*  LCL_VAR   ref    V00 arg0         

fgInlineAppendStatements: no gc ref inline locals.

Return expression for call at [000010] is
               [000048] -A----------              *  ASG       struct (copy)
               [000047] D------N----              +--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000045] ------------              \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V06 tmp2         
Successfully inlined System.Collections.Generic.List`1[__Canon][System.__Canon]:GetEnumerator():Enumerator[__Canon]:this (7 IL bytes) (depth 1) [below ALWAYS_INLINE size]
--------------------------------------------------------------------------------------------

INLINER: during 'fgInline' result 'success' reason 'below ALWAYS_INLINE size' for 'SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]' calling 'System.Collections.Generic.List`1[__Canon][System.__Canon]:GetEnumerator():Enumerator[__Canon]:this'
INLINER: during 'fgInline' result 'success' reason 'below ALWAYS_INLINE size'
Expanding INLINE_CANDIDATE in statement STMT00014 in BB01:
STMT00014 (IL 0x006...  ???)
               [000043] I-C-G-------              *  CALL      void   Enumerator[__Canon][System.__Canon]..ctor (exactContextHnd=0x00000000D1FFAB1E)
               [000042] ------------ this in rcx  +--*  ADDR      byref 
               [000041] -------N----              |  \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V06 tmp2         
               [000044] H----------- arg1         +--*  CNS_INT(h) long   0xd1ffab1e class
               [000009] ------------ arg2         \--*  LCL_VAR   ref    V00 arg0         
thisArg: is a constant is byref to a struct local
               [000042] ------------              *  ADDR      byref 
               [000041] -------N----              \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V06 tmp2         


Argument #1: is a local var
               [000009] ------------              *  LCL_VAR   ref    V00 arg0         

INLINER: inlineInfo.tokenLookupContextHandle for Enumerator[__Canon][System.__Canon]:.ctor(System.Collections.Generic.List`1[__Canon]):this set to 0x00000000D1FFAB1E:

Invoking compiler for the inlinee method Enumerator[__Canon][System.__Canon]:.ctor(System.Collections.Generic.List`1[__Canon]):this :
IL to import:
IL_0000  02                ldarg.0     
IL_0001  03                ldarg.1     
IL_0002  7d 65 0c 00 0a    stfld        0xA000C65
IL_0007  02                ldarg.0     
IL_0008  16                ldc.i4.0    
IL_0009  7d 66 0c 00 0a    stfld        0xA000C66
IL_000e  02                ldarg.0     
IL_000f  03                ldarg.1     
IL_0010  7b 4a 0c 00 0a    ldfld        0xA000C4A
IL_0015  7d 67 0c 00 0a    stfld        0xA000C67
IL_001a  02                ldarg.0     
IL_001b  7c 68 0c 00 0a    ldflda       0xA000C68
IL_0020  fe 15 15 00 00 1b initobj      0x1B000015
IL_0026  2a                ret         

INLINER impTokenLookupContextHandle for Enumerator[__Canon][System.__Canon]:.ctor(System.Collections.Generic.List`1[__Canon]):this is 0x00000000D1FFAB1E.
*************** In fgFindBasicBlocks() for Enumerator[__Canon][System.__Canon]:.ctor(System.Collections.Generic.List`1[__Canon]):this
weight= 69 : state 226 [ ldarg.0 -> ldarg.1 -> stfld ]
weight= 32 : state 218 [ ldarg.0 -> ldc.i4.0 -> stfld ]
weight= 64 : state 225 [ ldarg.0 -> ldarg.1 -> ldfld -> stfld ]
weight= 10 : state   3 [ ldarg.0 ]
weight= 17 : state 110 [ ldflda ]
weight= 55 : state 180 [ initobj ]
weight= 19 : state  42 [ ret ]

multiplier in instance constructors increased to 1.5.
multiplier in methods of promotable struct increased to 4.5.
Inline candidate is mostly loads and stores.  Multiplier increased to 7.5.
Inline candidate callsite is boring.  Multiplier increased to 8.8.
calleeNativeSizeEstimate=266
callsiteNativeSizeEstimate=115
benefit multiplier=8.8
threshold=1012
Native estimate for function size is within threshold for inlining 26.6 <= 101.2 (multiplier = 8.8)
Jump targets:
  none
Computing inlinee profile scale:
   ... call site not profiled
New Basic Block BB11 [0010] created.
BB11 [000..027)
Basic block list for 'Enumerator[__Canon][System.__Canon]:.ctor(System.Collections.Generic.List`1[__Canon]):this'

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB11 [0010]  1                             1       [000..027)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

*************** Inline @[000043] Starting PHASE Pre-import

*************** Inline @[000043] Finishing PHASE Pre-import

*************** Inline @[000043] Starting PHASE Importation
*************** In impImport() for Enumerator[__Canon][System.__Canon]:.ctor(System.Collections.Generic.List`1[__Canon]):this

impImportBlockPending for BB11

Importing BB11 (PC=000) of 'Enumerator[__Canon][System.__Canon]:.ctor(System.Collections.Generic.List`1[__Canon]):this'
    [ 0]   0 (0x000) ldarg.0
    [ 1]   1 (0x001) ldarg.1
    [ 2]   2 (0x002) stfld 0A000C65

               [000055] -A----------              *  ASG       ref   
               [000054] -------N----              +--*  FIELD     ref    _list
               [000052] ------------              |  \--*  ADDR      byref 
               [000053] -------N----              |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V06 tmp2         
               [000009] ------------              \--*  LCL_VAR   ref    V00 this         

    [ 0]   7 (0x007) ldarg.0
    [ 1]   8 (0x008) ldc.i4.0 0
    [ 2]   9 (0x009) stfld 0A000C66

               [000060] -A----------              *  ASG       int   
               [000059] -------N----              +--*  FIELD     int    _index
               [000056] ------------              |  \--*  ADDR      byref 
               [000057] -------N----              |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V06 tmp2         
               [000058] ------------              \--*  CNS_INT   int    0

    [ 0]  14 (0x00e) ldarg.0
    [ 1]  15 (0x00f) ldarg.1
    [ 2]  16 (0x010) ldfld 0A000C4A
    [ 2]  21 (0x015) stfld 0A000C67

               [000066] -A-XG-------              *  ASG       int   
               [000065] -------N----              +--*  FIELD     int    _version
               [000061] ------------              |  \--*  ADDR      byref 
               [000062] -------N----              |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V06 tmp2         
               [000064] ---XG-------              \--*  FIELD     int    _version
               [000063] ------------                 \--*  LCL_VAR   ref    V00 this         

    [ 0]  26 (0x01a) ldarg.0
    [ 1]  27 (0x01b) ldflda 0A000C68
    [ 1]  32 (0x020) initobj 1B000015

               [000073] IA----------              *  ASG       struct (init)
               [000072] -------N----              +--*  BLK       struct<8>
               [000070] ------------              |  \--*  ADDR      byref 
               [000069] -------N----              |     \--*  FIELD     ref    _current
               [000067] ------------              |        \--*  ADDR      byref 
               [000068] -------N----              |           \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V06 tmp2         
               [000071] ------------              \--*  CNS_INT   int    0

    [ 0]  38 (0x026) ret
After impImport() added block for try,catch,finally
-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB11 [0010]  1                             1       [000..027)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------


*************** Inline @[000043] Finishing PHASE Importation
Trees after Importation

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB11 [0010]  1                             1       [000..027)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB11 [000..027) (return), preds={} succs={}

***** BB11
               [000055] -A----------              *  ASG       ref   
               [000054] -------N----              +--*  FIELD     ref    _list
               [000052] ------------              |  \--*  ADDR      byref 
               [000053] -------N----              |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V06 tmp2         
               [000009] ------------              \--*  LCL_VAR   ref    V00 this         

***** BB11
               [000060] -A----------              *  ASG       int   
               [000059] -------N----              +--*  FIELD     int    _index
               [000056] ------------              |  \--*  ADDR      byref 
               [000057] -------N----              |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V06 tmp2         
               [000058] ------------              \--*  CNS_INT   int    0

***** BB11
               [000066] -A-XG-------              *  ASG       int   
               [000065] -------N----              +--*  FIELD     int    _version
               [000061] ------------              |  \--*  ADDR      byref 
               [000062] -------N----              |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V06 tmp2         
               [000064] ---XG-------              \--*  FIELD     int    _version
               [000063] ------------                 \--*  LCL_VAR   ref    V00 this         

***** BB11
               [000073] IA----------              *  ASG       struct (init)
               [000072] -------N----              +--*  BLK       struct<8>
               [000070] ------------              |  \--*  ADDR      byref 
               [000069] -------N----              |     \--*  FIELD     ref    _current
               [000067] ------------              |        \--*  ADDR      byref 
               [000068] -------N----              |           \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V06 tmp2         
               [000071] ------------              \--*  CNS_INT   int    0

-------------------------------------------------------------------------------------------------------------------

*************** Inline @[000043] Starting PHASE Indirect call transform

 -- no candidates to transform

*************** Inline @[000043] Finishing PHASE Indirect call transform [no changes]

*************** Inline @[000043] Starting PHASE Expand patchpoints

 -- no patchpoints to transform

*************** Inline @[000043] Finishing PHASE Expand patchpoints [no changes]

*************** Inline @[000043] Starting PHASE Post-import

*************** In fgRemoveEmptyBlocks

*************** Inline @[000043] Finishing PHASE Post-import


----------- Statements (and blocks) added due to the inlining of call [000043] -----------

Arguments setup:

Inlinee method body:
STMT00016 (IL 0x006...  ???)
               [000055] -A----------              *  ASG       ref   
               [000054] -------N----              +--*  FIELD     ref    _list
               [000052] ------------              |  \--*  ADDR      byref 
               [000053] -------N----              |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V06 tmp2         
               [000009] ------------              \--*  LCL_VAR   ref    V00 arg0         


STMT00017 (IL 0x006...  ???)
               [000060] -A----------              *  ASG       int   
               [000059] -------N----              +--*  FIELD     int    _index
               [000056] ------------              |  \--*  ADDR      byref 
               [000057] -------N----              |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V06 tmp2         
               [000058] ------------              \--*  CNS_INT   int    0


STMT00018 (IL 0x006...  ???)
               [000066] -A-XG-------              *  ASG       int   
               [000065] -------N----              +--*  FIELD     int    _version
               [000061] ------------              |  \--*  ADDR      byref 
               [000062] -------N----              |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V06 tmp2         
               [000064] ---XG-------              \--*  FIELD     int    _version
               [000063] ------------                 \--*  LCL_VAR   ref    V00 arg0         


STMT00019 (IL 0x006...  ???)
               [000073] IA----------              *  ASG       struct (init)
               [000072] -------N----              +--*  BLK       struct<8>
               [000070] ------------              |  \--*  ADDR      byref 
               [000069] -------N----              |     \--*  FIELD     ref    _current
               [000067] ------------              |        \--*  ADDR      byref 
               [000068] -------N----              |           \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V06 tmp2         
               [000071] ------------              \--*  CNS_INT   int    0

fgInlineAppendStatements: no gc ref inline locals.
Successfully inlined Enumerator[__Canon][System.__Canon]:.ctor(System.Collections.Generic.List`1[__Canon]):this (39 IL bytes) (depth 2) [profitable inline]
--------------------------------------------------------------------------------------------

INLINER: during 'fgInline' result 'success' reason 'profitable inline' for 'SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]' calling 'Enumerator[__Canon][System.__Canon]:.ctor(System.Collections.Generic.List`1[__Canon]):this'
INLINER: during 'fgInline' result 'success' reason 'profitable inline'

Replacing the return expression placeholder [000011] with [000048]
               [000011] --C---------              *  RET_EXPR  void  (inl return from call [000048])

Inserting the inline return expression
               [000048] -A----------              *  ASG       struct (copy)
               [000047] D------N----              +--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000045] ------------              \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V06 tmp2         

Expanding INLINE_CANDIDATE in statement STMT00007 in BB03:
STMT00007 (IL 0x00F...0x016)
               [000024] I-C-G-------              *  CALL      ref    Enumerator[__Canon][System.__Canon].get_Current (exactContextHnd=0x00000000D1FFAB1E)
               [000023] ------------ this in rcx  +--*  ADDR      byref 
               [000022] -------N----              |  \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000025] H----------- arg1         \--*  CNS_INT(h) long   0xd1ffab1e class
thisArg: is a constant is byref to a struct local
               [000023] ------------              *  ADDR      byref 
               [000022] -------N----              \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         

INLINER: inlineInfo.tokenLookupContextHandle for Enumerator[__Canon][System.__Canon]:get_Current():System.__Canon:this set to 0x00000000D1FFAB1E:

Invoking compiler for the inlinee method Enumerator[__Canon][System.__Canon]:get_Current():System.__Canon:this :
IL to import:
IL_0000  02                ldarg.0     
IL_0001  7b 68 0c 00 0a    ldfld        0xA000C68
IL_0006  2a                ret         

INLINER impTokenLookupContextHandle for Enumerator[__Canon][System.__Canon]:get_Current():System.__Canon:this is 0x00000000D1FFAB1E.
*************** In fgFindBasicBlocks() for Enumerator[__Canon][System.__Canon]:get_Current():System.__Canon:this
Jump targets:
  none
Computing inlinee profile scale:
   ... call site not profiled
New Basic Block BB12 [0011] created.
BB12 [000..007)
Basic block list for 'Enumerator[__Canon][System.__Canon]:get_Current():System.__Canon:this'

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB12 [0011]  1                             1       [000..007)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

*************** Inline @[000024] Starting PHASE Pre-import

*************** Inline @[000024] Finishing PHASE Pre-import

*************** Inline @[000024] Starting PHASE Importation
*************** In impImport() for Enumerator[__Canon][System.__Canon]:get_Current():System.__Canon:this

impImportBlockPending for BB12

Importing BB12 (PC=000) of 'Enumerator[__Canon][System.__Canon]:get_Current():System.__Canon:this'
    [ 0]   0 (0x000) ldarg.0
    [ 1]   1 (0x001) ldfld 0A000C68
    [ 1]   6 (0x006) ret

    Inlinee Return expression (before normalization)  =>
               [000077] ------------              *  FIELD     ref    _current
               [000075] ------------              \--*  ADDR      byref 
               [000076] -------N----                 \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         


    Inlinee Return expression (after normalization) =>
               [000077] ------------              *  FIELD     ref    _current
               [000075] ------------              \--*  ADDR      byref 
               [000076] -------N----                 \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         

After impImport() added block for try,catch,finally
-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB12 [0011]  1                             1       [000..007)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------


** Note: inlinee IL was partially imported -- imported 0 of 7 bytes of method IL

*************** Inline @[000024] Finishing PHASE Importation
Trees after Importation

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB12 [0011]  1                             1       [000..007)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB12 [000..007) (return), preds={} succs={}

-------------------------------------------------------------------------------------------------------------------

*************** Inline @[000024] Starting PHASE Indirect call transform

 -- no candidates to transform

*************** Inline @[000024] Finishing PHASE Indirect call transform [no changes]

*************** Inline @[000024] Starting PHASE Expand patchpoints

 -- no patchpoints to transform

*************** Inline @[000024] Finishing PHASE Expand patchpoints [no changes]

*************** Inline @[000024] Starting PHASE Post-import

*************** In fgRemoveEmptyBlocks

*************** Inline @[000024] Finishing PHASE Post-import


----------- Statements (and blocks) added due to the inlining of call [000024] -----------

Arguments setup:

Inlinee method body:fgInlineAppendStatements: no gc ref inline locals.

Return expression for call at [000024] is
               [000077] ------------              *  FIELD     ref    _current
               [000075] ------------              \--*  ADDR      byref 
               [000076] -------N----                 \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
Successfully inlined Enumerator[__Canon][System.__Canon]:get_Current():System.__Canon:this (7 IL bytes) (depth 1) [below ALWAYS_INLINE size]
--------------------------------------------------------------------------------------------

INLINER: during 'fgInline' result 'success' reason 'below ALWAYS_INLINE size' for 'SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]' calling 'Enumerator[__Canon][System.__Canon]:get_Current():System.__Canon:this'
INLINER: during 'fgInline' result 'success' reason 'below ALWAYS_INLINE size'

Replacing the return expression placeholder [000026] with [000077]
               [000026] --C---------              *  RET_EXPR  ref   (inl return from call [000077])

Inserting the inline return expression
               [000077] ------------              *  FIELD     ref    _current
               [000075] ------------              \--*  ADDR      byref 
               [000076] -------N----                 \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         

Querying runtime about current class of field Enumerator[System.__Canon]._current (declared as System.__Canon)
Field's current class not available

lvaUpdateClass: NOT Updating class for V03 from (00000000D1FFAB1E) System.String to (00000000D1FFAB1E) System.__Canon
Expanding INLINE_CANDIDATE in statement STMT00005 in BB04:
STMT00005 (IL 0x01E...0x025)
               [000016] I-C-G-------              *  CALL      int    Enumerator[__Canon][System.__Canon].MoveNext (exactContextHnd=0x00000000D1FFAB1E)
               [000015] ------------ this in rcx  +--*  ADDR      byref 
               [000014] -------N----              |  \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000017] H----------- arg1         \--*  CNS_INT(h) long   0xd1ffab1e class
thisArg: is a constant is byref to a struct local
               [000015] ------------              *  ADDR      byref 
               [000014] -------N----              \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         

INLINER: inlineInfo.tokenLookupContextHandle for Enumerator[__Canon][System.__Canon]:MoveNext():bool:this set to 0x00000000D1FFAB1E:

Invoking compiler for the inlinee method Enumerator[__Canon][System.__Canon]:MoveNext():bool:this :
IL to import:
IL_0000  02                ldarg.0     
IL_0001  7b 65 0c 00 0a    ldfld        0xA000C65
IL_0006  0a                stloc.0     
IL_0007  02                ldarg.0     
IL_0008  7b 67 0c 00 0a    ldfld        0xA000C67
IL_000d  06                ldloc.0     
IL_000e  7b 4a 0c 00 0a    ldfld        0xA000C4A
IL_0013  33 35             bne.un.s     53 (IL_004a)
IL_0015  02                ldarg.0     
IL_0016  7b 66 0c 00 0a    ldfld        0xA000C66
IL_001b  06                ldloc.0     
IL_001c  7b 49 0c 00 0a    ldfld        0xA000C49
IL_0021  34 27             bge.un.s     39 (IL_004a)
IL_0023  02                ldarg.0     
IL_0024  06                ldloc.0     
IL_0025  7b 48 0c 00 0a    ldfld        0xA000C48
IL_002a  02                ldarg.0     
IL_002b  7b 66 0c 00 0a    ldfld        0xA000C66
IL_0030  a3 15 00 00 1b    ldelem       0x1B000015
IL_0035  7d 68 0c 00 0a    stfld        0xA000C68
IL_003a  02                ldarg.0     
IL_003b  02                ldarg.0     
IL_003c  7b 66 0c 00 0a    ldfld        0xA000C66
IL_0041  17                ldc.i4.1    
IL_0042  58                add         
IL_0043  7d 66 0c 00 0a    stfld        0xA000C66
IL_0048  17                ldc.i4.1    
IL_0049  2a                ret         
IL_004a  02                ldarg.0     
IL_004b  28 69 0c 00 0a    call         0xA000C69
IL_0050  2a                ret         

INLINER impTokenLookupContextHandle for Enumerator[__Canon][System.__Canon]:MoveNext():bool:this is 0x00000000D1FFAB1E.
*************** In fgFindBasicBlocks() for Enumerator[__Canon][System.__Canon]:MoveNext():bool:this
weight= 31 : state 191 [ ldarg.0 -> ldfld ]
weight=  6 : state  11 [ stloc.0 ]
weight= 31 : state 191 [ ldarg.0 -> ldfld ]
weight= 12 : state   7 [ ldloc.0 ]
weight= 18 : state 109 [ ldfld ]
weight= 12 : state  51 [ bne.un.s ]
weight= 31 : state 191 [ ldarg.0 -> ldfld ]
weight= 12 : state   7 [ ldloc.0 ]
weight= 18 : state 109 [ ldfld ]
weight= 85 : state  52 [ bge.un.s ]
weight= 10 : state   3 [ ldarg.0 ]
weight= 12 : state   7 [ ldloc.0 ]
weight= 18 : state 109 [ ldfld ]
weight= 31 : state 191 [ ldarg.0 -> ldfld ]
weight= 65 : state 140 [ ldelem ]
weight= 31 : state 111 [ stfld ]
weight= 10 : state   3 [ ldarg.0 ]
weight= 31 : state 191 [ ldarg.0 -> ldfld ]
weight= 28 : state  24 [ ldc.i4.1 ]
weight=-12 : state  76 [ add ]
weight= 31 : state 111 [ stfld ]
weight= 28 : state  24 [ ldc.i4.1 ]
weight= 19 : state  42 [ ret ]
weight= 10 : state   3 [ ldarg.0 ]
weight= 79 : state  40 [ call ]
weight= 19 : state  42 [ ret ]

multiplier in methods of promotable struct increased to 3.
Inline candidate looks like a wrapper method.  Multiplier increased to 4.
Inline candidate has const arg that feeds a conditional.  Multiplier increased to 7.
Inline candidate callsite is in a loop.  Multiplier increased to 10.
calleeNativeSizeEstimate=666
callsiteNativeSizeEstimate=85
benefit multiplier=10
threshold=850
Native estimate for function size is within threshold for inlining 66.6 <= 85 (multiplier = 10)
Jump targets:
  IL_004a
Computing inlinee profile scale:
   ... call site not profiled
New Basic Block BB13 [0012] created.
BB13 [000..015)
New Basic Block BB14 [0013] created.
BB14 [015..023)
New Basic Block BB15 [0014] created.
BB15 [023..04A)
New Basic Block BB16 [0015] created.
BB16 [04A..051)

lvaGrabTemp returning 7 (V07 tmp3) (a long lifetime temp) called for Inline return value spill temp.
Basic block list for 'Enumerator[__Canon][System.__Canon]:MoveNext():bool:this'

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB13 [0012]  1                             1       [000..015)-> BB16 ( cond )                     
BB14 [0013]  1                             1       [015..023)-> BB16 ( cond )                     
BB15 [0014]  1                             1       [023..04A)        (return)                     
BB16 [0015]  2                             1       [04A..051)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

*************** Inline @[000016] Starting PHASE Pre-import

*************** Inline @[000016] Finishing PHASE Pre-import

*************** Inline @[000016] Starting PHASE Importation
*************** In impImport() for Enumerator[__Canon][System.__Canon]:MoveNext():bool:this

impImportBlockPending for BB13

Importing BB13 (PC=000) of 'Enumerator[__Canon][System.__Canon]:MoveNext():bool:this'
    [ 0]   0 (0x000) ldarg.0
    [ 1]   1 (0x001) ldfld 0A000C65
    [ 1]   6 (0x006) stloc.0
lvaGrabTemp returning 8 (V08 tmp4) (a long lifetime temp) called for Inline stloc first use temp.
Marked V08 as a single def temp

lvaSetClass: setting class for V08 to (00000000D1FFAB1E) System.Collections.Generic.List`1[__Canon] 
Querying runtime about current class of field Enumerator[System.__Canon]._list (declared as System.Collections.Generic.List`1[__Canon])
Field's current class not available


               [000083] -A----------              *  ASG       ref   
               [000082] D------N----              +--*  LCL_VAR   ref    V08 tmp4         
               [000081] ------------              \--*  FIELD     ref    _list
               [000079] ------------                 \--*  ADDR      byref 
               [000080] -------N----                    \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         

    [ 0]   7 (0x007) ldarg.0
    [ 1]   8 (0x008) ldfld 0A000C67
    [ 1]  13 (0x00d) ldloc.0
    [ 2]  14 (0x00e) ldfld 0A000C4A
    [ 2]  19 (0x013) bne.un.s

               [000090] ---XG-------              *  JTRUE     void  
               [000089] N--XG----U--              \--*  NE        int   
               [000086] ------------                 +--*  FIELD     int    _version
               [000084] ------------                 |  \--*  ADDR      byref 
               [000085] -------N----                 |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000088] ---XG-------                 \--*  FIELD     int    _version
               [000087] ------------                    \--*  LCL_VAR   ref    V08 tmp4         

impImportBlockPending for BB14

impImportBlockPending for BB16

Importing BB16 (PC=074) of 'Enumerator[__Canon][System.__Canon]:MoveNext():bool:this'
    [ 0]  74 (0x04a) ldarg.0
    [ 1]  75 (0x04b) call 0A000C69
In Compiler::impImportCall: opcode is call, kind=0, callRetType is bool, structSize is 0


               [000093] I-C-G-------              *  CALL      int    Enumerator[__Canon][System.__Canon].MoveNextRare (exactContextHnd=0x00000000D1FFAB1E)
               [000091] ------------ this in rcx  +--*  ADDR      byref 
               [000092] -------N----              |  \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000094] H----------- arg1         \--*  CNS_INT(h) long   0xd1ffab1e class

    [ 1]  80 (0x050) ret

    Inlinee Return expression (before normalization)  =>
               [000095] --C---------              *  RET_EXPR  int   (inl return from call [000093])


               [000098] -AC---------              *  ASG       bool  
               [000097] D------N----              +--*  LCL_VAR   bool   V07 tmp3         
               [000096] --C---------              \--*  CAST      int <- bool <- int
               [000095] --C---------                 \--*  RET_EXPR  int   (inl return from call [000093])


    Inlinee Return expression (after normalization) =>
               [000099] ------------              *  LCL_VAR   bool   V07 tmp3         

Importing BB14 (PC=021) of 'Enumerator[__Canon][System.__Canon]:MoveNext():bool:this'
    [ 0]  21 (0x015) ldarg.0
    [ 1]  22 (0x016) ldfld 0A000C66
    [ 1]  27 (0x01b) ldloc.0
    [ 2]  28 (0x01c) ldfld 0A000C49
    [ 2]  33 (0x021) bge.un.s

               [000106] ---XG-------              *  JTRUE     void  
               [000105] N--XG----U--              \--*  GE        int   
               [000102] ------------                 +--*  FIELD     int    _index
               [000100] ------------                 |  \--*  ADDR      byref 
               [000101] -------N----                 |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000104] ---XG-------                 \--*  FIELD     int    _size
               [000103] ------------                    \--*  LCL_VAR   ref    V08 tmp4         

impImportBlockPending for BB15

impImportBlockPending for BB16

Importing BB15 (PC=035) of 'Enumerator[__Canon][System.__Canon]:MoveNext():bool:this'
    [ 0]  35 (0x023) ldarg.0
    [ 1]  36 (0x024) ldloc.0
    [ 2]  37 (0x025) ldfld 0A000C48
    [ 2]  42 (0x02a) ldarg.0
    [ 3]  43 (0x02b) ldfld 0A000C66
    [ 3]  48 (0x030) ldelem 1B000015
    [ 2]  53 (0x035) stfld 0A000C68

               [000116] -A-XG-------              *  ASG       ref   
               [000115] -------N----              +--*  FIELD     ref    _current
               [000107] ------------              |  \--*  ADDR      byref 
               [000108] -------N----              |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000114] ---XG-------              \--*  INDEX     ref   
               [000110] ---XG-------                 +--*  FIELD     ref    _items
               [000109] ------------                 |  \--*  LCL_VAR   ref    V08 tmp4         
               [000113] ------------                 \--*  FIELD     int    _index
               [000111] ------------                    \--*  ADDR      byref 
               [000112] -------N----                       \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         

    [ 0]  58 (0x03a) ldarg.0
    [ 1]  59 (0x03b) ldarg.0
    [ 2]  60 (0x03c) ldfld 0A000C66
    [ 2]  65 (0x041) ldc.i4.1 1
    [ 3]  66 (0x042) add
    [ 2]  67 (0x043) stfld 0A000C66

               [000125] -A----------              *  ASG       int   
               [000124] -------N----              +--*  FIELD     int    _index
               [000117] ------------              |  \--*  ADDR      byref 
               [000118] -------N----              |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000123] ------------              \--*  ADD       int   
               [000121] ------------                 +--*  FIELD     int    _index
               [000119] ------------                 |  \--*  ADDR      byref 
               [000120] -------N----                 |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000122] ------------                 \--*  CNS_INT   int    1

    [ 0]  72 (0x048) ldc.i4.1 1
    [ 1]  73 (0x049) ret

    Inlinee Return expression (before normalization)  =>
               [000126] ------------              *  CNS_INT   int    1


               [000129] -A----------              *  ASG       bool  
               [000128] D------N----              +--*  LCL_VAR   bool   V07 tmp3         
               [000127] ------------              \--*  CAST      int <- bool <- int
               [000126] ------------                 \--*  CNS_INT   int    1


    Inlinee Return expression (after normalization) =>
               [000130] ------------              *  LCL_VAR   bool   V07 tmp3         

After impImport() added block for try,catch,finally
-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB13 [0012]  1                             1       [000..015)-> BB16 ( cond )                     i 
BB14 [0013]  1                             1       [015..023)-> BB16 ( cond )                     i 
BB15 [0014]  1                             1       [023..04A)        (return)                     i 
BB16 [0015]  2                             1       [04A..051)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------


*************** Inline @[000016] Finishing PHASE Importation
Trees after Importation

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB13 [0012]  1                             1       [000..015)-> BB16 ( cond )                     i 
BB14 [0013]  1                             1       [015..023)-> BB16 ( cond )                     i 
BB15 [0014]  1                             1       [023..04A)        (return)                     i 
BB16 [0015]  2                             1       [04A..051)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB13 [000..015) -> BB16 (cond), preds={} succs={BB14,BB16}

***** BB13
               [000083] -A----------              *  ASG       ref   
               [000082] D------N----              +--*  LCL_VAR   ref    V08 tmp4         
               [000081] ------------              \--*  FIELD     ref    _list
               [000079] ------------                 \--*  ADDR      byref 
               [000080] -------N----                    \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         

***** BB13
               [000090] ---XG-------              *  JTRUE     void  
               [000089] N--XG----U--              \--*  NE        int   
               [000086] ------------                 +--*  FIELD     int    _version
               [000084] ------------                 |  \--*  ADDR      byref 
               [000085] -------N----                 |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000088] ---XG-------                 \--*  FIELD     int    _version
               [000087] ------------                    \--*  LCL_VAR   ref    V08 tmp4         

------------ BB14 [015..023) -> BB16 (cond), preds={} succs={BB15,BB16}

***** BB14
               [000106] ---XG-------              *  JTRUE     void  
               [000105] N--XG----U--              \--*  GE        int   
               [000102] ------------                 +--*  FIELD     int    _index
               [000100] ------------                 |  \--*  ADDR      byref 
               [000101] -------N----                 |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000104] ---XG-------                 \--*  FIELD     int    _size
               [000103] ------------                    \--*  LCL_VAR   ref    V08 tmp4         

------------ BB15 [023..04A) (return), preds={} succs={}

***** BB15
               [000116] -A-XG-------              *  ASG       ref   
               [000115] -------N----              +--*  FIELD     ref    _current
               [000107] ------------              |  \--*  ADDR      byref 
               [000108] -------N----              |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000114] ---XG-------              \--*  INDEX     ref   
               [000110] ---XG-------                 +--*  FIELD     ref    _items
               [000109] ------------                 |  \--*  LCL_VAR   ref    V08 tmp4         
               [000113] ------------                 \--*  FIELD     int    _index
               [000111] ------------                    \--*  ADDR      byref 
               [000112] -------N----                       \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         

***** BB15
               [000125] -A----------              *  ASG       int   
               [000124] -------N----              +--*  FIELD     int    _index
               [000117] ------------              |  \--*  ADDR      byref 
               [000118] -------N----              |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000123] ------------              \--*  ADD       int   
               [000121] ------------                 +--*  FIELD     int    _index
               [000119] ------------                 |  \--*  ADDR      byref 
               [000120] -------N----                 |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000122] ------------                 \--*  CNS_INT   int    1

***** BB15
               [000129] -A----------              *  ASG       bool  
               [000128] D------N----              +--*  LCL_VAR   bool   V07 tmp3         
               [000127] ------------              \--*  CAST      int <- bool <- int
               [000126] ------------                 \--*  CNS_INT   int    1

------------ BB16 [04A..051) (return), preds={} succs={}

***** BB16
               [000093] I-C-G-------              *  CALL      int    Enumerator[__Canon][System.__Canon].MoveNextRare (exactContextHnd=0x00000000D1FFAB1E)
               [000091] ------------ this in rcx  +--*  ADDR      byref 
               [000092] -------N----              |  \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000094] H----------- arg1         \--*  CNS_INT(h) long   0xd1ffab1e class

***** BB16
               [000098] -AC---------              *  ASG       bool  
               [000097] D------N----              +--*  LCL_VAR   bool   V07 tmp3         
               [000096] --C---------              \--*  CAST      int <- bool <- int
               [000095] --C---------                 \--*  RET_EXPR  int   (inl return from call [000093])

-------------------------------------------------------------------------------------------------------------------

*************** Inline @[000016] Starting PHASE Indirect call transform

 -- no candidates to transform

*************** Inline @[000016] Finishing PHASE Indirect call transform [no changes]

*************** Inline @[000016] Starting PHASE Expand patchpoints

 -- no patchpoints to transform

*************** Inline @[000016] Finishing PHASE Expand patchpoints [no changes]

*************** Inline @[000016] Starting PHASE Post-import

*************** In fgRemoveEmptyBlocks

*************** Inline @[000016] Finishing PHASE Post-import


----------- Statements (and blocks) added due to the inlining of call [000016] -----------

Arguments setup:

Inlinee method body:New Basic Block BB17 [0016] created.

Convert bbJumpKind of BB15 to BBJ_ALWAYS to bottomBlock BB17

Convert bbJumpKind of BB16 to BBJ_NONE
fgInlineAppendStatements: nulling out gc ref inlinee locals.
STMT00028 (IL 0x01E...  ???)
               [000133] -A----------              *  ASG       ref   
               [000132] D------N----              +--*  LCL_VAR   ref    V08 tmp4         
               [000131] ------------              \--*  CNS_INT   ref    null

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB13 [0012]  1  0                          1       [01E..01F)-> BB16 ( cond ) T0                  i bwd 
BB14 [0013]  1  0                          0.50    [01E..01F)-> BB16 ( cond ) T0                  i bwd 
BB15 [0014]  1  0                          1       [01E..01F)-> BB17 (always) T0                  i bwd 
BB16 [0015]  2  0                          1       [01E..01F)                 T0                  i bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB13 [01E..01F) -> BB16 (cond), preds={} succs={BB14,BB16}

***** BB13
STMT00020 (IL 0x01E...  ???)
               [000083] -A----------              *  ASG       ref   
               [000082] D------N----              +--*  LCL_VAR   ref    V08 tmp4         
               [000081] ------------              \--*  FIELD     ref    _list
               [000079] ------------                 \--*  ADDR      byref 
               [000080] -------N----                    \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         

***** BB13
STMT00021 (IL 0x01E...  ???)
               [000090] ---XG-------              *  JTRUE     void  
               [000089] N--XG----U--              \--*  NE        int   
               [000086] ------------                 +--*  FIELD     int    _version
               [000084] ------------                 |  \--*  ADDR      byref 
               [000085] -------N----                 |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000088] ---XG-------                 \--*  FIELD     int    _version
               [000087] ------------                    \--*  LCL_VAR   ref    V08 tmp4         

------------ BB14 [01E..01F) -> BB16 (cond), preds={} succs={BB15,BB16}

***** BB14
STMT00024 (IL 0x01E...  ???)
               [000106] ---XG-------              *  JTRUE     void  
               [000105] N--XG----U--              \--*  GE        int   
               [000102] ------------                 +--*  FIELD     int    _index
               [000100] ------------                 |  \--*  ADDR      byref 
               [000101] -------N----                 |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000104] ---XG-------                 \--*  FIELD     int    _size
               [000103] ------------                    \--*  LCL_VAR   ref    V08 tmp4         

------------ BB15 [01E..01F) -> BB17 (always), preds={} succs={BB17}

***** BB15
STMT00025 (IL 0x01E...  ???)
               [000116] -A-XG-------              *  ASG       ref   
               [000115] -------N----              +--*  FIELD     ref    _current
               [000107] ------------              |  \--*  ADDR      byref 
               [000108] -------N----              |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000114] ---XG-------              \--*  INDEX     ref   
               [000110] ---XG-------                 +--*  FIELD     ref    _items
               [000109] ------------                 |  \--*  LCL_VAR   ref    V08 tmp4         
               [000113] ------------                 \--*  FIELD     int    _index
               [000111] ------------                    \--*  ADDR      byref 
               [000112] -------N----                       \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         

***** BB15
STMT00026 (IL 0x01E...  ???)
               [000125] -A----------              *  ASG       int   
               [000124] -------N----              +--*  FIELD     int    _index
               [000117] ------------              |  \--*  ADDR      byref 
               [000118] -------N----              |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000123] ------------              \--*  ADD       int   
               [000121] ------------                 +--*  FIELD     int    _index
               [000119] ------------                 |  \--*  ADDR      byref 
               [000120] -------N----                 |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000122] ------------                 \--*  CNS_INT   int    1

***** BB15
STMT00027 (IL 0x01E...  ???)
               [000129] -A----------              *  ASG       bool  
               [000128] D------N----              +--*  LCL_VAR   bool   V07 tmp3         
               [000127] ------------              \--*  CAST      int <- bool <- int
               [000126] ------------                 \--*  CNS_INT   int    1

------------ BB16 [01E..01F), preds={} succs={BB17}

***** BB16
STMT00022 (IL 0x01E...  ???)
               [000093] I-C-G-------              *  CALL      int    Enumerator[__Canon][System.__Canon].MoveNextRare (exactContextHnd=0x00000000D1FFAB1E)
               [000091] ------------ this in rcx  +--*  ADDR      byref 
               [000092] -------N----              |  \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000094] H----------- arg1         \--*  CNS_INT(h) long   0xd1ffab1e class

***** BB16
STMT00023 (IL 0x01E...  ???)
               [000098] -AC---------              *  ASG       bool  
               [000097] D------N----              +--*  LCL_VAR   bool   V07 tmp3         
               [000096] --C---------              \--*  CAST      int <- bool <- int
               [000095] --C---------                 \--*  RET_EXPR  int   (inl return from call [000093])

-------------------------------------------------------------------------------------------------------------------

Return expression for call at [000016] is
               [000130] ------------              *  LCL_VAR   bool   V07 tmp3         
Successfully inlined Enumerator[__Canon][System.__Canon]:MoveNext():bool:this (81 IL bytes) (depth 1) [profitable inline]
--------------------------------------------------------------------------------------------

BB04 becomes empty
INLINER: during 'fgInline' result 'success' reason 'profitable inline' for 'SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]' calling 'Enumerator[__Canon][System.__Canon]:MoveNext():bool:this'
INLINER: during 'fgInline' result 'success' reason 'profitable inline'
Querying runtime about current class of field Enumerator[System.__Canon]._list (declared as System.Collections.Generic.List`1[__Canon])
Field's current class not available
Expanding INLINE_CANDIDATE in statement STMT00022 in BB16:
STMT00022 (IL 0x01E...  ???)
               [000093] I-C-G-------              *  CALL      int    Enumerator[__Canon][System.__Canon].MoveNextRare (exactContextHnd=0x00000000D1FFAB1E)
               [000091] ------------ this in rcx  +--*  ADDR      byref 
               [000092] -------N----              |  \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000094] H----------- arg1         \--*  CNS_INT(h) long   0xd1ffab1e class
thisArg: is a constant is byref to a struct local
               [000091] ------------              *  ADDR      byref 
               [000092] -------N----              \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         

INLINER: inlineInfo.tokenLookupContextHandle for Enumerator[__Canon][System.__Canon]:MoveNextRare():bool:this set to 0x00000000D1FFAB1E:

Invoking compiler for the inlinee method Enumerator[__Canon][System.__Canon]:MoveNextRare():bool:this :
IL to import:
IL_0000  02                ldarg.0     
IL_0001  7b 67 0c 00 0a    ldfld        0xA000C67
IL_0006  02                ldarg.0     
IL_0007  7b 65 0c 00 0a    ldfld        0xA000C65
IL_000c  7b 4a 0c 00 0a    ldfld        0xA000C4A
IL_0011  2e 05             beq.s        5 (IL_0018)
IL_0013  28 66 18 00 06    call         0x6001866
IL_0018  02                ldarg.0     
IL_0019  02                ldarg.0     
IL_001a  7b 65 0c 00 0a    ldfld        0xA000C65
IL_001f  7b 49 0c 00 0a    ldfld        0xA000C49
IL_0024  17                ldc.i4.1    
IL_0025  58                add         
IL_0026  7d 66 0c 00 0a    stfld        0xA000C66
IL_002b  02                ldarg.0     
IL_002c  7c 68 0c 00 0a    ldflda       0xA000C68
IL_0031  fe 15 15 00 00 1b initobj      0x1B000015
IL_0037  16                ldc.i4.0    
IL_0038  2a                ret         

INLINER impTokenLookupContextHandle for Enumerator[__Canon][System.__Canon]:MoveNextRare():bool:this is 0x00000000D1FFAB1E.
*************** In fgFindBasicBlocks() for Enumerator[__Canon][System.__Canon]:MoveNextRare():bool:this
weight= 31 : state 191 [ ldarg.0 -> ldfld ]
weight= 31 : state 191 [ ldarg.0 -> ldfld ]
weight= 18 : state 109 [ ldfld ]
weight=  6 : state  46 [ beq.s ]
weight= 79 : state  40 [ call ]
weight= 10 : state   3 [ ldarg.0 ]
weight= 31 : state 191 [ ldarg.0 -> ldfld ]
weight= 18 : state 109 [ ldfld ]
weight= 28 : state  24 [ ldc.i4.1 ]
weight=-12 : state  76 [ add ]
weight= 31 : state 111 [ stfld ]
weight= 10 : state   3 [ ldarg.0 ]
weight= 17 : state 110 [ ldflda ]
weight= 55 : state 180 [ initobj ]
weight= 15 : state  23 [ ldc.i4.0 ]
weight= 19 : state  42 [ ret ]

multiplier in methods of promotable struct increased to 3.
Inline candidate has const arg that feeds a conditional.  Multiplier increased to 6.
Inline candidate callsite is in a loop.  Multiplier increased to 9.
calleeNativeSizeEstimate=387
callsiteNativeSizeEstimate=85
benefit multiplier=9
threshold=765
Native estimate for function size is within threshold for inlining 38.7 <= 76.5 (multiplier = 9)
Jump targets:
  IL_0018
Computing inlinee profile scale:
   ... call site not profiled
New Basic Block BB18 [0017] created.
BB18 [000..013)
New Basic Block BB19 [0018] created.
BB19 [013..018)
New Basic Block BB20 [0019] created.
BB20 [018..039)
Basic block list for 'Enumerator[__Canon][System.__Canon]:MoveNextRare():bool:this'

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB18 [0017]  1                             1       [000..013)-> BB20 ( cond )                     
BB19 [0018]  1                             1       [013..018)                                     
BB20 [0019]  2                             1       [018..039)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

*************** Inline @[000093] Starting PHASE Pre-import

*************** Inline @[000093] Finishing PHASE Pre-import

*************** Inline @[000093] Starting PHASE Importation
*************** In impImport() for Enumerator[__Canon][System.__Canon]:MoveNextRare():bool:this

impImportBlockPending for BB18

Importing BB18 (PC=000) of 'Enumerator[__Canon][System.__Canon]:MoveNextRare():bool:this'
    [ 0]   0 (0x000) ldarg.0
    [ 1]   1 (0x001) ldfld 0A000C67
    [ 1]   6 (0x006) ldarg.0
    [ 2]   7 (0x007) ldfld 0A000C65
    [ 2]  12 (0x00c) ldfld 0A000C4A
    [ 2]  17 (0x011) beq.s

               [000143] ---XG-------              *  JTRUE     void  
               [000142] ---XG-------              \--*  EQ        int   
               [000137] ------------                 +--*  FIELD     int    _version
               [000135] ------------                 |  \--*  ADDR      byref 
               [000136] -------N----                 |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000141] ---XG-------                 \--*  FIELD     int    _version
               [000140] ------------                    \--*  FIELD     ref    _list
               [000138] ------------                       \--*  ADDR      byref 
               [000139] -------N----                          \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         

impImportBlockPending for BB19

impImportBlockPending for BB20

Importing BB20 (PC=024) of 'Enumerator[__Canon][System.__Canon]:MoveNextRare():bool:this'
    [ 0]  24 (0x018) ldarg.0
    [ 1]  25 (0x019) ldarg.0
    [ 2]  26 (0x01a) ldfld 0A000C65
    [ 2]  31 (0x01f) ldfld 0A000C49
    [ 2]  36 (0x024) ldc.i4.1 1
    [ 3]  37 (0x025) add
    [ 2]  38 (0x026) stfld 0A000C66

               [000153] -A-XG-------              *  ASG       int   
               [000152] -------N----              +--*  FIELD     int    _index
               [000144] ------------              |  \--*  ADDR      byref 
               [000145] -------N----              |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000151] ---XG-------              \--*  ADD       int   
               [000149] ---XG-------                 +--*  FIELD     int    _size
               [000148] ------------                 |  \--*  FIELD     ref    _list
               [000146] ------------                 |     \--*  ADDR      byref 
               [000147] -------N----                 |        \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000150] ------------                 \--*  CNS_INT   int    1

    [ 0]  43 (0x02b) ldarg.0
    [ 1]  44 (0x02c) ldflda 0A000C68
    [ 1]  49 (0x031) initobj 1B000015

               [000160] IA----------              *  ASG       struct (init)
               [000159] -------N----              +--*  BLK       struct<8>
               [000157] ------------              |  \--*  ADDR      byref 
               [000156] -------N----              |     \--*  FIELD     ref    _current
               [000154] ------------              |        \--*  ADDR      byref 
               [000155] -------N----              |           \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000158] ------------              \--*  CNS_INT   int    0

    [ 0]  55 (0x037) ldc.i4.0 0
    [ 1]  56 (0x038) ret

    Inlinee Return expression (before normalization)  =>
               [000161] ------------              *  CNS_INT   int    0


    Inlinee Return expression (after normalization) =>
               [000162] ------------              *  CAST      int <- bool <- int
               [000161] ------------              \--*  CNS_INT   int    0

Importing BB19 (PC=019) of 'Enumerator[__Canon][System.__Canon]:MoveNextRare():bool:this'
    [ 0]  19 (0x013) call 06001866
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0


               [000163] I-C-G-------              *  CALL      void   System.ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion (exactContextHnd=0x00000000D1FFAB1E)

impImportBlockPending for BB20

After impImport() added block for try,catch,finally
-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB18 [0017]  1                             1       [000..013)-> BB20 ( cond )                     i 
BB19 [0018]  1                             1       [013..018)                                     i 
BB20 [0019]  2                             1       [018..039)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------


*************** Inline @[000093] Finishing PHASE Importation
Trees after Importation

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB18 [0017]  1                             1       [000..013)-> BB20 ( cond )                     i 
BB19 [0018]  1                             1       [013..018)                                     i 
BB20 [0019]  2                             1       [018..039)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB18 [000..013) -> BB20 (cond), preds={} succs={BB19,BB20}

***** BB18
               [000143] ---XG-------              *  JTRUE     void  
               [000142] ---XG-------              \--*  EQ        int   
               [000137] ------------                 +--*  FIELD     int    _version
               [000135] ------------                 |  \--*  ADDR      byref 
               [000136] -------N----                 |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000141] ---XG-------                 \--*  FIELD     int    _version
               [000140] ------------                    \--*  FIELD     ref    _list
               [000138] ------------                       \--*  ADDR      byref 
               [000139] -------N----                          \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         

------------ BB19 [013..018), preds={} succs={BB20}

***** BB19
               [000163] I-C-G-------              *  CALL      void   System.ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion (exactContextHnd=0x00000000D1FFAB1E)

------------ BB20 [018..039) (return), preds={} succs={}

***** BB20
               [000153] -A-XG-------              *  ASG       int   
               [000152] -------N----              +--*  FIELD     int    _index
               [000144] ------------              |  \--*  ADDR      byref 
               [000145] -------N----              |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000151] ---XG-------              \--*  ADD       int   
               [000149] ---XG-------                 +--*  FIELD     int    _size
               [000148] ------------                 |  \--*  FIELD     ref    _list
               [000146] ------------                 |     \--*  ADDR      byref 
               [000147] -------N----                 |        \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000150] ------------                 \--*  CNS_INT   int    1

***** BB20
               [000160] IA----------              *  ASG       struct (init)
               [000159] -------N----              +--*  BLK       struct<8>
               [000157] ------------              |  \--*  ADDR      byref 
               [000156] -------N----              |     \--*  FIELD     ref    _current
               [000154] ------------              |        \--*  ADDR      byref 
               [000155] -------N----              |           \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000158] ------------              \--*  CNS_INT   int    0

-------------------------------------------------------------------------------------------------------------------

*************** Inline @[000093] Starting PHASE Indirect call transform

 -- no candidates to transform

*************** Inline @[000093] Finishing PHASE Indirect call transform [no changes]

*************** Inline @[000093] Starting PHASE Expand patchpoints

 -- no patchpoints to transform

*************** Inline @[000093] Finishing PHASE Expand patchpoints [no changes]

*************** Inline @[000093] Starting PHASE Post-import

*************** In fgRemoveEmptyBlocks

*************** Inline @[000093] Finishing PHASE Post-import


----------- Statements (and blocks) added due to the inlining of call [000093] -----------

Arguments setup:

Inlinee method body:New Basic Block BB21 [0020] created.

Convert bbJumpKind of BB20 to BBJ_NONE
fgInlineAppendStatements: no gc ref inline locals.

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB18 [0017]  1  0                          1       [01E..01F)-> BB20 ( cond ) T0                  i bwd 
BB19 [0018]  1  0                          0.50    [01E..01F)                 T0                  i bwd 
BB20 [0019]  2  0                          1       [01E..01F)                 T0                  i bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB18 [01E..01F) -> BB20 (cond), preds={} succs={BB19,BB20}

***** BB18
STMT00029 (IL 0x01E...  ???)
               [000143] ---XG-------              *  JTRUE     void  
               [000142] ---XG-------              \--*  EQ        int   
               [000137] ------------                 +--*  FIELD     int    _version
               [000135] ------------                 |  \--*  ADDR      byref 
               [000136] -------N----                 |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000141] ---XG-------                 \--*  FIELD     int    _version
               [000140] ------------                    \--*  FIELD     ref    _list
               [000138] ------------                       \--*  ADDR      byref 
               [000139] -------N----                          \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         

------------ BB19 [01E..01F), preds={} succs={BB20}

***** BB19
STMT00032 (IL 0x01E...  ???)
               [000163] I-C-G-------              *  CALL      void   System.ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion (exactContextHnd=0x00000000D1FFAB1E)

------------ BB20 [01E..01F), preds={} succs={BB21}

***** BB20
STMT00030 (IL 0x01E...  ???)
               [000153] -A-XG-------              *  ASG       int   
               [000152] -------N----              +--*  FIELD     int    _index
               [000144] ------------              |  \--*  ADDR      byref 
               [000145] -------N----              |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000151] ---XG-------              \--*  ADD       int   
               [000149] ---XG-------                 +--*  FIELD     int    _size
               [000148] ------------                 |  \--*  FIELD     ref    _list
               [000146] ------------                 |     \--*  ADDR      byref 
               [000147] -------N----                 |        \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000150] ------------                 \--*  CNS_INT   int    1

***** BB20
STMT00031 (IL 0x01E...  ???)
               [000160] IA----------              *  ASG       struct (init)
               [000159] -------N----              +--*  BLK       struct<8>
               [000157] ------------              |  \--*  ADDR      byref 
               [000156] -------N----              |     \--*  FIELD     ref    _current
               [000154] ------------              |        \--*  ADDR      byref 
               [000155] -------N----              |           \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000158] ------------              \--*  CNS_INT   int    0

-------------------------------------------------------------------------------------------------------------------

Return expression for call at [000093] is
               [000162] ------------              *  CAST      int <- bool <- int
               [000161] ------------              \--*  CNS_INT   int    0
Successfully inlined Enumerator[__Canon][System.__Canon]:MoveNextRare():bool:this (57 IL bytes) (depth 2) [profitable inline]
--------------------------------------------------------------------------------------------

BB16 becomes empty
INLINER: during 'fgInline' result 'success' reason 'profitable inline' for 'SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]' calling 'Enumerator[__Canon][System.__Canon]:MoveNextRare():bool:this'
INLINER: during 'fgInline' result 'success' reason 'profitable inline'
Expanding INLINE_CANDIDATE in statement STMT00032 in BB19:
STMT00032 (IL 0x01E...  ???)
               [000163] I-C-G-------              *  CALL      void   System.ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion (exactContextHnd=0x00000000D1FFAB1E)
INLINER: inlineInfo.tokenLookupContextHandle for System.ThrowHelper:ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion() set to 0x00000000D1FFAB1E:

Invoking compiler for the inlinee method System.ThrowHelper:ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion() :
IL to import:
IL_0000  28 8a 16 00 06    call         0x600168A
IL_0005  73 4b 10 00 06    newobj       0x600104B
IL_000a  7a                throw       

INLINER impTokenLookupContextHandle for System.ThrowHelper:ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion() is 0x00000000D1FFAB1E.
*************** In fgFindBasicBlocks() for System.ThrowHelper:ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion()
Jump targets:
  none
Computing inlinee profile scale:
   ... call site not profiled
New Basic Block BB22 [0021] created.
BB22 [000..00B)
Basic block list for 'System.ThrowHelper:ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion()'

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB22 [0021]  1                             0       [000..00B)        (throw )                     rare 
-----------------------------------------------------------------------------------------------------------------------------------------
INLINER: during 'fgInline' result 'failed this callee' reason 'does not return' for 'SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]' calling 'System.ThrowHelper:ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion()'
INLINER: during 'fgInline' result 'failed this callee' reason 'does not return'

Folding operator with constant nodes into a constant:
               [000162] ------------              *  CAST      int <- bool <- int
               [000161] ------------              \--*  CNS_INT   int    0
Bashed to int constant:
               [000162] ------------              *  CNS_INT   int    0

Replacing the return expression placeholder [000095] with [000162]
               [000095] --C---------              *  RET_EXPR  int   (inl return from call [000162])

Inserting the inline return expression
               [000162] ------------              *  CNS_INT   int    0


Folding operator with constant nodes into a constant:
               [000096] --C---------              *  CAST      int <- bool <- int
               [000162] ------------              \--*  CNS_INT   int    0
Bashed to int constant:
               [000096] ------------              *  CNS_INT   int    0

Replacing the return expression placeholder [000018] with [000130]
               [000018] --C---------              *  RET_EXPR  int   (inl return from call [000130])

Inserting the inline return expression
               [000130] ------------              *  LCL_VAR   bool   V07 tmp3         

Expanding INLINE_CANDIDATE in statement STMT00012 in BB06:
STMT00012 (IL 0x029...0x036)
               [000038] I-C-G-------              *  CALL      void   Enumerator[__Canon][System.__Canon].Dispose (exactContextHnd=0x00000000D1FFAB1E)
               [000037] ------------ this in rcx  +--*  ADDR      byref 
               [000036] -------N----              |  \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000039] H----------- arg1         \--*  CNS_INT(h) long   0xd1ffab1e class
thisArg: is a constant is byref to a struct local
               [000037] ------------              *  ADDR      byref 
               [000036] -------N----              \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         

INLINER: inlineInfo.tokenLookupContextHandle for Enumerator[__Canon][System.__Canon]:Dispose():this set to 0x00000000D1FFAB1E:

Invoking compiler for the inlinee method Enumerator[__Canon][System.__Canon]:Dispose():this :
IL to import:
IL_0000  2a                ret         

INLINER impTokenLookupContextHandle for Enumerator[__Canon][System.__Canon]:Dispose():this is 0x00000000D1FFAB1E.
*************** In fgFindBasicBlocks() for Enumerator[__Canon][System.__Canon]:Dispose():this
Jump targets:
  none
Computing inlinee profile scale:
   ... call site not profiled
New Basic Block BB23 [0021] created.
BB23 [000..001)
Basic block list for 'Enumerator[__Canon][System.__Canon]:Dispose():this'

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB23 [0021]  1                             1       [000..001)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

*************** Inline @[000038] Starting PHASE Pre-import

*************** Inline @[000038] Finishing PHASE Pre-import

*************** Inline @[000038] Starting PHASE Importation
*************** In impImport() for Enumerator[__Canon][System.__Canon]:Dispose():this

impImportBlockPending for BB23

Importing BB23 (PC=000) of 'Enumerator[__Canon][System.__Canon]:Dispose():this'
    [ 0]   0 (0x000) ret
After impImport() added block for try,catch,finally
-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB23 [0021]  1                             1       [000..001)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------


** Note: inlinee IL was partially imported -- imported 0 of 1 bytes of method IL

*************** Inline @[000038] Finishing PHASE Importation
Trees after Importation

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB23 [0021]  1                             1       [000..001)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB23 [000..001) (return), preds={} succs={}

-------------------------------------------------------------------------------------------------------------------

*************** Inline @[000038] Starting PHASE Indirect call transform

 -- no candidates to transform

*************** Inline @[000038] Finishing PHASE Indirect call transform [no changes]

*************** Inline @[000038] Starting PHASE Expand patchpoints

 -- no patchpoints to transform

*************** Inline @[000038] Finishing PHASE Expand patchpoints [no changes]

*************** Inline @[000038] Starting PHASE Post-import

*************** In fgRemoveEmptyBlocks

*************** Inline @[000038] Finishing PHASE Post-import


----------- Statements (and blocks) added due to the inlining of call [000038] -----------

Arguments setup:

Inlinee method body:fgInlineAppendStatements: no gc ref inline locals.
Successfully inlined Enumerator[__Canon][System.__Canon]:Dispose():this (1 IL bytes) (depth 1) [below ALWAYS_INLINE size]
--------------------------------------------------------------------------------------------

INLINER: during 'fgInline' result 'success' reason 'below ALWAYS_INLINE size' for 'SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]' calling 'Enumerator[__Canon][System.__Canon]:Dispose():this'
INLINER: during 'fgInline' result 'success' reason 'below ALWAYS_INLINE size'
Expanding INLINE_CANDIDATE in statement STMT00010 in BB07:
STMT00010 (IL 0x037...0x03D)
               [000033] I-C-G-------              *  CALL nullcheck ref    Batcher.CollectBatches (exactContextHnd=0x00000000D1FFAB1E)
               [000032] ------------ this in rcx  \--*  LCL_VAR   ref    V01 loc0         
Note: candidate is implicit tail call
thisArg: is a local var
               [000032] ------------              *  LCL_VAR   ref    V01 loc0         

INLINER: inlineInfo.tokenLookupContextHandle for Batcher:CollectBatches():System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]:this set to 0x00000000D1FFAB1E:

Invoking compiler for the inlinee method Batcher:CollectBatches():System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]:this :
IL to import:
IL_0000  02                ldarg.0     
IL_0001  7b 5e 00 00 04    ldfld        0x400005E
IL_0006  2a                ret         

INLINER impTokenLookupContextHandle for Batcher:CollectBatches():System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]:this is 0x00000000D1FFAB1E.
*************** In fgFindBasicBlocks() for Batcher:CollectBatches():System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]:this
Jump targets:
  none
Computing inlinee profile scale:
   ... call site not profiled
New Basic Block BB24 [0022] created.
BB24 [000..007)
Basic block list for 'Batcher:CollectBatches():System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]:this'

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB24 [0022]  1                             1       [000..007)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

*************** Inline @[000033] Starting PHASE Pre-import

*************** Inline @[000033] Finishing PHASE Pre-import

*************** Inline @[000033] Starting PHASE Importation
*************** In impImport() for Batcher:CollectBatches():System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]:this

impImportBlockPending for BB24

Importing BB24 (PC=000) of 'Batcher:CollectBatches():System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]:this'
    [ 0]   0 (0x000) ldarg.0
    [ 1]   1 (0x001) ldfld 0400005E
    [ 1]   6 (0x006) ret

    Inlinee Return expression (before normalization)  =>
               [000166] ---XG-------              *  FIELD     ref    _batches
               [000032] ------------              \--*  LCL_VAR   ref    V01 loc0         


    Inlinee Return expression (after normalization) =>
               [000166] ---XG-------              *  FIELD     ref    _batches
               [000032] ------------              \--*  LCL_VAR   ref    V01 loc0         

After impImport() added block for try,catch,finally
-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB24 [0022]  1                             1       [000..007)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------


** Note: inlinee IL was partially imported -- imported 0 of 7 bytes of method IL

*************** Inline @[000033] Finishing PHASE Importation
Trees after Importation

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB24 [0022]  1                             1       [000..007)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB24 [000..007) (return), preds={} succs={}

-------------------------------------------------------------------------------------------------------------------

*************** Inline @[000033] Starting PHASE Indirect call transform

 -- no candidates to transform

*************** Inline @[000033] Finishing PHASE Indirect call transform [no changes]

*************** Inline @[000033] Starting PHASE Expand patchpoints

 -- no patchpoints to transform

*************** Inline @[000033] Finishing PHASE Expand patchpoints [no changes]

*************** Inline @[000033] Starting PHASE Post-import

*************** In fgRemoveEmptyBlocks

*************** Inline @[000033] Finishing PHASE Post-import


----------- Statements (and blocks) added due to the inlining of call [000033] -----------

Arguments setup:

Inlinee method body:fgInlineAppendStatements: no gc ref inline locals.

Return expression for call at [000033] is
               [000166] ---XG-------              *  FIELD     ref    _batches
               [000032] ------------              \--*  LCL_VAR   ref    V01 loc0         
Successfully inlined Batcher:CollectBatches():System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]:this (7 IL bytes) (depth 1) [below ALWAYS_INLINE size]
--------------------------------------------------------------------------------------------

INLINER: during 'fgInline' result 'success' reason 'below ALWAYS_INLINE size' for 'SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]' calling 'Batcher:CollectBatches():System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]:this'
INLINER: during 'fgInline' result 'success' reason 'below ALWAYS_INLINE size'

Replacing the return expression placeholder [000034] with [000166]
               [000034] --C---------              *  RET_EXPR  ref   (inl return from call [000166])

Inserting the inline return expression
               [000166] ---XG-------              *  FIELD     ref    _batches
               [000032] ------------              \--*  LCL_VAR   ref    V01 loc0         

**************** Inline Tree
Inlines into 06000045 [via DefaultPolicy] SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]
  [0 IL=0000 TR=000005 06000088] [FAILED: unprofitable inline] Batcher:.ctor():this
  [1 IL=0007 TR=000010 0600630F] [below ALWAYS_INLINE size] System.Collections.Generic.List`1[__Canon][System.__Canon]:GetEnumerator():Enumerator[__Canon]:this
    [2 IL=0001 TR=000043 0600632C] [profitable inline] Enumerator[__Canon][System.__Canon]:.ctor(System.Collections.Generic.List`1[__Canon]):this
  [3 IL=0017 TR=000024 06006330] [below ALWAYS_INLINE size] Enumerator[__Canon][System.__Canon]:get_Current():System.__Canon:this
  [0 IL=0025 TR=000031 06000085] [FAILED: too many il bytes] Batcher:Push(System.String):this
  [4 IL=0032 TR=000016 0600632E] [profitable inline] Enumerator[__Canon][System.__Canon]:MoveNext():bool:this
    [5 IL=0075 TR=000093 0600632F] [profitable inline] Enumerator[__Canon][System.__Canon]:MoveNextRare():bool:this
      [0 IL=0019 TR=000163 06001866] [FAILED: does not return] System.ThrowHelper:ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion()
  [6 IL=0049 TR=000038 0600632D] [below ALWAYS_INLINE size] Enumerator[__Canon][System.__Canon]:Dispose():this
  [7 IL=0056 TR=000033 06000086] [below ALWAYS_INLINE size] Batcher:CollectBatches():System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]:this
Budget: initialTime=246, finalTime=516, initialBudget=2460, currentBudget=2460
Budget: initialSize=1544, finalSize=2578

*************** Finishing PHASE Morph - Inlining
Trees after Morph - Inlining

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i newobj nullcheck 
BB02 [0001]  1  0                          1       [00D..00F)-> BB04 (always) T0      try {       keep i try label 
BB03 [0002]  1  0                          1       [00F..01E)                 T0                  i bwd bwd-target 
BB04 [0003]  2  0                          1       [01E..027)                 T0                  i bwd 
BB13 [0012]  1  0                          1       [01E..01F)-> BB16 ( cond ) T0                  i bwd 
BB14 [0013]  1  0                          0.50    [01E..01F)-> BB16 ( cond ) T0                  i bwd 
BB15 [0014]  1  0                          1       [01E..01F)-> BB17 (always) T0                  i bwd 
BB16 [0015]  2  0                          1       [01E..01F)                 T0                  i bwd 
BB18 [0017]  1  0                          1       [01E..01F)-> BB20 ( cond ) T0                  i bwd 
BB19 [0018]  1  0                          0.50    [01E..01F)                 T0                  i bwd 
BB20 [0019]  2  0                          1       [01E..01F)                 T0                  i bwd 
BB21 [0020]  1  0                          1       [???..???)                 T0                  internal bwd 
BB17 [0016]  1  0                          1       [???..???)-> BB03 ( cond ) T0                  internal bwd 
BB05 [0004]  1  0                          1       [027..029)-> BB08 (always) T0      }           i 
BB08 [0007]  1                             1       [???..???)-> BB06 (callf )                     i internal 
BB09 [0008]  0                             1       [???..???)-> BB07 (ALWAYS)                     i internal KEEP 
BB06 [0005]  1     0                       1       [029..037)        (finret)    H0   finally { } keep i label target 
BB07 [0006]  1                             1       [037..03E)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..00D), preds={} succs={BB02}

***** BB01
STMT00000 (IL 0x000...0x005)
               [000003] -A----------              *  ASG       ref   
               [000002] D------N----              +--*  LCL_VAR   ref    V05 tmp1         
               [000001] ------------              \--*  ALLOCOBJ  ref   
               [000000] H-----------                 \--*  CNS_INT(h) long   0xd1ffab1e method

***** BB01
STMT00001 (IL   ???...  ???)
               [000005] --C-G-------              *  CALL      void   Batcher..ctor
               [000004] ------------ this in rcx  \--*  LCL_VAR   ref    V05 tmp1         

***** BB01
STMT00002 (IL 0x005...  ???)
               [000008] -A----------              *  ASG       ref   
               [000007] D------N----              +--*  LCL_VAR   ref    V01 loc0         
               [000006] ------------              \--*  LCL_VAR   ref    V05 tmp1         

***** BB01
STMT00015 (IL 0x006...  ???)
               [000050] ---X--------              *  NULLCHECK byte  
               [000049] ------------              \--*  LCL_VAR   ref    V00 arg0         

***** BB01
STMT00016 (IL 0x006...  ???)
               [000055] -A----------              *  ASG       ref   
               [000054] -------N----              +--*  FIELD     ref    _list
               [000052] ------------              |  \--*  ADDR      byref 
               [000053] -------N----              |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V06 tmp2         
               [000009] ------------              \--*  LCL_VAR   ref    V00 arg0         

***** BB01
STMT00017 (IL 0x006...  ???)
               [000060] -A----------              *  ASG       int   
               [000059] -------N----              +--*  FIELD     int    _index
               [000056] ------------              |  \--*  ADDR      byref 
               [000057] -------N----              |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V06 tmp2         
               [000058] ------------              \--*  CNS_INT   int    0

***** BB01
STMT00018 (IL 0x006...  ???)
               [000066] -A-XG-------              *  ASG       int   
               [000065] -------N----              +--*  FIELD     int    _version
               [000061] ------------              |  \--*  ADDR      byref 
               [000062] -------N----              |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V06 tmp2         
               [000064] ---XG-------              \--*  FIELD     int    _version
               [000063] ------------                 \--*  LCL_VAR   ref    V00 arg0         

***** BB01
STMT00019 (IL 0x006...  ???)
               [000073] IA----------              *  ASG       struct (init)
               [000072] -------N----              +--*  BLK       struct<8>
               [000070] ------------              |  \--*  ADDR      byref 
               [000069] -------N----              |     \--*  FIELD     ref    _current
               [000067] ------------              |        \--*  ADDR      byref 
               [000068] -------N----              |           \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V06 tmp2         
               [000071] ------------              \--*  CNS_INT   int    0

***** BB01
STMT00004 (IL   ???...  ???)
               [000048] -A----------              *  ASG       struct (copy)
               [000047] D------N----              +--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000045] ------------              \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V06 tmp2         

------------ BB02 [00D..00F) -> BB04 (always), preds={} succs={BB04}

------------ BB03 [00F..01E), preds={} succs={BB04}

***** BB03
STMT00008 (IL   ???...  ???)
               [000028] -AC---------              *  ASG       ref   
               [000027] D------N----              +--*  LCL_VAR   ref    V03 loc2         
               [000077] ------------              \--*  FIELD     ref    _current
               [000075] ------------                 \--*  ADDR      byref 
               [000076] -------N----                    \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         

***** BB03
STMT00009 (IL 0x017...0x019)
               [000031] --C-G-------              *  CALL nullcheck void   Batcher.Push
               [000029] ------------ this in rcx  +--*  LCL_VAR   ref    V01 loc0         
               [000030] ------------ arg1         \--*  LCL_VAR   ref    V03 loc2         

------------ BB04 [01E..027), preds={} succs={BB13}

------------ BB13 [01E..01F) -> BB16 (cond), preds={} succs={BB14,BB16}

***** BB13
STMT00020 (IL 0x01E...  ???)
               [000083] -A----------              *  ASG       ref   
               [000082] D------N----              +--*  LCL_VAR   ref    V08 tmp4         
               [000081] ------------              \--*  FIELD     ref    _list
               [000079] ------------                 \--*  ADDR      byref 
               [000080] -------N----                    \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         

***** BB13
STMT00021 (IL 0x01E...  ???)
               [000090] ---XG-------              *  JTRUE     void  
               [000089] N--XG----U--              \--*  NE        int   
               [000086] ------------                 +--*  FIELD     int    _version
               [000084] ------------                 |  \--*  ADDR      byref 
               [000085] -------N----                 |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000088] ---XG-------                 \--*  FIELD     int    _version
               [000087] ------------                    \--*  LCL_VAR   ref    V08 tmp4         

------------ BB14 [01E..01F) -> BB16 (cond), preds={} succs={BB15,BB16}

***** BB14
STMT00024 (IL 0x01E...  ???)
               [000106] ---XG-------              *  JTRUE     void  
               [000105] N--XG----U--              \--*  GE        int   
               [000102] ------------                 +--*  FIELD     int    _index
               [000100] ------------                 |  \--*  ADDR      byref 
               [000101] -------N----                 |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000104] ---XG-------                 \--*  FIELD     int    _size
               [000103] ------------                    \--*  LCL_VAR   ref    V08 tmp4         

------------ BB15 [01E..01F) -> BB17 (always), preds={} succs={BB17}

***** BB15
STMT00025 (IL 0x01E...  ???)
               [000116] -A-XG-------              *  ASG       ref   
               [000115] -------N----              +--*  FIELD     ref    _current
               [000107] ------------              |  \--*  ADDR      byref 
               [000108] -------N----              |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000114] ---XG-------              \--*  INDEX     ref   
               [000110] ---XG-------                 +--*  FIELD     ref    _items
               [000109] ------------                 |  \--*  LCL_VAR   ref    V08 tmp4         
               [000113] ------------                 \--*  FIELD     int    _index
               [000111] ------------                    \--*  ADDR      byref 
               [000112] -------N----                       \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         

***** BB15
STMT00026 (IL 0x01E...  ???)
               [000125] -A----------              *  ASG       int   
               [000124] -------N----              +--*  FIELD     int    _index
               [000117] ------------              |  \--*  ADDR      byref 
               [000118] -------N----              |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000123] ------------              \--*  ADD       int   
               [000121] ------------                 +--*  FIELD     int    _index
               [000119] ------------                 |  \--*  ADDR      byref 
               [000120] -------N----                 |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000122] ------------                 \--*  CNS_INT   int    1

***** BB15
STMT00027 (IL 0x01E...  ???)
               [000129] -A----------              *  ASG       bool  
               [000128] D------N----              +--*  LCL_VAR   bool   V07 tmp3         
               [000127] ------------              \--*  CAST      int <- bool <- int
               [000126] ------------                 \--*  CNS_INT   int    1

------------ BB16 [01E..01F), preds={} succs={BB18}

------------ BB18 [01E..01F) -> BB20 (cond), preds={} succs={BB19,BB20}

***** BB18
STMT00029 (IL 0x01E...  ???)
               [000143] ---XG-------              *  JTRUE     void  
               [000142] ---XG-------              \--*  EQ        int   
               [000137] ------------                 +--*  FIELD     int    _version
               [000135] ------------                 |  \--*  ADDR      byref 
               [000136] -------N----                 |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000141] ---XG-------                 \--*  FIELD     int    _version
               [000140] ------------                    \--*  FIELD     ref    _list
               [000138] ------------                       \--*  ADDR      byref 
               [000139] -------N----                          \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         

------------ BB19 [01E..01F), preds={} succs={BB20}

***** BB19
STMT00032 (IL 0x01E...  ???)
               [000163] --C-G-------              *  CALL      void   System.ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion

------------ BB20 [01E..01F), preds={} succs={BB21}

***** BB20
STMT00030 (IL 0x01E...  ???)
               [000153] -A-XG-------              *  ASG       int   
               [000152] -------N----              +--*  FIELD     int    _index
               [000144] ------------              |  \--*  ADDR      byref 
               [000145] -------N----              |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000151] ---XG-------              \--*  ADD       int   
               [000149] ---XG-------                 +--*  FIELD     int    _size
               [000148] ------------                 |  \--*  FIELD     ref    _list
               [000146] ------------                 |     \--*  ADDR      byref 
               [000147] -------N----                 |        \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000150] ------------                 \--*  CNS_INT   int    1

***** BB20
STMT00031 (IL 0x01E...  ???)
               [000160] IA----------              *  ASG       struct (init)
               [000159] -------N----              +--*  BLK       struct<8>
               [000157] ------------              |  \--*  ADDR      byref 
               [000156] -------N----              |     \--*  FIELD     ref    _current
               [000154] ------------              |        \--*  ADDR      byref 
               [000155] -------N----              |           \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000158] ------------              \--*  CNS_INT   int    0

------------ BB21 [???..???), preds={} succs={BB17}

***** BB21
STMT00023 (IL 0x01E...  ???)
               [000098] -AC---------              *  ASG       bool  
               [000097] D------N----              +--*  LCL_VAR   bool   V07 tmp3         
               [000096] ------------              \--*  CNS_INT   int    0

------------ BB17 [???..???) -> BB03 (cond), preds={} succs={BB05,BB03}

***** BB17
STMT00028 (IL 0x01E...  ???)
               [000133] -A----------              *  ASG       ref   
               [000132] D------N----              +--*  LCL_VAR   ref    V08 tmp4         
               [000131] ------------              \--*  CNS_INT   ref    null

***** BB17
STMT00006 (IL   ???...  ???)
               [000021] --C---------              *  JTRUE     void  
               [000020] --C---------              \--*  NE        int   
               [000130] ------------                 +--*  LCL_VAR   bool   V07 tmp3         
               [000019] ------------                 \--*  CNS_INT   int    0

------------ BB05 [027..029) -> BB08 (always), preds={} succs={BB08}

------------ BB08 [???..???) -> BB06 (callf), preds={} succs={BB06}

------------ BB09 [???..???) -> BB07 (ALWAYS), preds={} succs={BB07}

------------ BB06 [029..037) (finret), preds={} succs={BB09}

***** BB06
STMT00013 (IL 0x036...  ???)
               [000040] ------------              *  RETFILT   void  

------------ BB07 [037..03E) (return), preds={} succs={}

***** BB07
STMT00011 (IL   ???...  ???)
               [000035] --C---------              *  RETURN    ref   
               [000166] ---XG-------              \--*  FIELD     ref    _batches
               [000032] ------------                 \--*  LCL_VAR   ref    V01 loc0         

-------------------------------------------------------------------------------------------------------------------

*************** Starting PHASE Allocate Objects
disabled, punting

*************** Finishing PHASE Allocate Objects [no changes]

*************** Starting PHASE Morph - Add internal blocks

*************** After fgAddInternal()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i newobj nullcheck 
BB02 [0001]  1  0                          1       [00D..00F)-> BB04 (always) T0      try {       keep i try label 
BB03 [0002]  1  0                          1       [00F..01E)                 T0                  i bwd bwd-target 
BB04 [0003]  2  0                          1       [01E..027)                 T0                  i bwd 
BB13 [0012]  1  0                          1       [01E..01F)-> BB16 ( cond ) T0                  i bwd 
BB14 [0013]  1  0                          0.50    [01E..01F)-> BB16 ( cond ) T0                  i bwd 
BB15 [0014]  1  0                          1       [01E..01F)-> BB17 (always) T0                  i bwd 
BB16 [0015]  2  0                          1       [01E..01F)                 T0                  i bwd 
BB18 [0017]  1  0                          1       [01E..01F)-> BB20 ( cond ) T0                  i bwd 
BB19 [0018]  1  0                          0.50    [01E..01F)                 T0                  i bwd 
BB20 [0019]  2  0                          1       [01E..01F)                 T0                  i bwd 
BB21 [0020]  1  0                          1       [???..???)                 T0                  internal bwd 
BB17 [0016]  1  0                          1       [???..???)-> BB03 ( cond ) T0                  internal bwd 
BB05 [0004]  1  0                          1       [027..029)-> BB08 (always) T0      }           i 
BB08 [0007]  1                             1       [???..???)-> BB06 (callf )                     i internal 
BB09 [0008]  0                             1       [???..???)-> BB07 (ALWAYS)                     i internal KEEP 
BB06 [0005]  1     0                       1       [029..037)        (finret)    H0   finally { } keep i label target 
BB07 [0006]  1                             1       [037..03E)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB02..BB05 [00D..029), Finally at BB06..BB06 [029..037)

*************** Finishing PHASE Morph - Add internal blocks

*************** Starting PHASE Remove empty try

*************** In fgRemoveEmptyTry()

*************** Before fgRemoveEmptyTry()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i newobj nullcheck 
BB02 [0001]  1  0                          1       [00D..00F)-> BB04 (always) T0      try {       keep i try label 
BB03 [0002]  1  0                          1       [00F..01E)                 T0                  i bwd bwd-target 
BB04 [0003]  2  0                          1       [01E..027)                 T0                  i bwd 
BB13 [0012]  1  0                          1       [01E..01F)-> BB16 ( cond ) T0                  i bwd 
BB14 [0013]  1  0                          0.50    [01E..01F)-> BB16 ( cond ) T0                  i bwd 
BB15 [0014]  1  0                          1       [01E..01F)-> BB17 (always) T0                  i bwd 
BB16 [0015]  2  0                          1       [01E..01F)                 T0                  i bwd 
BB18 [0017]  1  0                          1       [01E..01F)-> BB20 ( cond ) T0                  i bwd 
BB19 [0018]  1  0                          0.50    [01E..01F)                 T0                  i bwd 
BB20 [0019]  2  0                          1       [01E..01F)                 T0                  i bwd 
BB21 [0020]  1  0                          1       [???..???)                 T0                  internal bwd 
BB17 [0016]  1  0                          1       [???..???)-> BB03 ( cond ) T0                  internal bwd 
BB05 [0004]  1  0                          1       [027..029)-> BB08 (always) T0      }           i 
BB08 [0007]  1                             1       [???..???)-> BB06 (callf )                     i internal 
BB09 [0008]  0                             1       [???..???)-> BB07 (ALWAYS)                     i internal KEEP 
BB06 [0005]  1     0                       1       [029..037)        (finret)    H0   finally { } keep i label target 
BB07 [0006]  1                             1       [037..03E)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB02..BB05 [00D..029), Finally at BB06..BB06 [029..037)

EH#0 first try block BB02 always jumps but not to a callfinally; skipping.

*************** Finishing PHASE Remove empty try [no changes]

*************** Starting PHASE Remove empty finally

*************** Before fgRemoveEmptyFinally()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i newobj nullcheck 
BB02 [0001]  1  0                          1       [00D..00F)-> BB04 (always) T0      try {       keep i try label 
BB03 [0002]  1  0                          1       [00F..01E)                 T0                  i bwd bwd-target 
BB04 [0003]  2  0                          1       [01E..027)                 T0                  i bwd 
BB13 [0012]  1  0                          1       [01E..01F)-> BB16 ( cond ) T0                  i bwd 
BB14 [0013]  1  0                          0.50    [01E..01F)-> BB16 ( cond ) T0                  i bwd 
BB15 [0014]  1  0                          1       [01E..01F)-> BB17 (always) T0                  i bwd 
BB16 [0015]  2  0                          1       [01E..01F)                 T0                  i bwd 
BB18 [0017]  1  0                          1       [01E..01F)-> BB20 ( cond ) T0                  i bwd 
BB19 [0018]  1  0                          0.50    [01E..01F)                 T0                  i bwd 
BB20 [0019]  2  0                          1       [01E..01F)                 T0                  i bwd 
BB21 [0020]  1  0                          1       [???..???)                 T0                  internal bwd 
BB17 [0016]  1  0                          1       [???..???)-> BB03 ( cond ) T0                  internal bwd 
BB05 [0004]  1  0                          1       [027..029)-> BB08 (always) T0      }           i 
BB08 [0007]  1                             1       [???..???)-> BB06 (callf )                     i internal 
BB09 [0008]  0                             1       [???..???)-> BB07 (ALWAYS)                     i internal KEEP 
BB06 [0005]  1     0                       1       [029..037)        (finret)    H0   finally { } keep i label target 
BB07 [0006]  1                             1       [037..03E)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB02..BB05 [00D..029), Finally at BB06..BB06 [029..037)

EH#0 has empty finally, removing the region.
Modifying callfinally BB08 leave BB09 finally BB06 continuation BB07
so that BB08 jumps to BB07; then remove BB09
fgRemoveBlock BB09

Removing unreachable BB09
Remove now-unreachable handler BB06
fgRemoveBlock BB06

Removing unreachable BB06

Removing statement STMT00013 (IL 0x036...  ???)
               [000040] ------------              *  RETFILT   void  
 in BB06 as useless:

BB06 becomes empty
EH#0: New last block of handler: BB08
fgRemoveEmptyFinally() removed 1 try-finally clauses from 1 finallys

*************** After fgRemoveEmptyFinally()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i newobj nullcheck 
BB02 [0001]  1                             1       [00D..00F)-> BB04 (always)                     keep i label 
BB03 [0002]  1                             1       [00F..01E)                                     i bwd bwd-target 
BB04 [0003]  2                             1       [01E..027)                                     i bwd 
BB13 [0012]  1                             1       [01E..01F)-> BB16 ( cond )                     i bwd 
BB14 [0013]  1                             0.50    [01E..01F)-> BB16 ( cond )                     i bwd 
BB15 [0014]  1                             1       [01E..01F)-> BB17 (always)                     i bwd 
BB16 [0015]  2                             1       [01E..01F)                                     i bwd 
BB18 [0017]  1                             1       [01E..01F)-> BB20 ( cond )                     i bwd 
BB19 [0018]  1                             0.50    [01E..01F)                                     i bwd 
BB20 [0019]  2                             1       [01E..01F)                                     i bwd 
BB21 [0020]  1                             1       [???..???)                                     internal bwd 
BB17 [0016]  1                             1       [???..???)-> BB03 ( cond )                     internal bwd 
BB05 [0004]  1                             1       [027..029)-> BB08 (always)                     i 
BB08 [0007]  1                             1       [???..???)                                     i internal 
BB07 [0006]  1                             1       [037..03E)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table is empty


*************** Finishing PHASE Remove empty finally
Trees after Remove empty finally

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i newobj nullcheck 
BB02 [0001]  1                             1       [00D..00F)-> BB04 (always)                     keep i label 
BB03 [0002]  1                             1       [00F..01E)                                     i bwd bwd-target 
BB04 [0003]  2                             1       [01E..027)                                     i bwd 
BB13 [0012]  1                             1       [01E..01F)-> BB16 ( cond )                     i bwd 
BB14 [0013]  1                             0.50    [01E..01F)-> BB16 ( cond )                     i bwd 
BB15 [0014]  1                             1       [01E..01F)-> BB17 (always)                     i bwd 
BB16 [0015]  2                             1       [01E..01F)                                     i bwd 
BB18 [0017]  1                             1       [01E..01F)-> BB20 ( cond )                     i bwd 
BB19 [0018]  1                             0.50    [01E..01F)                                     i bwd 
BB20 [0019]  2                             1       [01E..01F)                                     i bwd 
BB21 [0020]  1                             1       [???..???)                                     internal bwd 
BB17 [0016]  1                             1       [???..???)-> BB03 ( cond )                     internal bwd 
BB05 [0004]  1                             1       [027..029)-> BB08 (always)                     i 
BB08 [0007]  1                             1       [???..???)                                     i internal 
BB07 [0006]  1                             1       [037..03E)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..00D), preds={} succs={BB02}

***** BB01
STMT00000 (IL 0x000...0x005)
               [000003] -AC---------              *  ASG       ref   
               [000002] D------N----              +--*  LCL_VAR   ref    V05 tmp1         
               [000001] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000000] H----------- arg0            \--*  CNS_INT(h) long   0xd1ffab1e method

***** BB01
STMT00001 (IL   ???...  ???)
               [000005] --C-G-------              *  CALL      void   Batcher..ctor
               [000004] ------------ this in rcx  \--*  LCL_VAR   ref    V05 tmp1         

***** BB01
STMT00002 (IL 0x005...  ???)
               [000008] -A----------              *  ASG       ref   
               [000007] D------N----              +--*  LCL_VAR   ref    V01 loc0         
               [000006] ------------              \--*  LCL_VAR   ref    V05 tmp1         

***** BB01
STMT00015 (IL 0x006...  ???)
               [000050] ---X--------              *  NULLCHECK byte  
               [000049] ------------              \--*  LCL_VAR   ref    V00 arg0         

***** BB01
STMT00016 (IL 0x006...  ???)
               [000055] -A----------              *  ASG       ref   
               [000054] -------N----              +--*  FIELD     ref    _list
               [000052] ------------              |  \--*  ADDR      byref 
               [000053] -------N----              |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V06 tmp2         
               [000009] ------------              \--*  LCL_VAR   ref    V00 arg0         

***** BB01
STMT00017 (IL 0x006...  ???)
               [000060] -A----------              *  ASG       int   
               [000059] -------N----              +--*  FIELD     int    _index
               [000056] ------------              |  \--*  ADDR      byref 
               [000057] -------N----              |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V06 tmp2         
               [000058] ------------              \--*  CNS_INT   int    0

***** BB01
STMT00018 (IL 0x006...  ???)
               [000066] -A-XG-------              *  ASG       int   
               [000065] -------N----              +--*  FIELD     int    _version
               [000061] ------------              |  \--*  ADDR      byref 
               [000062] -------N----              |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V06 tmp2         
               [000064] ---XG-------              \--*  FIELD     int    _version
               [000063] ------------                 \--*  LCL_VAR   ref    V00 arg0         

***** BB01
STMT00019 (IL 0x006...  ???)
               [000073] IA----------              *  ASG       struct (init)
               [000072] -------N----              +--*  BLK       struct<8>
               [000070] ------------              |  \--*  ADDR      byref 
               [000069] -------N----              |     \--*  FIELD     ref    _current
               [000067] ------------              |        \--*  ADDR      byref 
               [000068] -------N----              |           \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V06 tmp2         
               [000071] ------------              \--*  CNS_INT   int    0

***** BB01
STMT00004 (IL   ???...  ???)
               [000048] -A----------              *  ASG       struct (copy)
               [000047] D------N----              +--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000045] ------------              \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V06 tmp2         

------------ BB02 [00D..00F) -> BB04 (always), preds={} succs={BB04}

------------ BB03 [00F..01E), preds={} succs={BB04}

***** BB03
STMT00008 (IL   ???...  ???)
               [000028] -AC---------              *  ASG       ref   
               [000027] D------N----              +--*  LCL_VAR   ref    V03 loc2         
               [000077] ------------              \--*  FIELD     ref    _current
               [000075] ------------                 \--*  ADDR      byref 
               [000076] -------N----                    \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         

***** BB03
STMT00009 (IL 0x017...0x019)
               [000031] --C-G-------              *  CALL nullcheck void   Batcher.Push
               [000029] ------------ this in rcx  +--*  LCL_VAR   ref    V01 loc0         
               [000030] ------------ arg1         \--*  LCL_VAR   ref    V03 loc2         

------------ BB04 [01E..027), preds={} succs={BB13}

------------ BB13 [01E..01F) -> BB16 (cond), preds={} succs={BB14,BB16}

***** BB13
STMT00020 (IL 0x01E...  ???)
               [000083] -A----------              *  ASG       ref   
               [000082] D------N----              +--*  LCL_VAR   ref    V08 tmp4         
               [000081] ------------              \--*  FIELD     ref    _list
               [000079] ------------                 \--*  ADDR      byref 
               [000080] -------N----                    \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         

***** BB13
STMT00021 (IL 0x01E...  ???)
               [000090] ---XG-------              *  JTRUE     void  
               [000089] N--XG----U--              \--*  NE        int   
               [000086] ------------                 +--*  FIELD     int    _version
               [000084] ------------                 |  \--*  ADDR      byref 
               [000085] -------N----                 |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000088] ---XG-------                 \--*  FIELD     int    _version
               [000087] ------------                    \--*  LCL_VAR   ref    V08 tmp4         

------------ BB14 [01E..01F) -> BB16 (cond), preds={} succs={BB15,BB16}

***** BB14
STMT00024 (IL 0x01E...  ???)
               [000106] ---XG-------              *  JTRUE     void  
               [000105] N--XG----U--              \--*  GE        int   
               [000102] ------------                 +--*  FIELD     int    _index
               [000100] ------------                 |  \--*  ADDR      byref 
               [000101] -------N----                 |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000104] ---XG-------                 \--*  FIELD     int    _size
               [000103] ------------                    \--*  LCL_VAR   ref    V08 tmp4         

------------ BB15 [01E..01F) -> BB17 (always), preds={} succs={BB17}

***** BB15
STMT00025 (IL 0x01E...  ???)
               [000116] -A-XG-------              *  ASG       ref   
               [000115] -------N----              +--*  FIELD     ref    _current
               [000107] ------------              |  \--*  ADDR      byref 
               [000108] -------N----              |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000114] ---XG-------              \--*  INDEX     ref   
               [000110] ---XG-------                 +--*  FIELD     ref    _items
               [000109] ------------                 |  \--*  LCL_VAR   ref    V08 tmp4         
               [000113] ------------                 \--*  FIELD     int    _index
               [000111] ------------                    \--*  ADDR      byref 
               [000112] -------N----                       \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         

***** BB15
STMT00026 (IL 0x01E...  ???)
               [000125] -A----------              *  ASG       int   
               [000124] -------N----              +--*  FIELD     int    _index
               [000117] ------------              |  \--*  ADDR      byref 
               [000118] -------N----              |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000123] ------------              \--*  ADD       int   
               [000121] ------------                 +--*  FIELD     int    _index
               [000119] ------------                 |  \--*  ADDR      byref 
               [000120] -------N----                 |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000122] ------------                 \--*  CNS_INT   int    1

***** BB15
STMT00027 (IL 0x01E...  ???)
               [000129] -A----------              *  ASG       bool  
               [000128] D------N----              +--*  LCL_VAR   bool   V07 tmp3         
               [000127] ------------              \--*  CAST      int <- bool <- int
               [000126] ------------                 \--*  CNS_INT   int    1

------------ BB16 [01E..01F), preds={} succs={BB18}

------------ BB18 [01E..01F) -> BB20 (cond), preds={} succs={BB19,BB20}

***** BB18
STMT00029 (IL 0x01E...  ???)
               [000143] ---XG-------              *  JTRUE     void  
               [000142] ---XG-------              \--*  EQ        int   
               [000137] ------------                 +--*  FIELD     int    _version
               [000135] ------------                 |  \--*  ADDR      byref 
               [000136] -------N----                 |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000141] ---XG-------                 \--*  FIELD     int    _version
               [000140] ------------                    \--*  FIELD     ref    _list
               [000138] ------------                       \--*  ADDR      byref 
               [000139] -------N----                          \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         

------------ BB19 [01E..01F), preds={} succs={BB20}

***** BB19
STMT00032 (IL 0x01E...  ???)
               [000163] --C-G-------              *  CALL      void   System.ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion

------------ BB20 [01E..01F), preds={} succs={BB21}

***** BB20
STMT00030 (IL 0x01E...  ???)
               [000153] -A-XG-------              *  ASG       int   
               [000152] -------N----              +--*  FIELD     int    _index
               [000144] ------------              |  \--*  ADDR      byref 
               [000145] -------N----              |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000151] ---XG-------              \--*  ADD       int   
               [000149] ---XG-------                 +--*  FIELD     int    _size
               [000148] ------------                 |  \--*  FIELD     ref    _list
               [000146] ------------                 |     \--*  ADDR      byref 
               [000147] -------N----                 |        \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000150] ------------                 \--*  CNS_INT   int    1

***** BB20
STMT00031 (IL 0x01E...  ???)
               [000160] IA----------              *  ASG       struct (init)
               [000159] -------N----              +--*  BLK       struct<8>
               [000157] ------------              |  \--*  ADDR      byref 
               [000156] -------N----              |     \--*  FIELD     ref    _current
               [000154] ------------              |        \--*  ADDR      byref 
               [000155] -------N----              |           \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> V02 loc1         
               [000158] ------------              \--*  CNS_INT   int    0

------------ BB21 [???..???), preds={} succs={BB17}

***** BB21
STMT00023 (IL 0x01E...  ???)
               [000098] -AC---------              *  ASG       bool  
               [000097] D------N----              +--*  LCL_VAR   bool   V07 tmp3         
               [000096] ------------              \--*  CNS_INT   int    0

------------ BB17 [???..???) -> BB03 (cond), preds={} succs={BB05,BB03}

***** BB17
STMT00028 (IL 0x01E...  ???)
               [000133] -A----------              *  ASG       ref   
               [000132] D------N----              +--*  LCL_VAR   ref    V08 tmp4         
               [000131] ------------              \--*  CNS_INT   ref    null

***** BB17
STMT00006 (IL   ???...  ???)
               [000021] --C---------              *  JTRUE     void  
               [000020] --C---------              \--*  NE        int   
               [000130] ------------                 +--*  LCL_VAR   bool   V07 tmp3         
               [000019] ------------                 \--*  CNS_INT   int    0

------------ BB05 [027..029) -> BB08 (always), preds={} succs={BB08}

------------ BB08 [???..???), preds={} succs={BB07}

------------ BB07 [037..03E) (return), preds={} succs={}

***** BB07
STMT00011 (IL   ???...  ???)
               [000035] --C---------              *  RETURN    ref   
               [000166] ---XG-------              \--*  FIELD     ref    _batches
               [000032] ------------                 \--*  LCL_VAR   ref    V01 loc0         

-------------------------------------------------------------------------------------------------------------------

*************** Starting PHASE Merge callfinally chains
No EH in this method, nothing to merge.

*************** Finishing PHASE Merge callfinally chains [no changes]

*************** Starting PHASE Clone finally
No EH in this method, no cloning.

*************** Finishing PHASE Clone finally [no changes]

*************** Starting PHASE Compute preds

Renumbering the basic blocks for fgComputePred

*************** Before renumbering the basic blocks

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i newobj nullcheck 
BB02 [0001]  1                             1       [00D..00F)-> BB04 (always)                     keep i label 
BB03 [0002]  1                             1       [00F..01E)                                     i bwd bwd-target 
BB04 [0003]  2                             1       [01E..027)                                     i bwd 
BB13 [0012]  1                             1       [01E..01F)-> BB16 ( cond )                     i bwd 
BB14 [0013]  1                             0.50    [01E..01F)-> BB16 ( cond )                     i bwd 
BB15 [0014]  1                             1       [01E..01F)-> BB17 (always)                     i bwd 
BB16 [0015]  2                             1       [01E..01F)                                     i bwd 
BB18 [0017]  1                             1       [01E..01F)-> BB20 ( cond )                     i bwd 
BB19 [0018]  1                             0.50    [01E..01F)                                     i bwd 
BB20 [0019]  2                             1       [01E..01F)                                     i bwd 
BB21 [0020]  1                             1       [???..???)                                     internal bwd 
BB17 [0016]  1                             1       [???..???)-> BB03 ( cond )                     internal bwd 
BB05 [0004]  1                             1       [027..029)-> BB08 (always)                     i 
BB08 [0007]  1                             1       [???..???)                                     i internal 
BB07 [0006]  1                             1       [037..03E)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table is empty
Renumber BB13 to BB05
Renumber BB14 to BB06
Renumber BB15 to BB07
Renumber BB16 to BB08
Renumber BB18 to BB09
Renumber BB19 to BB10
Renumber BB20 to BB11
Renumber BB21 to BB12
Renumber BB17 to BB13
Renumber BB05 to BB14
Renumber BB08 to BB15
Renumber BB07 to BB16

*************** After renumbering the basic blocks

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i newobj nullcheck 
BB02 [0001]  1                             1       [00D..00F)-> BB04 (always)                     keep i label 
BB03 [0002]  1                             1       [00F..01E)                                     i bwd bwd-target 
BB04 [0003]  2                             1       [01E..027)                                     i bwd 
BB05 [0012]  1                             1       [01E..01F)-> BB08 ( cond )                     i bwd 
BB06 [0013]  1                             0.50    [01E..01F)-> BB08 ( cond )                     i bwd 
BB07 [0014]  1                             1       [01E..01F)-> BB13 (always)                     i bwd 
BB08 [0015]  2                             1       [01E..01F)                                     i bwd 
BB09 [0017]  1                             1       [01E..01F)-> BB11 ( cond )                     i bwd 
BB10 [0018]  1                             0.50    [01E..01F)                                     i bwd 
BB11 [0019]  2                             1       [01E..01F)                                     i bwd 
BB12 [0020]  1                             1       [???..???)                                     internal bwd 
BB13 [0016]  1                             1       [???..???)-> BB03 ( cond )                     internal bwd 
BB14 [0004]  1                             1       [027..029)-> BB15 (always)                     i 
BB15 [0007]  1                             1       [???..???)                                     i internal 
BB16 [0006]  1                             1       [037..03E)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table is empty

New BlockSet epoch 2, # of blocks (including unused BB00): 17, bitset array size: 1 (short)

*************** In fgComputePreds()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i newobj nullcheck 
BB02 [0001]  1                             1       [00D..00F)-> BB04 (always)                     keep i label 
BB03 [0002]  1                             1       [00F..01E)                                     i bwd bwd-target 
BB04 [0003]  2                             1       [01E..027)                                     i bwd 
BB05 [0012]  1                             1       [01E..01F)-> BB08 ( cond )                     i bwd 
BB06 [0013]  1                             0.50    [01E..01F)-> BB08 ( cond )                     i bwd 
BB07 [0014]  1                             1       [01E..01F)-> BB13 (always)                     i bwd 
BB08 [0015]  2                             1       [01E..01F)                                     i bwd 
BB09 [0017]  1                             1       [01E..01F)-> BB11 ( cond )                     i bwd 
BB10 [0018]  1                             0.50    [01E..01F)                                     i bwd 
BB11 [0019]  2                             1       [01E..01F)                                     i bwd 
BB12 [0020]  1                             1       [???..???)                                     internal bwd 
BB13 [0016]  1                             1       [???..???)-> BB03 ( cond )                     internal bwd 
BB14 [0004]  1                             1       [027..029)-> BB15 (always)                     i 
BB15 [0007]  1                             1       [???..???)                                     i internal 
BB16 [0006]  1                             1       [037..03E)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------


*************** After fgComputePreds()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i label target newobj nullcheck 
BB02 [0001]  1       BB01                  1       [00D..00F)-> BB04 (always)                     keep i label 
BB03 [0002]  1       BB13                  1       [00F..01E)                                     i label target bwd bwd-target 
BB04 [0003]  2       BB02,BB03             1       [01E..027)                                     i label target bwd 
BB05 [0012]  1       BB04                  1       [01E..01F)-> BB08 ( cond )                     i bwd 
BB06 [0013]  1       BB05                  0.50    [01E..01F)-> BB08 ( cond )                     i bwd 
BB07 [0014]  1       BB06                  1       [01E..01F)-> BB13 (always)                     i bwd 
BB08 [0015]  2       BB05,BB06             1       [01E..01F)                                     i label target bwd 
BB09 [0017]  1       BB08                  1       [01E..01F)-> BB11 ( cond )                     i bwd 
BB10 [0018]  1       BB09                  0.50    [01E..01F)                                     i bwd 
BB11 [0019]  2       BB09,BB10             1       [01E..01F)                                     i label target bwd 
BB12 [0020]  1       BB11                  1       [???..???)                                     internal bwd 
BB13 [0016]  2       BB07,BB12             1       [???..???)-> BB03 ( cond )                     internal label target bwd 
BB14 [0004]  1       BB13                  1       [027..029)-> BB15 (always)                     i 
BB15 [0007]  1       BB14                  1       [???..???)                                     i internal label target 
BB16 [0006]  1       BB15                  1       [037..03E)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------


*************** Finishing PHASE Compute preds

*************** Starting PHASE Merge throw blocks

*************** In fgTailMergeThrows
Method does not have multiple noreturn calls.

*************** Finishing PHASE Merge throw blocks [no changes]

*************** Starting PHASE Update flow graph early pass

*************** In fgUpdateFlowGraph()
Before updating the flow graph:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i label target newobj nullcheck 
BB02 [0001]  1       BB01                  1       [00D..00F)-> BB04 (always)                     keep i label 
BB03 [0002]  1       BB13                  1       [00F..01E)                                     i label target bwd bwd-target 
BB04 [0003]  2       BB02,BB03             1       [01E..027)                                     i label target bwd 
BB05 [0012]  1       BB04                  1       [01E..01F)-> BB08 ( cond )                     i bwd 
BB06 [0013]  1       BB05                  0.50    [01E..01F)-> BB08 ( cond )                     i bwd 
BB07 [0014]  1       BB06                  1       [01E..01F)-> BB13 (always)                     i bwd 
BB08 [0015]  2       BB05,BB06             1       [01E..01F)                                     i label target bwd 
BB09 [0017]  1       BB08                  1       [01E..01F)-> BB11 ( cond )                     i bwd 
BB10 [0018]  1       BB09                  0.50    [01E..01F)                                     i bwd 
BB11 [0019]  2       BB09,BB10             1       [01E..01F)                                     i label target bwd 
BB12 [0020]  1       BB11                  1       [???..???)                                     internal bwd 
BB13 [0016]  2       BB07,BB12             1       [???..???)-> BB03 ( cond )                     internal label target bwd 
BB14 [0004]  1       BB13                  1       [027..029)-> BB15 (always)                     i 
BB15 [0007]  1       BB14                  1       [???..???)                                     i internal label target 
BB16 [0006]  1       BB15                  1       [037..03E)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------


Compacting blocks BB04 and BB05:
*************** In fgDebugCheckBBlist

Compacting blocks BB08 and BB09:
*************** In fgDebugCheckBBlist

Compacting blocks BB11 and BB12:
*************** In fgDebugCheckBBlist

Removing unconditional jump to next block (BB14 -> BB15) (converted BB14 to fall-through)

Compacting blocks BB14 and BB15:
*************** In fgDebugCheckBBlist

Compacting blocks BB14 and BB16:
*************** In fgDebugCheckBBlist

After updating the flow graph:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i label target newobj nullcheck 
BB02 [0001]  1       BB01                  1       [00D..00F)-> BB04 (always)                     keep i label 
BB03 [0002]  1       BB13                  1       [00F..01E)                                     i label target bwd bwd-target 
BB04 [0003]  2       BB02,BB03             1       [01E..027)-> BB08 ( cond )                     i label target bwd 
BB06 [0013]  1       BB04                  0.50    [01E..01F)-> BB08 ( cond )                     i bwd 
BB07 [0014]  1       BB06                  1       [01E..01F)-> BB13 (always)                     i bwd 
BB08 [0015]  2       BB04,BB06             1       [01E..01F)-> BB11 ( cond )                     i label target bwd 
BB10 [0018]  1       BB08                  0.50    [01E..01F)                                     i bwd 
BB11 [0019]  2       BB08,BB10             1       [01E..01F)                                     i label target bwd 
BB13 [0016]  2       BB07,BB11             1       [???..???)-> BB03 ( cond )                     internal label target bwd 
BB14 [0004]  1       BB13                  1       [027..03E)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table is empty
*************** In fgDebugCheckBBlist

*************** Finishing PHASE Update flow graph early pass

*************** Starting PHASE Morph - Promote Structs

*************** In fgResetImplicitByRefRefCount()
*************** In fgPromoteStructs()

lvaTable before fgPromoteStructs
; Initial local variable assignments
;
;  V00 arg0              ref  class-hnd
;  V01 loc0              ref  class-hnd exact
;  V02 loc1           struct <System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> ld-addr-op
;  V03 loc2              ref  class-hnd
;  V04 OutArgs        lclBlk <na>  "OutgoingArgSpace"
;  V05 tmp1              ref  class-hnd exact "NewObj constructor temp"
;  V06 tmp2           struct <System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> "NewObj constructor temp"
;  V07 tmp3             bool  "Inline return value spill temp"
;  V08 tmp4              ref  class-hnd "Inline stloc first use temp"

Promoting struct local V02 (System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):
lvaGrabTemp returning 9 (V09 tmp5) (a long lifetime temp) called for field V02._list (fldOffset=0x0).

lvaGrabTemp returning 10 (V10 tmp6) (a long lifetime temp) called for field V02._current (fldOffset=0x8).

lvaGrabTemp returning 11 (V11 tmp7) (a long lifetime temp) called for field V02._index (fldOffset=0x10).

lvaGrabTemp returning 12 (V12 tmp8) (a long lifetime temp) called for field V02._version (fldOffset=0x14).

Promoting struct local V06 (System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):
lvaGrabTemp returning 13 (V13 tmp9) (a long lifetime temp) called for field V06._list (fldOffset=0x0).

lvaGrabTemp returning 14 (V14 tmp10) (a long lifetime temp) called for field V06._current (fldOffset=0x8).

lvaGrabTemp returning 15 (V15 tmp11) (a long lifetime temp) called for field V06._index (fldOffset=0x10).

lvaGrabTemp returning 16 (V16 tmp12) (a long lifetime temp) called for field V06._version (fldOffset=0x14).

lvaTable after fgPromoteStructs
; Initial local variable assignments
;
;  V00 arg0              ref  class-hnd
;  V01 loc0              ref  class-hnd exact
;  V02 loc1           struct <System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> ld-addr-op
;  V03 loc2              ref  class-hnd
;  V04 OutArgs        lclBlk <na>  "OutgoingArgSpace"
;  V05 tmp1              ref  class-hnd exact "NewObj constructor temp"
;  V06 tmp2           struct <System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> "NewObj constructor temp"
;  V07 tmp3             bool  "Inline return value spill temp"
;  V08 tmp4              ref  class-hnd "Inline stloc first use temp"
;  V09 tmp5              ref  V02._list(offs=0x00) P-INDEP "field V02._list (fldOffset=0x0)"
;  V10 tmp6              ref  V02._current(offs=0x08) P-INDEP "field V02._current (fldOffset=0x8)"
;  V11 tmp7              int  V02._index(offs=0x10) P-INDEP "field V02._index (fldOffset=0x10)"
;  V12 tmp8              int  V02._version(offs=0x14) P-INDEP "field V02._version (fldOffset=0x14)"
;  V13 tmp9              ref  V06._list(offs=0x00) P-INDEP "field V06._list (fldOffset=0x0)"
;  V14 tmp10             ref  V06._current(offs=0x08) P-INDEP "field V06._current (fldOffset=0x8)"
;  V15 tmp11             int  V06._index(offs=0x10) P-INDEP "field V06._index (fldOffset=0x10)"
;  V16 tmp12             int  V06._version(offs=0x14) P-INDEP "field V06._version (fldOffset=0x14)"

*************** Finishing PHASE Morph - Promote Structs

*************** Starting PHASE Morph - Structs/AddrExp

*************** In fgMarkAddressExposedLocals()
LocalAddressVisitor visiting statement:
STMT00000 (IL 0x000...0x005)
               [000003] -AC---------              *  ASG       ref   
               [000002] D------N----              +--*  LCL_VAR   ref    V05 tmp1         
               [000001] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000000] H----------- arg0            \--*  CNS_INT(h) long   0xd1ffab1e method

LocalAddressVisitor visiting statement:
STMT00001 (IL   ???...  ???)
               [000005] --C-G-------              *  CALL      void   Batcher..ctor
               [000004] ------------ this in rcx  \--*  LCL_VAR   ref    V05 tmp1         

LocalAddressVisitor visiting statement:
STMT00002 (IL 0x005...  ???)
               [000008] -A----------              *  ASG       ref   
               [000007] D------N----              +--*  LCL_VAR   ref    V01 loc0         
               [000006] ------------              \--*  LCL_VAR   ref    V05 tmp1         

LocalAddressVisitor visiting statement:
STMT00015 (IL 0x006...  ???)
               [000050] ---X--------              *  NULLCHECK byte  
               [000049] ------------              \--*  LCL_VAR   ref    V00 arg0         

LocalAddressVisitor visiting statement:
STMT00016 (IL 0x006...  ???)
               [000055] -A----------              *  ASG       ref   
               [000054] -------N----              +--*  FIELD     ref    _list
               [000052] ------------              |  \--*  ADDR      byref 
               [000053] -------N----              |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24>(P) V06 tmp2         
                                                  |     \--*    ref    V06._list (offs=0x00) -> V13 tmp9         
                                                  |     \--*    ref    V06._current (offs=0x08) -> V14 tmp10        
                                                  |     \--*    int    V06._index (offs=0x10) -> V15 tmp11        
                                                  |     \--*    int    V06._version (offs=0x14) -> V16 tmp12        
               [000009] ------------              \--*  LCL_VAR   ref    V00 arg0         
Replacing the field in promoted struct with local var V13
LocalAddressVisitor modified statement:
STMT00016 (IL 0x006...  ???)
               [000055] -A----------              *  ASG       ref   
               [000054] D------N----              +--*  LCL_VAR   ref    V13 tmp9         
               [000009] ------------              \--*  LCL_VAR   ref    V00 arg0         

LocalAddressVisitor visiting statement:
STMT00017 (IL 0x006...  ???)
               [000060] -A----------              *  ASG       int   
               [000059] -------N----              +--*  FIELD     int    _index
               [000056] ------------              |  \--*  ADDR      byref 
               [000057] -------N----              |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24>(P) V06 tmp2         
                                                  |     \--*    ref    V06._list (offs=0x00) -> V13 tmp9         
                                                  |     \--*    ref    V06._current (offs=0x08) -> V14 tmp10        
                                                  |     \--*    int    V06._index (offs=0x10) -> V15 tmp11        
                                                  |     \--*    int    V06._version (offs=0x14) -> V16 tmp12        
               [000058] ------------              \--*  CNS_INT   int    0
Replacing the field in promoted struct with local var V15
LocalAddressVisitor modified statement:
STMT00017 (IL 0x006...  ???)
               [000060] -A----------              *  ASG       int   
               [000059] D------N----              +--*  LCL_VAR   int    V15 tmp11        
               [000058] ------------              \--*  CNS_INT   int    0

LocalAddressVisitor visiting statement:
STMT00018 (IL 0x006...  ???)
               [000066] -A-XG-------              *  ASG       int   
               [000065] -------N----              +--*  FIELD     int    _version
               [000061] ------------              |  \--*  ADDR      byref 
               [000062] -------N----              |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24>(P) V06 tmp2         
                                                  |     \--*    ref    V06._list (offs=0x00) -> V13 tmp9         
                                                  |     \--*    ref    V06._current (offs=0x08) -> V14 tmp10        
                                                  |     \--*    int    V06._index (offs=0x10) -> V15 tmp11        
                                                  |     \--*    int    V06._version (offs=0x14) -> V16 tmp12        
               [000064] ---XG-------              \--*  FIELD     int    _version
               [000063] ------------                 \--*  LCL_VAR   ref    V00 arg0         
Replacing the field in promoted struct with local var V16
LocalAddressVisitor modified statement:
STMT00018 (IL 0x006...  ???)
               [000066] -A-XG-------              *  ASG       int   
               [000065] D------N----              +--*  LCL_VAR   int    V16 tmp12        
               [000064] ---XG-------              \--*  FIELD     int    _version
               [000063] ------------                 \--*  LCL_VAR   ref    V00 arg0         

LocalAddressVisitor visiting statement:
STMT00019 (IL 0x006...  ???)
               [000073] IA----------              *  ASG       struct (init)
               [000072] -------N----              +--*  BLK       struct<8>
               [000070] ------------              |  \--*  ADDR      byref 
               [000069] -------N----              |     \--*  FIELD     ref    _current
               [000067] ------------              |        \--*  ADDR      byref 
               [000068] -------N----              |           \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24>(P) V06 tmp2         
                                                  |           \--*    ref    V06._list (offs=0x00) -> V13 tmp9         
                                                  |           \--*    ref    V06._current (offs=0x08) -> V14 tmp10        
                                                  |           \--*    int    V06._index (offs=0x10) -> V15 tmp11        
                                                  |           \--*    int    V06._version (offs=0x14) -> V16 tmp12        
               [000071] ------------              \--*  CNS_INT   int    0
Replacing the field in promoted struct with local var V14
LocalAddressVisitor modified statement:
STMT00019 (IL 0x006...  ???)
               [000073] IA----------              *  ASG       struct (init)
               [000072] -------N----              +--*  BLK       struct<8>
               [000070] ------------              |  \--*  ADDR      byref 
               [000069] ------------              |     \--*  LCL_VAR   ref    V14 tmp10        
               [000071] ------------              \--*  CNS_INT   int    0

LocalAddressVisitor visiting statement:
STMT00004 (IL   ???...  ???)
               [000048] -A----------              *  ASG       struct (copy)
               [000047] D------N----              +--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24>(P) V02 loc1         
                                                  +--*    ref    V02._list (offs=0x00) -> V09 tmp5         
                                                  +--*    ref    V02._current (offs=0x08) -> V10 tmp6         
                                                  +--*    int    V02._index (offs=0x10) -> V11 tmp7         
                                                  +--*    int    V02._version (offs=0x14) -> V12 tmp8         
               [000045] ------------              \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24>(P) V06 tmp2         
                                                  \--*    ref    V06._list (offs=0x00) -> V13 tmp9         
                                                  \--*    ref    V06._current (offs=0x08) -> V14 tmp10        
                                                  \--*    int    V06._index (offs=0x10) -> V15 tmp11        
                                                  \--*    int    V06._version (offs=0x14) -> V16 tmp12        

LocalAddressVisitor visiting statement:
STMT00008 (IL   ???...  ???)
               [000028] -AC---------              *  ASG       ref   
               [000027] D------N----              +--*  LCL_VAR   ref    V03 loc2         
               [000077] ------------              \--*  FIELD     ref    _current
               [000075] ------------                 \--*  ADDR      byref 
               [000076] -------N----                    \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24>(P) V02 loc1         
                                                        \--*    ref    V02._list (offs=0x00) -> V09 tmp5         
                                                        \--*    ref    V02._current (offs=0x08) -> V10 tmp6         
                                                        \--*    int    V02._index (offs=0x10) -> V11 tmp7         
                                                        \--*    int    V02._version (offs=0x14) -> V12 tmp8         
Replacing the field in promoted struct with local var V10
LocalAddressVisitor modified statement:
STMT00008 (IL   ???...  ???)
               [000028] -AC---------              *  ASG       ref   
               [000027] D------N----              +--*  LCL_VAR   ref    V03 loc2         
               [000077] ------------              \--*  LCL_VAR   ref    V10 tmp6         

LocalAddressVisitor visiting statement:
STMT00009 (IL 0x017...0x019)
               [000031] --C-G-------              *  CALL nullcheck void   Batcher.Push
               [000029] ------------ this in rcx  +--*  LCL_VAR   ref    V01 loc0         
               [000030] ------------ arg1         \--*  LCL_VAR   ref    V03 loc2         

LocalAddressVisitor visiting statement:
STMT00020 (IL 0x01E...  ???)
               [000083] -A----------              *  ASG       ref   
               [000082] D------N----              +--*  LCL_VAR   ref    V08 tmp4         
               [000081] ------------              \--*  FIELD     ref    _list
               [000079] ------------                 \--*  ADDR      byref 
               [000080] -------N----                    \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24>(P) V02 loc1         
                                                        \--*    ref    V02._list (offs=0x00) -> V09 tmp5         
                                                        \--*    ref    V02._current (offs=0x08) -> V10 tmp6         
                                                        \--*    int    V02._index (offs=0x10) -> V11 tmp7         
                                                        \--*    int    V02._version (offs=0x14) -> V12 tmp8         
Replacing the field in promoted struct with local var V09
LocalAddressVisitor modified statement:
STMT00020 (IL 0x01E...  ???)
               [000083] -A----------              *  ASG       ref   
               [000082] D------N----              +--*  LCL_VAR   ref    V08 tmp4         
               [000081] ------------              \--*  LCL_VAR   ref    V09 tmp5         

LocalAddressVisitor visiting statement:
STMT00021 (IL 0x01E...  ???)
               [000090] ---XG-------              *  JTRUE     void  
               [000089] N--XG----U--              \--*  NE        int   
               [000086] ------------                 +--*  FIELD     int    _version
               [000084] ------------                 |  \--*  ADDR      byref 
               [000085] -------N----                 |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24>(P) V02 loc1         
                                                     |     \--*    ref    V02._list (offs=0x00) -> V09 tmp5         
                                                     |     \--*    ref    V02._current (offs=0x08) -> V10 tmp6         
                                                     |     \--*    int    V02._index (offs=0x10) -> V11 tmp7         
                                                     |     \--*    int    V02._version (offs=0x14) -> V12 tmp8         
               [000088] ---XG-------                 \--*  FIELD     int    _version
               [000087] ------------                    \--*  LCL_VAR   ref    V08 tmp4         
Replacing the field in promoted struct with local var V12
LocalAddressVisitor modified statement:
STMT00021 (IL 0x01E...  ???)
               [000090] ---XG-------              *  JTRUE     void  
               [000089] N--XG----U--              \--*  NE        int   
               [000086] ------------                 +--*  LCL_VAR   int    V12 tmp8         
               [000088] ---XG-------                 \--*  FIELD     int    _version
               [000087] ------------                    \--*  LCL_VAR   ref    V08 tmp4         

LocalAddressVisitor visiting statement:
STMT00024 (IL 0x01E...  ???)
               [000106] ---XG-------              *  JTRUE     void  
               [000105] N--XG----U--              \--*  GE        int   
               [000102] ------------                 +--*  FIELD     int    _index
               [000100] ------------                 |  \--*  ADDR      byref 
               [000101] -------N----                 |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24>(P) V02 loc1         
                                                     |     \--*    ref    V02._list (offs=0x00) -> V09 tmp5         
                                                     |     \--*    ref    V02._current (offs=0x08) -> V10 tmp6         
                                                     |     \--*    int    V02._index (offs=0x10) -> V11 tmp7         
                                                     |     \--*    int    V02._version (offs=0x14) -> V12 tmp8         
               [000104] ---XG-------                 \--*  FIELD     int    _size
               [000103] ------------                    \--*  LCL_VAR   ref    V08 tmp4         
Replacing the field in promoted struct with local var V11
LocalAddressVisitor modified statement:
STMT00024 (IL 0x01E...  ???)
               [000106] ---XG-------              *  JTRUE     void  
               [000105] N--XG----U--              \--*  GE        int   
               [000102] ------------                 +--*  LCL_VAR   int    V11 tmp7         
               [000104] ---XG-------                 \--*  FIELD     int    _size
               [000103] ------------                    \--*  LCL_VAR   ref    V08 tmp4         

LocalAddressVisitor visiting statement:
STMT00025 (IL 0x01E...  ???)
               [000116] -A-XG-------              *  ASG       ref   
               [000115] -------N----              +--*  FIELD     ref    _current
               [000107] ------------              |  \--*  ADDR      byref 
               [000108] -------N----              |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24>(P) V02 loc1         
                                                  |     \--*    ref    V02._list (offs=0x00) -> V09 tmp5         
                                                  |     \--*    ref    V02._current (offs=0x08) -> V10 tmp6         
                                                  |     \--*    int    V02._index (offs=0x10) -> V11 tmp7         
                                                  |     \--*    int    V02._version (offs=0x14) -> V12 tmp8         
               [000114] ---XG-------              \--*  INDEX     ref   
               [000110] ---XG-------                 +--*  FIELD     ref    _items
               [000109] ------------                 |  \--*  LCL_VAR   ref    V08 tmp4         
               [000113] ------------                 \--*  FIELD     int    _index
               [000111] ------------                    \--*  ADDR      byref 
               [000112] -------N----                       \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24>(P) V02 loc1         
                                                           \--*    ref    V02._list (offs=0x00) -> V09 tmp5         
                                                           \--*    ref    V02._current (offs=0x08) -> V10 tmp6         
                                                           \--*    int    V02._index (offs=0x10) -> V11 tmp7         
                                                           \--*    int    V02._version (offs=0x14) -> V12 tmp8         
Replacing the field in promoted struct with local var V10
Replacing the field in promoted struct with local var V11
LocalAddressVisitor modified statement:
STMT00025 (IL 0x01E...  ???)
               [000116] -A-XG-------              *  ASG       ref   
               [000115] D------N----              +--*  LCL_VAR   ref    V10 tmp6         
               [000114] ---XG-------              \--*  INDEX     ref   
               [000110] ---XG-------                 +--*  FIELD     ref    _items
               [000109] ------------                 |  \--*  LCL_VAR   ref    V08 tmp4         
               [000113] ------------                 \--*  LCL_VAR   int    V11 tmp7         

LocalAddressVisitor visiting statement:
STMT00026 (IL 0x01E...  ???)
               [000125] -A----------              *  ASG       int   
               [000124] -------N----              +--*  FIELD     int    _index
               [000117] ------------              |  \--*  ADDR      byref 
               [000118] -------N----              |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24>(P) V02 loc1         
                                                  |     \--*    ref    V02._list (offs=0x00) -> V09 tmp5         
                                                  |     \--*    ref    V02._current (offs=0x08) -> V10 tmp6         
                                                  |     \--*    int    V02._index (offs=0x10) -> V11 tmp7         
                                                  |     \--*    int    V02._version (offs=0x14) -> V12 tmp8         
               [000123] ------------              \--*  ADD       int   
               [000121] ------------                 +--*  FIELD     int    _index
               [000119] ------------                 |  \--*  ADDR      byref 
               [000120] -------N----                 |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24>(P) V02 loc1         
                                                     |     \--*    ref    V02._list (offs=0x00) -> V09 tmp5         
                                                     |     \--*    ref    V02._current (offs=0x08) -> V10 tmp6         
                                                     |     \--*    int    V02._index (offs=0x10) -> V11 tmp7         
                                                     |     \--*    int    V02._version (offs=0x14) -> V12 tmp8         
               [000122] ------------                 \--*  CNS_INT   int    1
Replacing the field in promoted struct with local var V11
Replacing the field in promoted struct with local var V11
LocalAddressVisitor modified statement:
STMT00026 (IL 0x01E...  ???)
               [000125] -A----------              *  ASG       int   
               [000124] D------N----              +--*  LCL_VAR   int    V11 tmp7         
               [000123] ------------              \--*  ADD       int   
               [000121] ------------                 +--*  LCL_VAR   int    V11 tmp7         
               [000122] ------------                 \--*  CNS_INT   int    1

LocalAddressVisitor visiting statement:
STMT00027 (IL 0x01E...  ???)
               [000129] -A----------              *  ASG       bool  
               [000128] D------N----              +--*  LCL_VAR   bool   V07 tmp3         
               [000127] ------------              \--*  CAST      int <- bool <- int
               [000126] ------------                 \--*  CNS_INT   int    1

LocalAddressVisitor visiting statement:
STMT00029 (IL 0x01E...  ???)
               [000143] ---XG-------              *  JTRUE     void  
               [000142] ---XG-------              \--*  EQ        int   
               [000137] ------------                 +--*  FIELD     int    _version
               [000135] ------------                 |  \--*  ADDR      byref 
               [000136] -------N----                 |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24>(P) V02 loc1         
                                                     |     \--*    ref    V02._list (offs=0x00) -> V09 tmp5         
                                                     |     \--*    ref    V02._current (offs=0x08) -> V10 tmp6         
                                                     |     \--*    int    V02._index (offs=0x10) -> V11 tmp7         
                                                     |     \--*    int    V02._version (offs=0x14) -> V12 tmp8         
               [000141] ---XG-------                 \--*  FIELD     int    _version
               [000140] ------------                    \--*  FIELD     ref    _list
               [000138] ------------                       \--*  ADDR      byref 
               [000139] -------N----                          \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24>(P) V02 loc1         
                                                              \--*    ref    V02._list (offs=0x00) -> V09 tmp5         
                                                              \--*    ref    V02._current (offs=0x08) -> V10 tmp6         
                                                              \--*    int    V02._index (offs=0x10) -> V11 tmp7         
                                                              \--*    int    V02._version (offs=0x14) -> V12 tmp8         
Replacing the field in promoted struct with local var V12
Replacing the field in promoted struct with local var V09
LocalAddressVisitor modified statement:
STMT00029 (IL 0x01E...  ???)
               [000143] ---XG-------              *  JTRUE     void  
               [000142] ---XG-------              \--*  EQ        int   
               [000137] ------------                 +--*  LCL_VAR   int    V12 tmp8         
               [000141] ---XG-------                 \--*  FIELD     int    _version
               [000140] ------------                    \--*  LCL_VAR   ref    V09 tmp5         

LocalAddressVisitor visiting statement:
STMT00032 (IL 0x01E...  ???)
               [000163] --C-G-------              *  CALL      void   System.ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion

LocalAddressVisitor visiting statement:
STMT00030 (IL 0x01E...  ???)
               [000153] -A-XG-------              *  ASG       int   
               [000152] -------N----              +--*  FIELD     int    _index
               [000144] ------------              |  \--*  ADDR      byref 
               [000145] -------N----              |     \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24>(P) V02 loc1         
                                                  |     \--*    ref    V02._list (offs=0x00) -> V09 tmp5         
                                                  |     \--*    ref    V02._current (offs=0x08) -> V10 tmp6         
                                                  |     \--*    int    V02._index (offs=0x10) -> V11 tmp7         
                                                  |     \--*    int    V02._version (offs=0x14) -> V12 tmp8         
               [000151] ---XG-------              \--*  ADD       int   
               [000149] ---XG-------                 +--*  FIELD     int    _size
               [000148] ------------                 |  \--*  FIELD     ref    _list
               [000146] ------------                 |     \--*  ADDR      byref 
               [000147] -------N----                 |        \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24>(P) V02 loc1         
                                                     |        \--*    ref    V02._list (offs=0x00) -> V09 tmp5         
                                                     |        \--*    ref    V02._current (offs=0x08) -> V10 tmp6         
                                                     |        \--*    int    V02._index (offs=0x10) -> V11 tmp7         
                                                     |        \--*    int    V02._version (offs=0x14) -> V12 tmp8         
               [000150] ------------                 \--*  CNS_INT   int    1
Replacing the field in promoted struct with local var V11
Replacing the field in promoted struct with local var V09
LocalAddressVisitor modified statement:
STMT00030 (IL 0x01E...  ???)
               [000153] -A-XG-------              *  ASG       int   
               [000152] D------N----              +--*  LCL_VAR   int    V11 tmp7         
               [000151] ---XG-------              \--*  ADD       int   
               [000149] ---XG-------                 +--*  FIELD     int    _size
               [000148] ------------                 |  \--*  LCL_VAR   ref    V09 tmp5         
               [000150] ------------                 \--*  CNS_INT   int    1

LocalAddressVisitor visiting statement:
STMT00031 (IL 0x01E...  ???)
               [000160] IA----------              *  ASG       struct (init)
               [000159] -------N----              +--*  BLK       struct<8>
               [000157] ------------              |  \--*  ADDR      byref 
               [000156] -------N----              |     \--*  FIELD     ref    _current
               [000154] ------------              |        \--*  ADDR      byref 
               [000155] -------N----              |           \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24>(P) V02 loc1         
                                                  |           \--*    ref    V02._list (offs=0x00) -> V09 tmp5         
                                                  |           \--*    ref    V02._current (offs=0x08) -> V10 tmp6         
                                                  |           \--*    int    V02._index (offs=0x10) -> V11 tmp7         
                                                  |           \--*    int    V02._version (offs=0x14) -> V12 tmp8         
               [000158] ------------              \--*  CNS_INT   int    0
Replacing the field in promoted struct with local var V10
LocalAddressVisitor modified statement:
STMT00031 (IL 0x01E...  ???)
               [000160] IA----------              *  ASG       struct (init)
               [000159] -------N----              +--*  BLK       struct<8>
               [000157] ------------              |  \--*  ADDR      byref 
               [000156] ------------              |     \--*  LCL_VAR   ref    V10 tmp6         
               [000158] ------------              \--*  CNS_INT   int    0

LocalAddressVisitor visiting statement:
STMT00023 (IL 0x01E...  ???)
               [000098] -AC---------              *  ASG       bool  
               [000097] D------N----              +--*  LCL_VAR   bool   V07 tmp3         
               [000096] ------------              \--*  CNS_INT   int    0

LocalAddressVisitor visiting statement:
STMT00028 (IL 0x01E...  ???)
               [000133] -A----------              *  ASG       ref   
               [000132] D------N----              +--*  LCL_VAR   ref    V08 tmp4         
               [000131] ------------              \--*  CNS_INT   ref    null

LocalAddressVisitor visiting statement:
STMT00006 (IL   ???...  ???)
               [000021] --C---------              *  JTRUE     void  
               [000020] --C---------              \--*  NE        int   
               [000130] ------------                 +--*  LCL_VAR   bool   V07 tmp3         
               [000019] ------------                 \--*  CNS_INT   int    0

LocalAddressVisitor visiting statement:
STMT00011 (IL   ???...  ???)
               [000035] --C---------              *  RETURN    ref   
               [000166] ---XG-------              \--*  FIELD     ref    _batches
               [000032] ------------                 \--*  LCL_VAR   ref    V01 loc0         


*************** Finishing PHASE Morph - Structs/AddrExp

*************** Starting PHASE Morph - ByRefs

*************** In fgRetypeImplicitByRefArgs()

*************** Finishing PHASE Morph - ByRefs

*************** Starting PHASE Morph - Global

*************** In fgMorphBlocks()

Morphing BB01 of 'SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'

fgMorphTree BB01, STMT00000 (before)
               [000003] -AC---------              *  ASG       ref   
               [000002] D------N----              +--*  LCL_VAR   ref    V05 tmp1         
               [000001] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000000] H----------- arg0            \--*  CNS_INT(h) long   0xd1ffab1e method
Initializing arg info for 1.CALL:
ArgTable for 1.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 0.CNS_INT long (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 1.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000000] H----+------              *  CNS_INT(h) long   0xd1ffab1e method
Replaced with placeholder node:
               [000168] ----------L-              *  ARGPLACE  long  

Shuffled argument table:    rcx 
ArgTable for 1.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 0.CNS_INT long (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB01, STMT00000 (after)
               [000003] -AC--+------              *  ASG       ref   
               [000002] D----+-N----              +--*  LCL_VAR   ref    V05 tmp1         
               [000001] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000000] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e method

fgMorphTree BB01, STMT00001 (before)
               [000005] --C-G-------              *  CALL      void   Batcher..ctor
               [000004] ------------ this in rcx  \--*  LCL_VAR   ref    V05 tmp1         
Initializing arg info for 5.CALL:
ArgTable for 5.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 4.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 5.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000004] -----+------              *  LCL_VAR   ref    V05 tmp1         
Replaced with placeholder node:
               [000169] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx 
ArgTable for 5.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 4.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB01, STMT00001 (after)
               [000005] --CXG+------              *  CALL      void   Batcher..ctor
               [000004] -----+------ this in rcx  \--*  LCL_VAR   ref    V05 tmp1         

fgMorphTree BB01, STMT00002 (before)
               [000008] -A----------              *  ASG       ref   
               [000007] D------N----              +--*  LCL_VAR   ref    V01 loc0         
               [000006] ------------              \--*  LCL_VAR   ref    V05 tmp1         
GenTreeNode creates assertion:
               [000008] -A----------              *  ASG       ref   
In BB01 New Local Copy     Assertion: V01 == V05 index=#01, mask=0000000000000001

fgMorphTree BB01, STMT00015 (before)
               [000050] ---X--------              *  NULLCHECK byte  
               [000049] ------------              \--*  LCL_VAR   ref    V00 arg0         
GenTreeNode creates assertion:
               [000050] ---X--------              *  NULLCHECK byte  
In BB01 New Local Constant Assertion: V00 != null index=#02, mask=0000000000000002

fgMorphTree BB01, STMT00016 (before)
               [000055] -A----------              *  ASG       ref   
               [000054] D------N----              +--*  LCL_VAR   ref    V13 tmp9         
               [000009] ------------              \--*  LCL_VAR   ref    V00 arg0         
GenTreeNode creates assertion:
               [000055] -A----------              *  ASG       ref   
In BB01 New Local Copy     Assertion: V13 == V00 index=#03, mask=0000000000000004

fgMorphTree BB01, STMT00017 (before)
               [000060] -A----------              *  ASG       int   
               [000059] D------N----              +--*  LCL_VAR   int    V15 tmp11        
               [000058] ------------              \--*  CNS_INT   int    0
GenTreeNode creates assertion:
               [000060] -A----------              *  ASG       int   
In BB01 New Local Constant Assertion: V15 == 0 index=#04, mask=0000000000000008

fgMorphTree BB01, STMT00018 (before)
               [000066] -A-XG-------              *  ASG       int   
               [000065] D------N----              +--*  LCL_VAR   int    V16 tmp12        
               [000064] ---XG-------              \--*  FIELD     int    _version
               [000063] ------------                 \--*  LCL_VAR   ref    V00 arg0         

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000064] ---XG-------              *  IND       int   
               [000171] -----+------              \--*  ADD       byref 
               [000063] -----+------                 +--*  LCL_VAR   ref    V00 arg0         
               [000170] -----+------                 \--*  CNS_INT   long   20 field offset Fseq[_version]
GenTreeNode creates assertion:
               [000066] -A-XG-------              *  ASG       int   
In BB01 New Local Subrange Assertion: V16 in [-2147483648..2147483647] index=#05, mask=0000000000000010

fgMorphTree BB01, STMT00018 (after)
               [000066] -A-XG+------              *  ASG       int   
               [000065] D----+-N----              +--*  LCL_VAR   int    V16 tmp12        
               [000064] ---XG+------              \--*  IND       int   
               [000171] -----+------                 \--*  ADD       byref 
               [000063] -----+------                    +--*  LCL_VAR   ref    V00 arg0         
               [000170] -----+------                    \--*  CNS_INT   long   20 field offset Fseq[_version]

fgMorphTree BB01, STMT00019 (before)
               [000073] IA----------              *  ASG       struct (init)
               [000072] -------N----              +--*  BLK       struct<8>
               [000070] ------------              |  \--*  ADDR      byref 
               [000069] ------------              |     \--*  LCL_VAR   ref    V14 tmp10        
               [000071] ------------              \--*  CNS_INT   int    0
fgMorphBlkNode for dst tree, before:
               [000072] n----+-N----              *  BLK       struct<8>
               [000070] -----+------              \--*  ADDR      byref 
               [000069] D----+-N----                 \--*  LCL_VAR   ref    V14 tmp10        
fgMorphBlkNode after:
               [000072] n----+-N----              *  BLK       struct<8>
               [000070] -----+------              \--*  ADDR      byref 
               [000069] D----+-N----                 \--*  LCL_VAR   ref    V14 tmp10        

fgMorphInitBlock:fgMorphOneAsgBlock (after):
               [000073] -A----------              *  ASG       ref   
               [000069] D----+-N----              +--*  LCL_VAR   ref    V14 tmp10        
               [000071] -----+------              \--*  CNS_INT   ref    null
 using oneAsgTree.
GenTreeNode creates assertion:
               [000073] -A----------              *  ASG       ref   
In BB01 New Local Constant Assertion: V14 == null index=#06, mask=0000000000000020

fgMorphTree BB01, STMT00019 (after)
               [000073] -A---+------              *  ASG       ref   
               [000069] D----+-N----              +--*  LCL_VAR   ref    V14 tmp10        
               [000071] -----+------              \--*  CNS_INT   ref    null

fgMorphTree BB01, STMT00004 (before)
               [000048] -A----------              *  ASG       struct (copy)
               [000047] D------N----              +--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24>(P) V02 loc1         
                                                  +--*    ref    V02._list (offs=0x00) -> V09 tmp5         
                                                  +--*    ref    V02._current (offs=0x08) -> V10 tmp6         
                                                  +--*    int    V02._index (offs=0x10) -> V11 tmp7         
                                                  +--*    int    V02._version (offs=0x14) -> V12 tmp8         
               [000045] ------------              \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24>(P) V06 tmp2         
                                                  \--*    ref    V06._list (offs=0x00) -> V13 tmp9         
                                                  \--*    ref    V06._current (offs=0x08) -> V14 tmp10        
                                                  \--*    int    V06._index (offs=0x10) -> V15 tmp11        
                                                  \--*    int    V06._version (offs=0x14) -> V16 tmp12        
fgMorphCopyBlock:
fgMorphBlkNode for dst tree, before:
               [000047] D----+-N----              *  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24>(P) V02 loc1         
                                                  *    ref    V02._list (offs=0x00) -> V09 tmp5         
                                                  *    ref    V02._current (offs=0x08) -> V10 tmp6         
                                                  *    int    V02._index (offs=0x10) -> V11 tmp7         
                                                  *    int    V02._version (offs=0x14) -> V12 tmp8         
fgMorphBlkNode after:
               [000047] D----+-N----              *  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24>(P) V02 loc1         
                                                  *    ref    V02._list (offs=0x00) -> V09 tmp5         
                                                  *    ref    V02._current (offs=0x08) -> V10 tmp6         
                                                  *    int    V02._index (offs=0x10) -> V11 tmp7         
                                                  *    int    V02._version (offs=0x14) -> V12 tmp8         
fgMorphBlkNode for src tree, before:
               [000045] -----+------              *  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24>(P) V06 tmp2         
                                                  *    ref    V06._list (offs=0x00) -> V13 tmp9         
                                                  *    ref    V06._current (offs=0x08) -> V14 tmp10        
                                                  *    int    V06._index (offs=0x10) -> V15 tmp11        
                                                  *    int    V06._version (offs=0x14) -> V16 tmp12        
fgMorphBlkNode after:
               [000045] -----+------              *  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24>(P) V06 tmp2         
                                                  *    ref    V06._list (offs=0x00) -> V13 tmp9         
                                                  *    ref    V06._current (offs=0x08) -> V14 tmp10        
                                                  *    int    V06._index (offs=0x10) -> V15 tmp11        
                                                  *    int    V06._version (offs=0x14) -> V16 tmp12        
block assignment to morph:
               [000048] -A----------              *  ASG       struct (copy)
               [000047] D----+-N----              +--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24>(P) V02 loc1         
                                                  +--*    ref    V02._list (offs=0x00) -> V09 tmp5         
                                                  +--*    ref    V02._current (offs=0x08) -> V10 tmp6         
                                                  +--*    int    V02._index (offs=0x10) -> V11 tmp7         
                                                  +--*    int    V02._version (offs=0x14) -> V12 tmp8         
               [000045] -----+------              \--*  LCL_VAR   struct<System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24>(P) V06 tmp2         
                                                  \--*    ref    V06._list (offs=0x00) -> V13 tmp9         
                                                  \--*    ref    V06._current (offs=0x08) -> V14 tmp10        
                                                  \--*    int    V06._index (offs=0x10) -> V15 tmp11        
                                                  \--*    int    V06._version (offs=0x14) -> V16 tmp12        
 (destDoFldAsg=true) (srcDoFldAsg=true) using field by field assignments.
GenTreeNode creates assertion:
               [000174] -A----------              *  ASG       ref   
In BB01 New Local Copy     Assertion: V09 == V13 index=#07, mask=0000000000000040
GenTreeNode creates assertion:
               [000177] -A----------              *  ASG       ref   
In BB01 New Local Copy     Assertion: V10 == V14 index=#08, mask=0000000000000080
GenTreeNode creates assertion:
               [000181] -A----------              *  ASG       int   
In BB01 New Local Copy     Assertion: V11 == V15 index=#09, mask=0000000000000100
GenTreeNode creates assertion:
               [000185] -A----------              *  ASG       int   
In BB01 New Local Copy     Assertion: V12 == V16 index=#10, mask=0000000000000200

fgMorphCopyBlock (after):
               [000186] -A---+------              *  COMMA     void  
               [000182] -A----------              +--*  COMMA     void  
               [000178] -A----------              |  +--*  COMMA     void  
               [000174] -A----------              |  |  +--*  ASG       ref   
               [000172] D------N----              |  |  |  +--*  LCL_VAR   ref    V09 tmp5         
               [000173] ------------              |  |  |  \--*  LCL_VAR   ref    V13 tmp9         
               [000177] -A----------              |  |  \--*  ASG       ref   
               [000175] D------N----              |  |     +--*  LCL_VAR   ref    V10 tmp6         
               [000176] ------------              |  |     \--*  LCL_VAR   ref    V14 tmp10        
               [000181] -A----------              |  \--*  ASG       int   
               [000179] D------N----              |     +--*  LCL_VAR   int    V11 tmp7         
               [000180] ------------              |     \--*  LCL_VAR   int    V15 tmp11        
               [000185] -A----------              \--*  ASG       int   
               [000183] D------N----                 +--*  LCL_VAR   int    V12 tmp8         
               [000184] ------------                 \--*  LCL_VAR   int    V16 tmp12        

fgMorphTree BB01, STMT00004 (after)
               [000186] -A---+------              *  COMMA     void  
               [000182] -A----------              +--*  COMMA     void  
               [000178] -A----------              |  +--*  COMMA     void  
               [000174] -A----------              |  |  +--*  ASG       ref   
               [000172] D------N----              |  |  |  +--*  LCL_VAR   ref    V09 tmp5         
               [000173] ------------              |  |  |  \--*  LCL_VAR   ref    V13 tmp9         
               [000177] -A----------              |  |  \--*  ASG       ref   
               [000175] D------N----              |  |     +--*  LCL_VAR   ref    V10 tmp6         
               [000176] ------------              |  |     \--*  LCL_VAR   ref    V14 tmp10        
               [000181] -A----------              |  \--*  ASG       int   
               [000179] D------N----              |     +--*  LCL_VAR   int    V11 tmp7         
               [000180] ------------              |     \--*  LCL_VAR   int    V15 tmp11        
               [000185] -A----------              \--*  ASG       int   
               [000183] D------N----                 +--*  LCL_VAR   int    V12 tmp8         
               [000184] ------------                 \--*  LCL_VAR   int    V16 tmp12        

Morphing BB02 of 'SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'

Morphing BB03 of 'SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'

fgMorphTree BB03, STMT00008 (before)
               [000028] -AC---------              *  ASG       ref   
               [000027] D------N----              +--*  LCL_VAR   ref    V03 loc2         
               [000077] ------------              \--*  LCL_VAR   ref    V10 tmp6         
GenTreeNode creates assertion:
               [000028] -A----------              *  ASG       ref   
In BB03 New Local Copy     Assertion: V03 == V10 index=#01, mask=0000000000000001

fgMorphTree BB03, STMT00009 (before)
               [000031] --C-G-------              *  CALL nullcheck void   Batcher.Push
               [000029] ------------ this in rcx  +--*  LCL_VAR   ref    V01 loc0         
               [000030] ------------ arg1         \--*  LCL_VAR   ref    V03 loc2         
Initializing arg info for 31.CALL:
ArgTable for 31.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 29.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8]
fgArgTabEntry[arg 1 30.LCL_VAR ref (By ref), 1 reg: rdx, byteAlignment=8]

Morphing args for 31.CALL:

Assertion prop in BB03:
Copy     Assertion: V03 == V10 index=#01, mask=0000000000000001
               [000030] ------------              *  LCL_VAR   ref    V10 tmp6         
argSlots=2, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000029] -----+------              *  LCL_VAR   ref    V01 loc0         
Replaced with placeholder node:
               [000187] ----------L-              *  ARGPLACE  ref   
Deferred argument ('rdx'):
               [000030] -----+------              *  LCL_VAR   ref    V10 tmp6         
Replaced with placeholder node:
               [000188] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx rdx 
ArgTable for 31.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 29.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]
fgArgTabEntry[arg 1 30.LCL_VAR ref (By ref), 1 reg: rdx, byteAlignment=8, lateArgInx=1, processed]

GenTreeNode creates assertion:
               [000031] --CXG-------              *  CALL nullcheck void   Batcher.Push
In BB03 New Local Constant Assertion: V01 != null index=#02, mask=0000000000000002

fgMorphTree BB03, STMT00009 (after)
               [000031] --CXG+------              *  CALL nullcheck void   Batcher.Push
               [000029] -----+------ this in rcx  +--*  LCL_VAR   ref    V01 loc0         
               [000030] -----+------ arg1 in rdx  \--*  LCL_VAR   ref    V10 tmp6         

Morphing BB04 of 'SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'

fgMorphTree BB04, STMT00020 (before)
               [000083] -A----------              *  ASG       ref   
               [000082] D------N----              +--*  LCL_VAR   ref    V08 tmp4         
               [000081] ------------              \--*  LCL_VAR   ref    V09 tmp5         
GenTreeNode creates assertion:
               [000083] -A----------              *  ASG       ref   
In BB04 New Local Copy     Assertion: V08 == V09 index=#01, mask=0000000000000001

fgMorphTree BB04, STMT00021 (before)
               [000090] ---XG-------              *  JTRUE     void  
               [000089] N--XG----U--              \--*  NE        int   
               [000086] ------------                 +--*  LCL_VAR   int    V12 tmp8         
               [000088] ---XG-------                 \--*  FIELD     int    _version
               [000087] ------------                    \--*  LCL_VAR   ref    V08 tmp4         

Assertion prop in BB04:
Copy     Assertion: V08 == V09 index=#01, mask=0000000000000001
               [000087] ------------              *  LCL_VAR   ref    V09 tmp5         

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000088] ---XG-------              *  IND       int   
               [000190] -----+------              \--*  ADD       byref 
               [000087] -----+------                 +--*  LCL_VAR   ref    V09 tmp5         
               [000189] -----+------                 \--*  CNS_INT   long   20 field offset Fseq[_version]
GenTreeNode creates assertion:
               [000088] ---XG-------              *  IND       int   
In BB04 New Local Constant Assertion: V09 != null index=#02, mask=0000000000000002

fgMorphTree BB04, STMT00021 (after)
               [000090] ---XG+------              *  JTRUE     void  
               [000089] N--XG+-N-U--              \--*  NE        int   
               [000086] -----+------                 +--*  LCL_VAR   int    V12 tmp8         
               [000088] ---XG+------                 \--*  IND       int   
               [000190] -----+------                    \--*  ADD       byref 
               [000087] -----+------                       +--*  LCL_VAR   ref    V09 tmp5         
               [000189] -----+------                       \--*  CNS_INT   long   20 field offset Fseq[_version]

Morphing BB06 of 'SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'

fgMorphTree BB06, STMT00024 (before)
               [000106] ---XG-------              *  JTRUE     void  
               [000105] N--XG----U--              \--*  GE        int   
               [000102] ------------                 +--*  LCL_VAR   int    V11 tmp7         
               [000104] ---XG-------                 \--*  FIELD     int    _size
               [000103] ------------                    \--*  LCL_VAR   ref    V08 tmp4         

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000104] ---XG-------              *  IND       int   
               [000192] -----+------              \--*  ADD       byref 
               [000103] -----+------                 +--*  LCL_VAR   ref    V08 tmp4         
               [000191] -----+------                 \--*  CNS_INT   long   16 field offset Fseq[_size]
GenTreeNode creates assertion:
               [000104] ---XG-------              *  IND       int   
In BB06 New Local Constant Assertion: V08 != null index=#01, mask=0000000000000001

fgMorphTree BB06, STMT00024 (after)
               [000106] ---XG+------              *  JTRUE     void  
               [000105] N--XG+-N-U--              \--*  GE        int   
               [000102] -----+------                 +--*  LCL_VAR   int    V11 tmp7         
               [000104] ---XG+------                 \--*  IND       int   
               [000192] -----+------                    \--*  ADD       byref 
               [000103] -----+------                       +--*  LCL_VAR   ref    V08 tmp4         
               [000191] -----+------                       \--*  CNS_INT   long   16 field offset Fseq[_size]

Morphing BB07 of 'SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'

fgMorphTree BB07, STMT00025 (before)
               [000116] -A-XG-------              *  ASG       ref   
               [000115] D------N----              +--*  LCL_VAR   ref    V10 tmp6         
               [000114] ---XG-------              \--*  INDEX     ref   
               [000110] ---XG-------                 +--*  FIELD     ref    _items
               [000109] ------------                 |  \--*  LCL_VAR   ref    V08 tmp4         
               [000113] ------------                 \--*  LCL_VAR   int    V11 tmp7         

lvaGrabTemp returning 17 (V17 tmp13) called for arr expr.

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000110] ---XG-------              *  IND       ref   
               [000209] -----+------              \--*  ADD       byref 
               [000109] -----+------                 +--*  LCL_VAR   ref    V08 tmp4         
               [000208] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[_items]
GenTreeNode creates assertion:
               [000110] ---XG-------              *  IND       ref   
In BB07 New Local Constant Assertion: V08 != null index=#01, mask=0000000000000001
GenTreeNode creates assertion:
               [000198] ---X--------              *  ARR_LENGTH int   
In BB07 New Local Constant Assertion: V17 != null index=#02, mask=0000000000000002

fgMorphTree BB07, STMT00025 (after)
               [000116] -A-XG+------              *  ASG       ref   
               [000115] D----+-N----              +--*  LCL_VAR   ref    V10 tmp6         
               [000207] -A-XG+------              \--*  COMMA     ref   
               [000194] -A-XG+------                 +--*  ASG       ref   
               [000193] D----+-N----                 |  +--*  LCL_VAR   ref    V17 tmp13        
               [000110] ---XG+------                 |  \--*  IND       ref   
               [000209] -----+------                 |     \--*  ADD       byref 
               [000109] -----+------                 |        +--*  LCL_VAR   ref    V08 tmp4         
               [000208] -----+------                 |        \--*  CNS_INT   long   8 field offset Fseq[_items]
               [000206] ---XG+------                 \--*  COMMA     ref   
               [000199] ---X-+------                    +--*  ARR_BOUNDS_CHECK_Rng void  
               [000113] -----+------                    |  +--*  LCL_VAR   int    V11 tmp7         
               [000198] ---X-+------                    |  \--*  ARR_LENGTH int   
               [000195] -----+------                    |     \--*  LCL_VAR   ref    V17 tmp13        
               [000114] a---G+------                    \--*  IND       ref   
               [000205] -----+------                       \--*  ADD       byref 
               [000196] -----+------                          +--*  LCL_VAR   ref    V17 tmp13        
               [000204] -----+------                          \--*  ADD       long  
               [000202] -----+------                             +--*  LSH       long  
               [000200] -----+------                             |  +--*  CAST      long <- int
               [000197] i----+------                             |  |  \--*  LCL_VAR   int    V11 tmp7         
               [000201] -----+-N----                             |  \--*  CNS_INT   long   3
               [000203] -----+------                             \--*  CNS_INT   long   16 Fseq[#FirstElem]

fgMorphTree BB07, STMT00026 (before)
               [000125] -A----------              *  ASG       int   
               [000124] D------N----              +--*  LCL_VAR   int    V11 tmp7         
               [000123] ------------              \--*  ADD       int   
               [000121] ------------                 +--*  LCL_VAR   int    V11 tmp7         
               [000122] ------------                 \--*  CNS_INT   int    1

fgMorphTree BB07, STMT00027 (before)
               [000129] -A----------              *  ASG       bool  
               [000128] D------N----              +--*  LCL_VAR   bool   V07 tmp3         
               [000127] ------------              \--*  CAST      int <- bool <- int
               [000126] ------------                 \--*  CNS_INT   int    1
GenTreeNode creates assertion:
               [000129] -A----------              *  ASG       bool  
In BB07 New Local Constant Assertion: V07 == 1 index=#03, mask=0000000000000004

fgMorphTree BB07, STMT00027 (after)
               [000129] -A---+------              *  ASG       bool  
               [000128] D----+-N----              +--*  LCL_VAR   int    V07 tmp3         
               [000126] -----+------              \--*  CNS_INT   int    1

Morphing BB08 of 'SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'

fgMorphTree BB08, STMT00029 (before)
               [000143] ---XG-------              *  JTRUE     void  
               [000142] ---XG-------              \--*  EQ        int   
               [000137] ------------                 +--*  LCL_VAR   int    V12 tmp8         
               [000141] ---XG-------                 \--*  FIELD     int    _version
               [000140] ------------                    \--*  LCL_VAR   ref    V09 tmp5         

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000141] ---XG-------              *  IND       int   
               [000211] -----+------              \--*  ADD       byref 
               [000140] -----+------                 +--*  LCL_VAR   ref    V09 tmp5         
               [000210] -----+------                 \--*  CNS_INT   long   20 field offset Fseq[_version]
GenTreeNode creates assertion:
               [000141] ---XG-------              *  IND       int   
In BB08 New Local Constant Assertion: V09 != null index=#01, mask=0000000000000001

fgMorphTree BB08, STMT00029 (after)
               [000143] ---XG+------              *  JTRUE     void  
               [000142] J--XG+-N----              \--*  EQ        int   
               [000137] -----+------                 +--*  LCL_VAR   int    V12 tmp8         
               [000141] ---XG+------                 \--*  IND       int   
               [000211] -----+------                    \--*  ADD       byref 
               [000140] -----+------                       +--*  LCL_VAR   ref    V09 tmp5         
               [000210] -----+------                       \--*  CNS_INT   long   20 field offset Fseq[_version]

Morphing BB10 of 'SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'

fgMorphTree BB10, STMT00032 (before)
               [000163] --C-G-------              *  CALL      void   System.ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion
Initializing arg info for 163.CALL:
ArgTable for 163.CALL after fgInitArgInfo:

Morphing args for 163.CALL:
argSlots=0, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32
ArgTable for 163.CALL after fgMorphArgs:

Converting BB10 to BBJ_THROW

Morphing BB11 of 'SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'

fgMorphTree BB11, STMT00030 (before)
               [000153] -A-XG-------              *  ASG       int   
               [000152] D------N----              +--*  LCL_VAR   int    V11 tmp7         
               [000151] ---XG-------              \--*  ADD       int   
               [000149] ---XG-------                 +--*  FIELD     int    _size
               [000148] ------------                 |  \--*  LCL_VAR   ref    V09 tmp5         
               [000150] ------------                 \--*  CNS_INT   int    1

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000149] ---XG-------              *  IND       int   
               [000213] -----+------              \--*  ADD       byref 
               [000148] -----+------                 +--*  LCL_VAR   ref    V09 tmp5         
               [000212] -----+------                 \--*  CNS_INT   long   16 field offset Fseq[_size]
GenTreeNode creates assertion:
               [000149] ---XG-------              *  IND       int   
In BB11 New Local Constant Assertion: V09 != null index=#01, mask=0000000000000001

fgMorphTree BB11, STMT00030 (after)
               [000153] -A-XG+------              *  ASG       int   
               [000152] D----+-N----              +--*  LCL_VAR   int    V11 tmp7         
               [000151] ---XG+------              \--*  ADD       int   
               [000149] ---XG+------                 +--*  IND       int   
               [000213] -----+------                 |  \--*  ADD       byref 
               [000148] -----+------                 |     +--*  LCL_VAR   ref    V09 tmp5         
               [000212] -----+------                 |     \--*  CNS_INT   long   16 field offset Fseq[_size]
               [000150] -----+------                 \--*  CNS_INT   int    1

fgMorphTree BB11, STMT00031 (before)
               [000160] IA----------              *  ASG       struct (init)
               [000159] -------N----              +--*  BLK       struct<8>
               [000157] ------------              |  \--*  ADDR      byref 
               [000156] ------------              |     \--*  LCL_VAR   ref    V10 tmp6         
               [000158] ------------              \--*  CNS_INT   int    0
fgMorphBlkNode for dst tree, before:
               [000159] n----+-N----              *  BLK       struct<8>
               [000157] -----+------              \--*  ADDR      byref 
               [000156] D----+-N----                 \--*  LCL_VAR   ref    V10 tmp6         
fgMorphBlkNode after:
               [000159] n----+-N----              *  BLK       struct<8>
               [000157] -----+------              \--*  ADDR      byref 
               [000156] D----+-N----                 \--*  LCL_VAR   ref    V10 tmp6         

fgMorphInitBlock:fgMorphOneAsgBlock (after):
               [000160] -A----------              *  ASG       ref   
               [000156] D----+-N----              +--*  LCL_VAR   ref    V10 tmp6         
               [000158] -----+------              \--*  CNS_INT   ref    null
 using oneAsgTree.
GenTreeNode creates assertion:
               [000160] -A----------              *  ASG       ref   
In BB11 New Local Constant Assertion: V10 == null index=#02, mask=0000000000000002

fgMorphTree BB11, STMT00031 (after)
               [000160] -A---+------              *  ASG       ref   
               [000156] D----+-N----              +--*  LCL_VAR   ref    V10 tmp6         
               [000158] -----+------              \--*  CNS_INT   ref    null

fgMorphTree BB11, STMT00023 (before)
               [000098] -AC---------              *  ASG       bool  
               [000097] D------N----              +--*  LCL_VAR   bool   V07 tmp3         
               [000096] ------------              \--*  CNS_INT   int    0
GenTreeNode creates assertion:
               [000098] -A----------              *  ASG       bool  
In BB11 New Local Constant Assertion: V07 == 0 index=#03, mask=0000000000000004

Morphing BB13 of 'SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'

fgMorphTree BB13, STMT00028 (before)
               [000133] -A----------              *  ASG       ref   
               [000132] D------N----              +--*  LCL_VAR   ref    V08 tmp4         
               [000131] ------------              \--*  CNS_INT   ref    null
GenTreeNode creates assertion:
               [000133] -A----------              *  ASG       ref   
In BB13 New Local Constant Assertion: V08 == null index=#01, mask=0000000000000001

fgMorphTree BB13, STMT00006 (before)
               [000021] --C---------              *  JTRUE     void  
               [000020] --C---------              \--*  NE        int   
               [000130] ------------                 +--*  LCL_VAR   bool   V07 tmp3         
               [000019] ------------                 \--*  CNS_INT   int    0

Morphing BB14 of 'SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'

fgMorphTree BB14, STMT00011 (before)
               [000035] --C---------              *  RETURN    ref   
               [000166] ---XG-------              \--*  FIELD     ref    _batches
               [000032] ------------                 \--*  LCL_VAR   ref    V01 loc0         

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000166] ---XG-------              *  IND       ref   
               [000216] -----+------              \--*  ADD       byref 
               [000032] -----+------                 +--*  LCL_VAR   ref    V01 loc0         
               [000215] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[_batches]
GenTreeNode creates assertion:
               [000166] ---XG-------              *  IND       ref   
In BB14 New Local Constant Assertion: V01 != null index=#01, mask=0000000000000001

fgMorphTree BB14, STMT00011 (after)
               [000035] ---XG+------              *  RETURN    ref   
               [000166] ---XG+------              \--*  IND       ref   
               [000216] -----+------                 \--*  ADD       byref 
               [000032] -----+------                    +--*  LCL_VAR   ref    V01 loc0         
               [000215] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[_batches]

*************** Finishing PHASE Morph - Global
Trees after Morph - Global

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i label target hascall gcsafe newobj nullcheck 
BB02 [0001]  1       BB01                  1       [00D..00F)-> BB04 (always)                     keep i label 
BB03 [0002]  1       BB13                  1       [00F..01E)                                     i label target hascall gcsafe bwd bwd-target 
BB04 [0003]  2       BB02,BB03             1       [01E..027)-> BB08 ( cond )                     i label target bwd 
BB06 [0013]  1       BB04                  0.50    [01E..01F)-> BB08 ( cond )                     i bwd 
BB07 [0014]  1       BB06                  1       [01E..01F)-> BB13 (always)                     i idxlen bwd 
BB08 [0015]  2       BB04,BB06             1       [01E..01F)-> BB11 ( cond )                     i label target bwd 
BB10 [0018]  1       BB08                  0       [01E..01F)        (throw )                     i rare hascall gcsafe bwd 
BB11 [0019]  1       BB08                  1       [01E..01F)                                     i label target bwd 
BB13 [0016]  2       BB07,BB11             1       [???..???)-> BB03 ( cond )                     internal label target bwd 
BB14 [0004]  1       BB13                  1       [027..03E)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..00D), preds={} succs={BB02}

***** BB01
STMT00000 (IL 0x000...0x005)
               [000003] -AC--+------              *  ASG       ref   
               [000002] D----+-N----              +--*  LCL_VAR   ref    V05 tmp1         
               [000001] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000000] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e method

***** BB01
STMT00001 (IL   ???...  ???)
               [000005] --CXG+------              *  CALL      void   Batcher..ctor
               [000004] -----+------ this in rcx  \--*  LCL_VAR   ref    V05 tmp1         

***** BB01
STMT00002 (IL 0x005...  ???)
               [000008] -A---+------              *  ASG       ref   
               [000007] D----+-N----              +--*  LCL_VAR   ref    V01 loc0         
               [000006] -----+------              \--*  LCL_VAR   ref    V05 tmp1         

***** BB01
STMT00015 (IL 0x006...  ???)
               [000050] ---X-+------              *  NULLCHECK byte  
               [000049] -----+------              \--*  LCL_VAR   ref    V00 arg0         

***** BB01
STMT00016 (IL 0x006...  ???)
               [000055] -A---+------              *  ASG       ref   
               [000054] D----+-N----              +--*  LCL_VAR   ref    V13 tmp9         
               [000009] -----+------              \--*  LCL_VAR   ref    V00 arg0         

***** BB01
STMT00017 (IL 0x006...  ???)
               [000060] -A---+------              *  ASG       int   
               [000059] D----+-N----              +--*  LCL_VAR   int    V15 tmp11        
               [000058] -----+------              \--*  CNS_INT   int    0

***** BB01
STMT00018 (IL 0x006...  ???)
               [000066] -A-XG+------              *  ASG       int   
               [000065] D----+-N----              +--*  LCL_VAR   int    V16 tmp12        
               [000064] ---XG+------              \--*  IND       int   
               [000171] -----+------                 \--*  ADD       byref 
               [000063] -----+------                    +--*  LCL_VAR   ref    V00 arg0         
               [000170] -----+------                    \--*  CNS_INT   long   20 field offset Fseq[_version]

***** BB01
STMT00019 (IL 0x006...  ???)
               [000073] -A---+------              *  ASG       ref   
               [000069] D----+-N----              +--*  LCL_VAR   ref    V14 tmp10        
               [000071] -----+------              \--*  CNS_INT   ref    null

***** BB01
STMT00004 (IL   ???...  ???)
               [000186] -A---+------              *  COMMA     void  
               [000182] -A----------              +--*  COMMA     void  
               [000178] -A----------              |  +--*  COMMA     void  
               [000174] -A----------              |  |  +--*  ASG       ref   
               [000172] D------N----              |  |  |  +--*  LCL_VAR   ref    V09 tmp5         
               [000173] ------------              |  |  |  \--*  LCL_VAR   ref    V13 tmp9         
               [000177] -A----------              |  |  \--*  ASG       ref   
               [000175] D------N----              |  |     +--*  LCL_VAR   ref    V10 tmp6         
               [000176] ------------              |  |     \--*  LCL_VAR   ref    V14 tmp10        
               [000181] -A----------              |  \--*  ASG       int   
               [000179] D------N----              |     +--*  LCL_VAR   int    V11 tmp7         
               [000180] ------------              |     \--*  LCL_VAR   int    V15 tmp11        
               [000185] -A----------              \--*  ASG       int   
               [000183] D------N----                 +--*  LCL_VAR   int    V12 tmp8         
               [000184] ------------                 \--*  LCL_VAR   int    V16 tmp12        

------------ BB02 [00D..00F) -> BB04 (always), preds={BB01} succs={BB04}

------------ BB03 [00F..01E), preds={BB13} succs={BB04}

***** BB03
STMT00008 (IL   ???...  ???)
               [000028] -A---+------              *  ASG       ref   
               [000027] D----+-N----              +--*  LCL_VAR   ref    V03 loc2         
               [000077] -----+------              \--*  LCL_VAR   ref    V10 tmp6         

***** BB03
STMT00009 (IL 0x017...0x019)
               [000031] --CXG+------              *  CALL nullcheck void   Batcher.Push
               [000029] -----+------ this in rcx  +--*  LCL_VAR   ref    V01 loc0         
               [000030] -----+------ arg1 in rdx  \--*  LCL_VAR   ref    V10 tmp6         

------------ BB04 [01E..027) -> BB08 (cond), preds={BB02,BB03} succs={BB06,BB08}

***** BB04
STMT00020 (IL 0x01E...  ???)
               [000083] -A---+------              *  ASG       ref   
               [000082] D----+-N----              +--*  LCL_VAR   ref    V08 tmp4         
               [000081] -----+------              \--*  LCL_VAR   ref    V09 tmp5         

***** BB04
STMT00021 (IL 0x01E...  ???)
               [000090] ---XG+------              *  JTRUE     void  
               [000089] N--XG+-N-U--              \--*  NE        int   
               [000086] -----+------                 +--*  LCL_VAR   int    V12 tmp8         
               [000088] ---XG+------                 \--*  IND       int   
               [000190] -----+------                    \--*  ADD       byref 
               [000087] -----+------                       +--*  LCL_VAR   ref    V09 tmp5         
               [000189] -----+------                       \--*  CNS_INT   long   20 field offset Fseq[_version]

------------ BB06 [01E..01F) -> BB08 (cond), preds={BB04} succs={BB07,BB08}

***** BB06
STMT00024 (IL 0x01E...  ???)
               [000106] ---XG+------              *  JTRUE     void  
               [000105] N--XG+-N-U--              \--*  GE        int   
               [000102] -----+------                 +--*  LCL_VAR   int    V11 tmp7         
               [000104] ---XG+------                 \--*  IND       int   
               [000192] -----+------                    \--*  ADD       byref 
               [000103] -----+------                       +--*  LCL_VAR   ref    V08 tmp4         
               [000191] -----+------                       \--*  CNS_INT   long   16 field offset Fseq[_size]

------------ BB07 [01E..01F) -> BB13 (always), preds={BB06} succs={BB13}

***** BB07
STMT00025 (IL 0x01E...  ???)
               [000116] -A-XG+------              *  ASG       ref   
               [000115] D----+-N----              +--*  LCL_VAR   ref    V10 tmp6         
               [000207] -A-XG+------              \--*  COMMA     ref   
               [000194] -A-XG+------                 +--*  ASG       ref   
               [000193] D----+-N----                 |  +--*  LCL_VAR   ref    V17 tmp13        
               [000110] ---XG+------                 |  \--*  IND       ref   
               [000209] -----+------                 |     \--*  ADD       byref 
               [000109] -----+------                 |        +--*  LCL_VAR   ref    V08 tmp4         
               [000208] -----+------                 |        \--*  CNS_INT   long   8 field offset Fseq[_items]
               [000206] ---XG+------                 \--*  COMMA     ref   
               [000199] ---X-+------                    +--*  ARR_BOUNDS_CHECK_Rng void  
               [000113] -----+------                    |  +--*  LCL_VAR   int    V11 tmp7         
               [000198] ---X-+------                    |  \--*  ARR_LENGTH int   
               [000195] -----+------                    |     \--*  LCL_VAR   ref    V17 tmp13        
               [000114] a---G+------                    \--*  IND       ref   
               [000205] -----+------                       \--*  ADD       byref 
               [000196] -----+------                          +--*  LCL_VAR   ref    V17 tmp13        
               [000204] -----+------                          \--*  ADD       long  
               [000202] -----+------                             +--*  LSH       long  
               [000200] -----+------                             |  +--*  CAST      long <- int
               [000197] i----+------                             |  |  \--*  LCL_VAR   int    V11 tmp7         
               [000201] -----+-N----                             |  \--*  CNS_INT   long   3
               [000203] -----+------                             \--*  CNS_INT   long   16 Fseq[#FirstElem]

***** BB07
STMT00026 (IL 0x01E...  ???)
               [000125] -A---+------              *  ASG       int   
               [000124] D----+-N----              +--*  LCL_VAR   int    V11 tmp7         
               [000123] -----+------              \--*  ADD       int   
               [000121] -----+------                 +--*  LCL_VAR   int    V11 tmp7         
               [000122] -----+------                 \--*  CNS_INT   int    1

***** BB07
STMT00027 (IL 0x01E...  ???)
               [000129] -A---+------              *  ASG       bool  
               [000128] D----+-N----              +--*  LCL_VAR   int    V07 tmp3         
               [000126] -----+------              \--*  CNS_INT   int    1

------------ BB08 [01E..01F) -> BB11 (cond), preds={BB04,BB06} succs={BB10,BB11}

***** BB08
STMT00029 (IL 0x01E...  ???)
               [000143] ---XG+------              *  JTRUE     void  
               [000142] J--XG+-N----              \--*  EQ        int   
               [000137] -----+------                 +--*  LCL_VAR   int    V12 tmp8         
               [000141] ---XG+------                 \--*  IND       int   
               [000211] -----+------                    \--*  ADD       byref 
               [000140] -----+------                       +--*  LCL_VAR   ref    V09 tmp5         
               [000210] -----+------                       \--*  CNS_INT   long   20 field offset Fseq[_version]

------------ BB10 [01E..01F) (throw), preds={BB08} succs={}

***** BB10
STMT00032 (IL 0x01E...  ???)
               [000163] --CXG+------              *  CALL      void   System.ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion

------------ BB11 [01E..01F), preds={BB08} succs={BB13}

***** BB11
STMT00030 (IL 0x01E...  ???)
               [000153] -A-XG+------              *  ASG       int   
               [000152] D----+-N----              +--*  LCL_VAR   int    V11 tmp7         
               [000151] ---XG+------              \--*  ADD       int   
               [000149] ---XG+------                 +--*  IND       int   
               [000213] -----+------                 |  \--*  ADD       byref 
               [000148] -----+------                 |     +--*  LCL_VAR   ref    V09 tmp5         
               [000212] -----+------                 |     \--*  CNS_INT   long   16 field offset Fseq[_size]
               [000150] -----+------                 \--*  CNS_INT   int    1

***** BB11
STMT00031 (IL 0x01E...  ???)
               [000160] -A---+------              *  ASG       ref   
               [000156] D----+-N----              +--*  LCL_VAR   ref    V10 tmp6         
               [000158] -----+------              \--*  CNS_INT   ref    null

***** BB11
STMT00023 (IL 0x01E...  ???)
               [000098] -A---+------              *  ASG       bool  
               [000097] D----+-N----              +--*  LCL_VAR   int    V07 tmp3         
               [000096] -----+------              \--*  CNS_INT   int    0

------------ BB13 [???..???) -> BB03 (cond), preds={BB07,BB11} succs={BB14,BB03}

***** BB13
STMT00028 (IL 0x01E...  ???)
               [000133] -A---+------              *  ASG       ref   
               [000132] D----+-N----              +--*  LCL_VAR   ref    V08 tmp4         
               [000131] -----+------              \--*  CNS_INT   ref    null

***** BB13
STMT00006 (IL   ???...  ???)
               [000021] -----+------              *  JTRUE     void  
               [000020] J----+-N----              \--*  NE        int   
               [000130] -----+------                 +--*  LCL_VAR   bool   V07 tmp3         
               [000019] -----+------                 \--*  CNS_INT   int    0

------------ BB14 [027..03E) (return), preds={BB13} succs={}

***** BB14
STMT00011 (IL   ???...  ???)
               [000035] ---XG+------              *  RETURN    ref   
               [000166] ---XG+------              \--*  IND       ref   
               [000216] -----+------                 \--*  ADD       byref 
               [000032] -----+------                    +--*  LCL_VAR   ref    V01 loc0         
               [000215] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[_batches]

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist

*************** Starting PHASE GS Cookie
No GS security needed

*************** Finishing PHASE GS Cookie

*************** Starting PHASE Compute edge weights (1, false)
*************** In fgComputeBlockAndEdgeWeights()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i label target hascall gcsafe newobj nullcheck 
BB02 [0001]  1       BB01                  1       [00D..00F)-> BB04 (always)                     keep i label 
BB03 [0002]  1       BB13                  1       [00F..01E)                                     i label target hascall gcsafe bwd bwd-target 
BB04 [0003]  2       BB02,BB03             1       [01E..027)-> BB08 ( cond )                     i label target bwd 
BB06 [0013]  1       BB04                  0.50    [01E..01F)-> BB08 ( cond )                     i bwd 
BB07 [0014]  1       BB06                  1       [01E..01F)-> BB13 (always)                     i idxlen bwd 
BB08 [0015]  2       BB04,BB06             1       [01E..01F)-> BB11 ( cond )                     i label target bwd 
BB10 [0018]  1       BB08                  0       [01E..01F)        (throw )                     i rare hascall gcsafe bwd 
BB11 [0019]  1       BB08                  1       [01E..01F)                                     i label target bwd 
BB13 [0016]  2       BB07,BB11             1       [???..???)-> BB03 ( cond )                     internal label target bwd 
BB14 [0004]  1       BB13                  1       [027..03E)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

 -- no profile data, so using default called count
 -- not optimizing or no profile data, so not computing edge weights

*************** Finishing PHASE Compute edge weights (1, false)

*************** Starting PHASE Create EH funclets
*************** In fgCreateFunclets()

After fgCreateFunclets()
-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i label target hascall gcsafe newobj nullcheck 
BB02 [0001]  1       BB01                  1       [00D..00F)-> BB04 (always)                     keep i label 
BB03 [0002]  1       BB13                  1       [00F..01E)                                     i label target hascall gcsafe bwd bwd-target 
BB04 [0003]  2       BB02,BB03             1       [01E..027)-> BB08 ( cond )                     i label target bwd 
BB06 [0013]  1       BB04                  0.50    [01E..01F)-> BB08 ( cond )                     i bwd 
BB07 [0014]  1       BB06                  1       [01E..01F)-> BB13 (always)                     i idxlen bwd 
BB08 [0015]  2       BB04,BB06             1       [01E..01F)-> BB11 ( cond )                     i label target bwd 
BB10 [0018]  1       BB08                  0       [01E..01F)        (throw )                     i rare hascall gcsafe bwd 
BB11 [0019]  1       BB08                  1       [01E..01F)                                     i label target bwd 
BB13 [0016]  2       BB07,BB11             1       [???..???)-> BB03 ( cond )                     internal label target bwd 
BB14 [0004]  1       BB13                  1       [027..03E)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table is empty
*************** In fgDebugCheckBBlist

*************** Finishing PHASE Create EH funclets

*************** Starting PHASE Optimize layout
*************** In optOptimizeLayout()

***************  Exception Handling table is empty
*************** In fgDebugCheckBBlist

*************** In fgUpdateFlowGraph()
Before updating the flow graph:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i label target hascall gcsafe newobj nullcheck 
BB02 [0001]  1       BB01                  1       [00D..00F)-> BB04 (always)                     keep i label 
BB03 [0002]  1       BB13                  1       [00F..01E)                                     i label target hascall gcsafe bwd bwd-target 
BB04 [0003]  2       BB02,BB03             1       [01E..027)-> BB08 ( cond )                     i label target bwd 
BB06 [0013]  1       BB04                  0.50    [01E..01F)-> BB08 ( cond )                     i bwd 
BB07 [0014]  1       BB06                  1       [01E..01F)-> BB13 (always)                     i idxlen bwd 
BB08 [0015]  2       BB04,BB06             1       [01E..01F)-> BB11 ( cond )                     i label target bwd 
BB10 [0018]  1       BB08                  0       [01E..01F)        (throw )                     i rare hascall gcsafe bwd 
BB11 [0019]  1       BB08                  1       [01E..01F)                                     i label target bwd 
BB13 [0016]  2       BB07,BB11             1       [???..???)-> BB03 ( cond )                     internal label target bwd 
BB14 [0004]  1       BB13                  1       [027..03E)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

*************** In fgDebugCheckBBlist

*************** In fgExpandRarelyRunBlocks()
*************** In fgReorderBlocks()

Initial BasicBlocks
-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i label target hascall gcsafe newobj nullcheck 
BB02 [0001]  1       BB01                  1       [00D..00F)-> BB04 (always)                     keep i label 
BB03 [0002]  1       BB13                  1       [00F..01E)                                     i label target hascall gcsafe bwd bwd-target 
BB04 [0003]  2       BB02,BB03             1       [01E..027)-> BB08 ( cond )                     i label target bwd 
BB06 [0013]  1       BB04                  0.50    [01E..01F)-> BB08 ( cond )                     i bwd 
BB07 [0014]  1       BB06                  1       [01E..01F)-> BB13 (always)                     i idxlen bwd 
BB08 [0015]  2       BB04,BB06             1       [01E..01F)-> BB11 ( cond )                     i label target bwd 
BB10 [0018]  1       BB08                  0       [01E..01F)        (throw )                     i rare hascall gcsafe bwd 
BB11 [0019]  1       BB08                  1       [01E..01F)                                     i label target bwd 
BB13 [0016]  2       BB07,BB11             1       [???..???)-> BB03 ( cond )                     internal label target bwd 
BB14 [0004]  1       BB13                  1       [027..03E)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

Decided to reverse conditional branch at block BB08 branch to BB11 since it falls into a rarely run block
Relocated rarely run block BB10 by reversing conditional jump at BB08
Relocated block [BB10..BB10] inserted after BB14 at the end of method

After this change in fgReorderBlocks the BB graph is:
-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i label target hascall gcsafe newobj nullcheck 
BB02 [0001]  1       BB01                  1       [00D..00F)-> BB04 (always)                     keep i label 
BB03 [0002]  1       BB13                  1       [00F..01E)                                     i label target hascall gcsafe bwd bwd-target 
BB04 [0003]  2       BB02,BB03             1       [01E..027)-> BB08 ( cond )                     i label target bwd 
BB06 [0013]  1       BB04                  0.50    [01E..01F)-> BB08 ( cond )                     i bwd 
BB07 [0014]  1       BB06                  1       [01E..01F)-> BB13 (always)                     i idxlen bwd 
BB08 [0015]  2       BB04,BB06             1       [01E..01F)-> BB10 ( cond )                     i label target bwd 
BB11 [0019]  1       BB08                  1       [01E..01F)                                     i label target bwd 
BB13 [0016]  2       BB07,BB11             1       [???..???)-> BB03 ( cond )                     internal label target bwd 
BB14 [0004]  1       BB13                  1       [027..03E)        (return)                     i 
BB10 [0018]  1       BB08                  0       [01E..01F)        (throw )                     i rare label target hascall gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------


*************** In fgUpdateFlowGraph()
Before updating the flow graph:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i label target hascall gcsafe newobj nullcheck 
BB02 [0001]  1       BB01                  1       [00D..00F)-> BB04 (always)                     keep i label 
BB03 [0002]  1       BB13                  1       [00F..01E)                                     i label target hascall gcsafe bwd bwd-target 
BB04 [0003]  2       BB02,BB03             1       [01E..027)-> BB08 ( cond )                     i label target bwd 
BB06 [0013]  1       BB04                  0.50    [01E..01F)-> BB08 ( cond )                     i bwd 
BB07 [0014]  1       BB06                  1       [01E..01F)-> BB13 (always)                     i idxlen bwd 
BB08 [0015]  2       BB04,BB06             1       [01E..01F)-> BB10 ( cond )                     i label target bwd 
BB11 [0019]  1       BB08                  1       [01E..01F)                                     i label target bwd 
BB13 [0016]  2       BB07,BB11             1       [???..???)-> BB03 ( cond )                     internal label target bwd 
BB14 [0004]  1       BB13                  1       [027..03E)        (return)                     i 
BB10 [0018]  1       BB08                  0       [01E..01F)        (throw )                     i rare label target hascall gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

*************** In fgDebugCheckBBlist

*************** Finishing PHASE Optimize layout

*************** Starting PHASE Compute blocks reachability
*************** In fgComputeReachability
*************** In fgDebugCheckBBlist

Renumbering the basic blocks for fgComputeReachability pass #1

*************** Before renumbering the basic blocks

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i label target hascall gcsafe newobj nullcheck 
BB02 [0001]  1       BB01                  1       [00D..00F)-> BB04 (always)                     keep i label 
BB03 [0002]  1       BB13                  1       [00F..01E)                                     i label target hascall gcsafe bwd bwd-target 
BB04 [0003]  2       BB02,BB03             1       [01E..027)-> BB08 ( cond )                     i label target bwd 
BB06 [0013]  1       BB04                  0.50    [01E..01F)-> BB08 ( cond )                     i bwd 
BB07 [0014]  1       BB06                  1       [01E..01F)-> BB13 (always)                     i idxlen bwd 
BB08 [0015]  2       BB04,BB06             1       [01E..01F)-> BB10 ( cond )                     i label target bwd 
BB11 [0019]  1       BB08                  1       [01E..01F)                                     i label target bwd 
BB13 [0016]  2       BB07,BB11             1       [???..???)-> BB03 ( cond )                     internal label target bwd 
BB14 [0004]  1       BB13                  1       [027..03E)        (return)                     i 
BB10 [0018]  1       BB08                  0       [01E..01F)        (throw )                     i rare label target hascall gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table is empty
Renumber BB06 to BB05
Renumber BB07 to BB06
Renumber BB08 to BB07
Renumber BB11 to BB08
Renumber BB13 to BB09
Renumber BB14 to BB10
Renumber BB10 to BB11

*************** After renumbering the basic blocks

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i label target hascall gcsafe newobj nullcheck 
BB02 [0001]  1       BB01                  1       [00D..00F)-> BB04 (always)                     keep i label 
BB03 [0002]  1       BB09                  1       [00F..01E)                                     i label target hascall gcsafe bwd bwd-target 
BB04 [0003]  2       BB02,BB03             1       [01E..027)-> BB07 ( cond )                     i label target bwd 
BB05 [0013]  1       BB04                  0.50    [01E..01F)-> BB07 ( cond )                     i bwd 
BB06 [0014]  1       BB05                  1       [01E..01F)-> BB09 (always)                     i idxlen bwd 
BB07 [0015]  2       BB04,BB05             1       [01E..01F)-> BB11 ( cond )                     i label target bwd 
BB08 [0019]  1       BB07                  1       [01E..01F)                                     i label target bwd 
BB09 [0016]  2       BB06,BB08             1       [???..???)-> BB03 ( cond )                     internal label target bwd 
BB10 [0004]  1       BB09                  1       [027..03E)        (return)                     i 
BB11 [0018]  1       BB07                  0       [01E..01F)        (throw )                     i rare label target hascall gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table is empty

New BlockSet epoch 3, # of blocks (including unused BB00): 12, bitset array size: 1 (short)
Enter blocks: BB01 

After computing reachability sets:
------------------------------------------------
BBnum  Reachable by 
------------------------------------------------
BB01 : BB01 
BB02 : BB01 BB02 
BB03 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 
BB04 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 
BB05 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 
BB06 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 
BB07 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 
BB08 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 
BB09 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 
BB10 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 
BB11 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB11 

After computing reachability:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i label target hascall gcsafe newobj nullcheck 
BB02 [0001]  1       BB01                  1       [00D..00F)-> BB04 (always)                     keep i label gcsafe 
BB03 [0002]  1       BB09                  1       [00F..01E)                                     i Loop label target hascall gcsafe bwd bwd-target 
BB04 [0003]  2       BB02,BB03             1       [01E..027)-> BB07 ( cond )                     i label target gcsafe bwd 
BB05 [0013]  1       BB04                  0.50    [01E..01F)-> BB07 ( cond )                     i gcsafe bwd 
BB06 [0014]  1       BB05                  1       [01E..01F)-> BB09 (always)                     i gcsafe idxlen bwd 
BB07 [0015]  2       BB04,BB05             1       [01E..01F)-> BB11 ( cond )                     i label target gcsafe bwd 
BB08 [0019]  1       BB07                  1       [01E..01F)                                     i label target gcsafe bwd 
BB09 [0016]  2       BB06,BB08             1       [???..???)-> BB03 ( cond )                     internal label target gcsafe bwd 
BB10 [0004]  1       BB09                  1       [027..03E)        (return)                     i gcsafe 
BB11 [0018]  1       BB07                  0       [01E..01F)        (throw )                     i rare label target hascall gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

*************** In fgDebugCheckBBlist
*************** In fgComputeDoms
*************** In fgDebugCheckBBlist

Dominator computation start blocks (those blocks with no incoming edges):
BB01 
------------------------------------------------
BBnum  Dominated by
------------------------------------------------
BB01:  BB01 
BB02:  BB02 BB01 
BB04:  BB04 BB02 BB01 
BB05:  BB05 BB04 BB02 BB01 
BB06:  BB06 BB05 BB04 BB02 BB01 
BB07:  BB07 BB04 BB02 BB01 
BB08:  BB08 BB07 BB04 BB02 BB01 
BB09:  BB09 BB04 BB02 BB01 
BB10:  BB10 BB09 BB04 BB02 BB01 
BB03:  BB03 BB09 BB04 BB02 BB01 
BB11:  BB11 BB07 BB04 BB02 BB01 

Inside fgBuildDomTree

After computing the Dominance Tree:
BB01 : BB02 
BB02 : BB04 
BB04 : BB09 BB07 BB05 
BB05 : BB06 
BB07 : BB11 BB08 
BB09 : BB10 BB03 


After numbering the dominator tree:
BB01: pre=01, post=11
BB02: pre=02, post=10
BB03: pre=06, post=02
BB04: pre=03, post=09
BB05: pre=10, post=08
BB06: pre=11, post=07
BB07: pre=07, post=06
BB08: pre=09, post=05
BB09: pre=04, post=03
BB10: pre=05, post=01
BB11: pre=08, post=04

*************** Finishing PHASE Compute blocks reachability

*************** Starting PHASE Optimize loops
*************** In optOptimizeLoops()

After optSetBlockWeights:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i label target hascall gcsafe newobj nullcheck 
BB02 [0001]  1       BB01                  1       [00D..00F)-> BB04 (always)                     keep i label gcsafe 
BB03 [0002]  1       BB09                  0.50    [00F..01E)                                     i Loop label target hascall gcsafe bwd bwd-target 
BB04 [0003]  2       BB02,BB03             1       [01E..027)-> BB07 ( cond )                     i label target gcsafe bwd 
BB05 [0013]  1       BB04                  0.25    [01E..01F)-> BB07 ( cond )                     i gcsafe bwd 
BB06 [0014]  1       BB05                  0.50    [01E..01F)-> BB09 (always)                     i gcsafe idxlen bwd 
BB07 [0015]  2       BB04,BB05             0.50    [01E..01F)-> BB11 ( cond )                     i label target gcsafe bwd 
BB08 [0019]  1       BB07                  0.50    [01E..01F)                                     i label target gcsafe bwd 
BB09 [0016]  2       BB06,BB08             1       [???..???)-> BB03 ( cond )                     internal label target gcsafe bwd 
BB10 [0004]  1       BB09                  1       [027..03E)        (return)                     i gcsafe 
BB11 [0018]  1       BB07                  0       [01E..01F)        (throw )                     i rare label target hascall gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

*************** In fgDebugCheckBBlist
*************** In optFindNaturalLoops()
Recorded loop L00, from BB03 to BB09 (Head=BB02, Entry=BB04, ExitCnt=2)

Final natural loop table:
L00, from BB03 to BB09 (Head=BB02, Entry=BB04, ExitCnt=2)

Marking a loop from BB03 to BB09
    BB03(wt=2   )
    BB04(wt=8   )
    BB05(wt=1   )
    BB06(wt=2   )
    BB07(wt=2   )
    BB08(wt=2   )
    BB09(wt=8   )
Found a total of 1 loops.
After loop weight marking:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i label target hascall gcsafe newobj nullcheck 
BB02 [0001]  1       BB01                  1       [00D..00F)-> BB04 (always)                     keep i label gcsafe 
BB03 [0002]  1       BB09                  2     0 [00F..01E)                                     i Loop label target hascall gcsafe bwd bwd-target 
BB04 [0003]  2       BB02,BB03             8     0 [01E..027)-> BB07 ( cond )                     i label target gcsafe bwd 
BB05 [0013]  1       BB04                  1     0 [01E..01F)-> BB07 ( cond )                     i gcsafe bwd 
BB06 [0014]  1       BB05                  2     0 [01E..01F)-> BB09 (always)                     i gcsafe idxlen bwd 
BB07 [0015]  2       BB04,BB05             2     0 [01E..01F)-> BB11 ( cond )                     i label target gcsafe bwd 
BB08 [0019]  1       BB07                  2     0 [01E..01F)                                     i label target gcsafe bwd 
BB09 [0016]  2       BB06,BB08             8     0 [???..???)-> BB03 ( cond )                     internal label target gcsafe bwd 
BB10 [0004]  1       BB09                  1       [027..03E)        (return)                     i gcsafe 
BB11 [0018]  1       BB07                  0       [01E..01F)        (throw )                     i rare label target hascall gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------


*************** Finishing PHASE Optimize loops

*************** Starting PHASE Clone loops

*************** In optCloneLoops()
Blocks/Trees at start of phase

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i label target hascall gcsafe newobj nullcheck 
BB02 [0001]  1       BB01                  1       [00D..00F)-> BB04 (always)                     keep i label gcsafe 
BB03 [0002]  1       BB09                  2     0 [00F..01E)                                     i Loop label target hascall gcsafe bwd bwd-target 
BB04 [0003]  2       BB02,BB03             8     0 [01E..027)-> BB07 ( cond )                     i label target gcsafe bwd 
BB05 [0013]  1       BB04                  1     0 [01E..01F)-> BB07 ( cond )                     i gcsafe bwd 
BB06 [0014]  1       BB05                  2     0 [01E..01F)-> BB09 (always)                     i gcsafe idxlen bwd 
BB07 [0015]  2       BB04,BB05             2     0 [01E..01F)-> BB11 ( cond )                     i label target gcsafe bwd 
BB08 [0019]  1       BB07                  2     0 [01E..01F)                                     i label target gcsafe bwd 
BB09 [0016]  2       BB06,BB08             8     0 [???..???)-> BB03 ( cond )                     internal label target gcsafe bwd 
BB10 [0004]  1       BB09                  1       [027..03E)        (return)                     i gcsafe 
BB11 [0018]  1       BB07                  0       [01E..01F)        (throw )                     i rare label target hascall gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..00D), preds={} succs={BB02}

***** BB01
STMT00000 (IL 0x000...0x005)
               [000003] -AC--+------              *  ASG       ref   
               [000002] D----+-N----              +--*  LCL_VAR   ref    V05 tmp1         
               [000001] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000000] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e method

***** BB01
STMT00001 (IL   ???...  ???)
               [000005] --CXG+------              *  CALL      void   Batcher..ctor
               [000004] -----+------ this in rcx  \--*  LCL_VAR   ref    V05 tmp1         

***** BB01
STMT00002 (IL 0x005...  ???)
               [000008] -A---+------              *  ASG       ref   
               [000007] D----+-N----              +--*  LCL_VAR   ref    V01 loc0         
               [000006] -----+------              \--*  LCL_VAR   ref    V05 tmp1         

***** BB01
STMT00015 (IL 0x006...  ???)
               [000050] ---X-+------              *  NULLCHECK byte  
               [000049] -----+------              \--*  LCL_VAR   ref    V00 arg0         

***** BB01
STMT00016 (IL 0x006...  ???)
               [000055] -A---+------              *  ASG       ref   
               [000054] D----+-N----              +--*  LCL_VAR   ref    V13 tmp9         
               [000009] -----+------              \--*  LCL_VAR   ref    V00 arg0         

***** BB01
STMT00017 (IL 0x006...  ???)
               [000060] -A---+------              *  ASG       int   
               [000059] D----+-N----              +--*  LCL_VAR   int    V15 tmp11        
               [000058] -----+------              \--*  CNS_INT   int    0

***** BB01
STMT00018 (IL 0x006...  ???)
               [000066] -A-XG+------              *  ASG       int   
               [000065] D----+-N----              +--*  LCL_VAR   int    V16 tmp12        
               [000064] ---XG+------              \--*  IND       int   
               [000171] -----+------                 \--*  ADD       byref 
               [000063] -----+------                    +--*  LCL_VAR   ref    V00 arg0         
               [000170] -----+------                    \--*  CNS_INT   long   20 field offset Fseq[_version]

***** BB01
STMT00019 (IL 0x006...  ???)
               [000073] -A---+------              *  ASG       ref   
               [000069] D----+-N----              +--*  LCL_VAR   ref    V14 tmp10        
               [000071] -----+------              \--*  CNS_INT   ref    null

***** BB01
STMT00004 (IL   ???...  ???)
               [000186] -A---+------              *  COMMA     void  
               [000182] -A----------              +--*  COMMA     void  
               [000178] -A----------              |  +--*  COMMA     void  
               [000174] -A----------              |  |  +--*  ASG       ref   
               [000172] D------N----              |  |  |  +--*  LCL_VAR   ref    V09 tmp5         
               [000173] ------------              |  |  |  \--*  LCL_VAR   ref    V13 tmp9         
               [000177] -A----------              |  |  \--*  ASG       ref   
               [000175] D------N----              |  |     +--*  LCL_VAR   ref    V10 tmp6         
               [000176] ------------              |  |     \--*  LCL_VAR   ref    V14 tmp10        
               [000181] -A----------              |  \--*  ASG       int   
               [000179] D------N----              |     +--*  LCL_VAR   int    V11 tmp7         
               [000180] ------------              |     \--*  LCL_VAR   int    V15 tmp11        
               [000185] -A----------              \--*  ASG       int   
               [000183] D------N----                 +--*  LCL_VAR   int    V12 tmp8         
               [000184] ------------                 \--*  LCL_VAR   int    V16 tmp12        

------------ BB02 [00D..00F) -> BB04 (always), preds={BB01} succs={BB04}

------------ BB03 [00F..01E), preds={BB09} succs={BB04}

***** BB03
STMT00008 (IL   ???...  ???)
               [000028] -A---+------              *  ASG       ref   
               [000027] D----+-N----              +--*  LCL_VAR   ref    V03 loc2         
               [000077] -----+------              \--*  LCL_VAR   ref    V10 tmp6         

***** BB03
STMT00009 (IL 0x017...0x019)
               [000031] --CXG+------              *  CALL nullcheck void   Batcher.Push
               [000029] -----+------ this in rcx  +--*  LCL_VAR   ref    V01 loc0         
               [000030] -----+------ arg1 in rdx  \--*  LCL_VAR   ref    V10 tmp6         

------------ BB04 [01E..027) -> BB07 (cond), preds={BB02,BB03} succs={BB05,BB07}

***** BB04
STMT00020 (IL 0x01E...  ???)
               [000083] -A---+------              *  ASG       ref   
               [000082] D----+-N----              +--*  LCL_VAR   ref    V08 tmp4         
               [000081] -----+------              \--*  LCL_VAR   ref    V09 tmp5         

***** BB04
STMT00021 (IL 0x01E...  ???)
               [000090] ---XG+------              *  JTRUE     void  
               [000089] N--XG+-N-U--              \--*  NE        int   
               [000086] -----+------                 +--*  LCL_VAR   int    V12 tmp8         
               [000088] ---XG+------                 \--*  IND       int   
               [000190] -----+------                    \--*  ADD       byref 
               [000087] -----+------                       +--*  LCL_VAR   ref    V09 tmp5         
               [000189] -----+------                       \--*  CNS_INT   long   20 field offset Fseq[_version]

------------ BB05 [01E..01F) -> BB07 (cond), preds={BB04} succs={BB06,BB07}

***** BB05
STMT00024 (IL 0x01E...  ???)
               [000106] ---XG+------              *  JTRUE     void  
               [000105] N--XG+-N-U--              \--*  GE        int   
               [000102] -----+------                 +--*  LCL_VAR   int    V11 tmp7         
               [000104] ---XG+------                 \--*  IND       int   
               [000192] -----+------                    \--*  ADD       byref 
               [000103] -----+------                       +--*  LCL_VAR   ref    V08 tmp4         
               [000191] -----+------                       \--*  CNS_INT   long   16 field offset Fseq[_size]

------------ BB06 [01E..01F) -> BB09 (always), preds={BB05} succs={BB09}

***** BB06
STMT00025 (IL 0x01E...  ???)
               [000116] -A-XG+------              *  ASG       ref   
               [000115] D----+-N----              +--*  LCL_VAR   ref    V10 tmp6         
               [000207] -A-XG+------              \--*  COMMA     ref   
               [000194] -A-XG+------                 +--*  ASG       ref   
               [000193] D----+-N----                 |  +--*  LCL_VAR   ref    V17 tmp13        
               [000110] ---XG+------                 |  \--*  IND       ref   
               [000209] -----+------                 |     \--*  ADD       byref 
               [000109] -----+------                 |        +--*  LCL_VAR   ref    V08 tmp4         
               [000208] -----+------                 |        \--*  CNS_INT   long   8 field offset Fseq[_items]
               [000206] ---XG+------                 \--*  COMMA     ref   
               [000199] ---X-+------                    +--*  ARR_BOUNDS_CHECK_Rng void  
               [000113] -----+------                    |  +--*  LCL_VAR   int    V11 tmp7         
               [000198] ---X-+------                    |  \--*  ARR_LENGTH int   
               [000195] -----+------                    |     \--*  LCL_VAR   ref    V17 tmp13        
               [000114] a---G+------                    \--*  IND       ref   
               [000205] -----+------                       \--*  ADD       byref 
               [000196] -----+------                          +--*  LCL_VAR   ref    V17 tmp13        
               [000204] -----+------                          \--*  ADD       long  
               [000202] -----+------                             +--*  LSH       long  
               [000200] -----+------                             |  +--*  CAST      long <- int
               [000197] i----+------                             |  |  \--*  LCL_VAR   int    V11 tmp7         
               [000201] -----+-N----                             |  \--*  CNS_INT   long   3
               [000203] -----+------                             \--*  CNS_INT   long   16 Fseq[#FirstElem]

***** BB06
STMT00026 (IL 0x01E...  ???)
               [000125] -A---+------              *  ASG       int   
               [000124] D----+-N----              +--*  LCL_VAR   int    V11 tmp7         
               [000123] -----+------              \--*  ADD       int   
               [000121] -----+------                 +--*  LCL_VAR   int    V11 tmp7         
               [000122] -----+------                 \--*  CNS_INT   int    1

***** BB06
STMT00027 (IL 0x01E...  ???)
               [000129] -A---+------              *  ASG       bool  
               [000128] D----+-N----              +--*  LCL_VAR   int    V07 tmp3         
               [000126] -----+------              \--*  CNS_INT   int    1

------------ BB07 [01E..01F) -> BB11 (cond), preds={BB04,BB05} succs={BB08,BB11}

***** BB07
STMT00029 (IL 0x01E...  ???)
               [000143] ---XG+------              *  JTRUE     void  
               [000142] J--XG+-N----              \--*  NE        int   
               [000137] -----+------                 +--*  LCL_VAR   int    V12 tmp8         
               [000141] ---XG+------                 \--*  IND       int   
               [000211] -----+------                    \--*  ADD       byref 
               [000140] -----+------                       +--*  LCL_VAR   ref    V09 tmp5         
               [000210] -----+------                       \--*  CNS_INT   long   20 field offset Fseq[_version]

------------ BB08 [01E..01F), preds={BB07} succs={BB09}

***** BB08
STMT00030 (IL 0x01E...  ???)
               [000153] -A-XG+------              *  ASG       int   
               [000152] D----+-N----              +--*  LCL_VAR   int    V11 tmp7         
               [000151] ---XG+------              \--*  ADD       int   
               [000149] ---XG+------                 +--*  IND       int   
               [000213] -----+------                 |  \--*  ADD       byref 
               [000148] -----+------                 |     +--*  LCL_VAR   ref    V09 tmp5         
               [000212] -----+------                 |     \--*  CNS_INT   long   16 field offset Fseq[_size]
               [000150] -----+------                 \--*  CNS_INT   int    1

***** BB08
STMT00031 (IL 0x01E...  ???)
               [000160] -A---+------              *  ASG       ref   
               [000156] D----+-N----              +--*  LCL_VAR   ref    V10 tmp6         
               [000158] -----+------              \--*  CNS_INT   ref    null

***** BB08
STMT00023 (IL 0x01E...  ???)
               [000098] -A---+------              *  ASG       bool  
               [000097] D----+-N----              +--*  LCL_VAR   int    V07 tmp3         
               [000096] -----+------              \--*  CNS_INT   int    0

------------ BB09 [???..???) -> BB03 (cond), preds={BB06,BB08} succs={BB10,BB03}

***** BB09
STMT00028 (IL 0x01E...  ???)
               [000133] -A---+------              *  ASG       ref   
               [000132] D----+-N----              +--*  LCL_VAR   ref    V08 tmp4         
               [000131] -----+------              \--*  CNS_INT   ref    null

***** BB09
STMT00006 (IL   ???...  ???)
               [000021] -----+------              *  JTRUE     void  
               [000020] J----+-N----              \--*  NE        int   
               [000130] -----+------                 +--*  LCL_VAR   bool   V07 tmp3         
               [000019] -----+------                 \--*  CNS_INT   int    0

------------ BB10 [027..03E) (return), preds={BB09} succs={}

***** BB10
STMT00011 (IL   ???...  ???)
               [000035] ---XG+------              *  RETURN    ref   
               [000166] ---XG+------              \--*  IND       ref   
               [000216] -----+------                 \--*  ADD       byref 
               [000032] -----+------                    +--*  LCL_VAR   ref    V01 loc0         
               [000215] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[_batches]

------------ BB11 [01E..01F) (throw), preds={BB07} succs={}

***** BB11
STMT00032 (IL 0x01E...  ???)
               [000163] --CXG+------              *  CALL      void   System.ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion

-------------------------------------------------------------------------------------------------------------------
Considering loop 0 to clone for optimizations.
> No iter flag on loop 0.
------------------------------------------------------------


After loop cloning:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i label target hascall gcsafe newobj nullcheck 
BB02 [0001]  1       BB01                  1       [00D..00F)-> BB04 (always)                     keep i label gcsafe 
BB03 [0002]  1       BB09                  2     0 [00F..01E)                                     i Loop label target hascall gcsafe bwd bwd-target 
BB04 [0003]  2       BB02,BB03             8     0 [01E..027)-> BB07 ( cond )                     i label target gcsafe bwd 
BB05 [0013]  1       BB04                  1     0 [01E..01F)-> BB07 ( cond )                     i gcsafe bwd 
BB06 [0014]  1       BB05                  2     0 [01E..01F)-> BB09 (always)                     i gcsafe idxlen bwd 
BB07 [0015]  2       BB04,BB05             2     0 [01E..01F)-> BB11 ( cond )                     i label target gcsafe bwd 
BB08 [0019]  1       BB07                  2     0 [01E..01F)                                     i label target gcsafe bwd 
BB09 [0016]  2       BB06,BB08             8     0 [???..???)-> BB03 ( cond )                     internal label target gcsafe bwd 
BB10 [0004]  1       BB09                  1       [027..03E)        (return)                     i gcsafe 
BB11 [0018]  1       BB07                  0       [01E..01F)        (throw )                     i rare label target hascall gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..00D), preds={} succs={BB02}

***** BB01
STMT00000 (IL 0x000...0x005)
               [000003] -AC--+------              *  ASG       ref   
               [000002] D----+-N----              +--*  LCL_VAR   ref    V05 tmp1         
               [000001] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000000] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e method

***** BB01
STMT00001 (IL   ???...  ???)
               [000005] --CXG+------              *  CALL      void   Batcher..ctor
               [000004] -----+------ this in rcx  \--*  LCL_VAR   ref    V05 tmp1         

***** BB01
STMT00002 (IL 0x005...  ???)
               [000008] -A---+------              *  ASG       ref   
               [000007] D----+-N----              +--*  LCL_VAR   ref    V01 loc0         
               [000006] -----+------              \--*  LCL_VAR   ref    V05 tmp1         

***** BB01
STMT00015 (IL 0x006...  ???)
               [000050] ---X-+------              *  NULLCHECK byte  
               [000049] -----+------              \--*  LCL_VAR   ref    V00 arg0         

***** BB01
STMT00016 (IL 0x006...  ???)
               [000055] -A---+------              *  ASG       ref   
               [000054] D----+-N----              +--*  LCL_VAR   ref    V13 tmp9         
               [000009] -----+------              \--*  LCL_VAR   ref    V00 arg0         

***** BB01
STMT00017 (IL 0x006...  ???)
               [000060] -A---+------              *  ASG       int   
               [000059] D----+-N----              +--*  LCL_VAR   int    V15 tmp11        
               [000058] -----+------              \--*  CNS_INT   int    0

***** BB01
STMT00018 (IL 0x006...  ???)
               [000066] -A-XG+------              *  ASG       int   
               [000065] D----+-N----              +--*  LCL_VAR   int    V16 tmp12        
               [000064] ---XG+------              \--*  IND       int   
               [000171] -----+------                 \--*  ADD       byref 
               [000063] -----+------                    +--*  LCL_VAR   ref    V00 arg0         
               [000170] -----+------                    \--*  CNS_INT   long   20 field offset Fseq[_version]

***** BB01
STMT00019 (IL 0x006...  ???)
               [000073] -A---+------              *  ASG       ref   
               [000069] D----+-N----              +--*  LCL_VAR   ref    V14 tmp10        
               [000071] -----+------              \--*  CNS_INT   ref    null

***** BB01
STMT00004 (IL   ???...  ???)
               [000186] -A---+------              *  COMMA     void  
               [000182] -A----------              +--*  COMMA     void  
               [000178] -A----------              |  +--*  COMMA     void  
               [000174] -A----------              |  |  +--*  ASG       ref   
               [000172] D------N----              |  |  |  +--*  LCL_VAR   ref    V09 tmp5         
               [000173] ------------              |  |  |  \--*  LCL_VAR   ref    V13 tmp9         
               [000177] -A----------              |  |  \--*  ASG       ref   
               [000175] D------N----              |  |     +--*  LCL_VAR   ref    V10 tmp6         
               [000176] ------------              |  |     \--*  LCL_VAR   ref    V14 tmp10        
               [000181] -A----------              |  \--*  ASG       int   
               [000179] D------N----              |     +--*  LCL_VAR   int    V11 tmp7         
               [000180] ------------              |     \--*  LCL_VAR   int    V15 tmp11        
               [000185] -A----------              \--*  ASG       int   
               [000183] D------N----                 +--*  LCL_VAR   int    V12 tmp8         
               [000184] ------------                 \--*  LCL_VAR   int    V16 tmp12        

------------ BB02 [00D..00F) -> BB04 (always), preds={BB01} succs={BB04}

------------ BB03 [00F..01E), preds={BB09} succs={BB04}

***** BB03
STMT00008 (IL   ???...  ???)
               [000028] -A---+------              *  ASG       ref   
               [000027] D----+-N----              +--*  LCL_VAR   ref    V03 loc2         
               [000077] -----+------              \--*  LCL_VAR   ref    V10 tmp6         

***** BB03
STMT00009 (IL 0x017...0x019)
               [000031] --CXG+------              *  CALL nullcheck void   Batcher.Push
               [000029] -----+------ this in rcx  +--*  LCL_VAR   ref    V01 loc0         
               [000030] -----+------ arg1 in rdx  \--*  LCL_VAR   ref    V10 tmp6         

------------ BB04 [01E..027) -> BB07 (cond), preds={BB02,BB03} succs={BB05,BB07}

***** BB04
STMT00020 (IL 0x01E...  ???)
               [000083] -A---+------              *  ASG       ref   
               [000082] D----+-N----              +--*  LCL_VAR   ref    V08 tmp4         
               [000081] -----+------              \--*  LCL_VAR   ref    V09 tmp5         

***** BB04
STMT00021 (IL 0x01E...  ???)
               [000090] ---XG+------              *  JTRUE     void  
               [000089] N--XG+-N-U--              \--*  NE        int   
               [000086] -----+------                 +--*  LCL_VAR   int    V12 tmp8         
               [000088] ---XG+------                 \--*  IND       int   
               [000190] -----+------                    \--*  ADD       byref 
               [000087] -----+------                       +--*  LCL_VAR   ref    V09 tmp5         
               [000189] -----+------                       \--*  CNS_INT   long   20 field offset Fseq[_version]

------------ BB05 [01E..01F) -> BB07 (cond), preds={BB04} succs={BB06,BB07}

***** BB05
STMT00024 (IL 0x01E...  ???)
               [000106] ---XG+------              *  JTRUE     void  
               [000105] N--XG+-N-U--              \--*  GE        int   
               [000102] -----+------                 +--*  LCL_VAR   int    V11 tmp7         
               [000104] ---XG+------                 \--*  IND       int   
               [000192] -----+------                    \--*  ADD       byref 
               [000103] -----+------                       +--*  LCL_VAR   ref    V08 tmp4         
               [000191] -----+------                       \--*  CNS_INT   long   16 field offset Fseq[_size]

------------ BB06 [01E..01F) -> BB09 (always), preds={BB05} succs={BB09}

***** BB06
STMT00025 (IL 0x01E...  ???)
               [000116] -A-XG+------              *  ASG       ref   
               [000115] D----+-N----              +--*  LCL_VAR   ref    V10 tmp6         
               [000207] -A-XG+------              \--*  COMMA     ref   
               [000194] -A-XG+------                 +--*  ASG       ref   
               [000193] D----+-N----                 |  +--*  LCL_VAR   ref    V17 tmp13        
               [000110] ---XG+------                 |  \--*  IND       ref   
               [000209] -----+------                 |     \--*  ADD       byref 
               [000109] -----+------                 |        +--*  LCL_VAR   ref    V08 tmp4         
               [000208] -----+------                 |        \--*  CNS_INT   long   8 field offset Fseq[_items]
               [000206] ---XG+------                 \--*  COMMA     ref   
               [000199] ---X-+------                    +--*  ARR_BOUNDS_CHECK_Rng void  
               [000113] -----+------                    |  +--*  LCL_VAR   int    V11 tmp7         
               [000198] ---X-+------                    |  \--*  ARR_LENGTH int   
               [000195] -----+------                    |     \--*  LCL_VAR   ref    V17 tmp13        
               [000114] a---G+------                    \--*  IND       ref   
               [000205] -----+------                       \--*  ADD       byref 
               [000196] -----+------                          +--*  LCL_VAR   ref    V17 tmp13        
               [000204] -----+------                          \--*  ADD       long  
               [000202] -----+------                             +--*  LSH       long  
               [000200] -----+------                             |  +--*  CAST      long <- int
               [000197] i----+------                             |  |  \--*  LCL_VAR   int    V11 tmp7         
               [000201] -----+-N----                             |  \--*  CNS_INT   long   3
               [000203] -----+------                             \--*  CNS_INT   long   16 Fseq[#FirstElem]

***** BB06
STMT00026 (IL 0x01E...  ???)
               [000125] -A---+------              *  ASG       int   
               [000124] D----+-N----              +--*  LCL_VAR   int    V11 tmp7         
               [000123] -----+------              \--*  ADD       int   
               [000121] -----+------                 +--*  LCL_VAR   int    V11 tmp7         
               [000122] -----+------                 \--*  CNS_INT   int    1

***** BB06
STMT00027 (IL 0x01E...  ???)
               [000129] -A---+------              *  ASG       bool  
               [000128] D----+-N----              +--*  LCL_VAR   int    V07 tmp3         
               [000126] -----+------              \--*  CNS_INT   int    1

------------ BB07 [01E..01F) -> BB11 (cond), preds={BB04,BB05} succs={BB08,BB11}

***** BB07
STMT00029 (IL 0x01E...  ???)
               [000143] ---XG+------              *  JTRUE     void  
               [000142] J--XG+-N----              \--*  NE        int   
               [000137] -----+------                 +--*  LCL_VAR   int    V12 tmp8         
               [000141] ---XG+------                 \--*  IND       int   
               [000211] -----+------                    \--*  ADD       byref 
               [000140] -----+------                       +--*  LCL_VAR   ref    V09 tmp5         
               [000210] -----+------                       \--*  CNS_INT   long   20 field offset Fseq[_version]

------------ BB08 [01E..01F), preds={BB07} succs={BB09}

***** BB08
STMT00030 (IL 0x01E...  ???)
               [000153] -A-XG+------              *  ASG       int   
               [000152] D----+-N----              +--*  LCL_VAR   int    V11 tmp7         
               [000151] ---XG+------              \--*  ADD       int   
               [000149] ---XG+------                 +--*  IND       int   
               [000213] -----+------                 |  \--*  ADD       byref 
               [000148] -----+------                 |     +--*  LCL_VAR   ref    V09 tmp5         
               [000212] -----+------                 |     \--*  CNS_INT   long   16 field offset Fseq[_size]
               [000150] -----+------                 \--*  CNS_INT   int    1

***** BB08
STMT00031 (IL 0x01E...  ???)
               [000160] -A---+------              *  ASG       ref   
               [000156] D----+-N----              +--*  LCL_VAR   ref    V10 tmp6         
               [000158] -----+------              \--*  CNS_INT   ref    null

***** BB08
STMT00023 (IL 0x01E...  ???)
               [000098] -A---+------              *  ASG       bool  
               [000097] D----+-N----              +--*  LCL_VAR   int    V07 tmp3         
               [000096] -----+------              \--*  CNS_INT   int    0

------------ BB09 [???..???) -> BB03 (cond), preds={BB06,BB08} succs={BB10,BB03}

***** BB09
STMT00028 (IL 0x01E...  ???)
               [000133] -A---+------              *  ASG       ref   
               [000132] D----+-N----              +--*  LCL_VAR   ref    V08 tmp4         
               [000131] -----+------              \--*  CNS_INT   ref    null

***** BB09
STMT00006 (IL   ???...  ???)
               [000021] -----+------              *  JTRUE     void  
               [000020] J----+-N----              \--*  NE        int   
               [000130] -----+------                 +--*  LCL_VAR   bool   V07 tmp3         
               [000019] -----+------                 \--*  CNS_INT   int    0

------------ BB10 [027..03E) (return), preds={BB09} succs={}

***** BB10
STMT00011 (IL   ???...  ???)
               [000035] ---XG+------              *  RETURN    ref   
               [000166] ---XG+------              \--*  IND       ref   
               [000216] -----+------                 \--*  ADD       byref 
               [000032] -----+------                    +--*  LCL_VAR   ref    V01 loc0         
               [000215] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[_batches]

------------ BB11 [01E..01F) (throw), preds={BB07} succs={}

***** BB11
STMT00032 (IL 0x01E...  ???)
               [000163] --CXG+------              *  CALL      void   System.ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion

-------------------------------------------------------------------------------------------------------------------

*************** Finishing PHASE Clone loops

*************** Starting PHASE Unroll loops
*************** In optUnrollLoops()
*************** In fgDebugCheckBBlist

*************** Finishing PHASE Unroll loops

*************** Starting PHASE Mark local vars

*************** In lvaMarkLocalVars()
*** lvaComputeRefCounts ***

*** lvaComputeRefCounts -- explicit counts ***

*** marking local variables in block BB01 (weight=1   )
STMT00000 (IL 0x000...0x005)
               [000003] -AC--+------              *  ASG       ref   
               [000002] D----+-N----              +--*  LCL_VAR   ref    V05 tmp1         
               [000001] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000000] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e method
New refCnts for V05: refCnt =  1, refCntWtd = 2   
STMT00001 (IL   ???...  ???)
               [000005] --CXG+------              *  CALL      void   Batcher..ctor
               [000004] -----+------ this in rcx  \--*  LCL_VAR   ref    V05 tmp1         
New refCnts for V05: refCnt =  2, refCntWtd = 4   
STMT00002 (IL 0x005...  ???)
               [000008] -A---+------              *  ASG       ref   
               [000007] D----+-N----              +--*  LCL_VAR   ref    V01 loc0         
               [000006] -----+------              \--*  LCL_VAR   ref    V05 tmp1         
New refCnts for V01: refCnt =  1, refCntWtd = 1   
New refCnts for V05: refCnt =  3, refCntWtd = 6   
STMT00015 (IL 0x006...  ???)
               [000050] ---X-+------              *  NULLCHECK byte  
               [000049] -----+------              \--*  LCL_VAR   ref    V00 arg0         
New refCnts for V00: refCnt =  1, refCntWtd = 1   
STMT00016 (IL 0x006...  ???)
               [000055] -A---+------              *  ASG       ref   
               [000054] D----+-N----              +--*  LCL_VAR   ref    V13 tmp9         
               [000009] -----+------              \--*  LCL_VAR   ref    V00 arg0         
New refCnts for V13: refCnt =  1, refCntWtd = 1   
New refCnts for V00: refCnt =  2, refCntWtd = 2   
STMT00017 (IL 0x006...  ???)
               [000060] -A---+------              *  ASG       int   
               [000059] D----+-N----              +--*  LCL_VAR   int    V15 tmp11        
               [000058] -----+------              \--*  CNS_INT   int    0
New refCnts for V15: refCnt =  1, refCntWtd = 1   
STMT00018 (IL 0x006...  ???)
               [000066] -A-XG+------              *  ASG       int   
               [000065] D----+-N----              +--*  LCL_VAR   int    V16 tmp12        
               [000064] ---XG+------              \--*  IND       int   
               [000171] -----+------                 \--*  ADD       byref 
               [000063] -----+------                    +--*  LCL_VAR   ref    V00 arg0         
               [000170] -----+------                    \--*  CNS_INT   long   20 field offset Fseq[_version]
New refCnts for V16: refCnt =  1, refCntWtd = 1   
New refCnts for V00: refCnt =  3, refCntWtd = 3   
STMT00019 (IL 0x006...  ???)
               [000073] -A---+------              *  ASG       ref   
               [000069] D----+-N----              +--*  LCL_VAR   ref    V14 tmp10        
               [000071] -----+------              \--*  CNS_INT   ref    null
New refCnts for V14: refCnt =  1, refCntWtd = 1   
STMT00004 (IL   ???...  ???)
               [000186] -A---+------              *  COMMA     void  
               [000182] -A----------              +--*  COMMA     void  
               [000178] -A----------              |  +--*  COMMA     void  
               [000174] -A----------              |  |  +--*  ASG       ref   
               [000172] D------N----              |  |  |  +--*  LCL_VAR   ref    V09 tmp5         
               [000173] ------------              |  |  |  \--*  LCL_VAR   ref    V13 tmp9         
               [000177] -A----------              |  |  \--*  ASG       ref   
               [000175] D------N----              |  |     +--*  LCL_VAR   ref    V10 tmp6         
               [000176] ------------              |  |     \--*  LCL_VAR   ref    V14 tmp10        
               [000181] -A----------              |  \--*  ASG       int   
               [000179] D------N----              |     +--*  LCL_VAR   int    V11 tmp7         
               [000180] ------------              |     \--*  LCL_VAR   int    V15 tmp11        
               [000185] -A----------              \--*  ASG       int   
               [000183] D------N----                 +--*  LCL_VAR   int    V12 tmp8         
               [000184] ------------                 \--*  LCL_VAR   int    V16 tmp12        
New refCnts for V09: refCnt =  1, refCntWtd = 1   
New refCnts for V13: refCnt =  2, refCntWtd = 2   
New refCnts for V10: refCnt =  1, refCntWtd = 1   
New refCnts for V14: refCnt =  2, refCntWtd = 2   
New refCnts for V11: refCnt =  1, refCntWtd = 1   
New refCnts for V15: refCnt =  2, refCntWtd = 2   
New refCnts for V12: refCnt =  1, refCntWtd = 1   
New refCnts for V16: refCnt =  2, refCntWtd = 2   

*** marking local variables in block BB02 (weight=1   )

*** marking local variables in block BB03 (weight=2   )
STMT00008 (IL   ???...  ???)
               [000028] -A---+------              *  ASG       ref   
               [000027] D----+-N----              +--*  LCL_VAR   ref    V03 loc2         
               [000077] -----+------              \--*  LCL_VAR   ref    V10 tmp6         
New refCnts for V03: refCnt =  1, refCntWtd = 2   
New refCnts for V10: refCnt =  2, refCntWtd = 3   
STMT00009 (IL 0x017...0x019)
               [000031] --CXG+------              *  CALL nullcheck void   Batcher.Push
               [000029] -----+------ this in rcx  +--*  LCL_VAR   ref    V01 loc0         
               [000030] -----+------ arg1 in rdx  \--*  LCL_VAR   ref    V10 tmp6         
New refCnts for V01: refCnt =  2, refCntWtd = 3   
New refCnts for V10: refCnt =  3, refCntWtd = 5   

*** marking local variables in block BB04 (weight=8   )
STMT00020 (IL 0x01E...  ???)
               [000083] -A---+------              *  ASG       ref   
               [000082] D----+-N----              +--*  LCL_VAR   ref    V08 tmp4         
               [000081] -----+------              \--*  LCL_VAR   ref    V09 tmp5         
New refCnts for V08: refCnt =  1, refCntWtd = 8   
New refCnts for V09: refCnt =  2, refCntWtd = 9   
STMT00021 (IL 0x01E...  ???)
               [000090] ---XG+------              *  JTRUE     void  
               [000089] N--XG+-N-U--              \--*  NE        int   
               [000086] -----+------                 +--*  LCL_VAR   int    V12 tmp8         
               [000088] ---XG+------                 \--*  IND       int   
               [000190] -----+------                    \--*  ADD       byref 
               [000087] -----+------                       +--*  LCL_VAR   ref    V09 tmp5         
               [000189] -----+------                       \--*  CNS_INT   long   20 field offset Fseq[_version]
New refCnts for V12: refCnt =  2, refCntWtd = 9   
New refCnts for V09: refCnt =  3, refCntWtd = 17   

*** marking local variables in block BB05 (weight=1   )
STMT00024 (IL 0x01E...  ???)
               [000106] ---XG+------              *  JTRUE     void  
               [000105] N--XG+-N-U--              \--*  GE        int   
               [000102] -----+------                 +--*  LCL_VAR   int    V11 tmp7         
               [000104] ---XG+------                 \--*  IND       int   
               [000192] -----+------                    \--*  ADD       byref 
               [000103] -----+------                       +--*  LCL_VAR   ref    V08 tmp4         
               [000191] -----+------                       \--*  CNS_INT   long   16 field offset Fseq[_size]
New refCnts for V11: refCnt =  2, refCntWtd = 2   
New refCnts for V08: refCnt =  2, refCntWtd = 9   

*** marking local variables in block BB06 (weight=2   )
STMT00025 (IL 0x01E...  ???)
               [000116] -A-XG+------              *  ASG       ref   
               [000115] D----+-N----              +--*  LCL_VAR   ref    V10 tmp6         
               [000207] -A-XG+------              \--*  COMMA     ref   
               [000194] -A-XG+------                 +--*  ASG       ref   
               [000193] D----+-N----                 |  +--*  LCL_VAR   ref    V17 tmp13        
               [000110] ---XG+------                 |  \--*  IND       ref   
               [000209] -----+------                 |     \--*  ADD       byref 
               [000109] -----+------                 |        +--*  LCL_VAR   ref    V08 tmp4         
               [000208] -----+------                 |        \--*  CNS_INT   long   8 field offset Fseq[_items]
               [000206] ---XG+------                 \--*  COMMA     ref   
               [000199] ---X-+------                    +--*  ARR_BOUNDS_CHECK_Rng void  
               [000113] -----+------                    |  +--*  LCL_VAR   int    V11 tmp7         
               [000198] ---X-+------                    |  \--*  ARR_LENGTH int   
               [000195] -----+------                    |     \--*  LCL_VAR   ref    V17 tmp13        
               [000114] a---G+------                    \--*  IND       ref   
               [000205] -----+------                       \--*  ADD       byref 
               [000196] -----+------                          +--*  LCL_VAR   ref    V17 tmp13        
               [000204] -----+------                          \--*  ADD       long  
               [000202] -----+------                             +--*  LSH       long  
               [000200] -----+------                             |  +--*  CAST      long <- int
               [000197] i----+------                             |  |  \--*  LCL_VAR   int    V11 tmp7         
               [000201] -----+-N----                             |  \--*  CNS_INT   long   3
               [000203] -----+------                             \--*  CNS_INT   long   16 Fseq[#FirstElem]
New refCnts for V10: refCnt =  4, refCntWtd = 7   
New refCnts for V17: refCnt =  1, refCntWtd = 4   
New refCnts for V08: refCnt =  3, refCntWtd = 11   
New refCnts for V11: refCnt =  3, refCntWtd = 4   
New refCnts for V17: refCnt =  2, refCntWtd = 8   
New refCnts for V17: refCnt =  3, refCntWtd = 12   
New refCnts for V11: refCnt =  4, refCntWtd = 6   
STMT00026 (IL 0x01E...  ???)
               [000125] -A---+------              *  ASG       int   
               [000124] D----+-N----              +--*  LCL_VAR   int    V11 tmp7         
               [000123] -----+------              \--*  ADD       int   
               [000121] -----+------                 +--*  LCL_VAR   int    V11 tmp7         
               [000122] -----+------                 \--*  CNS_INT   int    1
New refCnts for V11: refCnt =  5, refCntWtd = 8   
New refCnts for V11: refCnt =  6, refCntWtd = 10   
STMT00027 (IL 0x01E...  ???)
               [000129] -A---+------              *  ASG       bool  
               [000128] D----+-N----              +--*  LCL_VAR   int    V07 tmp3         
               [000126] -----+------              \--*  CNS_INT   int    1
New refCnts for V07: refCnt =  1, refCntWtd = 2   

*** marking local variables in block BB07 (weight=2   )
STMT00029 (IL 0x01E...  ???)
               [000143] ---XG+------              *  JTRUE     void  
               [000142] J--XG+-N----              \--*  NE        int   
               [000137] -----+------                 +--*  LCL_VAR   int    V12 tmp8         
               [000141] ---XG+------                 \--*  IND       int   
               [000211] -----+------                    \--*  ADD       byref 
               [000140] -----+------                       +--*  LCL_VAR   ref    V09 tmp5         
               [000210] -----+------                       \--*  CNS_INT   long   20 field offset Fseq[_version]
New refCnts for V12: refCnt =  3, refCntWtd = 11   
New refCnts for V09: refCnt =  4, refCntWtd = 19   

*** marking local variables in block BB08 (weight=2   )
STMT00030 (IL 0x01E...  ???)
               [000153] -A-XG+------              *  ASG       int   
               [000152] D----+-N----              +--*  LCL_VAR   int    V11 tmp7         
               [000151] ---XG+------              \--*  ADD       int   
               [000149] ---XG+------                 +--*  IND       int   
               [000213] -----+------                 |  \--*  ADD       byref 
               [000148] -----+------                 |     +--*  LCL_VAR   ref    V09 tmp5         
               [000212] -----+------                 |     \--*  CNS_INT   long   16 field offset Fseq[_size]
               [000150] -----+------                 \--*  CNS_INT   int    1
New refCnts for V11: refCnt =  7, refCntWtd = 12   
New refCnts for V09: refCnt =  5, refCntWtd = 21   
STMT00031 (IL 0x01E...  ???)
               [000160] -A---+------              *  ASG       ref   
               [000156] D----+-N----              +--*  LCL_VAR   ref    V10 tmp6         
               [000158] -----+------              \--*  CNS_INT   ref    null
New refCnts for V10: refCnt =  5, refCntWtd = 9   
STMT00023 (IL 0x01E...  ???)
               [000098] -A---+------              *  ASG       bool  
               [000097] D----+-N----              +--*  LCL_VAR   int    V07 tmp3         
               [000096] -----+------              \--*  CNS_INT   int    0
New refCnts for V07: refCnt =  2, refCntWtd = 4   

*** marking local variables in block BB09 (weight=8   )
STMT00028 (IL 0x01E...  ???)
               [000133] -A---+------              *  ASG       ref   
               [000132] D----+-N----              +--*  LCL_VAR   ref    V08 tmp4         
               [000131] -----+------              \--*  CNS_INT   ref    null
New refCnts for V08: refCnt =  4, refCntWtd = 19   
STMT00006 (IL   ???...  ???)
               [000021] -----+------              *  JTRUE     void  
               [000020] J----+-N----              \--*  NE        int   
               [000130] -----+------                 +--*  LCL_VAR   bool   V07 tmp3         
               [000019] -----+------                 \--*  CNS_INT   int    0
New refCnts for V07: refCnt =  3, refCntWtd = 12   

*** marking local variables in block BB10 (weight=1   )
STMT00011 (IL   ???...  ???)
               [000035] ---XG+------              *  RETURN    ref   
               [000166] ---XG+------              \--*  IND       ref   
               [000216] -----+------                 \--*  ADD       byref 
               [000032] -----+------                    +--*  LCL_VAR   ref    V01 loc0         
               [000215] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[_batches]
New refCnts for V01: refCnt =  3, refCntWtd = 4   

*** marking local variables in block BB11 (weight=0   )
STMT00032 (IL 0x01E...  ???)
               [000163] --CXG+------              *  CALL      void   System.ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion

*** lvaComputeRefCounts -- implicit counts ***
New refCnts for V00: refCnt =  4, refCntWtd = 4   
New refCnts for V00: refCnt =  5, refCntWtd = 5   

*************** In optAddCopies()


*************** Finishing PHASE Mark local vars

*************** Starting PHASE Optimize bools
*************** In optOptimizeBools()
*************** In fgDebugCheckBBlist

*************** Finishing PHASE Optimize bools

*************** Starting PHASE Find oper order
*************** In fgFindOperOrder()

*************** Finishing PHASE Find oper order

*************** Starting PHASE Set block order
*************** In fgSetBlockOrder()
fgMarkLoopHead: Checking loop head block BB03: this block will execute a call
The biggest BB has   23 tree nodes

*************** Finishing PHASE Set block order
Trees before Build SSA representation

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i label target hascall gcsafe newobj nullcheck 
BB02 [0001]  1       BB01                  1       [00D..00F)-> BB04 (always)                     keep i label gcsafe 
BB03 [0002]  1       BB09                  2     0 [00F..01E)                                     i Loop label target hascall gcsafe bwd bwd-target 
BB04 [0003]  2       BB02,BB03             8     0 [01E..027)-> BB07 ( cond )                     i label target gcsafe bwd 
BB05 [0013]  1       BB04                  1     0 [01E..01F)-> BB07 ( cond )                     i gcsafe bwd 
BB06 [0014]  1       BB05                  2     0 [01E..01F)-> BB09 (always)                     i gcsafe idxlen bwd 
BB07 [0015]  2       BB04,BB05             2     0 [01E..01F)-> BB11 ( cond )                     i label target gcsafe bwd 
BB08 [0019]  1       BB07                  2     0 [01E..01F)                                     i label target gcsafe bwd 
BB09 [0016]  2       BB06,BB08             8     0 [???..???)-> BB03 ( cond )                     internal label target gcsafe bwd 
BB10 [0004]  1       BB09                  1       [027..03E)        (return)                     i gcsafe 
BB11 [0018]  1       BB07                  0       [01E..01F)        (throw )                     i rare label target hascall gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..00D), preds={} succs={BB02}

***** BB01
STMT00000 (IL 0x000...0x005)
N005 ( 16, 16) [000003] -AC-----R---              *  ASG       ref   
N004 (  1,  1) [000002] D------N----              +--*  LCL_VAR   ref    V05 tmp1         
N003 ( 16, 16) [000001] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
N002 (  2, 10) [000000] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e method

***** BB01
STMT00001 (IL   ???...  ???)
N003 ( 15,  8) [000005] --CXG-------              *  CALL      void   Batcher..ctor
N002 (  1,  1) [000004] ------------ this in rcx  \--*  LCL_VAR   ref    V05 tmp1         

***** BB01
STMT00002 (IL 0x005...  ???)
N003 (  1,  3) [000008] -A------R---              *  ASG       ref   
N002 (  1,  1) [000007] D------N----              +--*  LCL_VAR   ref    V01 loc0         
N001 (  1,  1) [000006] ------------              \--*  LCL_VAR   ref    V05 tmp1         

***** BB01
STMT00015 (IL 0x006...  ???)
N002 (  2,  2) [000050] ---X--------              *  NULLCHECK byte  
N001 (  1,  1) [000049] ------------              \--*  LCL_VAR   ref    V00 arg0         

***** BB01
STMT00016 (IL 0x006...  ???)
N003 (  5,  4) [000055] -A------R---              *  ASG       ref   
N002 (  3,  2) [000054] D------N----              +--*  LCL_VAR   ref    V13 tmp9         
N001 (  1,  1) [000009] ------------              \--*  LCL_VAR   ref    V00 arg0         

***** BB01
STMT00017 (IL 0x006...  ???)
N003 (  5,  4) [000060] -A------R---              *  ASG       int   
N002 (  3,  2) [000059] D------N----              +--*  LCL_VAR   int    V15 tmp11        
N001 (  1,  1) [000058] ------------              \--*  CNS_INT   int    0

***** BB01
STMT00018 (IL 0x006...  ???)
N006 (  8,  7) [000066] -A-XG---R---              *  ASG       int   
N005 (  3,  2) [000065] D------N----              +--*  LCL_VAR   int    V16 tmp12        
N004 (  4,  4) [000064] ---XG-------              \--*  IND       int   
N003 (  2,  2) [000171] -------N----                 \--*  ADD       byref 
N001 (  1,  1) [000063] ------------                    +--*  LCL_VAR   ref    V00 arg0         
N002 (  1,  1) [000170] ------------                    \--*  CNS_INT   long   20 field offset Fseq[_version]

***** BB01
STMT00019 (IL 0x006...  ???)
N003 (  5,  4) [000073] -A------R---              *  ASG       ref   
N002 (  3,  2) [000069] D------N----              +--*  LCL_VAR   ref    V14 tmp10        
N001 (  1,  1) [000071] ------------              \--*  CNS_INT   ref    null

***** BB01
STMT00004 (IL   ???...  ???)
N015 ( 12, 12) [000186] -A----------              *  COMMA     void  
N011 (  9,  9) [000182] -A----------              +--*  COMMA     void  
N007 (  6,  6) [000178] -A----------              |  +--*  COMMA     void  
N003 (  3,  3) [000174] -A------R---              |  |  +--*  ASG       ref   
N002 (  1,  1) [000172] D------N----              |  |  |  +--*  LCL_VAR   ref    V09 tmp5         
N001 (  3,  2) [000173] ------------              |  |  |  \--*  LCL_VAR   ref    V13 tmp9         
N006 (  3,  3) [000177] -A------R---              |  |  \--*  ASG       ref   
N005 (  1,  1) [000175] D------N----              |  |     +--*  LCL_VAR   ref    V10 tmp6         
N004 (  3,  2) [000176] ------------              |  |     \--*  LCL_VAR   ref    V14 tmp10        
N010 (  3,  3) [000181] -A------R---              |  \--*  ASG       int   
N009 (  1,  1) [000179] D------N----              |     +--*  LCL_VAR   int    V11 tmp7         
N008 (  3,  2) [000180] ------------              |     \--*  LCL_VAR   int    V15 tmp11        
N014 (  3,  3) [000185] -A------R---              \--*  ASG       int   
N013 (  1,  1) [000183] D------N----                 +--*  LCL_VAR   int    V12 tmp8         
N012 (  3,  2) [000184] ------------                 \--*  LCL_VAR   int    V16 tmp12        

------------ BB02 [00D..00F) -> BB04 (always), preds={BB01} succs={BB04}

------------ BB03 [00F..01E), preds={BB09} succs={BB04}

***** BB03
STMT00008 (IL   ???...  ???)
N003 (  5,  4) [000028] -A------R---              *  ASG       ref   
N002 (  3,  2) [000027] D------N----              +--*  LCL_VAR   ref    V03 loc2         
N001 (  1,  1) [000077] ------------              \--*  LCL_VAR   ref    V10 tmp6         

***** BB03
STMT00009 (IL 0x017...0x019)
N005 ( 16, 10) [000031] --CXG-------              *  CALL nullcheck void   Batcher.Push
N003 (  1,  1) [000029] ------------ this in rcx  +--*  LCL_VAR   ref    V01 loc0         
N004 (  1,  1) [000030] ------------ arg1 in rdx  \--*  LCL_VAR   ref    V10 tmp6         

------------ BB04 [01E..027) -> BB07 (cond), preds={BB02,BB03} succs={BB05,BB07}

***** BB04
STMT00020 (IL 0x01E...  ???)
N003 (  1,  3) [000083] -A------R---              *  ASG       ref   
N002 (  1,  1) [000082] D------N----              +--*  LCL_VAR   ref    V08 tmp4         
N001 (  1,  1) [000081] ------------              \--*  LCL_VAR   ref    V09 tmp5         

***** BB04
STMT00021 (IL 0x01E...  ???)
N007 (  8,  8) [000090] ---XG-------              *  JTRUE     void  
N006 (  6,  6) [000089] N--XG--N-U--              \--*  NE        int   
N001 (  1,  1) [000086] ------------                 +--*  LCL_VAR   int    V12 tmp8         
N005 (  4,  4) [000088] ---XG-------                 \--*  IND       int   
N004 (  2,  2) [000190] -------N----                    \--*  ADD       byref 
N002 (  1,  1) [000087] ------------                       +--*  LCL_VAR   ref    V09 tmp5         
N003 (  1,  1) [000189] ------------                       \--*  CNS_INT   long   20 field offset Fseq[_version]

------------ BB05 [01E..01F) -> BB07 (cond), preds={BB04} succs={BB06,BB07}

***** BB05
STMT00024 (IL 0x01E...  ???)
N007 (  8,  8) [000106] ---XG-------              *  JTRUE     void  
N006 (  6,  6) [000105] N--XG--N-U--              \--*  GE        int   
N001 (  1,  1) [000102] ------------                 +--*  LCL_VAR   int    V11 tmp7         
N005 (  4,  4) [000104] ---XG-------                 \--*  IND       int   
N004 (  2,  2) [000192] -------N----                    \--*  ADD       byref 
N002 (  1,  1) [000103] ------------                       +--*  LCL_VAR   ref    V08 tmp4         
N003 (  1,  1) [000191] ------------                       \--*  CNS_INT   long   16 field offset Fseq[_size]

------------ BB06 [01E..01F) -> BB09 (always), preds={BB05} succs={BB09}

***** BB06
STMT00025 (IL 0x01E...  ???)
N023 ( 18, 22) [000116] -A-XG---R---              *  ASG       ref   
N022 (  1,  1) [000115] D------N----              +--*  LCL_VAR   ref    V10 tmp6         
N021 ( 18, 22) [000207] -A-XG-------              \--*  COMMA     ref   
N006 (  4,  4) [000194] -A-XG---R---                 +--*  ASG       ref   
N005 (  1,  1) [000193] D------N----                 |  +--*  LCL_VAR   ref    V17 tmp13        
N004 (  4,  4) [000110] ---XG-------                 |  \--*  IND       ref   
N003 (  2,  2) [000209] -------N----                 |     \--*  ADD       byref 
N001 (  1,  1) [000109] ------------                 |        +--*  LCL_VAR   ref    V08 tmp4         
N002 (  1,  1) [000208] ------------                 |        \--*  CNS_INT   long   8 field offset Fseq[_items]
N020 ( 14, 18) [000206] ---XG-------                 \--*  COMMA     ref   
N010 (  8, 11) [000199] ---X--------                    +--*  ARR_BOUNDS_CHECK_Rng void  
N007 (  1,  1) [000113] ------------                    |  +--*  LCL_VAR   int    V11 tmp7         
N009 (  3,  3) [000198] ---X--------                    |  \--*  ARR_LENGTH int   
N008 (  1,  1) [000195] ------------                    |     \--*  LCL_VAR   ref    V17 tmp13        
N019 (  6,  7) [000114] a---G-------                    \--*  IND       ref   
N018 (  5,  6) [000205] -------N----                       \--*  ADD       byref 
N011 (  1,  1) [000196] ------------                          +--*  LCL_VAR   ref    V17 tmp13        
N017 (  4,  5) [000204] -------N----                          \--*  ADD       long  
N015 (  3,  4) [000202] -------N----                             +--*  LSH       long  
N013 (  2,  3) [000200] ------------                             |  +--*  CAST      long <- int
N012 (  1,  1) [000197] i-----------                             |  |  \--*  LCL_VAR   int    V11 tmp7         
N014 (  1,  1) [000201] -------N----                             |  \--*  CNS_INT   long   3
N016 (  1,  1) [000203] ------------                             \--*  CNS_INT   long   16 Fseq[#FirstElem]

***** BB06
STMT00026 (IL 0x01E...  ???)
N005 (  3,  3) [000125] -A------R---              *  ASG       int   
N004 (  1,  1) [000124] D------N----              +--*  LCL_VAR   int    V11 tmp7         
N003 (  3,  3) [000123] ------------              \--*  ADD       int   
N001 (  1,  1) [000121] ------------                 +--*  LCL_VAR   int    V11 tmp7         
N002 (  1,  1) [000122] ------------                 \--*  CNS_INT   int    1

***** BB06
STMT00027 (IL 0x01E...  ???)
N003 (  1,  3) [000129] -A------R---              *  ASG       bool  
N002 (  1,  1) [000128] D------N----              +--*  LCL_VAR   int    V07 tmp3         
N001 (  1,  1) [000126] ------------              \--*  CNS_INT   int    1

------------ BB07 [01E..01F) -> BB11 (cond), preds={BB04,BB05} succs={BB08,BB11}

***** BB07
STMT00029 (IL 0x01E...  ???)
N007 (  8,  8) [000143] ---XG-------              *  JTRUE     void  
N006 (  6,  6) [000142] J--XG--N----              \--*  NE        int   
N001 (  1,  1) [000137] ------------                 +--*  LCL_VAR   int    V12 tmp8         
N005 (  4,  4) [000141] ---XG-------                 \--*  IND       int   
N004 (  2,  2) [000211] -------N----                    \--*  ADD       byref 
N002 (  1,  1) [000140] ------------                       +--*  LCL_VAR   ref    V09 tmp5         
N003 (  1,  1) [000210] ------------                       \--*  CNS_INT   long   20 field offset Fseq[_version]

------------ BB08 [01E..01F), preds={BB07} succs={BB09}

***** BB08
STMT00030 (IL 0x01E...  ???)
N008 (  6,  6) [000153] -A-XG---R---              *  ASG       int   
N007 (  1,  1) [000152] D------N----              +--*  LCL_VAR   int    V11 tmp7         
N006 (  6,  6) [000151] ---XG-------              \--*  ADD       int   
N004 (  4,  4) [000149] ---XG-------                 +--*  IND       int   
N003 (  2,  2) [000213] -------N----                 |  \--*  ADD       byref 
N001 (  1,  1) [000148] ------------                 |     +--*  LCL_VAR   ref    V09 tmp5         
N002 (  1,  1) [000212] ------------                 |     \--*  CNS_INT   long   16 field offset Fseq[_size]
N005 (  1,  1) [000150] ------------                 \--*  CNS_INT   int    1

***** BB08
STMT00031 (IL 0x01E...  ???)
N003 (  1,  3) [000160] -A------R---              *  ASG       ref   
N002 (  1,  1) [000156] D------N----              +--*  LCL_VAR   ref    V10 tmp6         
N001 (  1,  1) [000158] ------------              \--*  CNS_INT   ref    null

***** BB08
STMT00023 (IL 0x01E...  ???)
N003 (  1,  3) [000098] -A------R---              *  ASG       bool  
N002 (  1,  1) [000097] D------N----              +--*  LCL_VAR   int    V07 tmp3         
N001 (  1,  1) [000096] ------------              \--*  CNS_INT   int    0

------------ BB09 [???..???) -> BB03 (cond), preds={BB06,BB08} succs={BB10,BB03}

***** BB09
STMT00028 (IL 0x01E...  ???)
N003 (  1,  3) [000133] -A------R---              *  ASG       ref   
N002 (  1,  1) [000132] D------N----              +--*  LCL_VAR   ref    V08 tmp4         
N001 (  1,  1) [000131] ------------              \--*  CNS_INT   ref    null

***** BB09
STMT00006 (IL   ???...  ???)
N004 (  5,  5) [000021] ------------              *  JTRUE     void  
N003 (  3,  3) [000020] J------N----              \--*  NE        int   
N001 (  1,  1) [000130] ------------                 +--*  LCL_VAR   bool   V07 tmp3         
N002 (  1,  1) [000019] ------------                 \--*  CNS_INT   int    0

------------ BB10 [027..03E) (return), preds={BB09} succs={}

***** BB10
STMT00011 (IL   ???...  ???)
N005 (  5,  5) [000035] ---XG-------              *  RETURN    ref   
N004 (  4,  4) [000166] ---XG-------              \--*  IND       ref   
N003 (  2,  2) [000216] -------N----                 \--*  ADD       byref 
N001 (  1,  1) [000032] ------------                    +--*  LCL_VAR   ref    V01 loc0         
N002 (  1,  1) [000215] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_batches]

------------ BB11 [01E..01F) (throw), preds={BB07} succs={}

***** BB11
STMT00032 (IL 0x01E...  ???)
N001 ( 14,  5) [000163] --CXG-------              *  CALL      void   System.ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion

-------------------------------------------------------------------------------------------------------------------

*************** Starting PHASE Build SSA representation
*************** In SsaBuilder::Build()
[SsaBuilder] Max block count is 12.

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i label target hascall gcsafe newobj nullcheck 
BB02 [0001]  1       BB01                  1       [00D..00F)-> BB04 (always)                     keep i label gcsafe 
BB03 [0002]  1       BB09                  2     0 [00F..01E)                                     i Loop label target hascall gcsafe bwd bwd-target 
BB04 [0003]  2       BB02,BB03             8     0 [01E..027)-> BB07 ( cond )                     i label target gcsafe bwd 
BB05 [0013]  1       BB04                  1     0 [01E..01F)-> BB07 ( cond )                     i gcsafe bwd 
BB06 [0014]  1       BB05                  2     0 [01E..01F)-> BB09 (always)                     i gcsafe idxlen bwd 
BB07 [0015]  2       BB04,BB05             2     0 [01E..01F)-> BB11 ( cond )                     i label target gcsafe bwd 
BB08 [0019]  1       BB07                  2     0 [01E..01F)                                     i label target gcsafe bwd 
BB09 [0016]  2       BB06,BB08             8     0 [???..???)-> BB03 ( cond )                     internal label target gcsafe bwd 
BB10 [0004]  1       BB09                  1       [027..03E)        (return)                     i gcsafe 
BB11 [0018]  1       BB07                  0       [01E..01F)        (throw )                     i rare label target hascall gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table is empty
[SsaBuilder] Topologically sorted the graph.
[SsaBuilder::ComputeImmediateDom]

Inside fgBuildDomTree

After computing the Dominance Tree:
BB01 : BB02 
BB02 : BB04 
BB04 : BB09 BB07 BB05 
BB05 : BB06 
BB07 : BB11 BB08 
BB09 : BB10 BB03 

*************** In fgLocalVarLiveness()
In fgLocalVarLivenessInit
Tracked variable (15 out of 18) table:
V09 tmp5          [   ref]: refCnt =    5, refCntWtd =  21   
V08 tmp4          [   ref]: refCnt =    4, refCntWtd =  19   
V11 tmp7          [   int]: refCnt =    7, refCntWtd =  12   
V17 tmp13         [   ref]: refCnt =    3, refCntWtd =  12   
V07 tmp3          [  bool]: refCnt =    3, refCntWtd =  12   
V12 tmp8          [   int]: refCnt =    3, refCntWtd =  11   
V10 tmp6          [   ref]: refCnt =    5, refCntWtd =   9   
V00 arg0          [   ref]: refCnt =    5, refCntWtd =   5   
V05 tmp1          [   ref]: refCnt =    3, refCntWtd =   6   
V01 loc0          [   ref]: refCnt =    3, refCntWtd =   4   
V13 tmp9          [   ref]: refCnt =    2, refCntWtd =   2   
V14 tmp10         [   ref]: refCnt =    2, refCntWtd =   2   
V15 tmp11         [   int]: refCnt =    2, refCntWtd =   2   
V16 tmp12         [   int]: refCnt =    2, refCntWtd =   2   
V03 loc2          [   ref]: refCnt =    1, refCntWtd =   2   

*************** In fgPerBlockLocalVarLiveness()
BB01 USE(1)={                V00                        } + ByrefExposed + GcHeap
     DEF(10)={V09 V11 V12 V10     V05 V01 V13 V14 V15 V16} + ByrefExposed* + GcHeap*

BB02 USE(0)={}
     DEF(0)={}

BB03 USE(2)={V10 V01    } + ByrefExposed + GcHeap
     DEF(1)={        V03} + ByrefExposed* + GcHeap*

BB04 USE(2)={V09     V12} + ByrefExposed + GcHeap
     DEF(1)={    V08    }

BB05 USE(2)={V08 V11} + ByrefExposed + GcHeap
     DEF(0)={       }

BB06 USE(2)={V08 V11            } + ByrefExposed + GcHeap
     DEF(4)={    V11 V17 V07 V10}

BB07 USE(2)={V09 V12} + ByrefExposed + GcHeap
     DEF(0)={       }

BB08 USE(1)={V09            } + ByrefExposed + GcHeap
     DEF(3)={    V11 V07 V10}

BB09 USE(1)={    V07}
     DEF(1)={V08    }

BB10 USE(1)={V01} + ByrefExposed + GcHeap
     DEF(0)={   }

BB11 USE(0)={} + ByrefExposed + GcHeap
     DEF(0)={} + ByrefExposed* + GcHeap*

** Memory liveness computed, GcHeap states and ByrefExposed states match
*************** In fgInterBlockLocalVarLiveness()

BB liveness after fgLiveVarAnalysis():

BB01 IN (1)={            V00    } + ByrefExposed + GcHeap
     OUT(4)={V09 V11 V12     V01} + ByrefExposed + GcHeap

BB02 IN (4)={V09 V11 V12 V01} + ByrefExposed + GcHeap
     OUT(4)={V09 V11 V12 V01} + ByrefExposed + GcHeap

BB03 IN (5)={V09 V11 V12 V10 V01} + ByrefExposed + GcHeap
     OUT(4)={V09 V11 V12     V01} + ByrefExposed + GcHeap

BB04 IN (4)={V09     V11 V12 V01} + ByrefExposed + GcHeap
     OUT(5)={V09 V08 V11 V12 V01} + ByrefExposed + GcHeap

BB05 IN (5)={V09 V08 V11 V12 V01} + ByrefExposed + GcHeap
     OUT(5)={V09 V08 V11 V12 V01} + ByrefExposed + GcHeap

BB06 IN (5)={V09 V08 V11     V12     V01} + ByrefExposed + GcHeap
     OUT(6)={V09     V11 V07 V12 V10 V01} + ByrefExposed + GcHeap

BB07 IN (3)={V09 V12 V01} + ByrefExposed + GcHeap
     OUT(3)={V09 V12 V01} + ByrefExposed + GcHeap

BB08 IN (3)={V09         V12     V01} + ByrefExposed + GcHeap
     OUT(6)={V09 V11 V07 V12 V10 V01} + ByrefExposed + GcHeap

BB09 IN (6)={V09 V11 V07 V12 V10 V01} + ByrefExposed + GcHeap
     OUT(5)={V09 V11     V12 V10 V01} + ByrefExposed + GcHeap

BB10 IN (1)={V01} + ByrefExposed + GcHeap
     OUT(0)={   }

BB11 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={}


Removing tree [000177] in BB01 as useless
N006 (  3,  3) [000177] -A------R---              *  ASG       ref   
N005 (  1,  1) [000175] D------N----              +--*  LCL_VAR   ref    V10 tmp6         
N004 (  3,  2) [000176] ------------              \--*  LCL_VAR   ref    V14 tmp10        


fgComputeLife modified tree:
N013 (  9,  9) [000186] -A----------              *  COMMA     void  
N009 (  6,  6) [000182] -A----------              +--*  COMMA     void  
N005 (  3,  3) [000178] -A----------              |  +--*  COMMA     void  
N003 (  3,  3) [000174] -A------R---              |  |  +--*  ASG       ref   
N002 (  1,  1) [000172] D------N----              |  |  |  +--*  LCL_VAR   ref    V09 tmp5         
N001 (  3,  2) [000173] ------------              |  |  |  \--*  LCL_VAR   ref    V13 tmp9         
N004 (  0,  0) [000177] ------------              |  |  \--*  NOP       void  
N008 (  3,  3) [000181] -A------R---              |  \--*  ASG       int   
N007 (  1,  1) [000179] D------N----              |     +--*  LCL_VAR   int    V11 tmp7         
N006 (  3,  2) [000180] ------------              |     \--*  LCL_VAR   int    V15 tmp11        
N012 (  3,  3) [000185] -A------R---              \--*  ASG       int   
N011 (  1,  1) [000183] D------N----                 +--*  LCL_VAR   int    V12 tmp8         
N010 (  3,  2) [000184] ------------                 \--*  LCL_VAR   int    V16 tmp12        

top level assign
removing stmt with no side effects

Removing statement STMT00019 (IL 0x006...  ???)
N003 (  5,  4) [000073] -A------R---              *  ASG       ref   
N002 (  3,  2) [000069] D------N----              +--*  LCL_VAR   ref    V14 tmp10        
N001 (  1,  1) [000071] ------------              \--*  CNS_INT   ref    null
 in BB01 as useless:

top level assign
removing stmt with no side effects

Removing statement STMT00008 (IL   ???...  ???)
N003 (  5,  4) [000028] -A------R---              *  ASG       ref   
N002 (  3,  2) [000027] D------N----              +--*  LCL_VAR   ref    V03 loc2         
N001 (  1,  1) [000077] ------------              \--*  LCL_VAR   ref    V10 tmp6         
 in BB03 as useless:

top level assign
removing stmt with no side effects

Removing statement STMT00028 (IL 0x01E...  ???)
N003 (  1,  3) [000133] -A------R---              *  ASG       ref   
N002 (  1,  1) [000132] D------N----              +--*  LCL_VAR   ref    V08 tmp4         
N001 (  1,  1) [000131] ------------              \--*  CNS_INT   ref    null
 in BB09 as useless:

*************** In optRemoveRedundantZeroInits()
*************** In SsaBuilder::InsertPhiFunctions()
Inserting phi functions:
Inserting phi definition for ByrefExposed at start of BB04.
Added PHI definition for V11 at start of BB09.
Added PHI definition for V11 at start of BB04.
Added PHI definition for V07 at start of BB09.
Added PHI definition for V10 at start of BB09.
*************** In SsaBuilder::RenameVariables()

After fgSsaBuild:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i label target hascall gcsafe newobj nullcheck 
BB02 [0001]  1       BB01                  1       [00D..00F)-> BB04 (always)                     keep i label gcsafe 
BB03 [0002]  1       BB09                  2     0 [00F..01E)                                     i Loop label target hascall gcsafe bwd bwd-target 
BB04 [0003]  2       BB02,BB03             8     0 [01E..027)-> BB07 ( cond )                     i label target gcsafe bwd 
BB05 [0013]  1       BB04                  1     0 [01E..01F)-> BB07 ( cond )                     i gcsafe bwd 
BB06 [0014]  1       BB05                  2     0 [01E..01F)-> BB09 (always)                     i gcsafe idxlen bwd 
BB07 [0015]  2       BB04,BB05             2     0 [01E..01F)-> BB11 ( cond )                     i label target gcsafe bwd 
BB08 [0019]  1       BB07                  2     0 [01E..01F)                                     i label target gcsafe bwd 
BB09 [0016]  2       BB06,BB08             8     0 [???..???)-> BB03 ( cond )                     internal label target gcsafe bwd 
BB10 [0004]  1       BB09                  1       [027..03E)        (return)                     i gcsafe 
BB11 [0018]  1       BB07                  0       [01E..01F)        (throw )                     i rare label target hascall gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..00D), preds={} succs={BB02}

***** BB01
STMT00000 (IL 0x000...0x005)
N005 ( 16, 16) [000003] -AC-----R---              *  ASG       ref   
N004 (  1,  1) [000002] D------N----              +--*  LCL_VAR   ref    V05 tmp1         d:2
N003 ( 16, 16) [000001] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
N002 (  2, 10) [000000] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e method

***** BB01
STMT00001 (IL   ???...  ???)
N003 ( 15,  8) [000005] --CXG-------              *  CALL      void   Batcher..ctor
N002 (  1,  1) [000004] ------------ this in rcx  \--*  LCL_VAR   ref    V05 tmp1         u:2

***** BB01
STMT00002 (IL 0x005...  ???)
N003 (  1,  3) [000008] -A------R---              *  ASG       ref   
N002 (  1,  1) [000007] D------N----              +--*  LCL_VAR   ref    V01 loc0         d:2
N001 (  1,  1) [000006] ------------              \--*  LCL_VAR   ref    V05 tmp1         u:2 (last use)

***** BB01
STMT00015 (IL 0x006...  ???)
N002 (  2,  2) [000050] ---X--------              *  NULLCHECK byte  
N001 (  1,  1) [000049] ------------              \--*  LCL_VAR   ref    V00 arg0         u:1

***** BB01
STMT00016 (IL 0x006...  ???)
N003 (  5,  4) [000055] -A------R---              *  ASG       ref   
N002 (  3,  2) [000054] D------N----              +--*  LCL_VAR   ref    V13 tmp9         d:2
N001 (  1,  1) [000009] ------------              \--*  LCL_VAR   ref    V00 arg0         u:1

***** BB01
STMT00017 (IL 0x006...  ???)
N003 (  5,  4) [000060] -A------R---              *  ASG       int   
N002 (  3,  2) [000059] D------N----              +--*  LCL_VAR   int    V15 tmp11        d:2
N001 (  1,  1) [000058] ------------              \--*  CNS_INT   int    0

***** BB01
STMT00018 (IL 0x006...  ???)
N006 (  8,  7) [000066] -A-XG---R---              *  ASG       int   
N005 (  3,  2) [000065] D------N----              +--*  LCL_VAR   int    V16 tmp12        d:2
N004 (  4,  4) [000064] ---XG-------              \--*  IND       int   
N003 (  2,  2) [000171] -------N----                 \--*  ADD       byref 
N001 (  1,  1) [000063] ------------                    +--*  LCL_VAR   ref    V00 arg0         u:1 (last use)
N002 (  1,  1) [000170] ------------                    \--*  CNS_INT   long   20 field offset Fseq[_version]

***** BB01
STMT00004 (IL   ???...  ???)
N013 (  9,  9) [000186] -A----------              *  COMMA     void  
N009 (  6,  6) [000182] -A----------              +--*  COMMA     void  
N005 (  3,  3) [000178] -A----------              |  +--*  COMMA     void  
N003 (  3,  3) [000174] -A------R---              |  |  +--*  ASG       ref   
N002 (  1,  1) [000172] D------N----              |  |  |  +--*  LCL_VAR   ref    V09 tmp5         d:2
N001 (  3,  2) [000173] ------------              |  |  |  \--*  LCL_VAR   ref    V13 tmp9         u:2 (last use)
N004 (  0,  0) [000177] ------------              |  |  \--*  NOP       void  
N008 (  3,  3) [000181] -A------R---              |  \--*  ASG       int   
N007 (  1,  1) [000179] D------N----              |     +--*  LCL_VAR   int    V11 tmp7         d:2
N006 (  3,  2) [000180] ------------              |     \--*  LCL_VAR   int    V15 tmp11        u:2 (last use)
N012 (  3,  3) [000185] -A------R---              \--*  ASG       int   
N011 (  1,  1) [000183] D------N----                 +--*  LCL_VAR   int    V12 tmp8         d:2
N010 (  3,  2) [000184] ------------                 \--*  LCL_VAR   int    V16 tmp12        u:2 (last use)

------------ BB02 [00D..00F) -> BB04 (always), preds={BB01} succs={BB04}

------------ BB03 [00F..01E), preds={BB09} succs={BB04}

***** BB03
STMT00009 (IL 0x017...0x019)
N005 ( 16, 10) [000031] --CXG-------              *  CALL nullcheck void   Batcher.Push
N003 (  1,  1) [000029] ------------ this in rcx  +--*  LCL_VAR   ref    V01 loc0         u:2
N004 (  1,  1) [000030] ------------ arg1 in rdx  \--*  LCL_VAR   ref    V10 tmp6         u:2 (last use)

------------ BB04 [01E..027) -> BB07 (cond), preds={BB02,BB03} succs={BB05,BB07}

***** BB04
STMT00034 (IL   ???...  ???)
N005 (  0,  0) [000222] -A------R---              *  ASG       int   
N004 (  0,  0) [000220] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:3
N003 (  0,  0) [000221] ------------              \--*  PHI       int   
N001 (  0,  0) [000230] ------------ pred BB03       +--*  PHI_ARG   int    V11 tmp7         u:4
N002 (  0,  0) [000229] ------------ pred BB02       \--*  PHI_ARG   int    V11 tmp7         u:2

***** BB04
STMT00020 (IL 0x01E...  ???)
N003 (  1,  3) [000083] -A------R---              *  ASG       ref   
N002 (  1,  1) [000082] D------N----              +--*  LCL_VAR   ref    V08 tmp4         d:2
N001 (  1,  1) [000081] ------------              \--*  LCL_VAR   ref    V09 tmp5         u:2

***** BB04
STMT00021 (IL 0x01E...  ???)
N007 (  8,  8) [000090] ---XG-------              *  JTRUE     void  
N006 (  6,  6) [000089] N--XG--N-U--              \--*  NE        int   
N001 (  1,  1) [000086] ------------                 +--*  LCL_VAR   int    V12 tmp8         u:2
N005 (  4,  4) [000088] ---XG-------                 \--*  IND       int   
N004 (  2,  2) [000190] -------N----                    \--*  ADD       byref 
N002 (  1,  1) [000087] ------------                       +--*  LCL_VAR   ref    V09 tmp5         u:2
N003 (  1,  1) [000189] ------------                       \--*  CNS_INT   long   20 field offset Fseq[_version]

------------ BB05 [01E..01F) -> BB07 (cond), preds={BB04} succs={BB06,BB07}

***** BB05
STMT00024 (IL 0x01E...  ???)
N007 (  8,  8) [000106] ---XG-------              *  JTRUE     void  
N006 (  6,  6) [000105] N--XG--N-U--              \--*  GE        int   
N001 (  1,  1) [000102] ------------                 +--*  LCL_VAR   int    V11 tmp7         u:3
N005 (  4,  4) [000104] ---XG-------                 \--*  IND       int   
N004 (  2,  2) [000192] -------N----                    \--*  ADD       byref 
N002 (  1,  1) [000103] ------------                       +--*  LCL_VAR   ref    V08 tmp4         u:2
N003 (  1,  1) [000191] ------------                       \--*  CNS_INT   long   16 field offset Fseq[_size]

------------ BB06 [01E..01F) -> BB09 (always), preds={BB05} succs={BB09}

***** BB06
STMT00025 (IL 0x01E...  ???)
N023 ( 18, 22) [000116] -A-XG---R---              *  ASG       ref   
N022 (  1,  1) [000115] D------N----              +--*  LCL_VAR   ref    V10 tmp6         d:4
N021 ( 18, 22) [000207] -A-XG-------              \--*  COMMA     ref   
N006 (  4,  4) [000194] -A-XG---R---                 +--*  ASG       ref   
N005 (  1,  1) [000193] D------N----                 |  +--*  LCL_VAR   ref    V17 tmp13        d:2
N004 (  4,  4) [000110] ---XG-------                 |  \--*  IND       ref   
N003 (  2,  2) [000209] -------N----                 |     \--*  ADD       byref 
N001 (  1,  1) [000109] ------------                 |        +--*  LCL_VAR   ref    V08 tmp4         u:2 (last use)
N002 (  1,  1) [000208] ------------                 |        \--*  CNS_INT   long   8 field offset Fseq[_items]
N020 ( 14, 18) [000206] ---XG-------                 \--*  COMMA     ref   
N010 (  8, 11) [000199] ---X--------                    +--*  ARR_BOUNDS_CHECK_Rng void  
N007 (  1,  1) [000113] ------------                    |  +--*  LCL_VAR   int    V11 tmp7         u:3
N009 (  3,  3) [000198] ---X--------                    |  \--*  ARR_LENGTH int   
N008 (  1,  1) [000195] ------------                    |     \--*  LCL_VAR   ref    V17 tmp13        u:2
N019 (  6,  7) [000114] a---G-------                    \--*  IND       ref   
N018 (  5,  6) [000205] -------N----                       \--*  ADD       byref 
N011 (  1,  1) [000196] ------------                          +--*  LCL_VAR   ref    V17 tmp13        u:2 (last use)
N017 (  4,  5) [000204] -------N----                          \--*  ADD       long  
N015 (  3,  4) [000202] -------N----                             +--*  LSH       long  
N013 (  2,  3) [000200] ------------                             |  +--*  CAST      long <- int
N012 (  1,  1) [000197] i-----------                             |  |  \--*  LCL_VAR   int    V11 tmp7         u:3
N014 (  1,  1) [000201] -------N----                             |  \--*  CNS_INT   long   3
N016 (  1,  1) [000203] ------------                             \--*  CNS_INT   long   16 Fseq[#FirstElem]

***** BB06
STMT00026 (IL 0x01E...  ???)
N005 (  3,  3) [000125] -A------R---              *  ASG       int   
N004 (  1,  1) [000124] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:6
N003 (  3,  3) [000123] ------------              \--*  ADD       int   
N001 (  1,  1) [000121] ------------                 +--*  LCL_VAR   int    V11 tmp7         u:3 (last use)
N002 (  1,  1) [000122] ------------                 \--*  CNS_INT   int    1

***** BB06
STMT00027 (IL 0x01E...  ???)
N003 (  1,  3) [000129] -A------R---              *  ASG       bool  
N002 (  1,  1) [000128] D------N----              +--*  LCL_VAR   int    V07 tmp3         d:4
N001 (  1,  1) [000126] ------------              \--*  CNS_INT   int    1

------------ BB07 [01E..01F) -> BB11 (cond), preds={BB04,BB05} succs={BB08,BB11}

***** BB07
STMT00029 (IL 0x01E...  ???)
N007 (  8,  8) [000143] ---XG-------              *  JTRUE     void  
N006 (  6,  6) [000142] J--XG--N----              \--*  NE        int   
N001 (  1,  1) [000137] ------------                 +--*  LCL_VAR   int    V12 tmp8         u:2
N005 (  4,  4) [000141] ---XG-------                 \--*  IND       int   
N004 (  2,  2) [000211] -------N----                    \--*  ADD       byref 
N002 (  1,  1) [000140] ------------                       +--*  LCL_VAR   ref    V09 tmp5         u:2
N003 (  1,  1) [000210] ------------                       \--*  CNS_INT   long   20 field offset Fseq[_version]

------------ BB08 [01E..01F), preds={BB07} succs={BB09}

***** BB08
STMT00030 (IL 0x01E...  ???)
N008 (  6,  6) [000153] -A-XG---R---              *  ASG       int   
N007 (  1,  1) [000152] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:5
N006 (  6,  6) [000151] ---XG-------              \--*  ADD       int   
N004 (  4,  4) [000149] ---XG-------                 +--*  IND       int   
N003 (  2,  2) [000213] -------N----                 |  \--*  ADD       byref 
N001 (  1,  1) [000148] ------------                 |     +--*  LCL_VAR   ref    V09 tmp5         u:2
N002 (  1,  1) [000212] ------------                 |     \--*  CNS_INT   long   16 field offset Fseq[_size]
N005 (  1,  1) [000150] ------------                 \--*  CNS_INT   int    1

***** BB08
STMT00031 (IL 0x01E...  ???)
N003 (  1,  3) [000160] -A------R---              *  ASG       ref   
N002 (  1,  1) [000156] D------N----              +--*  LCL_VAR   ref    V10 tmp6         d:3
N001 (  1,  1) [000158] ------------              \--*  CNS_INT   ref    null

***** BB08
STMT00023 (IL 0x01E...  ???)
N003 (  1,  3) [000098] -A------R---              *  ASG       bool  
N002 (  1,  1) [000097] D------N----              +--*  LCL_VAR   int    V07 tmp3         d:3
N001 (  1,  1) [000096] ------------              \--*  CNS_INT   int    0

------------ BB09 [???..???) -> BB03 (cond), preds={BB06,BB08} succs={BB10,BB03}

***** BB09
STMT00036 (IL   ???...  ???)
N005 (  0,  0) [000228] -A------R---              *  ASG       ref   
N004 (  0,  0) [000226] D------N----              +--*  LCL_VAR   ref    V10 tmp6         d:2
N003 (  0,  0) [000227] ------------              \--*  PHI       ref   
N001 (  0,  0) [000234] ------------ pred BB06       +--*  PHI_ARG   ref    V10 tmp6         u:4
N002 (  0,  0) [000231] ------------ pred BB08       \--*  PHI_ARG   ref    V10 tmp6         u:3

***** BB09
STMT00035 (IL   ???...  ???)
N005 (  0,  0) [000225] -A------R---              *  ASG       bool  
N004 (  0,  0) [000223] D------N----              +--*  LCL_VAR   bool   V07 tmp3         d:2
N003 (  0,  0) [000224] ------------              \--*  PHI       bool  
N001 (  0,  0) [000235] ------------ pred BB06       +--*  PHI_ARG   bool   V07 tmp3         u:4
N002 (  0,  0) [000232] ------------ pred BB08       \--*  PHI_ARG   bool   V07 tmp3         u:3

***** BB09
STMT00033 (IL   ???...  ???)
N005 (  0,  0) [000219] -A------R---              *  ASG       int   
N004 (  0,  0) [000217] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:4
N003 (  0,  0) [000218] ------------              \--*  PHI       int   
N001 (  0,  0) [000236] ------------ pred BB06       +--*  PHI_ARG   int    V11 tmp7         u:6
N002 (  0,  0) [000233] ------------ pred BB08       \--*  PHI_ARG   int    V11 tmp7         u:5

***** BB09
STMT00006 (IL   ???...  ???)
N004 (  5,  5) [000021] ------------              *  JTRUE     void  
N003 (  3,  3) [000020] J------N----              \--*  NE        int   
N001 (  1,  1) [000130] ------------                 +--*  LCL_VAR   bool   V07 tmp3         u:2 (last use)
N002 (  1,  1) [000019] ------------                 \--*  CNS_INT   int    0

------------ BB10 [027..03E) (return), preds={BB09} succs={}

***** BB10
STMT00011 (IL   ???...  ???)
N005 (  5,  5) [000035] ---XG-------              *  RETURN    ref   
N004 (  4,  4) [000166] ---XG-------              \--*  IND       ref   
N003 (  2,  2) [000216] -------N----                 \--*  ADD       byref 
N001 (  1,  1) [000032] ------------                    +--*  LCL_VAR   ref    V01 loc0         u:2 (last use)
N002 (  1,  1) [000215] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_batches]

------------ BB11 [01E..01F) (throw), preds={BB07} succs={}

***** BB11
STMT00032 (IL 0x01E...  ???)
N001 ( 14,  5) [000163] --CXG-------              *  CALL      void   System.ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion

-------------------------------------------------------------------------------------------------------------------

*************** Finishing PHASE Build SSA representation
Trees after Build SSA representation

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i label target hascall gcsafe newobj nullcheck 
BB02 [0001]  1       BB01                  1       [00D..00F)-> BB04 (always)                     keep i label gcsafe 
BB03 [0002]  1       BB09                  2     0 [00F..01E)                                     i Loop label target hascall gcsafe bwd bwd-target 
BB04 [0003]  2       BB02,BB03             8     0 [01E..027)-> BB07 ( cond )                     i label target gcsafe bwd 
BB05 [0013]  1       BB04                  1     0 [01E..01F)-> BB07 ( cond )                     i gcsafe bwd 
BB06 [0014]  1       BB05                  2     0 [01E..01F)-> BB09 (always)                     i gcsafe idxlen bwd 
BB07 [0015]  2       BB04,BB05             2     0 [01E..01F)-> BB11 ( cond )                     i label target gcsafe bwd 
BB08 [0019]  1       BB07                  2     0 [01E..01F)                                     i label target gcsafe bwd 
BB09 [0016]  2       BB06,BB08             8     0 [???..???)-> BB03 ( cond )                     internal label target gcsafe bwd 
BB10 [0004]  1       BB09                  1       [027..03E)        (return)                     i gcsafe 
BB11 [0018]  1       BB07                  0       [01E..01F)        (throw )                     i rare label target hascall gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..00D), preds={} succs={BB02}

***** BB01
STMT00000 (IL 0x000...0x005)
N005 ( 16, 16) [000003] -AC-----R---              *  ASG       ref   
N004 (  1,  1) [000002] D------N----              +--*  LCL_VAR   ref    V05 tmp1         d:2
N003 ( 16, 16) [000001] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
N002 (  2, 10) [000000] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e method

***** BB01
STMT00001 (IL   ???...  ???)
N003 ( 15,  8) [000005] --CXG-------              *  CALL      void   Batcher..ctor
N002 (  1,  1) [000004] ------------ this in rcx  \--*  LCL_VAR   ref    V05 tmp1         u:2

***** BB01
STMT00002 (IL 0x005...  ???)
N003 (  1,  3) [000008] -A------R---              *  ASG       ref   
N002 (  1,  1) [000007] D------N----              +--*  LCL_VAR   ref    V01 loc0         d:2
N001 (  1,  1) [000006] ------------              \--*  LCL_VAR   ref    V05 tmp1         u:2 (last use)

***** BB01
STMT00015 (IL 0x006...  ???)
N002 (  2,  2) [000050] ---X--------              *  NULLCHECK byte  
N001 (  1,  1) [000049] ------------              \--*  LCL_VAR   ref    V00 arg0         u:1

***** BB01
STMT00016 (IL 0x006...  ???)
N003 (  5,  4) [000055] -A------R---              *  ASG       ref   
N002 (  3,  2) [000054] D------N----              +--*  LCL_VAR   ref    V13 tmp9         d:2
N001 (  1,  1) [000009] ------------              \--*  LCL_VAR   ref    V00 arg0         u:1

***** BB01
STMT00017 (IL 0x006...  ???)
N003 (  5,  4) [000060] -A------R---              *  ASG       int   
N002 (  3,  2) [000059] D------N----              +--*  LCL_VAR   int    V15 tmp11        d:2
N001 (  1,  1) [000058] ------------              \--*  CNS_INT   int    0

***** BB01
STMT00018 (IL 0x006...  ???)
N006 (  8,  7) [000066] -A-XG---R---              *  ASG       int   
N005 (  3,  2) [000065] D------N----              +--*  LCL_VAR   int    V16 tmp12        d:2
N004 (  4,  4) [000064] ---XG-------              \--*  IND       int   
N003 (  2,  2) [000171] -------N----                 \--*  ADD       byref 
N001 (  1,  1) [000063] ------------                    +--*  LCL_VAR   ref    V00 arg0         u:1 (last use)
N002 (  1,  1) [000170] ------------                    \--*  CNS_INT   long   20 field offset Fseq[_version]

***** BB01
STMT00004 (IL   ???...  ???)
N013 (  9,  9) [000186] -A----------              *  COMMA     void  
N009 (  6,  6) [000182] -A----------              +--*  COMMA     void  
N005 (  3,  3) [000178] -A----------              |  +--*  COMMA     void  
N003 (  3,  3) [000174] -A------R---              |  |  +--*  ASG       ref   
N002 (  1,  1) [000172] D------N----              |  |  |  +--*  LCL_VAR   ref    V09 tmp5         d:2
N001 (  3,  2) [000173] ------------              |  |  |  \--*  LCL_VAR   ref    V13 tmp9         u:2 (last use)
N004 (  0,  0) [000177] ------------              |  |  \--*  NOP       void  
N008 (  3,  3) [000181] -A------R---              |  \--*  ASG       int   
N007 (  1,  1) [000179] D------N----              |     +--*  LCL_VAR   int    V11 tmp7         d:2
N006 (  3,  2) [000180] ------------              |     \--*  LCL_VAR   int    V15 tmp11        u:2 (last use)
N012 (  3,  3) [000185] -A------R---              \--*  ASG       int   
N011 (  1,  1) [000183] D------N----                 +--*  LCL_VAR   int    V12 tmp8         d:2
N010 (  3,  2) [000184] ------------                 \--*  LCL_VAR   int    V16 tmp12        u:2 (last use)

------------ BB02 [00D..00F) -> BB04 (always), preds={BB01} succs={BB04}

------------ BB03 [00F..01E), preds={BB09} succs={BB04}

***** BB03
STMT00009 (IL 0x017...0x019)
N005 ( 16, 10) [000031] --CXG-------              *  CALL nullcheck void   Batcher.Push
N003 (  1,  1) [000029] ------------ this in rcx  +--*  LCL_VAR   ref    V01 loc0         u:2
N004 (  1,  1) [000030] ------------ arg1 in rdx  \--*  LCL_VAR   ref    V10 tmp6         u:2 (last use)

------------ BB04 [01E..027) -> BB07 (cond), preds={BB02,BB03} succs={BB05,BB07}

***** BB04
STMT00034 (IL   ???...  ???)
N005 (  0,  0) [000222] -A------R---              *  ASG       int   
N004 (  0,  0) [000220] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:3
N003 (  0,  0) [000221] ------------              \--*  PHI       int   
N001 (  0,  0) [000230] ------------ pred BB03       +--*  PHI_ARG   int    V11 tmp7         u:4
N002 (  0,  0) [000229] ------------ pred BB02       \--*  PHI_ARG   int    V11 tmp7         u:2

***** BB04
STMT00020 (IL 0x01E...  ???)
N003 (  1,  3) [000083] -A------R---              *  ASG       ref   
N002 (  1,  1) [000082] D------N----              +--*  LCL_VAR   ref    V08 tmp4         d:2
N001 (  1,  1) [000081] ------------              \--*  LCL_VAR   ref    V09 tmp5         u:2

***** BB04
STMT00021 (IL 0x01E...  ???)
N007 (  8,  8) [000090] ---XG-------              *  JTRUE     void  
N006 (  6,  6) [000089] N--XG--N-U--              \--*  NE        int   
N001 (  1,  1) [000086] ------------                 +--*  LCL_VAR   int    V12 tmp8         u:2
N005 (  4,  4) [000088] ---XG-------                 \--*  IND       int   
N004 (  2,  2) [000190] -------N----                    \--*  ADD       byref 
N002 (  1,  1) [000087] ------------                       +--*  LCL_VAR   ref    V09 tmp5         u:2
N003 (  1,  1) [000189] ------------                       \--*  CNS_INT   long   20 field offset Fseq[_version]

------------ BB05 [01E..01F) -> BB07 (cond), preds={BB04} succs={BB06,BB07}

***** BB05
STMT00024 (IL 0x01E...  ???)
N007 (  8,  8) [000106] ---XG-------              *  JTRUE     void  
N006 (  6,  6) [000105] N--XG--N-U--              \--*  GE        int   
N001 (  1,  1) [000102] ------------                 +--*  LCL_VAR   int    V11 tmp7         u:3
N005 (  4,  4) [000104] ---XG-------                 \--*  IND       int   
N004 (  2,  2) [000192] -------N----                    \--*  ADD       byref 
N002 (  1,  1) [000103] ------------                       +--*  LCL_VAR   ref    V08 tmp4         u:2
N003 (  1,  1) [000191] ------------                       \--*  CNS_INT   long   16 field offset Fseq[_size]

------------ BB06 [01E..01F) -> BB09 (always), preds={BB05} succs={BB09}

***** BB06
STMT00025 (IL 0x01E...  ???)
N023 ( 18, 22) [000116] -A-XG---R---              *  ASG       ref   
N022 (  1,  1) [000115] D------N----              +--*  LCL_VAR   ref    V10 tmp6         d:4
N021 ( 18, 22) [000207] -A-XG-------              \--*  COMMA     ref   
N006 (  4,  4) [000194] -A-XG---R---                 +--*  ASG       ref   
N005 (  1,  1) [000193] D------N----                 |  +--*  LCL_VAR   ref    V17 tmp13        d:2
N004 (  4,  4) [000110] ---XG-------                 |  \--*  IND       ref   
N003 (  2,  2) [000209] -------N----                 |     \--*  ADD       byref 
N001 (  1,  1) [000109] ------------                 |        +--*  LCL_VAR   ref    V08 tmp4         u:2 (last use)
N002 (  1,  1) [000208] ------------                 |        \--*  CNS_INT   long   8 field offset Fseq[_items]
N020 ( 14, 18) [000206] ---XG-------                 \--*  COMMA     ref   
N010 (  8, 11) [000199] ---X--------                    +--*  ARR_BOUNDS_CHECK_Rng void  
N007 (  1,  1) [000113] ------------                    |  +--*  LCL_VAR   int    V11 tmp7         u:3
N009 (  3,  3) [000198] ---X--------                    |  \--*  ARR_LENGTH int   
N008 (  1,  1) [000195] ------------                    |     \--*  LCL_VAR   ref    V17 tmp13        u:2
N019 (  6,  7) [000114] a---G-------                    \--*  IND       ref   
N018 (  5,  6) [000205] -------N----                       \--*  ADD       byref 
N011 (  1,  1) [000196] ------------                          +--*  LCL_VAR   ref    V17 tmp13        u:2 (last use)
N017 (  4,  5) [000204] -------N----                          \--*  ADD       long  
N015 (  3,  4) [000202] -------N----                             +--*  LSH       long  
N013 (  2,  3) [000200] ------------                             |  +--*  CAST      long <- int
N012 (  1,  1) [000197] i-----------                             |  |  \--*  LCL_VAR   int    V11 tmp7         u:3
N014 (  1,  1) [000201] -------N----                             |  \--*  CNS_INT   long   3
N016 (  1,  1) [000203] ------------                             \--*  CNS_INT   long   16 Fseq[#FirstElem]

***** BB06
STMT00026 (IL 0x01E...  ???)
N005 (  3,  3) [000125] -A------R---              *  ASG       int   
N004 (  1,  1) [000124] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:6
N003 (  3,  3) [000123] ------------              \--*  ADD       int   
N001 (  1,  1) [000121] ------------                 +--*  LCL_VAR   int    V11 tmp7         u:3 (last use)
N002 (  1,  1) [000122] ------------                 \--*  CNS_INT   int    1

***** BB06
STMT00027 (IL 0x01E...  ???)
N003 (  1,  3) [000129] -A------R---              *  ASG       bool  
N002 (  1,  1) [000128] D------N----              +--*  LCL_VAR   int    V07 tmp3         d:4
N001 (  1,  1) [000126] ------------              \--*  CNS_INT   int    1

------------ BB07 [01E..01F) -> BB11 (cond), preds={BB04,BB05} succs={BB08,BB11}

***** BB07
STMT00029 (IL 0x01E...  ???)
N007 (  8,  8) [000143] ---XG-------              *  JTRUE     void  
N006 (  6,  6) [000142] J--XG--N----              \--*  NE        int   
N001 (  1,  1) [000137] ------------                 +--*  LCL_VAR   int    V12 tmp8         u:2
N005 (  4,  4) [000141] ---XG-------                 \--*  IND       int   
N004 (  2,  2) [000211] -------N----                    \--*  ADD       byref 
N002 (  1,  1) [000140] ------------                       +--*  LCL_VAR   ref    V09 tmp5         u:2
N003 (  1,  1) [000210] ------------                       \--*  CNS_INT   long   20 field offset Fseq[_version]

------------ BB08 [01E..01F), preds={BB07} succs={BB09}

***** BB08
STMT00030 (IL 0x01E...  ???)
N008 (  6,  6) [000153] -A-XG---R---              *  ASG       int   
N007 (  1,  1) [000152] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:5
N006 (  6,  6) [000151] ---XG-------              \--*  ADD       int   
N004 (  4,  4) [000149] ---XG-------                 +--*  IND       int   
N003 (  2,  2) [000213] -------N----                 |  \--*  ADD       byref 
N001 (  1,  1) [000148] ------------                 |     +--*  LCL_VAR   ref    V09 tmp5         u:2
N002 (  1,  1) [000212] ------------                 |     \--*  CNS_INT   long   16 field offset Fseq[_size]
N005 (  1,  1) [000150] ------------                 \--*  CNS_INT   int    1

***** BB08
STMT00031 (IL 0x01E...  ???)
N003 (  1,  3) [000160] -A------R---              *  ASG       ref   
N002 (  1,  1) [000156] D------N----              +--*  LCL_VAR   ref    V10 tmp6         d:3
N001 (  1,  1) [000158] ------------              \--*  CNS_INT   ref    null

***** BB08
STMT00023 (IL 0x01E...  ???)
N003 (  1,  3) [000098] -A------R---              *  ASG       bool  
N002 (  1,  1) [000097] D------N----              +--*  LCL_VAR   int    V07 tmp3         d:3
N001 (  1,  1) [000096] ------------              \--*  CNS_INT   int    0

------------ BB09 [???..???) -> BB03 (cond), preds={BB06,BB08} succs={BB10,BB03}

***** BB09
STMT00036 (IL   ???...  ???)
N005 (  0,  0) [000228] -A------R---              *  ASG       ref   
N004 (  0,  0) [000226] D------N----              +--*  LCL_VAR   ref    V10 tmp6         d:2
N003 (  0,  0) [000227] ------------              \--*  PHI       ref   
N001 (  0,  0) [000234] ------------ pred BB06       +--*  PHI_ARG   ref    V10 tmp6         u:4
N002 (  0,  0) [000231] ------------ pred BB08       \--*  PHI_ARG   ref    V10 tmp6         u:3

***** BB09
STMT00035 (IL   ???...  ???)
N005 (  0,  0) [000225] -A------R---              *  ASG       bool  
N004 (  0,  0) [000223] D------N----              +--*  LCL_VAR   bool   V07 tmp3         d:2
N003 (  0,  0) [000224] ------------              \--*  PHI       bool  
N001 (  0,  0) [000235] ------------ pred BB06       +--*  PHI_ARG   bool   V07 tmp3         u:4
N002 (  0,  0) [000232] ------------ pred BB08       \--*  PHI_ARG   bool   V07 tmp3         u:3

***** BB09
STMT00033 (IL   ???...  ???)
N005 (  0,  0) [000219] -A------R---              *  ASG       int   
N004 (  0,  0) [000217] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:4
N003 (  0,  0) [000218] ------------              \--*  PHI       int   
N001 (  0,  0) [000236] ------------ pred BB06       +--*  PHI_ARG   int    V11 tmp7         u:6
N002 (  0,  0) [000233] ------------ pred BB08       \--*  PHI_ARG   int    V11 tmp7         u:5

***** BB09
STMT00006 (IL   ???...  ???)
N004 (  5,  5) [000021] ------------              *  JTRUE     void  
N003 (  3,  3) [000020] J------N----              \--*  NE        int   
N001 (  1,  1) [000130] ------------                 +--*  LCL_VAR   bool   V07 tmp3         u:2 (last use)
N002 (  1,  1) [000019] ------------                 \--*  CNS_INT   int    0

------------ BB10 [027..03E) (return), preds={BB09} succs={}

***** BB10
STMT00011 (IL   ???...  ???)
N005 (  5,  5) [000035] ---XG-------              *  RETURN    ref   
N004 (  4,  4) [000166] ---XG-------              \--*  IND       ref   
N003 (  2,  2) [000216] -------N----                 \--*  ADD       byref 
N001 (  1,  1) [000032] ------------                    +--*  LCL_VAR   ref    V01 loc0         u:2 (last use)
N002 (  1,  1) [000215] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_batches]

------------ BB11 [01E..01F) (throw), preds={BB07} succs={}

***** BB11
STMT00032 (IL 0x01E...  ???)
N001 ( 14,  5) [000163] --CXG-------              *  CALL      void   System.ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist

*************** Starting PHASE Early Value Propagation
*************** In optEarlyProp()
optEarlyProp Marking a null check for removal
N002 (  2,  2) [000050] ---X--------              *  NULLCHECK byte  
N001 (  1,  1) [000049] ------------              \--*  LCL_VAR   ref    V00 arg0         u:1


Removing statement STMT00015 (IL 0x006...  ???)
N002 (  2,  2) [000050] -----O------              *  NULLCHECK byte  
N001 (  1,  1) [000049] ------------              \--*  LCL_VAR   ref    V00 arg0         u:1
 in BB01 as useless:

optFoldNullCheck removed tree:
N002 (  2,  2) [000050] -----O------              *  NULLCHECK byte  
N001 (  1,  1) [000049] ------------              \--*  LCL_VAR   ref    V00 arg0         u:1


After optEarlyProp:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i label target hascall gcsafe newobj nullcheck 
BB02 [0001]  1       BB01                  1       [00D..00F)-> BB04 (always)                     keep i label gcsafe 
BB03 [0002]  1       BB09                  2     0 [00F..01E)                                     i Loop label target hascall gcsafe bwd bwd-target 
BB04 [0003]  2       BB02,BB03             8     0 [01E..027)-> BB07 ( cond )                     i label target gcsafe bwd 
BB05 [0013]  1       BB04                  1     0 [01E..01F)-> BB07 ( cond )                     i gcsafe bwd 
BB06 [0014]  1       BB05                  2     0 [01E..01F)-> BB09 (always)                     i gcsafe idxlen bwd 
BB07 [0015]  2       BB04,BB05             2     0 [01E..01F)-> BB11 ( cond )                     i label target gcsafe bwd 
BB08 [0019]  1       BB07                  2     0 [01E..01F)                                     i label target gcsafe bwd 
BB09 [0016]  2       BB06,BB08             8     0 [???..???)-> BB03 ( cond )                     internal label target gcsafe bwd 
BB10 [0004]  1       BB09                  1       [027..03E)        (return)                     i gcsafe 
BB11 [0018]  1       BB07                  0       [01E..01F)        (throw )                     i rare label target hascall gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..00D), preds={} succs={BB02}

***** BB01
STMT00000 (IL 0x000...0x005)
N005 ( 16, 16) [000003] -AC-----R---              *  ASG       ref   
N004 (  1,  1) [000002] D------N----              +--*  LCL_VAR   ref    V05 tmp1         d:2
N003 ( 16, 16) [000001] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
N002 (  2, 10) [000000] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e method

***** BB01
STMT00001 (IL   ???...  ???)
N003 ( 15,  8) [000005] --CXG-------              *  CALL      void   Batcher..ctor
N002 (  1,  1) [000004] ------------ this in rcx  \--*  LCL_VAR   ref    V05 tmp1         u:2

***** BB01
STMT00002 (IL 0x005...  ???)
N003 (  1,  3) [000008] -A------R---              *  ASG       ref   
N002 (  1,  1) [000007] D------N----              +--*  LCL_VAR   ref    V01 loc0         d:2
N001 (  1,  1) [000006] ------------              \--*  LCL_VAR   ref    V05 tmp1         u:2 (last use)

***** BB01
STMT00016 (IL 0x006...  ???)
N003 (  5,  4) [000055] -A------R---              *  ASG       ref   
N002 (  3,  2) [000054] D------N----              +--*  LCL_VAR   ref    V13 tmp9         d:2
N001 (  1,  1) [000009] ------------              \--*  LCL_VAR   ref    V00 arg0         u:1

***** BB01
STMT00017 (IL 0x006...  ???)
N003 (  5,  4) [000060] -A------R---              *  ASG       int   
N002 (  3,  2) [000059] D------N----              +--*  LCL_VAR   int    V15 tmp11        d:2
N001 (  1,  1) [000058] ------------              \--*  CNS_INT   int    0

***** BB01
STMT00018 (IL 0x006...  ???)
N006 (  8,  7) [000066] -A-XG---R---              *  ASG       int   
N005 (  3,  2) [000065] D------N----              +--*  LCL_VAR   int    V16 tmp12        d:2
N004 (  4,  4) [000064] ---XG-------              \--*  IND       int   
N003 (  2,  2) [000171] -------N----                 \--*  ADD       byref 
N001 (  1,  1) [000063] ------------                    +--*  LCL_VAR   ref    V00 arg0         u:1 (last use)
N002 (  1,  1) [000170] ------------                    \--*  CNS_INT   long   20 field offset Fseq[_version]

***** BB01
STMT00004 (IL   ???...  ???)
N013 (  9,  9) [000186] -A----------              *  COMMA     void  
N009 (  6,  6) [000182] -A----------              +--*  COMMA     void  
N005 (  3,  3) [000178] -A----------              |  +--*  COMMA     void  
N003 (  3,  3) [000174] -A------R---              |  |  +--*  ASG       ref   
N002 (  1,  1) [000172] D------N----              |  |  |  +--*  LCL_VAR   ref    V09 tmp5         d:2
N001 (  3,  2) [000173] ------------              |  |  |  \--*  LCL_VAR   ref    V13 tmp9         u:2 (last use)
N004 (  0,  0) [000177] ------------              |  |  \--*  NOP       void  
N008 (  3,  3) [000181] -A------R---              |  \--*  ASG       int   
N007 (  1,  1) [000179] D------N----              |     +--*  LCL_VAR   int    V11 tmp7         d:2
N006 (  3,  2) [000180] ------------              |     \--*  LCL_VAR   int    V15 tmp11        u:2 (last use)
N012 (  3,  3) [000185] -A------R---              \--*  ASG       int   
N011 (  1,  1) [000183] D------N----                 +--*  LCL_VAR   int    V12 tmp8         d:2
N010 (  3,  2) [000184] ------------                 \--*  LCL_VAR   int    V16 tmp12        u:2 (last use)

------------ BB02 [00D..00F) -> BB04 (always), preds={BB01} succs={BB04}

------------ BB03 [00F..01E), preds={BB09} succs={BB04}

***** BB03
STMT00009 (IL 0x017...0x019)
N005 ( 16, 10) [000031] --CXG-------              *  CALL nullcheck void   Batcher.Push
N003 (  1,  1) [000029] ------------ this in rcx  +--*  LCL_VAR   ref    V01 loc0         u:2
N004 (  1,  1) [000030] ------------ arg1 in rdx  \--*  LCL_VAR   ref    V10 tmp6         u:2 (last use)

------------ BB04 [01E..027) -> BB07 (cond), preds={BB02,BB03} succs={BB05,BB07}

***** BB04
STMT00034 (IL   ???...  ???)
N005 (  0,  0) [000222] -A------R---              *  ASG       int   
N004 (  0,  0) [000220] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:3
N003 (  0,  0) [000221] ------------              \--*  PHI       int   
N001 (  0,  0) [000230] ------------ pred BB03       +--*  PHI_ARG   int    V11 tmp7         u:4
N002 (  0,  0) [000229] ------------ pred BB02       \--*  PHI_ARG   int    V11 tmp7         u:2

***** BB04
STMT00020 (IL 0x01E...  ???)
N003 (  1,  3) [000083] -A------R---              *  ASG       ref   
N002 (  1,  1) [000082] D------N----              +--*  LCL_VAR   ref    V08 tmp4         d:2
N001 (  1,  1) [000081] ------------              \--*  LCL_VAR   ref    V09 tmp5         u:2

***** BB04
STMT00021 (IL 0x01E...  ???)
N007 (  8,  8) [000090] ---XG-------              *  JTRUE     void  
N006 (  6,  6) [000089] N--XG--N-U--              \--*  NE        int   
N001 (  1,  1) [000086] ------------                 +--*  LCL_VAR   int    V12 tmp8         u:2
N005 (  4,  4) [000088] ---XG-------                 \--*  IND       int   
N004 (  2,  2) [000190] -------N----                    \--*  ADD       byref 
N002 (  1,  1) [000087] ------------                       +--*  LCL_VAR   ref    V09 tmp5         u:2
N003 (  1,  1) [000189] ------------                       \--*  CNS_INT   long   20 field offset Fseq[_version]

------------ BB05 [01E..01F) -> BB07 (cond), preds={BB04} succs={BB06,BB07}

***** BB05
STMT00024 (IL 0x01E...  ???)
N007 (  8,  8) [000106] ---XG-------              *  JTRUE     void  
N006 (  6,  6) [000105] N--XG--N-U--              \--*  GE        int   
N001 (  1,  1) [000102] ------------                 +--*  LCL_VAR   int    V11 tmp7         u:3
N005 (  4,  4) [000104] ---XG-------                 \--*  IND       int   
N004 (  2,  2) [000192] -------N----                    \--*  ADD       byref 
N002 (  1,  1) [000103] ------------                       +--*  LCL_VAR   ref    V08 tmp4         u:2
N003 (  1,  1) [000191] ------------                       \--*  CNS_INT   long   16 field offset Fseq[_size]

------------ BB06 [01E..01F) -> BB09 (always), preds={BB05} succs={BB09}

***** BB06
STMT00025 (IL 0x01E...  ???)
N023 ( 18, 22) [000116] -A-XG---R---              *  ASG       ref   
N022 (  1,  1) [000115] D------N----              +--*  LCL_VAR   ref    V10 tmp6         d:4
N021 ( 18, 22) [000207] -A-XG-------              \--*  COMMA     ref   
N006 (  4,  4) [000194] -A-XG---R---                 +--*  ASG       ref   
N005 (  1,  1) [000193] D------N----                 |  +--*  LCL_VAR   ref    V17 tmp13        d:2
N004 (  4,  4) [000110] ---XG-------                 |  \--*  IND       ref   
N003 (  2,  2) [000209] -------N----                 |     \--*  ADD       byref 
N001 (  1,  1) [000109] ------------                 |        +--*  LCL_VAR   ref    V08 tmp4         u:2 (last use)
N002 (  1,  1) [000208] ------------                 |        \--*  CNS_INT   long   8 field offset Fseq[_items]
N020 ( 14, 18) [000206] ---XG-------                 \--*  COMMA     ref   
N010 (  8, 11) [000199] ---X--------                    +--*  ARR_BOUNDS_CHECK_Rng void  
N007 (  1,  1) [000113] ------------                    |  +--*  LCL_VAR   int    V11 tmp7         u:3
N009 (  3,  3) [000198] ---X--------                    |  \--*  ARR_LENGTH int   
N008 (  1,  1) [000195] ------------                    |     \--*  LCL_VAR   ref    V17 tmp13        u:2
N019 (  6,  7) [000114] a---G-------                    \--*  IND       ref   
N018 (  5,  6) [000205] -------N----                       \--*  ADD       byref 
N011 (  1,  1) [000196] ------------                          +--*  LCL_VAR   ref    V17 tmp13        u:2 (last use)
N017 (  4,  5) [000204] -------N----                          \--*  ADD       long  
N015 (  3,  4) [000202] -------N----                             +--*  LSH       long  
N013 (  2,  3) [000200] ------------                             |  +--*  CAST      long <- int
N012 (  1,  1) [000197] i-----------                             |  |  \--*  LCL_VAR   int    V11 tmp7         u:3
N014 (  1,  1) [000201] -------N----                             |  \--*  CNS_INT   long   3
N016 (  1,  1) [000203] ------------                             \--*  CNS_INT   long   16 Fseq[#FirstElem]

***** BB06
STMT00026 (IL 0x01E...  ???)
N005 (  3,  3) [000125] -A------R---              *  ASG       int   
N004 (  1,  1) [000124] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:6
N003 (  3,  3) [000123] ------------              \--*  ADD       int   
N001 (  1,  1) [000121] ------------                 +--*  LCL_VAR   int    V11 tmp7         u:3 (last use)
N002 (  1,  1) [000122] ------------                 \--*  CNS_INT   int    1

***** BB06
STMT00027 (IL 0x01E...  ???)
N003 (  1,  3) [000129] -A------R---              *  ASG       bool  
N002 (  1,  1) [000128] D------N----              +--*  LCL_VAR   int    V07 tmp3         d:4
N001 (  1,  1) [000126] ------------              \--*  CNS_INT   int    1

------------ BB07 [01E..01F) -> BB11 (cond), preds={BB04,BB05} succs={BB08,BB11}

***** BB07
STMT00029 (IL 0x01E...  ???)
N007 (  8,  8) [000143] ---XG-------              *  JTRUE     void  
N006 (  6,  6) [000142] J--XG--N----              \--*  NE        int   
N001 (  1,  1) [000137] ------------                 +--*  LCL_VAR   int    V12 tmp8         u:2
N005 (  4,  4) [000141] ---XG-------                 \--*  IND       int   
N004 (  2,  2) [000211] -------N----                    \--*  ADD       byref 
N002 (  1,  1) [000140] ------------                       +--*  LCL_VAR   ref    V09 tmp5         u:2
N003 (  1,  1) [000210] ------------                       \--*  CNS_INT   long   20 field offset Fseq[_version]

------------ BB08 [01E..01F), preds={BB07} succs={BB09}

***** BB08
STMT00030 (IL 0x01E...  ???)
N008 (  6,  6) [000153] -A-XG---R---              *  ASG       int   
N007 (  1,  1) [000152] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:5
N006 (  6,  6) [000151] ---XG-------              \--*  ADD       int   
N004 (  4,  4) [000149] ---XG-------                 +--*  IND       int   
N003 (  2,  2) [000213] -------N----                 |  \--*  ADD       byref 
N001 (  1,  1) [000148] ------------                 |     +--*  LCL_VAR   ref    V09 tmp5         u:2
N002 (  1,  1) [000212] ------------                 |     \--*  CNS_INT   long   16 field offset Fseq[_size]
N005 (  1,  1) [000150] ------------                 \--*  CNS_INT   int    1

***** BB08
STMT00031 (IL 0x01E...  ???)
N003 (  1,  3) [000160] -A------R---              *  ASG       ref   
N002 (  1,  1) [000156] D------N----              +--*  LCL_VAR   ref    V10 tmp6         d:3
N001 (  1,  1) [000158] ------------              \--*  CNS_INT   ref    null

***** BB08
STMT00023 (IL 0x01E...  ???)
N003 (  1,  3) [000098] -A------R---              *  ASG       bool  
N002 (  1,  1) [000097] D------N----              +--*  LCL_VAR   int    V07 tmp3         d:3
N001 (  1,  1) [000096] ------------              \--*  CNS_INT   int    0

------------ BB09 [???..???) -> BB03 (cond), preds={BB06,BB08} succs={BB10,BB03}

***** BB09
STMT00036 (IL   ???...  ???)
N005 (  0,  0) [000228] -A------R---              *  ASG       ref   
N004 (  0,  0) [000226] D------N----              +--*  LCL_VAR   ref    V10 tmp6         d:2
N003 (  0,  0) [000227] ------------              \--*  PHI       ref   
N001 (  0,  0) [000234] ------------ pred BB06       +--*  PHI_ARG   ref    V10 tmp6         u:4
N002 (  0,  0) [000231] ------------ pred BB08       \--*  PHI_ARG   ref    V10 tmp6         u:3

***** BB09
STMT00035 (IL   ???...  ???)
N005 (  0,  0) [000225] -A------R---              *  ASG       bool  
N004 (  0,  0) [000223] D------N----              +--*  LCL_VAR   bool   V07 tmp3         d:2
N003 (  0,  0) [000224] ------------              \--*  PHI       bool  
N001 (  0,  0) [000235] ------------ pred BB06       +--*  PHI_ARG   bool   V07 tmp3         u:4
N002 (  0,  0) [000232] ------------ pred BB08       \--*  PHI_ARG   bool   V07 tmp3         u:3

***** BB09
STMT00033 (IL   ???...  ???)
N005 (  0,  0) [000219] -A------R---              *  ASG       int   
N004 (  0,  0) [000217] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:4
N003 (  0,  0) [000218] ------------              \--*  PHI       int   
N001 (  0,  0) [000236] ------------ pred BB06       +--*  PHI_ARG   int    V11 tmp7         u:6
N002 (  0,  0) [000233] ------------ pred BB08       \--*  PHI_ARG   int    V11 tmp7         u:5

***** BB09
STMT00006 (IL   ???...  ???)
N004 (  5,  5) [000021] ------------              *  JTRUE     void  
N003 (  3,  3) [000020] J------N----              \--*  NE        int   
N001 (  1,  1) [000130] ------------                 +--*  LCL_VAR   bool   V07 tmp3         u:2 (last use)
N002 (  1,  1) [000019] ------------                 \--*  CNS_INT   int    0

------------ BB10 [027..03E) (return), preds={BB09} succs={}

***** BB10
STMT00011 (IL   ???...  ???)
N005 (  5,  5) [000035] ---XG-------              *  RETURN    ref   
N004 (  4,  4) [000166] ---XG-------              \--*  IND       ref   
N003 (  2,  2) [000216] -------N----                 \--*  ADD       byref 
N001 (  1,  1) [000032] ------------                    +--*  LCL_VAR   ref    V01 loc0         u:2 (last use)
N002 (  1,  1) [000215] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_batches]

------------ BB11 [01E..01F) (throw), preds={BB07} succs={}

***** BB11
STMT00032 (IL 0x01E...  ???)
N001 ( 14,  5) [000163] --CXG-------              *  CALL      void   System.ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion

-------------------------------------------------------------------------------------------------------------------

*************** Finishing PHASE Early Value Propagation

*************** Starting PHASE Do value numbering

*************** In fgValueNumber()
optComputeLoopSideEffects botNext is BB10, lnum is 0
optComputeLoopSideEffectsOfBlock BB03, mostNestedLoop 0
optComputeLoopSideEffectsOfBlock BB04, mostNestedLoop 0
optComputeLoopSideEffectsOfBlock BB05, mostNestedLoop 0
optComputeLoopSideEffectsOfBlock BB06, mostNestedLoop 0
optComputeLoopSideEffectsOfBlock BB07, mostNestedLoop 0
optComputeLoopSideEffectsOfBlock BB08, mostNestedLoop 0
optComputeLoopSideEffectsOfBlock BB09, mostNestedLoop 0
Memory Initial Value in BB01 is: $81
The SSA definition for ByrefExposed (#1) at start of BB01 is $81 {InitVal($41)}
The SSA definition for GcHeap (#1) at start of BB01 is $81 {InitVal($41)}

***** BB01, STMT00000(before)
N005 ( 16, 16) [000003] -AC-----R---              *  ASG       ref   
N004 (  1,  1) [000002] D------N----              +--*  LCL_VAR   ref    V05 tmp1         d:2
N003 ( 16, 16) [000001] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
N002 (  2, 10) [000000] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e method

N001 [000168]   ARGPLACE  => $c0 {c0}
N002 [000000]   CNS_INT(h) 0xd1ffab1e method => $100 {Hnd const: 0x00000000D1FFAB1E}
VN of ARGPLACE tree [000168] updated to $100 {Hnd const: 0x00000000D1FFAB1E}
N003 [000001]   CALL help => $180 {JitNew($100, $140)}
N004 [000002]   LCL_VAR   V05 tmp1         d:2 => $180 {JitNew($100, $140)}
N005 [000003]   ASG       => $180 {JitNew($100, $140)}

***** BB01, STMT00000(after)
N005 ( 16, 16) [000003] -AC-----R---              *  ASG       ref    $180
N004 (  1,  1) [000002] D------N----              +--*  LCL_VAR   ref    V05 tmp1         d:2 $180
N003 ( 16, 16) [000001] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $180
N002 (  2, 10) [000000] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e method $100

---------

***** BB01, STMT00001(before)
N003 ( 15,  8) [000005] --CXG-------              *  CALL      void   Batcher..ctor
N002 (  1,  1) [000004] ------------ this in rcx  \--*  LCL_VAR   ref    V05 tmp1         u:2

N001 [000169]   ARGPLACE  => $142 {142}
N002 [000004]   LCL_VAR   V05 tmp1         u:2 => $180 {JitNew($100, $140)}
  fgCurMemoryVN[GcHeap] assigned for CALL at [000005] to VN: $143.
N003 [000005]   CALL      => $VN.Void

***** BB01, STMT00001(after)
N003 ( 15,  8) [000005] --CXG-------              *  CALL      void   Batcher..ctor $VN.Void
N002 (  1,  1) [000004] ------------ this in rcx  \--*  LCL_VAR   ref    V05 tmp1         u:2 $180

---------

***** BB01, STMT00002(before)
N003 (  1,  3) [000008] -A------R---              *  ASG       ref   
N002 (  1,  1) [000007] D------N----              +--*  LCL_VAR   ref    V01 loc0         d:2
N001 (  1,  1) [000006] ------------              \--*  LCL_VAR   ref    V05 tmp1         u:2 (last use)

N001 [000006]   LCL_VAR   V05 tmp1         u:2 (last use) => $180 {JitNew($100, $140)}
N002 [000007]   LCL_VAR   V01 loc0         d:2 => $180 {JitNew($100, $140)}
N003 [000008]   ASG       => $180 {JitNew($100, $140)}

***** BB01, STMT00002(after)
N003 (  1,  3) [000008] -A------R---              *  ASG       ref    $180
N002 (  1,  1) [000007] D------N----              +--*  LCL_VAR   ref    V01 loc0         d:2 $180
N001 (  1,  1) [000006] ------------              \--*  LCL_VAR   ref    V05 tmp1         u:2 (last use) $180

---------

***** BB01, STMT00016(before)
N003 (  5,  4) [000055] -A------R---              *  ASG       ref   
N002 (  3,  2) [000054] D------N----              +--*  LCL_VAR   ref    V13 tmp9         d:2
N001 (  1,  1) [000009] ------------              \--*  LCL_VAR   ref    V00 arg0         u:1

N001 [000009]   LCL_VAR   V00 arg0         u:1 => $80 {InitVal($40)}
N002 [000054]   LCL_VAR   V13 tmp9         d:2 => $80 {InitVal($40)}
N003 [000055]   ASG       => $80 {InitVal($40)}

***** BB01, STMT00016(after)
N003 (  5,  4) [000055] -A------R---              *  ASG       ref    $80
N002 (  3,  2) [000054] D------N----              +--*  LCL_VAR   ref    V13 tmp9         d:2 $80
N001 (  1,  1) [000009] ------------              \--*  LCL_VAR   ref    V00 arg0         u:1 $80

---------

***** BB01, STMT00017(before)
N003 (  5,  4) [000060] -A------R---              *  ASG       int   
N002 (  3,  2) [000059] D------N----              +--*  LCL_VAR   int    V15 tmp11        d:2
N001 (  1,  1) [000058] ------------              \--*  CNS_INT   int    0

N001 [000058]   CNS_INT   0 => $40 {IntCns 0}
N002 [000059]   LCL_VAR   V15 tmp11        d:2 => $40 {IntCns 0}
N003 [000060]   ASG       => $40 {IntCns 0}

***** BB01, STMT00017(after)
N003 (  5,  4) [000060] -A------R---              *  ASG       int    $40
N002 (  3,  2) [000059] D------N----              +--*  LCL_VAR   int    V15 tmp11        d:2 $40
N001 (  1,  1) [000058] ------------              \--*  CNS_INT   int    0 $40

---------

***** BB01, STMT00018(before)
N006 (  8,  7) [000066] -A-XG---R---              *  ASG       int   
N005 (  3,  2) [000065] D------N----              +--*  LCL_VAR   int    V16 tmp12        d:2
N004 (  4,  4) [000064] ---XG-------              \--*  IND       int   
N003 (  2,  2) [000171] -------N----                 \--*  ADD       byref 
N001 (  1,  1) [000063] ------------                    +--*  LCL_VAR   ref    V00 arg0         u:1 (last use)
N002 (  1,  1) [000170] ------------                    \--*  CNS_INT   long   20 field offset Fseq[_version]

N001 [000063]   LCL_VAR   V00 arg0         u:1 (last use) => $80 {InitVal($40)}
N002 [000170]   CNS_INT   20 field offset Fseq[_version] => $200 {LngCns:  20}
N003 [000171]   ADD       => $240 {ADD($80, $200)}
  VNApplySelectors:
    VNForHandle(_version) is $101, fieldType is int
    VNForMapSelect($143, $101):int returns $280 {$143[$101]}
    VNForMapSelect($280, $80):int returns $281 {$280[$80]}
N004 [000064]   IND       => <l:$283 {norm=$281 {$280[$80]}, exc=$181 {NullPtrExc($80)}}, c:$282 {norm=$1c1 {1c1}, exc=$181 {NullPtrExc($80)}}>
N005 [000065]   LCL_VAR   V16 tmp12        d:2 => <l:$281 {$280[$80]}, c:$1c1 {1c1}>
N006 [000066]   ASG       => <l:$283 {norm=$281 {$280[$80]}, exc=$181 {NullPtrExc($80)}}, c:$282 {norm=$1c1 {1c1}, exc=$181 {NullPtrExc($80)}}>

***** BB01, STMT00018(after)
N006 (  8,  7) [000066] -A-XG---R---              *  ASG       int    <l:$283, c:$282>
N005 (  3,  2) [000065] D------N----              +--*  LCL_VAR   int    V16 tmp12        d:2 <l:$281, c:$1c1>
N004 (  4,  4) [000064] ---XG-------              \--*  IND       int    <l:$283, c:$282>
N003 (  2,  2) [000171] -------N----                 \--*  ADD       byref  $240
N001 (  1,  1) [000063] ------------                    +--*  LCL_VAR   ref    V00 arg0         u:1 (last use) $80
N002 (  1,  1) [000170] ------------                    \--*  CNS_INT   long   20 field offset Fseq[_version] $200

---------

***** BB01, STMT00004(before)
N013 (  9,  9) [000186] -A----------              *  COMMA     void  
N009 (  6,  6) [000182] -A----------              +--*  COMMA     void  
N005 (  3,  3) [000178] -A----------              |  +--*  COMMA     void  
N003 (  3,  3) [000174] -A------R---              |  |  +--*  ASG       ref   
N002 (  1,  1) [000172] D------N----              |  |  |  +--*  LCL_VAR   ref    V09 tmp5         d:2
N001 (  3,  2) [000173] ------------              |  |  |  \--*  LCL_VAR   ref    V13 tmp9         u:2 (last use)
N004 (  0,  0) [000177] ------------              |  |  \--*  NOP       void  
N008 (  3,  3) [000181] -A------R---              |  \--*  ASG       int   
N007 (  1,  1) [000179] D------N----              |     +--*  LCL_VAR   int    V11 tmp7         d:2
N006 (  3,  2) [000180] ------------              |     \--*  LCL_VAR   int    V15 tmp11        u:2 (last use)
N012 (  3,  3) [000185] -A------R---              \--*  ASG       int   
N011 (  1,  1) [000183] D------N----                 +--*  LCL_VAR   int    V12 tmp8         d:2
N010 (  3,  2) [000184] ------------                 \--*  LCL_VAR   int    V16 tmp12        u:2 (last use)

N001 [000173]   LCL_VAR   V13 tmp9         u:2 (last use) => $80 {InitVal($40)}
N002 [000172]   LCL_VAR   V09 tmp5         d:2 => $80 {InitVal($40)}
N003 [000174]   ASG       => $80 {InitVal($40)}
N004 [000177]   NOP       => $2c0 {2c0}
N005 [000178]   COMMA     => $2c0 {2c0}
N006 [000180]   LCL_VAR   V15 tmp11        u:2 (last use) => $40 {IntCns 0}
N007 [000179]   LCL_VAR   V11 tmp7         d:2 => $40 {IntCns 0}
N008 [000181]   ASG       => $40 {IntCns 0}
N009 [000182]   COMMA     => $40 {IntCns 0}
N010 [000184]   LCL_VAR   V16 tmp12        u:2 (last use) => <l:$281 {$280[$80]}, c:$1c1 {1c1}>
N011 [000183]   LCL_VAR   V12 tmp8         d:2 => <l:$281 {$280[$80]}, c:$1c1 {1c1}>
N012 [000185]   ASG       => <l:$281 {$280[$80]}, c:$1c1 {1c1}>
N013 [000186]   COMMA     => <l:$281 {$280[$80]}, c:$1c1 {1c1}>

***** BB01, STMT00004(after)
N013 (  9,  9) [000186] -A----------              *  COMMA     void   <l:$281, c:$1c1>
N009 (  6,  6) [000182] -A----------              +--*  COMMA     void   $40
N005 (  3,  3) [000178] -A----------              |  +--*  COMMA     void   $2c0
N003 (  3,  3) [000174] -A------R---              |  |  +--*  ASG       ref    $80
N002 (  1,  1) [000172] D------N----              |  |  |  +--*  LCL_VAR   ref    V09 tmp5         d:2 $80
N001 (  3,  2) [000173] ------------              |  |  |  \--*  LCL_VAR   ref    V13 tmp9         u:2 (last use) $80
N004 (  0,  0) [000177] ------------              |  |  \--*  NOP       void   $2c0
N008 (  3,  3) [000181] -A------R---              |  \--*  ASG       int    $40
N007 (  1,  1) [000179] D------N----              |     +--*  LCL_VAR   int    V11 tmp7         d:2 $40
N006 (  3,  2) [000180] ------------              |     \--*  LCL_VAR   int    V15 tmp11        u:2 (last use) $40
N012 (  3,  3) [000185] -A------R---              \--*  ASG       int    <l:$281, c:$1c1>
N011 (  1,  1) [000183] D------N----                 +--*  LCL_VAR   int    V12 tmp8         d:2 <l:$281, c:$1c1>
N010 (  3,  2) [000184] ------------                 \--*  LCL_VAR   int    V16 tmp12        u:2 (last use) <l:$281, c:$1c1>

finish(BB01).
   Succ(BB02).
     Not yet completed.
     All preds complete, adding to allDone.
The SSA definition for ByrefExposed (#2) at start of BB02 is $143 {143}
The SSA definition for GcHeap (#2) at start of BB02 is $143 {143}
finish(BB02).
   Succ(BB04).
     Not yet completed.
     Not all preds complete  Adding to notallDone, if necessary...
       Was necessary.
SSA PHI definition: set VN of local 11/3 to $300 {PhiDef($b, $3, $284)} .
Computing GcHeap state for block BB04, entry block for loops 0 to 0:
  Loop 0 has memory havoc effect; heap state is new unique $340.
The SSA definition for GcHeap (#3) at start of BB04 is $340 {340}

***** BB04, STMT00020(before)
N003 (  1,  3) [000083] -A------R---              *  ASG       ref   
N002 (  1,  1) [000082] D------N----              +--*  LCL_VAR   ref    V08 tmp4         d:2
N001 (  1,  1) [000081] ------------              \--*  LCL_VAR   ref    V09 tmp5         u:2

N001 [000081]   LCL_VAR   V09 tmp5         u:2 => $80 {InitVal($40)}
N002 [000082]   LCL_VAR   V08 tmp4         d:2 => $80 {InitVal($40)}
N003 [000083]   ASG       => $80 {InitVal($40)}

***** BB04, STMT00020(after)
N003 (  1,  3) [000083] -A------R---              *  ASG       ref    $80
N002 (  1,  1) [000082] D------N----              +--*  LCL_VAR   ref    V08 tmp4         d:2 $80
N001 (  1,  1) [000081] ------------              \--*  LCL_VAR   ref    V09 tmp5         u:2 $80

---------

***** BB04, STMT00021(before)
N007 (  8,  8) [000090] ---XG-------              *  JTRUE     void  
N006 (  6,  6) [000089] N--XG--N-U--              \--*  NE        int   
N001 (  1,  1) [000086] ------------                 +--*  LCL_VAR   int    V12 tmp8         u:2
N005 (  4,  4) [000088] ---XG-------                 \--*  IND       int   
N004 (  2,  2) [000190] -------N----                    \--*  ADD       byref 
N002 (  1,  1) [000087] ------------                       +--*  LCL_VAR   ref    V09 tmp5         u:2
N003 (  1,  1) [000189] ------------                       \--*  CNS_INT   long   20 field offset Fseq[_version]

N001 [000086]   LCL_VAR   V12 tmp8         u:2 => <l:$281 {$280[$80]}, c:$1c1 {1c1}>
N002 [000087]   LCL_VAR   V09 tmp5         u:2 => $80 {InitVal($40)}
N003 [000189]   CNS_INT   20 field offset Fseq[_version] => $200 {LngCns:  20}
N004 [000190]   ADD       => $240 {ADD($80, $200)}
  VNApplySelectors:
    VNForHandle(_version) is $101, fieldType is int
    VNForMapSelect($340, $101):int returns $285 {$340[$101]}
    VNForMapSelect($285, $80):int returns $286 {$285[$80]}
N005 [000088]   IND       => <l:$288 {norm=$286 {$285[$80]}, exc=$181 {NullPtrExc($80)}}, c:$287 {norm=$380 {380}, exc=$181 {NullPtrExc($80)}}>
N006 [000089]   NE        => <l:$28c {norm=$28a {NE($281, $286)}, exc=$181 {NullPtrExc($80)}}, c:$28b {norm=$289 {NE($1c1, $380)}, exc=$181 {NullPtrExc($80)}}>

***** BB04, STMT00021(after)
N007 (  8,  8) [000090] ---XG-------              *  JTRUE     void  
N006 (  6,  6) [000089] N--XG--N-U--              \--*  NE        int    <l:$28c, c:$28b>
N001 (  1,  1) [000086] ------------                 +--*  LCL_VAR   int    V12 tmp8         u:2 <l:$281, c:$1c1>
N005 (  4,  4) [000088] ---XG-------                 \--*  IND       int    <l:$288, c:$287>
N004 (  2,  2) [000190] -------N----                    \--*  ADD       byref  $240
N002 (  1,  1) [000087] ------------                       +--*  LCL_VAR   ref    V09 tmp5         u:2 $80
N003 (  1,  1) [000189] ------------                       \--*  CNS_INT   long   20 field offset Fseq[_version] $200

finish(BB04).
   Succ(BB05).
     Not yet completed.
     All preds complete, adding to allDone.
   Succ(BB07).
     Not yet completed.
     Not all preds complete  Adding to notallDone, if necessary...
       Was necessary.
The SSA definition for ByrefExposed (#3) at start of BB05 is $340 {340}
The SSA definition for GcHeap (#3) at start of BB05 is $340 {340}

***** BB05, STMT00024(before)
N007 (  8,  8) [000106] ---XG-------              *  JTRUE     void  
N006 (  6,  6) [000105] N--XG--N-U--              \--*  GE        int   
N001 (  1,  1) [000102] ------------                 +--*  LCL_VAR   int    V11 tmp7         u:3
N005 (  4,  4) [000104] ---XG-------                 \--*  IND       int   
N004 (  2,  2) [000192] -------N----                    \--*  ADD       byref 
N002 (  1,  1) [000103] ------------                       +--*  LCL_VAR   ref    V08 tmp4         u:2
N003 (  1,  1) [000191] ------------                       \--*  CNS_INT   long   16 field offset Fseq[_size]

N001 [000102]   LCL_VAR   V11 tmp7         u:3 => $300 {PhiDef($b, $3, $284)}
N002 [000103]   LCL_VAR   V08 tmp4         u:2 => $80 {InitVal($40)}
N003 [000191]   CNS_INT   16 field offset Fseq[_size] => $201 {LngCns:  16}
N004 [000192]   ADD       => $241 {ADD($80, $201)}
  VNApplySelectors:
    VNForHandle(_size) is $102, fieldType is int
    VNForMapSelect($340, $102):int returns $28d {$340[$102]}
    VNForMapSelect($28d, $80):int returns $28e {$28d[$80]}
N005 [000104]   IND       => <l:$290 {norm=$28e {$28d[$80]}, exc=$181 {NullPtrExc($80)}}, c:$28f {norm=$381 {381}, exc=$181 {NullPtrExc($80)}}>
N006 [000105]   GE        => <l:$294 {norm=$292 {GE_UN($300, $28e)}, exc=$181 {NullPtrExc($80)}}, c:$293 {norm=$291 {GE_UN($300, $381)}, exc=$181 {NullPtrExc($80)}}>

***** BB05, STMT00024(after)
N007 (  8,  8) [000106] ---XG-------              *  JTRUE     void  
N006 (  6,  6) [000105] N--XG--N-U--              \--*  GE        int    <l:$294, c:$293>
N001 (  1,  1) [000102] ------------                 +--*  LCL_VAR   int    V11 tmp7         u:3 $300
N005 (  4,  4) [000104] ---XG-------                 \--*  IND       int    <l:$290, c:$28f>
N004 (  2,  2) [000192] -------N----                    \--*  ADD       byref  $241
N002 (  1,  1) [000103] ------------                       +--*  LCL_VAR   ref    V08 tmp4         u:2 $80
N003 (  1,  1) [000191] ------------                       \--*  CNS_INT   long   16 field offset Fseq[_size] $201

finish(BB05).
   Succ(BB06).
     Not yet completed.
     All preds complete, adding to allDone.
   Succ(BB07).
     Not yet completed.
     All preds complete, adding to allDone.
The SSA definition for ByrefExposed (#3) at start of BB07 is $340 {340}
The SSA definition for GcHeap (#3) at start of BB07 is $340 {340}

***** BB07, STMT00029(before)
N007 (  8,  8) [000143] ---XG-------              *  JTRUE     void  
N006 (  6,  6) [000142] J--XG--N----              \--*  NE        int   
N001 (  1,  1) [000137] ------------                 +--*  LCL_VAR   int    V12 tmp8         u:2
N005 (  4,  4) [000141] ---XG-------                 \--*  IND       int   
N004 (  2,  2) [000211] -------N----                    \--*  ADD       byref 
N002 (  1,  1) [000140] ------------                       +--*  LCL_VAR   ref    V09 tmp5         u:2
N003 (  1,  1) [000210] ------------                       \--*  CNS_INT   long   20 field offset Fseq[_version]

N001 [000137]   LCL_VAR   V12 tmp8         u:2 => <l:$281 {$280[$80]}, c:$1c1 {1c1}>
N002 [000140]   LCL_VAR   V09 tmp5         u:2 => $80 {InitVal($40)}
N003 [000210]   CNS_INT   20 field offset Fseq[_version] => $200 {LngCns:  20}
N004 [000211]   ADD       => $240 {ADD($80, $200)}
  VNApplySelectors:
    VNForHandle(_version) is $101, fieldType is int
    VNForMapSelect($340, $101):int returns $285 {$340[$101]}
    VNForMapSelect($285, $80):int returns $286 {$285[$80]}
N005 [000141]   IND       => <l:$288 {norm=$286 {$285[$80]}, exc=$181 {NullPtrExc($80)}}, c:$295 {norm=$382 {382}, exc=$181 {NullPtrExc($80)}}>
N006 [000142]   NE        => <l:$28c {norm=$28a {NE($281, $286)}, exc=$181 {NullPtrExc($80)}}, c:$297 {norm=$296 {NE($1c1, $382)}, exc=$181 {NullPtrExc($80)}}>

***** BB07, STMT00029(after)
N007 (  8,  8) [000143] ---XG-------              *  JTRUE     void  
N006 (  6,  6) [000142] J--XG--N----              \--*  NE        int    <l:$28c, c:$297>
N001 (  1,  1) [000137] ------------                 +--*  LCL_VAR   int    V12 tmp8         u:2 <l:$281, c:$1c1>
N005 (  4,  4) [000141] ---XG-------                 \--*  IND       int    <l:$288, c:$295>
N004 (  2,  2) [000211] -------N----                    \--*  ADD       byref  $240
N002 (  1,  1) [000140] ------------                       +--*  LCL_VAR   ref    V09 tmp5         u:2 $80
N003 (  1,  1) [000210] ------------                       \--*  CNS_INT   long   20 field offset Fseq[_version] $200

finish(BB07).
   Succ(BB08).
     Not yet completed.
     All preds complete, adding to allDone.
   Succ(BB11).
     Not yet completed.
     All preds complete, adding to allDone.
The SSA definition for ByrefExposed (#3) at start of BB11 is $340 {340}
The SSA definition for GcHeap (#3) at start of BB11 is $340 {340}

***** BB11, STMT00032(before)
N001 ( 14,  5) [000163] --CXG-------              *  CALL      void   System.ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion

  fgCurMemoryVN[GcHeap] assigned for CALL at [000163] to VN: $147.
N001 [000163]   CALL      => $VN.Void

***** BB11, STMT00032(after)
N001 ( 14,  5) [000163] --CXG-------              *  CALL      void   System.ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion $VN.Void

finish(BB11).
The SSA definition for ByrefExposed (#3) at start of BB08 is $340 {340}
The SSA definition for GcHeap (#3) at start of BB08 is $340 {340}

***** BB08, STMT00030(before)
N008 (  6,  6) [000153] -A-XG---R---              *  ASG       int   
N007 (  1,  1) [000152] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:5
N006 (  6,  6) [000151] ---XG-------              \--*  ADD       int   
N004 (  4,  4) [000149] ---XG-------                 +--*  IND       int   
N003 (  2,  2) [000213] -------N----                 |  \--*  ADD       byref 
N001 (  1,  1) [000148] ------------                 |     +--*  LCL_VAR   ref    V09 tmp5         u:2
N002 (  1,  1) [000212] ------------                 |     \--*  CNS_INT   long   16 field offset Fseq[_size]
N005 (  1,  1) [000150] ------------                 \--*  CNS_INT   int    1

N001 [000148]   LCL_VAR   V09 tmp5         u:2 => $80 {InitVal($40)}
N002 [000212]   CNS_INT   16 field offset Fseq[_size] => $201 {LngCns:  16}
N003 [000213]   ADD       => $241 {ADD($80, $201)}
  VNApplySelectors:
    VNForHandle(_size) is $102, fieldType is int
    VNForMapSelect($340, $102):int returns $28d {$340[$102]}
    VNForMapSelect($28d, $80):int returns $28e {$28d[$80]}
N004 [000149]   IND       => <l:$290 {norm=$28e {$28d[$80]}, exc=$181 {NullPtrExc($80)}}, c:$298 {norm=$383 {383}, exc=$181 {NullPtrExc($80)}}>
N005 [000150]   CNS_INT   1 => $44 {IntCns 1}
N006 [000151]   ADD       => <l:$29c {norm=$29a {ADD($44, $28e)}, exc=$181 {NullPtrExc($80)}}, c:$29b {norm=$299 {ADD($44, $383)}, exc=$181 {NullPtrExc($80)}}>
N007 [000152]   LCL_VAR   V11 tmp7         d:5 => <l:$29a {ADD($44, $28e)}, c:$299 {ADD($44, $383)}>
N008 [000153]   ASG       => <l:$29c {norm=$29a {ADD($44, $28e)}, exc=$181 {NullPtrExc($80)}}, c:$29b {norm=$299 {ADD($44, $383)}, exc=$181 {NullPtrExc($80)}}>

***** BB08, STMT00030(after)
N008 (  6,  6) [000153] -A-XG---R---              *  ASG       int    <l:$29c, c:$29b>
N007 (  1,  1) [000152] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:5 <l:$29a, c:$299>
N006 (  6,  6) [000151] ---XG-------              \--*  ADD       int    <l:$29c, c:$29b>
N004 (  4,  4) [000149] ---XG-------                 +--*  IND       int    <l:$290, c:$298>
N003 (  2,  2) [000213] -------N----                 |  \--*  ADD       byref  $241
N001 (  1,  1) [000148] ------------                 |     +--*  LCL_VAR   ref    V09 tmp5         u:2 $80
N002 (  1,  1) [000212] ------------                 |     \--*  CNS_INT   long   16 field offset Fseq[_size] $201
N005 (  1,  1) [000150] ------------                 \--*  CNS_INT   int    1 $44

---------

***** BB08, STMT00031(before)
N003 (  1,  3) [000160] -A------R---              *  ASG       ref   
N002 (  1,  1) [000156] D------N----              +--*  LCL_VAR   ref    V10 tmp6         d:3
N001 (  1,  1) [000158] ------------              \--*  CNS_INT   ref    null

N001 [000158]   CNS_INT   null => $VN.Null
N002 [000156]   LCL_VAR   V10 tmp6         d:3 => $VN.Null
N003 [000160]   ASG       => $VN.Null

***** BB08, STMT00031(after)
N003 (  1,  3) [000160] -A------R---              *  ASG       ref    $VN.Null
N002 (  1,  1) [000156] D------N----              +--*  LCL_VAR   ref    V10 tmp6         d:3 $VN.Null
N001 (  1,  1) [000158] ------------              \--*  CNS_INT   ref    null $VN.Null

---------

***** BB08, STMT00023(before)
N003 (  1,  3) [000098] -A------R---              *  ASG       bool  
N002 (  1,  1) [000097] D------N----              +--*  LCL_VAR   int    V07 tmp3         d:3
N001 (  1,  1) [000096] ------------              \--*  CNS_INT   int    0

N001 [000096]   CNS_INT   0 => $40 {IntCns 0}
N002 [000097]   LCL_VAR   V07 tmp3         d:3 => $40 {IntCns 0}
N003 [000098]   ASG       => $40 {IntCns 0}

***** BB08, STMT00023(after)
N003 (  1,  3) [000098] -A------R---              *  ASG       bool   $40
N002 (  1,  1) [000097] D------N----              +--*  LCL_VAR   int    V07 tmp3         d:3 $40
N001 (  1,  1) [000096] ------------              \--*  CNS_INT   int    0 $40

finish(BB08).
   Succ(BB09).
     Not yet completed.
     Not all preds complete  Adding to notallDone, if necessary...
       Was necessary.
The SSA definition for ByrefExposed (#3) at start of BB06 is $340 {340}
The SSA definition for GcHeap (#3) at start of BB06 is $340 {340}

***** BB06, STMT00025(before)
N023 ( 18, 22) [000116] -A-XG---R---              *  ASG       ref   
N022 (  1,  1) [000115] D------N----              +--*  LCL_VAR   ref    V10 tmp6         d:4
N021 ( 18, 22) [000207] -A-XG-------              \--*  COMMA     ref   
N006 (  4,  4) [000194] -A-XG---R---                 +--*  ASG       ref   
N005 (  1,  1) [000193] D------N----                 |  +--*  LCL_VAR   ref    V17 tmp13        d:2
N004 (  4,  4) [000110] ---XG-------                 |  \--*  IND       ref   
N003 (  2,  2) [000209] -------N----                 |     \--*  ADD       byref 
N001 (  1,  1) [000109] ------------                 |        +--*  LCL_VAR   ref    V08 tmp4         u:2 (last use)
N002 (  1,  1) [000208] ------------                 |        \--*  CNS_INT   long   8 field offset Fseq[_items]
N020 ( 14, 18) [000206] ---XG-------                 \--*  COMMA     ref   
N010 (  8, 11) [000199] ---X--------                    +--*  ARR_BOUNDS_CHECK_Rng void  
N007 (  1,  1) [000113] ------------                    |  +--*  LCL_VAR   int    V11 tmp7         u:3
N009 (  3,  3) [000198] ---X--------                    |  \--*  ARR_LENGTH int   
N008 (  1,  1) [000195] ------------                    |     \--*  LCL_VAR   ref    V17 tmp13        u:2
N019 (  6,  7) [000114] a---G-------                    \--*  IND       ref   
N018 (  5,  6) [000205] -------N----                       \--*  ADD       byref 
N011 (  1,  1) [000196] ------------                          +--*  LCL_VAR   ref    V17 tmp13        u:2 (last use)
N017 (  4,  5) [000204] -------N----                          \--*  ADD       long  
N015 (  3,  4) [000202] -------N----                             +--*  LSH       long  
N013 (  2,  3) [000200] ------------                             |  +--*  CAST      long <- int
N012 (  1,  1) [000197] i-----------                             |  |  \--*  LCL_VAR   int    V11 tmp7         u:3
N014 (  1,  1) [000201] -------N----                             |  \--*  CNS_INT   long   3
N016 (  1,  1) [000203] ------------                             \--*  CNS_INT   long   16 Fseq[#FirstElem]

N001 [000109]   LCL_VAR   V08 tmp4         u:2 (last use) => $80 {InitVal($40)}
N002 [000208]   CNS_INT   8 field offset Fseq[_items] => $202 {LngCns:  8}
N003 [000209]   ADD       => $242 {ADD($80, $202)}
  VNApplySelectors:
    VNForHandle(_items) is $103, fieldType is ref
    VNForMapSelect($340, $103):ref returns $182 {$340[$103]}
    VNForMapSelect($182, $80):ref returns $183 {$182[$80]}
N004 [000110]   IND       => <l:$185 {norm=$183 {$182[$80]}, exc=$181 {NullPtrExc($80)}}, c:$184 {norm=$343 {343}, exc=$181 {NullPtrExc($80)}}>
N005 [000193]   LCL_VAR   V17 tmp13        d:2 => <l:$183 {$182[$80]}, c:$343 {343}>
N006 [000194]   ASG       => <l:$185 {norm=$183 {$182[$80]}, exc=$181 {NullPtrExc($80)}}, c:$184 {norm=$343 {343}, exc=$181 {NullPtrExc($80)}}>
N007 [000113]   LCL_VAR   V11 tmp7         u:3 => $300 {PhiDef($b, $3, $284)}
N008 [000195]   LCL_VAR   V17 tmp13        u:2 => <l:$183 {$182[$80]}, c:$343 {343}>
N009 [000198]   ARR_LENGTH => <l:$29e {norm=$3c1 {ARR_LENGTH($183)}, exc=$187 {NullPtrExc($183)}}, c:$29d {norm=$3c0 {ARR_LENGTH($343)}, exc=$186 {NullPtrExc($343)}}>
N010 [000199]   ARR_BOUNDS_CHECK_Rng => <l:$191 {norm=$3 {3}, exc=$18f( {NullPtrExc($183)},  {IndexOutOfRangeExc($300, $3c1)})}, c:$190 {norm=$3 {3}, exc=$18e( {NullPtrExc($343)},  {IndexOutOfRangeExc($300, $3c0)})}>
N011 [000196]   LCL_VAR   V17 tmp13        u:2 (last use) => <l:$183 {$182[$80]}, c:$343 {343}>
N012 [000197]   LCL_VAR   V11 tmp7         u:3 => $300 {PhiDef($b, $3, $284)}
    VNForCastOper(long) is $45
N013 [000200]   CAST      => $400 {Cast($300, $45)}
N014 [000201]   CNS_INT   3 => $203 {LngCns:  3}
N015 [000202]   LSH       => $401 {LSH($400, $203)}
N016 [000203]   CNS_INT   16 Fseq[#FirstElem] => $201 {LngCns:  16}
N017 [000204]   ADD       => $402 {ADD($201, $401)}
N018 [000205]   ADD       => <l:$244 {ADD($183, $402)}, c:$243 {ADD($343, $402)}>
    VNForHandle(arrElemType: ref) is $104
  Relabeled IND_ARR_INDEX address node [000205] with l:$440:  {PtrToArrElem($104, $183, $400, $0)}
    VNForMapSelect($340, $104):ref returns $192 {$340[$104]}
    VNForMapSelect($192, $183):ref returns $193 {$192[$183]}
    VNForMapSelect($193, $400):ref returns $194 {$193[$400]}
  hAtArrType $192 is MapSelect(curGcHeap($340), ref[]).
  hAtArrTypeAtArr $193 is MapSelect(hAtArrType($192), arr=$183).
  wholeElem $194 is MapSelect(hAtArrTypeAtArr($193), ind=$400).
N019 [000114]   IND       => <l:$194 {$193[$400]}, c:$345 {345}>
N020 [000206]   COMMA     => <l:$196 {norm=$194 {$193[$400]}, exc=$18f( {NullPtrExc($183)},  {IndexOutOfRangeExc($300, $3c1)})}, c:$195 {norm=$345 {345}, exc=$18e( {NullPtrExc($343)},  {IndexOutOfRangeExc($300, $3c0)})}>
N021 [000207]   COMMA     => <l:$19a {norm=$194 {$193[$400]}, exc=$198( {NullPtrExc($80)},  {NullPtrExc($183)},  {IndexOutOfRangeExc($300, $3c1)})}, c:$199 {norm=$345 {345}, exc=$197( {NullPtrExc($80)},  {NullPtrExc($343)},  {IndexOutOfRangeExc($300, $3c0)})}>
N022 [000115]   LCL_VAR   V10 tmp6         d:4 => <l:$194 {$193[$400]}, c:$345 {345}>
N023 [000116]   ASG       => <l:$19a {norm=$194 {$193[$400]}, exc=$198( {NullPtrExc($80)},  {NullPtrExc($183)},  {IndexOutOfRangeExc($300, $3c1)})}, c:$199 {norm=$345 {345}, exc=$197( {NullPtrExc($80)},  {NullPtrExc($343)},  {IndexOutOfRangeExc($300, $3c0)})}>

***** BB06, STMT00025(after)
N023 ( 18, 22) [000116] -A-XG---R---              *  ASG       ref    <l:$19a, c:$199>
N022 (  1,  1) [000115] D------N----              +--*  LCL_VAR   ref    V10 tmp6         d:4 <l:$194, c:$345>
N021 ( 18, 22) [000207] -A-XG-------              \--*  COMMA     ref    <l:$19a, c:$199>
N006 (  4,  4) [000194] -A-XG---R---                 +--*  ASG       ref    <l:$185, c:$184>
N005 (  1,  1) [000193] D------N----                 |  +--*  LCL_VAR   ref    V17 tmp13        d:2 <l:$183, c:$343>
N004 (  4,  4) [000110] ---XG-------                 |  \--*  IND       ref    <l:$185, c:$184>
N003 (  2,  2) [000209] -------N----                 |     \--*  ADD       byref  $242
N001 (  1,  1) [000109] ------------                 |        +--*  LCL_VAR   ref    V08 tmp4         u:2 (last use) $80
N002 (  1,  1) [000208] ------------                 |        \--*  CNS_INT   long   8 field offset Fseq[_items] $202
N020 ( 14, 18) [000206] ---XG-------                 \--*  COMMA     ref    <l:$196, c:$195>
N010 (  8, 11) [000199] ---X--------                    +--*  ARR_BOUNDS_CHECK_Rng void   <l:$191, c:$190>
N007 (  1,  1) [000113] ------------                    |  +--*  LCL_VAR   int    V11 tmp7         u:3 $300
N009 (  3,  3) [000198] ---X--------                    |  \--*  ARR_LENGTH int    <l:$29e, c:$29d>
N008 (  1,  1) [000195] ------------                    |     \--*  LCL_VAR   ref    V17 tmp13        u:2 <l:$183, c:$343>
N019 (  6,  7) [000114] a---G-------                    \--*  IND       ref    <l:$194, c:$345>
N018 (  5,  6) [000205] -------N----                       \--*  ADD       byref  $440
N011 (  1,  1) [000196] ------------                          +--*  LCL_VAR   ref    V17 tmp13        u:2 (last use) <l:$183, c:$343>
N017 (  4,  5) [000204] -------N----                          \--*  ADD       long   $402
N015 (  3,  4) [000202] -------N----                             +--*  LSH       long   $401
N013 (  2,  3) [000200] ------------                             |  +--*  CAST      long <- int $400
N012 (  1,  1) [000197] i-----------                             |  |  \--*  LCL_VAR   int    V11 tmp7         u:3 $300
N014 (  1,  1) [000201] -------N----                             |  \--*  CNS_INT   long   3 $203
N016 (  1,  1) [000203] ------------                             \--*  CNS_INT   long   16 Fseq[#FirstElem] $201

---------

***** BB06, STMT00026(before)
N005 (  3,  3) [000125] -A------R---              *  ASG       int   
N004 (  1,  1) [000124] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:6
N003 (  3,  3) [000123] ------------              \--*  ADD       int   
N001 (  1,  1) [000121] ------------                 +--*  LCL_VAR   int    V11 tmp7         u:3 (last use)
N002 (  1,  1) [000122] ------------                 \--*  CNS_INT   int    1

N001 [000121]   LCL_VAR   V11 tmp7         u:3 (last use) => $300 {PhiDef($b, $3, $284)}
N002 [000122]   CNS_INT   1 => $44 {IntCns 1}
N003 [000123]   ADD       => $29f {ADD($44, $300)}
N004 [000124]   LCL_VAR   V11 tmp7         d:6 => $29f {ADD($44, $300)}
N005 [000125]   ASG       => $29f {ADD($44, $300)}

***** BB06, STMT00026(after)
N005 (  3,  3) [000125] -A------R---              *  ASG       int    $29f
N004 (  1,  1) [000124] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:6 $29f
N003 (  3,  3) [000123] ------------              \--*  ADD       int    $29f
N001 (  1,  1) [000121] ------------                 +--*  LCL_VAR   int    V11 tmp7         u:3 (last use) $300
N002 (  1,  1) [000122] ------------                 \--*  CNS_INT   int    1 $44

---------

***** BB06, STMT00027(before)
N003 (  1,  3) [000129] -A------R---              *  ASG       bool  
N002 (  1,  1) [000128] D------N----              +--*  LCL_VAR   int    V07 tmp3         d:4
N001 (  1,  1) [000126] ------------              \--*  CNS_INT   int    1

N001 [000126]   CNS_INT   1 => $44 {IntCns 1}
N002 [000128]   LCL_VAR   V07 tmp3         d:4 => $44 {IntCns 1}
N003 [000129]   ASG       => $44 {IntCns 1}

***** BB06, STMT00027(after)
N003 (  1,  3) [000129] -A------R---              *  ASG       bool   $44
N002 (  1,  1) [000128] D------N----              +--*  LCL_VAR   int    V07 tmp3         d:4 $44
N001 (  1,  1) [000126] ------------              \--*  CNS_INT   int    1 $44

finish(BB06).
   Succ(BB09).
     Not yet completed.
     All preds complete, adding to allDone.
SSA PHI definition: set VN of local 10/2 to $480 {PhiDef($a, $2, $19b)} .
SSA PHI definition: set VN of local 7/2 to $4c0 {PhiDef($7, $2, $19b)} .
SSA PHI definition: set VN of local 11/4 to $301 {PhiDef($b, $4, $2a0)} .
The SSA definition for ByrefExposed (#3) at start of BB09 is $340 {340}
The SSA definition for GcHeap (#3) at start of BB09 is $340 {340}

***** BB09, STMT00006(before)
N004 (  5,  5) [000021] ------------              *  JTRUE     void  
N003 (  3,  3) [000020] J------N----              \--*  NE        int   
N001 (  1,  1) [000130] ------------                 +--*  LCL_VAR   bool   V07 tmp3         u:2 (last use)
N002 (  1,  1) [000019] ------------                 \--*  CNS_INT   int    0

N001 [000130]   LCL_VAR   V07 tmp3         u:2 (last use) => $4c0 {PhiDef($7, $2, $19b)}
N002 [000019]   CNS_INT   0 => $40 {IntCns 0}
N003 [000020]   NE        => $2a1 {NE($4c0, $40)}

***** BB09, STMT00006(after)
N004 (  5,  5) [000021] ------------              *  JTRUE     void  
N003 (  3,  3) [000020] J------N----              \--*  NE        int    $2a1
N001 (  1,  1) [000130] ------------                 +--*  LCL_VAR   bool   V07 tmp3         u:2 (last use) $4c0
N002 (  1,  1) [000019] ------------                 \--*  CNS_INT   int    0 $40

finish(BB09).
   Succ(BB10).
     Not yet completed.
     All preds complete, adding to allDone.
   Succ(BB03).
     Not yet completed.
     All preds complete, adding to allDone.
The SSA definition for ByrefExposed (#3) at start of BB03 is $340 {340}
The SSA definition for GcHeap (#3) at start of BB03 is $340 {340}

***** BB03, STMT00009(before)
N005 ( 16, 10) [000031] --CXG-------              *  CALL nullcheck void   Batcher.Push
N003 (  1,  1) [000029] ------------ this in rcx  +--*  LCL_VAR   ref    V01 loc0         u:2
N004 (  1,  1) [000030] ------------ arg1 in rdx  \--*  LCL_VAR   ref    V10 tmp6         u:2 (last use)

N001 [000187]   ARGPLACE  => $347 {347}
N002 [000188]   ARGPLACE  => $348 {348}
N003 [000029]   LCL_VAR   V01 loc0         u:2 => $180 {JitNew($100, $140)}
N004 [000030]   LCL_VAR   V10 tmp6         u:2 (last use) => $480 {PhiDef($a, $2, $19b)}
VN of ARGPLACE tree [000188] updated to $180 {JitNew($100, $140)}
  fgCurMemoryVN[GcHeap] assigned for CALL at [000031] to VN: $349.
N005 [000031]   CALL nullcheck => $VN.Void

***** BB03, STMT00009(after)
N005 ( 16, 10) [000031] --CXG-------              *  CALL nullcheck void   Batcher.Push $VN.Void
N003 (  1,  1) [000029] ------------ this in rcx  +--*  LCL_VAR   ref    V01 loc0         u:2 $180
N004 (  1,  1) [000030] ------------ arg1 in rdx  \--*  LCL_VAR   ref    V10 tmp6         u:2 (last use) $480

finish(BB03).
   Succ(BB04).
The SSA definition for ByrefExposed (#3) at start of BB10 is $340 {340}
The SSA definition for GcHeap (#3) at start of BB10 is $340 {340}

***** BB10, STMT00011(before)
N005 (  5,  5) [000035] ---XG-------              *  RETURN    ref   
N004 (  4,  4) [000166] ---XG-------              \--*  IND       ref   
N003 (  2,  2) [000216] -------N----                 \--*  ADD       byref 
N001 (  1,  1) [000032] ------------                    +--*  LCL_VAR   ref    V01 loc0         u:2 (last use)
N002 (  1,  1) [000215] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_batches]

N001 [000032]   LCL_VAR   V01 loc0         u:2 (last use) => $180 {JitNew($100, $140)}
N002 [000215]   CNS_INT   8 field offset Fseq[_batches] => $202 {LngCns:  8}
N003 [000216]   ADD       => $245 {ADD($180, $202)}
  VNApplySelectors:
    VNForHandle(_batches) is $105, fieldType is ref
    VNForMapSelect($340, $105):ref returns $19c {$340[$105]}
    VNForMapSelect($19c, $180):ref returns $19d {$19c[$180]}
N004 [000166]   IND       => <l:$1a0 {norm=$19d {$19c[$180]}, exc=$19e {NullPtrExc($180)}}, c:$19f {norm=$148 {148}, exc=$19e {NullPtrExc($180)}}>
N005 [000035]   RETURN    => $149 {149}

***** BB10, STMT00011(after)
N005 (  5,  5) [000035] ---XG-------              *  RETURN    ref    $149
N004 (  4,  4) [000166] ---XG-------              \--*  IND       ref    <l:$1a0, c:$19f>
N003 (  2,  2) [000216] -------N----                 \--*  ADD       byref  $245
N001 (  1,  1) [000032] ------------                    +--*  LCL_VAR   ref    V01 loc0         u:2 (last use) $180
N002 (  1,  1) [000215] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_batches] $202

finish(BB10).

*************** Finishing PHASE Do value numbering

*************** Starting PHASE Hoist loop code

*************** In optHoistLoopCode()
Blocks/Trees before phase

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i label target hascall gcsafe newobj nullcheck 
BB02 [0001]  1       BB01                  1       [00D..00F)-> BB04 (always)                     keep i label gcsafe 
BB03 [0002]  1       BB09                  2     0 [00F..01E)                                     i Loop label target hascall gcsafe bwd bwd-target 
BB04 [0003]  2       BB02,BB03             8     0 [01E..027)-> BB07 ( cond )                     i label target gcsafe bwd 
BB05 [0013]  1       BB04                  1     0 [01E..01F)-> BB07 ( cond )                     i gcsafe bwd 
BB06 [0014]  1       BB05                  2     0 [01E..01F)-> BB09 (always)                     i gcsafe idxlen bwd 
BB07 [0015]  2       BB04,BB05             2     0 [01E..01F)-> BB11 ( cond )                     i label target gcsafe bwd 
BB08 [0019]  1       BB07                  2     0 [01E..01F)                                     i label target gcsafe bwd 
BB09 [0016]  2       BB06,BB08             8     0 [???..???)-> BB03 ( cond )                     internal label target gcsafe bwd 
BB10 [0004]  1       BB09                  1       [027..03E)        (return)                     i gcsafe 
BB11 [0018]  1       BB07                  0       [01E..01F)        (throw )                     i rare label target hascall gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..00D), preds={} succs={BB02}

***** BB01
STMT00000 (IL 0x000...0x005)
N005 ( 16, 16) [000003] -AC-----R---              *  ASG       ref    $180
N004 (  1,  1) [000002] D------N----              +--*  LCL_VAR   ref    V05 tmp1         d:2 $180
N003 ( 16, 16) [000001] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $180
N002 (  2, 10) [000000] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e method $100

***** BB01
STMT00001 (IL   ???...  ???)
N003 ( 15,  8) [000005] --CXG-------              *  CALL      void   Batcher..ctor $VN.Void
N002 (  1,  1) [000004] ------------ this in rcx  \--*  LCL_VAR   ref    V05 tmp1         u:2 $180

***** BB01
STMT00002 (IL 0x005...  ???)
N003 (  1,  3) [000008] -A------R---              *  ASG       ref    $180
N002 (  1,  1) [000007] D------N----              +--*  LCL_VAR   ref    V01 loc0         d:2 $180
N001 (  1,  1) [000006] ------------              \--*  LCL_VAR   ref    V05 tmp1         u:2 (last use) $180

***** BB01
STMT00016 (IL 0x006...  ???)
N003 (  5,  4) [000055] -A------R---              *  ASG       ref    $80
N002 (  3,  2) [000054] D------N----              +--*  LCL_VAR   ref    V13 tmp9         d:2 $80
N001 (  1,  1) [000009] ------------              \--*  LCL_VAR   ref    V00 arg0         u:1 $80

***** BB01
STMT00017 (IL 0x006...  ???)
N003 (  5,  4) [000060] -A------R---              *  ASG       int    $40
N002 (  3,  2) [000059] D------N----              +--*  LCL_VAR   int    V15 tmp11        d:2 $40
N001 (  1,  1) [000058] ------------              \--*  CNS_INT   int    0 $40

***** BB01
STMT00018 (IL 0x006...  ???)
N006 (  8,  7) [000066] -A-XG---R---              *  ASG       int    <l:$283, c:$282>
N005 (  3,  2) [000065] D------N----              +--*  LCL_VAR   int    V16 tmp12        d:2 <l:$281, c:$1c1>
N004 (  4,  4) [000064] ---XG-------              \--*  IND       int    <l:$283, c:$282>
N003 (  2,  2) [000171] -------N----                 \--*  ADD       byref  $240
N001 (  1,  1) [000063] ------------                    +--*  LCL_VAR   ref    V00 arg0         u:1 (last use) $80
N002 (  1,  1) [000170] ------------                    \--*  CNS_INT   long   20 field offset Fseq[_version] $200

***** BB01
STMT00004 (IL   ???...  ???)
N013 (  9,  9) [000186] -A----------              *  COMMA     void   <l:$281, c:$1c1>
N009 (  6,  6) [000182] -A----------              +--*  COMMA     void   $40
N005 (  3,  3) [000178] -A----------              |  +--*  COMMA     void   $2c0
N003 (  3,  3) [000174] -A------R---              |  |  +--*  ASG       ref    $80
N002 (  1,  1) [000172] D------N----              |  |  |  +--*  LCL_VAR   ref    V09 tmp5         d:2 $80
N001 (  3,  2) [000173] ------------              |  |  |  \--*  LCL_VAR   ref    V13 tmp9         u:2 (last use) $80
N004 (  0,  0) [000177] ------------              |  |  \--*  NOP       void   $2c0
N008 (  3,  3) [000181] -A------R---              |  \--*  ASG       int    $40
N007 (  1,  1) [000179] D------N----              |     +--*  LCL_VAR   int    V11 tmp7         d:2 $40
N006 (  3,  2) [000180] ------------              |     \--*  LCL_VAR   int    V15 tmp11        u:2 (last use) $40
N012 (  3,  3) [000185] -A------R---              \--*  ASG       int    <l:$281, c:$1c1>
N011 (  1,  1) [000183] D------N----                 +--*  LCL_VAR   int    V12 tmp8         d:2 <l:$281, c:$1c1>
N010 (  3,  2) [000184] ------------                 \--*  LCL_VAR   int    V16 tmp12        u:2 (last use) <l:$281, c:$1c1>

------------ BB02 [00D..00F) -> BB04 (always), preds={BB01} succs={BB04}

------------ BB03 [00F..01E), preds={BB09} succs={BB04}

***** BB03
STMT00009 (IL 0x017...0x019)
N005 ( 16, 10) [000031] --CXG-------              *  CALL nullcheck void   Batcher.Push $VN.Void
N003 (  1,  1) [000029] ------------ this in rcx  +--*  LCL_VAR   ref    V01 loc0         u:2 $180
N004 (  1,  1) [000030] ------------ arg1 in rdx  \--*  LCL_VAR   ref    V10 tmp6         u:2 (last use) $480

------------ BB04 [01E..027) -> BB07 (cond), preds={BB02,BB03} succs={BB05,BB07}

***** BB04
STMT00034 (IL   ???...  ???)
N005 (  0,  0) [000222] -A------R---              *  ASG       int   
N004 (  0,  0) [000220] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:3
N003 (  0,  0) [000221] ------------              \--*  PHI       int   
N001 (  0,  0) [000230] ------------ pred BB03       +--*  PHI_ARG   int    V11 tmp7         u:4
N002 (  0,  0) [000229] ------------ pred BB02       \--*  PHI_ARG   int    V11 tmp7         u:2 $40

***** BB04
STMT00020 (IL 0x01E...  ???)
N003 (  1,  3) [000083] -A------R---              *  ASG       ref    $80
N002 (  1,  1) [000082] D------N----              +--*  LCL_VAR   ref    V08 tmp4         d:2 $80
N001 (  1,  1) [000081] ------------              \--*  LCL_VAR   ref    V09 tmp5         u:2 $80

***** BB04
STMT00021 (IL 0x01E...  ???)
N007 (  8,  8) [000090] ---XG-------              *  JTRUE     void  
N006 (  6,  6) [000089] N--XG--N-U--              \--*  NE        int    <l:$28c, c:$28b>
N001 (  1,  1) [000086] ------------                 +--*  LCL_VAR   int    V12 tmp8         u:2 <l:$281, c:$1c1>
N005 (  4,  4) [000088] ---XG-------                 \--*  IND       int    <l:$288, c:$287>
N004 (  2,  2) [000190] -------N----                    \--*  ADD       byref  $240
N002 (  1,  1) [000087] ------------                       +--*  LCL_VAR   ref    V09 tmp5         u:2 $80
N003 (  1,  1) [000189] ------------                       \--*  CNS_INT   long   20 field offset Fseq[_version] $200

------------ BB05 [01E..01F) -> BB07 (cond), preds={BB04} succs={BB06,BB07}

***** BB05
STMT00024 (IL 0x01E...  ???)
N007 (  8,  8) [000106] ---XG-------              *  JTRUE     void  
N006 (  6,  6) [000105] N--XG--N-U--              \--*  GE        int    <l:$294, c:$293>
N001 (  1,  1) [000102] ------------                 +--*  LCL_VAR   int    V11 tmp7         u:3 $300
N005 (  4,  4) [000104] ---XG-------                 \--*  IND       int    <l:$290, c:$28f>
N004 (  2,  2) [000192] -------N----                    \--*  ADD       byref  $241
N002 (  1,  1) [000103] ------------                       +--*  LCL_VAR   ref    V08 tmp4         u:2 $80
N003 (  1,  1) [000191] ------------                       \--*  CNS_INT   long   16 field offset Fseq[_size] $201

------------ BB06 [01E..01F) -> BB09 (always), preds={BB05} succs={BB09}

***** BB06
STMT00025 (IL 0x01E...  ???)
N023 ( 18, 22) [000116] -A-XG---R---              *  ASG       ref    <l:$19a, c:$199>
N022 (  1,  1) [000115] D------N----              +--*  LCL_VAR   ref    V10 tmp6         d:4 <l:$194, c:$345>
N021 ( 18, 22) [000207] -A-XG-------              \--*  COMMA     ref    <l:$19a, c:$199>
N006 (  4,  4) [000194] -A-XG---R---                 +--*  ASG       ref    <l:$185, c:$184>
N005 (  1,  1) [000193] D------N----                 |  +--*  LCL_VAR   ref    V17 tmp13        d:2 <l:$183, c:$343>
N004 (  4,  4) [000110] ---XG-------                 |  \--*  IND       ref    <l:$185, c:$184>
N003 (  2,  2) [000209] -------N----                 |     \--*  ADD       byref  $242
N001 (  1,  1) [000109] ------------                 |        +--*  LCL_VAR   ref    V08 tmp4         u:2 (last use) $80
N002 (  1,  1) [000208] ------------                 |        \--*  CNS_INT   long   8 field offset Fseq[_items] $202
N020 ( 14, 18) [000206] ---XG-------                 \--*  COMMA     ref    <l:$196, c:$195>
N010 (  8, 11) [000199] ---X--------                    +--*  ARR_BOUNDS_CHECK_Rng void   <l:$191, c:$190>
N007 (  1,  1) [000113] ------------                    |  +--*  LCL_VAR   int    V11 tmp7         u:3 $300
N009 (  3,  3) [000198] ---X--------                    |  \--*  ARR_LENGTH int    <l:$29e, c:$29d>
N008 (  1,  1) [000195] ------------                    |     \--*  LCL_VAR   ref    V17 tmp13        u:2 <l:$183, c:$343>
N019 (  6,  7) [000114] a---G-------                    \--*  IND       ref    <l:$194, c:$345>
N018 (  5,  6) [000205] -------N----                       \--*  ADD       byref  $440
N011 (  1,  1) [000196] ------------                          +--*  LCL_VAR   ref    V17 tmp13        u:2 (last use) <l:$183, c:$343>
N017 (  4,  5) [000204] -------N----                          \--*  ADD       long   $402
N015 (  3,  4) [000202] -------N----                             +--*  LSH       long   $401
N013 (  2,  3) [000200] ------------                             |  +--*  CAST      long <- int $400
N012 (  1,  1) [000197] i-----------                             |  |  \--*  LCL_VAR   int    V11 tmp7         u:3 $300
N014 (  1,  1) [000201] -------N----                             |  \--*  CNS_INT   long   3 $203
N016 (  1,  1) [000203] ------------                             \--*  CNS_INT   long   16 Fseq[#FirstElem] $201

***** BB06
STMT00026 (IL 0x01E...  ???)
N005 (  3,  3) [000125] -A------R---              *  ASG       int    $29f
N004 (  1,  1) [000124] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:6 $29f
N003 (  3,  3) [000123] ------------              \--*  ADD       int    $29f
N001 (  1,  1) [000121] ------------                 +--*  LCL_VAR   int    V11 tmp7         u:3 (last use) $300
N002 (  1,  1) [000122] ------------                 \--*  CNS_INT   int    1 $44

***** BB06
STMT00027 (IL 0x01E...  ???)
N003 (  1,  3) [000129] -A------R---              *  ASG       bool   $44
N002 (  1,  1) [000128] D------N----              +--*  LCL_VAR   int    V07 tmp3         d:4 $44
N001 (  1,  1) [000126] ------------              \--*  CNS_INT   int    1 $44

------------ BB07 [01E..01F) -> BB11 (cond), preds={BB04,BB05} succs={BB08,BB11}

***** BB07
STMT00029 (IL 0x01E...  ???)
N007 (  8,  8) [000143] ---XG-------              *  JTRUE     void  
N006 (  6,  6) [000142] J--XG--N----              \--*  NE        int    <l:$28c, c:$297>
N001 (  1,  1) [000137] ------------                 +--*  LCL_VAR   int    V12 tmp8         u:2 <l:$281, c:$1c1>
N005 (  4,  4) [000141] ---XG-------                 \--*  IND       int    <l:$288, c:$295>
N004 (  2,  2) [000211] -------N----                    \--*  ADD       byref  $240
N002 (  1,  1) [000140] ------------                       +--*  LCL_VAR   ref    V09 tmp5         u:2 $80
N003 (  1,  1) [000210] ------------                       \--*  CNS_INT   long   20 field offset Fseq[_version] $200

------------ BB08 [01E..01F), preds={BB07} succs={BB09}

***** BB08
STMT00030 (IL 0x01E...  ???)
N008 (  6,  6) [000153] -A-XG---R---              *  ASG       int    <l:$29c, c:$29b>
N007 (  1,  1) [000152] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:5 <l:$29a, c:$299>
N006 (  6,  6) [000151] ---XG-------              \--*  ADD       int    <l:$29c, c:$29b>
N004 (  4,  4) [000149] ---XG-------                 +--*  IND       int    <l:$290, c:$298>
N003 (  2,  2) [000213] -------N----                 |  \--*  ADD       byref  $241
N001 (  1,  1) [000148] ------------                 |     +--*  LCL_VAR   ref    V09 tmp5         u:2 $80
N002 (  1,  1) [000212] ------------                 |     \--*  CNS_INT   long   16 field offset Fseq[_size] $201
N005 (  1,  1) [000150] ------------                 \--*  CNS_INT   int    1 $44

***** BB08
STMT00031 (IL 0x01E...  ???)
N003 (  1,  3) [000160] -A------R---              *  ASG       ref    $VN.Null
N002 (  1,  1) [000156] D------N----              +--*  LCL_VAR   ref    V10 tmp6         d:3 $VN.Null
N001 (  1,  1) [000158] ------------              \--*  CNS_INT   ref    null $VN.Null

***** BB08
STMT00023 (IL 0x01E...  ???)
N003 (  1,  3) [000098] -A------R---              *  ASG       bool   $40
N002 (  1,  1) [000097] D------N----              +--*  LCL_VAR   int    V07 tmp3         d:3 $40
N001 (  1,  1) [000096] ------------              \--*  CNS_INT   int    0 $40

------------ BB09 [???..???) -> BB03 (cond), preds={BB06,BB08} succs={BB10,BB03}

***** BB09
STMT00036 (IL   ???...  ???)
N005 (  0,  0) [000228] -A------R---              *  ASG       ref   
N004 (  0,  0) [000226] D------N----              +--*  LCL_VAR   ref    V10 tmp6         d:2
N003 (  0,  0) [000227] ------------              \--*  PHI       ref   
N001 (  0,  0) [000234] ------------ pred BB06       +--*  PHI_ARG   ref    V10 tmp6         u:4 <l:$194, c:$345>
N002 (  0,  0) [000231] ------------ pred BB08       \--*  PHI_ARG   ref    V10 tmp6         u:3 $VN.Null

***** BB09
STMT00035 (IL   ???...  ???)
N005 (  0,  0) [000225] -A------R---              *  ASG       bool  
N004 (  0,  0) [000223] D------N----              +--*  LCL_VAR   bool   V07 tmp3         d:2
N003 (  0,  0) [000224] ------------              \--*  PHI       bool  
N001 (  0,  0) [000235] ------------ pred BB06       +--*  PHI_ARG   bool   V07 tmp3         u:4 $44
N002 (  0,  0) [000232] ------------ pred BB08       \--*  PHI_ARG   bool   V07 tmp3         u:3 $40

***** BB09
STMT00033 (IL   ???...  ???)
N005 (  0,  0) [000219] -A------R---              *  ASG       int   
N004 (  0,  0) [000217] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:4
N003 (  0,  0) [000218] ------------              \--*  PHI       int   
N001 (  0,  0) [000236] ------------ pred BB06       +--*  PHI_ARG   int    V11 tmp7         u:6 $29f
N002 (  0,  0) [000233] ------------ pred BB08       \--*  PHI_ARG   int    V11 tmp7         u:5 <l:$29a, c:$299>

***** BB09
STMT00006 (IL   ???...  ???)
N004 (  5,  5) [000021] ------------              *  JTRUE     void  
N003 (  3,  3) [000020] J------N----              \--*  NE        int    $2a1
N001 (  1,  1) [000130] ------------                 +--*  LCL_VAR   bool   V07 tmp3         u:2 (last use) $4c0
N002 (  1,  1) [000019] ------------                 \--*  CNS_INT   int    0 $40

------------ BB10 [027..03E) (return), preds={BB09} succs={}

***** BB10
STMT00011 (IL   ???...  ???)
N005 (  5,  5) [000035] ---XG-------              *  RETURN    ref    $149
N004 (  4,  4) [000166] ---XG-------              \--*  IND       ref    <l:$1a0, c:$19f>
N003 (  2,  2) [000216] -------N----                 \--*  ADD       byref  $245
N001 (  1,  1) [000032] ------------                    +--*  LCL_VAR   ref    V01 loc0         u:2 (last use) $180
N002 (  1,  1) [000215] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_batches] $202

------------ BB11 [01E..01F) (throw), preds={BB07} succs={}

***** BB11
STMT00032 (IL 0x01E...  ???)
N001 ( 14,  5) [000163] --CXG-------              *  CALL      void   System.ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion $VN.Void

-------------------------------------------------------------------------------------------------------------------

*************** Finishing PHASE Hoist loop code

*************** Starting PHASE VN based copy prop
*************** In optVnCopyProp()
Copy Assertion for BB01
  curSsaName stack: { }

							Live vars: {V00} => {V00 V05}
							Live vars: {V00 V05} => {V00}
							Live vars: {V00} => {V00 V01}
							Live vars: {V00 V01} => {V00 V01 V13}
							Live vars: {V00 V01 V13} => {V00 V01 V13 V15}
							Live vars: {V00 V01 V13 V15} => {V01 V13 V15}
VN based copy assertion for [000063] V00 @00000080 by [000054] V13 @00000080.
N001 (  1,  1) [000063] ------------              *  LCL_VAR   ref    V00 arg0         u:1 (last use) $80
copy propagated to:
N001 (  1,  1) [000063] ------------              *  LCL_VAR   ref    V13 tmp9         u:2 (last use) $80
							Live vars: {V01 V13 V15} => {V01 V13 V15 V16}
							Live vars: {V01 V13 V15 V16} => {V01 V15 V16}
							Live vars: {V01 V15 V16} => {V01 V09 V15 V16}
							Live vars: {V01 V09 V15 V16} => {V01 V09 V16}
							Live vars: {V01 V09 V16} => {V01 V09 V11 V16}
							Live vars: {V01 V09 V11 V16} => {V01 V09 V11}
							Live vars: {V01 V09 V11} => {V01 V09 V11 V12}
Copy Assertion for BB02
  curSsaName stack: { 0-[000009]:V00 1-[000007]:V01 5-[000002]:V05 9-[000172]:V09 11-[000179]:V11 12-[000183]:V12 13-[000054]:V13 15-[000059]:V15 16-[000065]:V16 }

Copy Assertion for BB04
  curSsaName stack: { 0-[000009]:V00 1-[000007]:V01 5-[000002]:V05 9-[000172]:V09 11-[000179]:V11 12-[000183]:V12 13-[000054]:V13 15-[000059]:V15 16-[000065]:V16 }

							Live vars: {V01 V09 V11 V12} => {V01 V08 V09 V11 V12}
VN based copy assertion for [000087] V09 @00000080 by [000082] V08 @00000080.
N002 (  1,  1) [000087] ------------              *  LCL_VAR   ref    V09 tmp5         u:2 $80
copy propagated to:
N002 (  1,  1) [000087] ------------              *  LCL_VAR   ref    V08 tmp4         u:2 $80
Copy Assertion for BB09
  curSsaName stack: { 0-[000009]:V00 1-[000007]:V01 5-[000002]:V05 8-[000082]:V08 9-[000172]:V09 11-[000220]:V11 12-[000183]:V12 13-[000054]:V13 15-[000059]:V15 16-[000065]:V16 }

							Live vars: {V01 V07 V09 V10 V11 V12} => {V01 V09 V10 V11 V12}
Copy Assertion for BB10
  curSsaName stack: { 0-[000009]:V00 1-[000007]:V01 5-[000002]:V05 7-[000223]:V07 8-[000082]:V08 9-[000172]:V09 10-[000226]:V10 11-[000217]:V11 12-[000183]:V12 13-[000054]:V13 15-[000059]:V15 16-[000065]:V16 }

							Live vars: {V01} => {}
Copy Assertion for BB03
  curSsaName stack: { 0-[000009]:V00 1-[000007]:V01 5-[000002]:V05 7-[000223]:V07 8-[000082]:V08 9-[000172]:V09 10-[000226]:V10 11-[000217]:V11 12-[000183]:V12 13-[000054]:V13 15-[000059]:V15 16-[000065]:V16 }

							Live vars: {V01 V09 V10 V11 V12} => {V01 V09 V11 V12}
Copy Assertion for BB07
  curSsaName stack: { 0-[000009]:V00 1-[000007]:V01 5-[000002]:V05 8-[000082]:V08 9-[000172]:V09 11-[000220]:V11 12-[000183]:V12 13-[000054]:V13 15-[000059]:V15 16-[000065]:V16 }

Copy Assertion for BB11
  curSsaName stack: { 0-[000009]:V00 1-[000007]:V01 5-[000002]:V05 8-[000082]:V08 9-[000172]:V09 11-[000220]:V11 12-[000183]:V12 13-[000054]:V13 15-[000059]:V15 16-[000065]:V16 }

Copy Assertion for BB08
  curSsaName stack: { 0-[000009]:V00 1-[000007]:V01 5-[000002]:V05 8-[000082]:V08 9-[000172]:V09 11-[000220]:V11 12-[000183]:V12 13-[000054]:V13 15-[000059]:V15 16-[000065]:V16 }

							Live vars: {V01 V09 V12} => {V01 V09 V11 V12}
							Live vars: {V01 V09 V11 V12} => {V01 V09 V10 V11 V12}
							Live vars: {V01 V09 V10 V11 V12} => {V01 V07 V09 V10 V11 V12}
Copy Assertion for BB05
  curSsaName stack: { 0-[000009]:V00 1-[000007]:V01 5-[000002]:V05 8-[000082]:V08 9-[000172]:V09 11-[000220]:V11 12-[000183]:V12 13-[000054]:V13 15-[000059]:V15 16-[000065]:V16 }

VN based copy assertion for [000103] V08 @00000080 by [000172] V09 @00000080.
N002 (  1,  1) [000103] ------------              *  LCL_VAR   ref    V08 tmp4         u:2 $80
copy propagated to:
N002 (  1,  1) [000103] ------------              *  LCL_VAR   ref    V09 tmp5         u:2 $80
Copy Assertion for BB06
  curSsaName stack: { 0-[000009]:V00 1-[000007]:V01 5-[000002]:V05 8-[000082]:V08 9-[000172]:V09 11-[000220]:V11 12-[000183]:V12 13-[000054]:V13 15-[000059]:V15 16-[000065]:V16 }

							Live vars: {V01 V08 V09 V11 V12} => {V01 V09 V11 V12}
VN based copy assertion for [000109] V08 @00000080 by [000172] V09 @00000080.
N001 (  1,  1) [000109] ------------              *  LCL_VAR   ref    V08 tmp4         u:2 (last use) $80
copy propagated to:
N001 (  1,  1) [000109] ------------              *  LCL_VAR   ref    V09 tmp5         u:2 (last use) $80
							Live vars: {V01 V09 V11 V12} => {V01 V09 V11 V12 V17}
							Live vars: {V01 V09 V11 V12 V17} => {V01 V09 V11 V12}
							Live vars: {V01 V09 V11 V12} => {V01 V09 V10 V11 V12}
							Live vars: {V01 V09 V10 V11 V12} => {V01 V09 V10 V12}
							Live vars: {V01 V09 V10 V12} => {V01 V09 V10 V11 V12}
							Live vars: {V01 V09 V10 V11 V12} => {V01 V07 V09 V10 V11 V12}

*************** Finishing PHASE VN based copy prop

*************** Starting PHASE Optimize Valnum CSEs

*************** In optOptimizeCSEs()
Blocks/Trees at start of optOptimizeCSE phase

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i label target hascall gcsafe newobj nullcheck 
BB02 [0001]  1       BB01                  1       [00D..00F)-> BB04 (always)                     keep i label gcsafe 
BB03 [0002]  1       BB09                  2     0 [00F..01E)                                     i Loop label target hascall gcsafe bwd bwd-target 
BB04 [0003]  2       BB02,BB03             8     0 [01E..027)-> BB07 ( cond )                     i label target gcsafe bwd 
BB05 [0013]  1       BB04                  1     0 [01E..01F)-> BB07 ( cond )                     i gcsafe bwd 
BB06 [0014]  1       BB05                  2     0 [01E..01F)-> BB09 (always)                     i gcsafe idxlen bwd 
BB07 [0015]  2       BB04,BB05             2     0 [01E..01F)-> BB11 ( cond )                     i label target gcsafe bwd 
BB08 [0019]  1       BB07                  2     0 [01E..01F)                                     i label target gcsafe bwd 
BB09 [0016]  2       BB06,BB08             8     0 [???..???)-> BB03 ( cond )                     internal label target gcsafe bwd 
BB10 [0004]  1       BB09                  1       [027..03E)        (return)                     i gcsafe 
BB11 [0018]  1       BB07                  0       [01E..01F)        (throw )                     i rare label target hascall gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..00D), preds={} succs={BB02}

***** BB01
STMT00000 (IL 0x000...0x005)
N005 ( 16, 16) [000003] -AC-----R---              *  ASG       ref    $180
N004 (  1,  1) [000002] D------N----              +--*  LCL_VAR   ref    V05 tmp1         d:2 $180
N003 ( 16, 16) [000001] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $180
N002 (  2, 10) [000000] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e method $100

***** BB01
STMT00001 (IL   ???...  ???)
N003 ( 15,  8) [000005] --CXG-------              *  CALL      void   Batcher..ctor $VN.Void
N002 (  1,  1) [000004] ------------ this in rcx  \--*  LCL_VAR   ref    V05 tmp1         u:2 $180

***** BB01
STMT00002 (IL 0x005...  ???)
N003 (  1,  3) [000008] -A------R---              *  ASG       ref    $180
N002 (  1,  1) [000007] D------N----              +--*  LCL_VAR   ref    V01 loc0         d:2 $180
N001 (  1,  1) [000006] ------------              \--*  LCL_VAR   ref    V05 tmp1         u:2 (last use) $180

***** BB01
STMT00016 (IL 0x006...  ???)
N003 (  5,  4) [000055] -A------R---              *  ASG       ref    $80
N002 (  3,  2) [000054] D------N----              +--*  LCL_VAR   ref    V13 tmp9         d:2 $80
N001 (  1,  1) [000009] ------------              \--*  LCL_VAR   ref    V00 arg0         u:1 $80

***** BB01
STMT00017 (IL 0x006...  ???)
N003 (  5,  4) [000060] -A------R---              *  ASG       int    $40
N002 (  3,  2) [000059] D------N----              +--*  LCL_VAR   int    V15 tmp11        d:2 $40
N001 (  1,  1) [000058] ------------              \--*  CNS_INT   int    0 $40

***** BB01
STMT00018 (IL 0x006...  ???)
N006 (  8,  7) [000066] -A-XG---R---              *  ASG       int    <l:$283, c:$282>
N005 (  3,  2) [000065] D------N----              +--*  LCL_VAR   int    V16 tmp12        d:2 <l:$281, c:$1c1>
N004 (  4,  4) [000064] ---XG-------              \--*  IND       int    <l:$283, c:$282>
N003 (  2,  2) [000171] -------N----                 \--*  ADD       byref  $240
N001 (  1,  1) [000063] ------------                    +--*  LCL_VAR   ref    V13 tmp9         u:2 (last use) $80
N002 (  1,  1) [000170] ------------                    \--*  CNS_INT   long   20 field offset Fseq[_version] $200

***** BB01
STMT00004 (IL   ???...  ???)
N013 (  9,  9) [000186] -A----------              *  COMMA     void   <l:$281, c:$1c1>
N009 (  6,  6) [000182] -A----------              +--*  COMMA     void   $40
N005 (  3,  3) [000178] -A----------              |  +--*  COMMA     void   $2c0
N003 (  3,  3) [000174] -A------R---              |  |  +--*  ASG       ref    $80
N002 (  1,  1) [000172] D------N----              |  |  |  +--*  LCL_VAR   ref    V09 tmp5         d:2 $80
N001 (  3,  2) [000173] ------------              |  |  |  \--*  LCL_VAR   ref    V13 tmp9         u:2 (last use) $80
N004 (  0,  0) [000177] ------------              |  |  \--*  NOP       void   $2c0
N008 (  3,  3) [000181] -A------R---              |  \--*  ASG       int    $40
N007 (  1,  1) [000179] D------N----              |     +--*  LCL_VAR   int    V11 tmp7         d:2 $40
N006 (  3,  2) [000180] ------------              |     \--*  LCL_VAR   int    V15 tmp11        u:2 (last use) $40
N012 (  3,  3) [000185] -A------R---              \--*  ASG       int    <l:$281, c:$1c1>
N011 (  1,  1) [000183] D------N----                 +--*  LCL_VAR   int    V12 tmp8         d:2 <l:$281, c:$1c1>
N010 (  3,  2) [000184] ------------                 \--*  LCL_VAR   int    V16 tmp12        u:2 (last use) <l:$281, c:$1c1>

------------ BB02 [00D..00F) -> BB04 (always), preds={BB01} succs={BB04}

------------ BB03 [00F..01E), preds={BB09} succs={BB04}

***** BB03
STMT00009 (IL 0x017...0x019)
N005 ( 16, 10) [000031] --CXG-------              *  CALL nullcheck void   Batcher.Push $VN.Void
N003 (  1,  1) [000029] ------------ this in rcx  +--*  LCL_VAR   ref    V01 loc0         u:2 $180
N004 (  1,  1) [000030] ------------ arg1 in rdx  \--*  LCL_VAR   ref    V10 tmp6         u:2 (last use) $480

------------ BB04 [01E..027) -> BB07 (cond), preds={BB02,BB03} succs={BB05,BB07}

***** BB04
STMT00034 (IL   ???...  ???)
N005 (  0,  0) [000222] -A------R---              *  ASG       int   
N004 (  0,  0) [000220] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:3
N003 (  0,  0) [000221] ------------              \--*  PHI       int   
N001 (  0,  0) [000230] ------------ pred BB03       +--*  PHI_ARG   int    V11 tmp7         u:4
N002 (  0,  0) [000229] ------------ pred BB02       \--*  PHI_ARG   int    V11 tmp7         u:2 $40

***** BB04
STMT00020 (IL 0x01E...  ???)
N003 (  1,  3) [000083] -A------R---              *  ASG       ref    $80
N002 (  1,  1) [000082] D------N----              +--*  LCL_VAR   ref    V08 tmp4         d:2 $80
N001 (  1,  1) [000081] ------------              \--*  LCL_VAR   ref    V09 tmp5         u:2 $80

***** BB04
STMT00021 (IL 0x01E...  ???)
N007 (  8,  8) [000090] ---XG-------              *  JTRUE     void  
N006 (  6,  6) [000089] N--XG--N-U--              \--*  NE        int    <l:$28c, c:$28b>
N001 (  1,  1) [000086] ------------                 +--*  LCL_VAR   int    V12 tmp8         u:2 <l:$281, c:$1c1>
N005 (  4,  4) [000088] ---XG-------                 \--*  IND       int    <l:$288, c:$287>
N004 (  2,  2) [000190] -------N----                    \--*  ADD       byref  $240
N002 (  1,  1) [000087] ------------                       +--*  LCL_VAR   ref    V08 tmp4         u:2 $80
N003 (  1,  1) [000189] ------------                       \--*  CNS_INT   long   20 field offset Fseq[_version] $200

------------ BB05 [01E..01F) -> BB07 (cond), preds={BB04} succs={BB06,BB07}

***** BB05
STMT00024 (IL 0x01E...  ???)
N007 (  8,  8) [000106] ---XG-------              *  JTRUE     void  
N006 (  6,  6) [000105] N--XG--N-U--              \--*  GE        int    <l:$294, c:$293>
N001 (  1,  1) [000102] ------------                 +--*  LCL_VAR   int    V11 tmp7         u:3 $300
N005 (  4,  4) [000104] ---XG-------                 \--*  IND       int    <l:$290, c:$28f>
N004 (  2,  2) [000192] -------N----                    \--*  ADD       byref  $241
N002 (  1,  1) [000103] ------------                       +--*  LCL_VAR   ref    V09 tmp5         u:2 $80
N003 (  1,  1) [000191] ------------                       \--*  CNS_INT   long   16 field offset Fseq[_size] $201

------------ BB06 [01E..01F) -> BB09 (always), preds={BB05} succs={BB09}

***** BB06
STMT00025 (IL 0x01E...  ???)
N023 ( 18, 22) [000116] -A-XG---R---              *  ASG       ref    <l:$19a, c:$199>
N022 (  1,  1) [000115] D------N----              +--*  LCL_VAR   ref    V10 tmp6         d:4 <l:$194, c:$345>
N021 ( 18, 22) [000207] -A-XG-------              \--*  COMMA     ref    <l:$19a, c:$199>
N006 (  4,  4) [000194] -A-XG---R---                 +--*  ASG       ref    <l:$185, c:$184>
N005 (  1,  1) [000193] D------N----                 |  +--*  LCL_VAR   ref    V17 tmp13        d:2 <l:$183, c:$343>
N004 (  4,  4) [000110] ---XG-------                 |  \--*  IND       ref    <l:$185, c:$184>
N003 (  2,  2) [000209] -------N----                 |     \--*  ADD       byref  $242
N001 (  1,  1) [000109] ------------                 |        +--*  LCL_VAR   ref    V09 tmp5         u:2 (last use) $80
N002 (  1,  1) [000208] ------------                 |        \--*  CNS_INT   long   8 field offset Fseq[_items] $202
N020 ( 14, 18) [000206] ---XG-------                 \--*  COMMA     ref    <l:$196, c:$195>
N010 (  8, 11) [000199] ---X--------                    +--*  ARR_BOUNDS_CHECK_Rng void   <l:$191, c:$190>
N007 (  1,  1) [000113] ------------                    |  +--*  LCL_VAR   int    V11 tmp7         u:3 $300
N009 (  3,  3) [000198] ---X--------                    |  \--*  ARR_LENGTH int    <l:$29e, c:$29d>
N008 (  1,  1) [000195] ------------                    |     \--*  LCL_VAR   ref    V17 tmp13        u:2 <l:$183, c:$343>
N019 (  6,  7) [000114] a---G-------                    \--*  IND       ref    <l:$194, c:$345>
N018 (  5,  6) [000205] -------N----                       \--*  ADD       byref  $440
N011 (  1,  1) [000196] ------------                          +--*  LCL_VAR   ref    V17 tmp13        u:2 (last use) <l:$183, c:$343>
N017 (  4,  5) [000204] -------N----                          \--*  ADD       long   $402
N015 (  3,  4) [000202] -------N----                             +--*  LSH       long   $401
N013 (  2,  3) [000200] ------------                             |  +--*  CAST      long <- int $400
N012 (  1,  1) [000197] i-----------                             |  |  \--*  LCL_VAR   int    V11 tmp7         u:3 $300
N014 (  1,  1) [000201] -------N----                             |  \--*  CNS_INT   long   3 $203
N016 (  1,  1) [000203] ------------                             \--*  CNS_INT   long   16 Fseq[#FirstElem] $201

***** BB06
STMT00026 (IL 0x01E...  ???)
N005 (  3,  3) [000125] -A------R---              *  ASG       int    $29f
N004 (  1,  1) [000124] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:6 $29f
N003 (  3,  3) [000123] ------------              \--*  ADD       int    $29f
N001 (  1,  1) [000121] ------------                 +--*  LCL_VAR   int    V11 tmp7         u:3 (last use) $300
N002 (  1,  1) [000122] ------------                 \--*  CNS_INT   int    1 $44

***** BB06
STMT00027 (IL 0x01E...  ???)
N003 (  1,  3) [000129] -A------R---              *  ASG       bool   $44
N002 (  1,  1) [000128] D------N----              +--*  LCL_VAR   int    V07 tmp3         d:4 $44
N001 (  1,  1) [000126] ------------              \--*  CNS_INT   int    1 $44

------------ BB07 [01E..01F) -> BB11 (cond), preds={BB04,BB05} succs={BB08,BB11}

***** BB07
STMT00029 (IL 0x01E...  ???)
N007 (  8,  8) [000143] ---XG-------              *  JTRUE     void  
N006 (  6,  6) [000142] J--XG--N----              \--*  NE        int    <l:$28c, c:$297>
N001 (  1,  1) [000137] ------------                 +--*  LCL_VAR   int    V12 tmp8         u:2 <l:$281, c:$1c1>
N005 (  4,  4) [000141] ---XG-------                 \--*  IND       int    <l:$288, c:$295>
N004 (  2,  2) [000211] -------N----                    \--*  ADD       byref  $240
N002 (  1,  1) [000140] ------------                       +--*  LCL_VAR   ref    V09 tmp5         u:2 $80
N003 (  1,  1) [000210] ------------                       \--*  CNS_INT   long   20 field offset Fseq[_version] $200

------------ BB08 [01E..01F), preds={BB07} succs={BB09}

***** BB08
STMT00030 (IL 0x01E...  ???)
N008 (  6,  6) [000153] -A-XG---R---              *  ASG       int    <l:$29c, c:$29b>
N007 (  1,  1) [000152] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:5 <l:$29a, c:$299>
N006 (  6,  6) [000151] ---XG-------              \--*  ADD       int    <l:$29c, c:$29b>
N004 (  4,  4) [000149] ---XG-------                 +--*  IND       int    <l:$290, c:$298>
N003 (  2,  2) [000213] -------N----                 |  \--*  ADD       byref  $241
N001 (  1,  1) [000148] ------------                 |     +--*  LCL_VAR   ref    V09 tmp5         u:2 $80
N002 (  1,  1) [000212] ------------                 |     \--*  CNS_INT   long   16 field offset Fseq[_size] $201
N005 (  1,  1) [000150] ------------                 \--*  CNS_INT   int    1 $44

***** BB08
STMT00031 (IL 0x01E...  ???)
N003 (  1,  3) [000160] -A------R---              *  ASG       ref    $VN.Null
N002 (  1,  1) [000156] D------N----              +--*  LCL_VAR   ref    V10 tmp6         d:3 $VN.Null
N001 (  1,  1) [000158] ------------              \--*  CNS_INT   ref    null $VN.Null

***** BB08
STMT00023 (IL 0x01E...  ???)
N003 (  1,  3) [000098] -A------R---              *  ASG       bool   $40
N002 (  1,  1) [000097] D------N----              +--*  LCL_VAR   int    V07 tmp3         d:3 $40
N001 (  1,  1) [000096] ------------              \--*  CNS_INT   int    0 $40

------------ BB09 [???..???) -> BB03 (cond), preds={BB06,BB08} succs={BB10,BB03}

***** BB09
STMT00036 (IL   ???...  ???)
N005 (  0,  0) [000228] -A------R---              *  ASG       ref   
N004 (  0,  0) [000226] D------N----              +--*  LCL_VAR   ref    V10 tmp6         d:2
N003 (  0,  0) [000227] ------------              \--*  PHI       ref   
N001 (  0,  0) [000234] ------------ pred BB06       +--*  PHI_ARG   ref    V10 tmp6         u:4 <l:$194, c:$345>
N002 (  0,  0) [000231] ------------ pred BB08       \--*  PHI_ARG   ref    V10 tmp6         u:3 $VN.Null

***** BB09
STMT00035 (IL   ???...  ???)
N005 (  0,  0) [000225] -A------R---              *  ASG       bool  
N004 (  0,  0) [000223] D------N----              +--*  LCL_VAR   bool   V07 tmp3         d:2
N003 (  0,  0) [000224] ------------              \--*  PHI       bool  
N001 (  0,  0) [000235] ------------ pred BB06       +--*  PHI_ARG   bool   V07 tmp3         u:4 $44
N002 (  0,  0) [000232] ------------ pred BB08       \--*  PHI_ARG   bool   V07 tmp3         u:3 $40

***** BB09
STMT00033 (IL   ???...  ???)
N005 (  0,  0) [000219] -A------R---              *  ASG       int   
N004 (  0,  0) [000217] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:4
N003 (  0,  0) [000218] ------------              \--*  PHI       int   
N001 (  0,  0) [000236] ------------ pred BB06       +--*  PHI_ARG   int    V11 tmp7         u:6 $29f
N002 (  0,  0) [000233] ------------ pred BB08       \--*  PHI_ARG   int    V11 tmp7         u:5 <l:$29a, c:$299>

***** BB09
STMT00006 (IL   ???...  ???)
N004 (  5,  5) [000021] ------------              *  JTRUE     void  
N003 (  3,  3) [000020] J------N----              \--*  NE        int    $2a1
N001 (  1,  1) [000130] ------------                 +--*  LCL_VAR   bool   V07 tmp3         u:2 (last use) $4c0
N002 (  1,  1) [000019] ------------                 \--*  CNS_INT   int    0 $40

------------ BB10 [027..03E) (return), preds={BB09} succs={}

***** BB10
STMT00011 (IL   ???...  ???)
N005 (  5,  5) [000035] ---XG-------              *  RETURN    ref    $149
N004 (  4,  4) [000166] ---XG-------              \--*  IND       ref    <l:$1a0, c:$19f>
N003 (  2,  2) [000216] -------N----                 \--*  ADD       byref  $245
N001 (  1,  1) [000032] ------------                    +--*  LCL_VAR   ref    V01 loc0         u:2 (last use) $180
N002 (  1,  1) [000215] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_batches] $202

------------ BB11 [01E..01F) (throw), preds={BB07} succs={}

***** BB11
STMT00032 (IL 0x01E...  ???)
N001 ( 14,  5) [000163] --CXG-------              *  CALL      void   System.ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion $VN.Void

-------------------------------------------------------------------------------------------------------------------

*************** In optOptimizeValnumCSEs()

CSE candidate #01, key=$286 in BB07, [cost= 4, size= 4]: 
N005 (  4,  4) CSE #01 (use)[000141] ---XG-------              *  IND       int    <l:$288, c:$295>
N004 (  2,  2)              [000211] -------N----              \--*  ADD       byref  $240
N002 (  1,  1)              [000140] ------------                 +--*  LCL_VAR   ref    V09 tmp5         u:2 $80
N003 (  1,  1)              [000210] ------------                 \--*  CNS_INT   long   20 field offset Fseq[_version] $200

CSE candidate #02, key=$28e in BB08, [cost= 4, size= 4]: 
N004 (  4,  4) CSE #02 (use)[000149] ---XG-------              *  IND       int    <l:$290, c:$298>
N003 (  2,  2)              [000213] -------N----              \--*  ADD       byref  $241
N001 (  1,  1)              [000148] ------------                 +--*  LCL_VAR   ref    V09 tmp5         u:2 $80
N002 (  1,  1)              [000212] ------------                 \--*  CNS_INT   long   16 field offset Fseq[_size] $201

Blocks that generate CSE def/uses
BB04 cseGen = 0000000000000003
BB05 cseGen = 000000000000000C
BB07 cseGen = 0000000000000003
BB08 cseGen = 000000000000000C

Performing DataFlow for ValnumCSE's
StartMerge BB01
  :: cseOut    = 000000000000001F
EndMerge BB01
  :: cseIn     = 0000000000000000
  :: cseGen    = 0000000000000000
  => cseOut    = 0000000000000000
  != preMerge  = 000000000000001F, => true
StartMerge BB02
  :: cseOut    = 000000000000001F
Merge BB02 and BB01
  :: cseIn     = 000000000000001F
  :: cseOut    = 000000000000001F
  => cseIn     = 0000000000000000
EndMerge BB02
  :: cseIn     = 0000000000000000
  :: cseGen    = 0000000000000000
  => cseOut    = 0000000000000000
  != preMerge  = 000000000000001F, => true
StartMerge BB04
  :: cseOut    = 000000000000001F
Merge BB04 and BB02
  :: cseIn     = 000000000000001F
  :: cseOut    = 000000000000001F
  => cseIn     = 0000000000000000
Merge BB04 and BB03
  :: cseIn     = 0000000000000000
  :: cseOut    = 000000000000001F
  => cseIn     = 0000000000000000
EndMerge BB04
  :: cseIn     = 0000000000000000
  :: cseGen    = 0000000000000003
  => cseOut    = 0000000000000003
  != preMerge  = 000000000000001F, => true
StartMerge BB05
  :: cseOut    = 000000000000001F
Merge BB05 and BB04
  :: cseIn     = 000000000000001F
  :: cseOut    = 000000000000001F
  => cseIn     = 0000000000000003
EndMerge BB05
  :: cseIn     = 0000000000000003
  :: cseGen    = 000000000000000C
  => cseOut    = 000000000000000F
  != preMerge  = 000000000000001F, => true
StartMerge BB07
  :: cseOut    = 000000000000001F
Merge BB07 and BB04
  :: cseIn     = 000000000000001F
  :: cseOut    = 000000000000001F
  => cseIn     = 0000000000000003
Merge BB07 and BB05
  :: cseIn     = 0000000000000003
  :: cseOut    = 000000000000001F
  => cseIn     = 0000000000000003
EndMerge BB07
  :: cseIn     = 0000000000000003
  :: cseGen    = 0000000000000003
  => cseOut    = 0000000000000003
  != preMerge  = 000000000000001F, => true
StartMerge BB06
  :: cseOut    = 000000000000001F
Merge BB06 and BB05
  :: cseIn     = 000000000000001F
  :: cseOut    = 000000000000001F
  => cseIn     = 000000000000000F
EndMerge BB06
  :: cseIn     = 000000000000000F
  :: cseGen    = 0000000000000000
  => cseOut    = 000000000000000F
  != preMerge  = 000000000000001F, => true
StartMerge BB07
  :: cseOut    = 0000000000000003
Merge BB07 and BB04
  :: cseIn     = 0000000000000003
  :: cseOut    = 0000000000000003
  => cseIn     = 0000000000000003
Merge BB07 and BB05
  :: cseIn     = 0000000000000003
  :: cseOut    = 0000000000000003
  => cseIn     = 0000000000000003
EndMerge BB07
  :: cseIn     = 0000000000000003
  :: cseGen    = 0000000000000003
  => cseOut    = 0000000000000003
  != preMerge  = 0000000000000003, => false
StartMerge BB08
  :: cseOut    = 000000000000001F
Merge BB08 and BB07
  :: cseIn     = 000000000000001F
  :: cseOut    = 000000000000001F
  => cseIn     = 0000000000000003
EndMerge BB08
  :: cseIn     = 0000000000000003
  :: cseGen    = 000000000000000C
  => cseOut    = 000000000000000F
  != preMerge  = 000000000000001F, => true
StartMerge BB11
  :: cseOut    = 000000000000001F
Merge BB11 and BB07
  :: cseIn     = 000000000000001F
  :: cseOut    = 000000000000001F
  => cseIn     = 0000000000000003
EndMerge BB11
  :: cseIn     = 0000000000000003
  -- cseKill   = 0000000000000005
  :: cseGen    = 0000000000000000
  => cseOut    = 0000000000000001
  != preMerge  = 000000000000001F, => true
StartMerge BB09
  :: cseOut    = 000000000000001F
Merge BB09 and BB06
  :: cseIn     = 000000000000001F
  :: cseOut    = 000000000000001F
  => cseIn     = 000000000000000F
Merge BB09 and BB08
  :: cseIn     = 000000000000000F
  :: cseOut    = 000000000000001F
  => cseIn     = 000000000000000F
EndMerge BB09
  :: cseIn     = 000000000000000F
  :: cseGen    = 0000000000000000
  => cseOut    = 000000000000000F
  != preMerge  = 000000000000001F, => true
StartMerge BB09
  :: cseOut    = 000000000000000F
Merge BB09 and BB06
  :: cseIn     = 000000000000000F
  :: cseOut    = 000000000000000F
  => cseIn     = 000000000000000F
Merge BB09 and BB08
  :: cseIn     = 000000000000000F
  :: cseOut    = 000000000000000F
  => cseIn     = 000000000000000F
EndMerge BB09
  :: cseIn     = 000000000000000F
  :: cseGen    = 0000000000000000
  => cseOut    = 000000000000000F
  != preMerge  = 000000000000000F, => false
StartMerge BB10
  :: cseOut    = 000000000000001F
Merge BB10 and BB09
  :: cseIn     = 000000000000001F
  :: cseOut    = 000000000000001F
  => cseIn     = 000000000000000F
EndMerge BB10
  :: cseIn     = 000000000000000F
  :: cseGen    = 0000000000000000
  => cseOut    = 000000000000000F
  != preMerge  = 000000000000001F, => true
StartMerge BB03
  :: cseOut    = 000000000000001F
Merge BB03 and BB09
  :: cseIn     = 000000000000001F
  :: cseOut    = 000000000000001F
  => cseIn     = 000000000000000F
EndMerge BB03
  :: cseIn     = 000000000000000F
  -- cseKill   = 0000000000000005
  :: cseGen    = 0000000000000000
  => cseOut    = 0000000000000005
  != preMerge  = 000000000000001F, => true
StartMerge BB04
  :: cseOut    = 0000000000000003
Merge BB04 and BB02
  :: cseIn     = 0000000000000000
  :: cseOut    = 0000000000000003
  => cseIn     = 0000000000000000
Merge BB04 and BB03
  :: cseIn     = 0000000000000000
  :: cseOut    = 0000000000000003
  => cseIn     = 0000000000000000
EndMerge BB04
  :: cseIn     = 0000000000000000
  :: cseGen    = 0000000000000003
  => cseOut    = 0000000000000003
  != preMerge  = 0000000000000003, => false

After performing DataFlow for ValnumCSE's
BB01 cseIn  = 0000000000000000, cseGen = 0000000000000000, cseOut = 0000000000000000
BB02 cseIn  = 0000000000000000, cseGen = 0000000000000000, cseOut = 0000000000000000
BB03 cseIn  = 000000000000000F, cseGen = 0000000000000000, cseOut = 0000000000000005
BB04 cseIn  = 0000000000000000, cseGen = 0000000000000003, cseOut = 0000000000000003
BB05 cseIn  = 0000000000000003, cseGen = 000000000000000C, cseOut = 000000000000000F
BB06 cseIn  = 000000000000000F, cseGen = 0000000000000000, cseOut = 000000000000000F
BB07 cseIn  = 0000000000000003, cseGen = 0000000000000003, cseOut = 0000000000000003
BB08 cseIn  = 0000000000000003, cseGen = 000000000000000C, cseOut = 000000000000000F
BB09 cseIn  = 000000000000000F, cseGen = 0000000000000000, cseOut = 000000000000000F
BB10 cseIn  = 000000000000000F, cseGen = 0000000000000000, cseOut = 000000000000000F
BB11 cseIn  = 0000000000000003, cseGen = 0000000000000000, cseOut = 0000000000000001

Labeling the CSEs with Use/Def information
BB04 [000088] Def of CSE #01 [weight=8   ]
BB05 [000104] Def of CSE #02 [weight=1   ]
BB07 [000141] Use of CSE #01 [weight=2   ]
BB08 [000149] Def of CSE #02 [weight=2   ]

************ Trees at start of optValnumCSE_Heuristic()

------------ BB01 [000..00D), preds={} succs={BB02}

***** BB01
STMT00000 (IL 0x000...0x005)
N005 ( 16, 16)              [000003] -AC-----R---              *  ASG       ref    $180
N004 (  1,  1)              [000002] D------N----              +--*  LCL_VAR   ref    V05 tmp1         d:2 $180
N003 ( 16, 16)              [000001] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $180
N002 (  2, 10)              [000000] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e method $100

***** BB01
STMT00001 (IL   ???...  ???)
N003 ( 15,  8)              [000005] --CXG-------              *  CALL      void   Batcher..ctor $VN.Void
N002 (  1,  1)              [000004] ------------ this in rcx  \--*  LCL_VAR   ref    V05 tmp1         u:2 $180

***** BB01
STMT00002 (IL 0x005...  ???)
N003 (  1,  3)              [000008] -A------R---              *  ASG       ref    $180
N002 (  1,  1)              [000007] D------N----              +--*  LCL_VAR   ref    V01 loc0         d:2 $180
N001 (  1,  1)              [000006] ------------              \--*  LCL_VAR   ref    V05 tmp1         u:2 (last use) $180

***** BB01
STMT00016 (IL 0x006...  ???)
N003 (  5,  4)              [000055] -A------R---              *  ASG       ref    $80
N002 (  3,  2)              [000054] D------N----              +--*  LCL_VAR   ref    V13 tmp9         d:2 $80
N001 (  1,  1)              [000009] ------------              \--*  LCL_VAR   ref    V00 arg0         u:1 $80

***** BB01
STMT00017 (IL 0x006...  ???)
N003 (  5,  4)              [000060] -A------R---              *  ASG       int    $40
N002 (  3,  2)              [000059] D------N----              +--*  LCL_VAR   int    V15 tmp11        d:2 $40
N001 (  1,  1)              [000058] ------------              \--*  CNS_INT   int    0 $40

***** BB01
STMT00018 (IL 0x006...  ???)
N006 (  8,  7)              [000066] -A-XG---R---              *  ASG       int    <l:$283, c:$282>
N005 (  3,  2)              [000065] D------N----              +--*  LCL_VAR   int    V16 tmp12        d:2 <l:$281, c:$1c1>
N004 (  4,  4)              [000064] ---XG-------              \--*  IND       int    <l:$283, c:$282>
N003 (  2,  2)              [000171] -------N----                 \--*  ADD       byref  $240
N001 (  1,  1)              [000063] ------------                    +--*  LCL_VAR   ref    V13 tmp9         u:2 (last use) $80
N002 (  1,  1)              [000170] ------------                    \--*  CNS_INT   long   20 field offset Fseq[_version] $200

***** BB01
STMT00004 (IL   ???...  ???)
N013 (  9,  9)              [000186] -A----------              *  COMMA     void   <l:$281, c:$1c1>
N009 (  6,  6)              [000182] -A----------              +--*  COMMA     void   $40
N005 (  3,  3)              [000178] -A----------              |  +--*  COMMA     void   $2c0
N003 (  3,  3)              [000174] -A------R---              |  |  +--*  ASG       ref    $80
N002 (  1,  1)              [000172] D------N----              |  |  |  +--*  LCL_VAR   ref    V09 tmp5         d:2 $80
N001 (  3,  2)              [000173] ------------              |  |  |  \--*  LCL_VAR   ref    V13 tmp9         u:2 (last use) $80
N004 (  0,  0)              [000177] ------------              |  |  \--*  NOP       void   $2c0
N008 (  3,  3)              [000181] -A------R---              |  \--*  ASG       int    $40
N007 (  1,  1)              [000179] D------N----              |     +--*  LCL_VAR   int    V11 tmp7         d:2 $40
N006 (  3,  2)              [000180] ------------              |     \--*  LCL_VAR   int    V15 tmp11        u:2 (last use) $40
N012 (  3,  3)              [000185] -A------R---              \--*  ASG       int    <l:$281, c:$1c1>
N011 (  1,  1)              [000183] D------N----                 +--*  LCL_VAR   int    V12 tmp8         d:2 <l:$281, c:$1c1>
N010 (  3,  2)              [000184] ------------                 \--*  LCL_VAR   int    V16 tmp12        u:2 (last use) <l:$281, c:$1c1>

------------ BB02 [00D..00F) -> BB04 (always), preds={BB01} succs={BB04}

------------ BB03 [00F..01E), preds={BB09} succs={BB04}

***** BB03
STMT00009 (IL 0x017...0x019)
N005 ( 16, 10)              [000031] --CXG-------              *  CALL nullcheck void   Batcher.Push $VN.Void
N003 (  1,  1)              [000029] ------------ this in rcx  +--*  LCL_VAR   ref    V01 loc0         u:2 $180
N004 (  1,  1)              [000030] ------------ arg1 in rdx  \--*  LCL_VAR   ref    V10 tmp6         u:2 (last use) $480

------------ BB04 [01E..027) -> BB07 (cond), preds={BB02,BB03} succs={BB05,BB07}

***** BB04
STMT00034 (IL   ???...  ???)
N005 (  0,  0)              [000222] -A------R---              *  ASG       int   
N004 (  0,  0)              [000220] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:3
N003 (  0,  0)              [000221] ------------              \--*  PHI       int   
N001 (  0,  0)              [000230] ------------ pred BB03       +--*  PHI_ARG   int    V11 tmp7         u:4
N002 (  0,  0)              [000229] ------------ pred BB02       \--*  PHI_ARG   int    V11 tmp7         u:2 $40

***** BB04
STMT00020 (IL 0x01E...  ???)
N003 (  1,  3)              [000083] -A------R---              *  ASG       ref    $80
N002 (  1,  1)              [000082] D------N----              +--*  LCL_VAR   ref    V08 tmp4         d:2 $80
N001 (  1,  1)              [000081] ------------              \--*  LCL_VAR   ref    V09 tmp5         u:2 $80

***** BB04
STMT00021 (IL 0x01E...  ???)
N007 (  8,  8)              [000090] ---XG-------              *  JTRUE     void  
N006 (  6,  6)              [000089] N--XG--N-U--              \--*  NE        int    <l:$28c, c:$28b>
N001 (  1,  1)              [000086] ------------                 +--*  LCL_VAR   int    V12 tmp8         u:2 <l:$281, c:$1c1>
N005 (  4,  4) CSE #01 (def)[000088] ---XG-------                 \--*  IND       int    <l:$288, c:$287>
N004 (  2,  2)              [000190] -------N----                    \--*  ADD       byref  $240
N002 (  1,  1)              [000087] ------------                       +--*  LCL_VAR   ref    V08 tmp4         u:2 $80
N003 (  1,  1)              [000189] ------------                       \--*  CNS_INT   long   20 field offset Fseq[_version] $200

------------ BB05 [01E..01F) -> BB07 (cond), preds={BB04} succs={BB06,BB07}

***** BB05
STMT00024 (IL 0x01E...  ???)
N007 (  8,  8)              [000106] ---XG-------              *  JTRUE     void  
N006 (  6,  6)              [000105] N--XG--N-U--              \--*  GE        int    <l:$294, c:$293>
N001 (  1,  1)              [000102] ------------                 +--*  LCL_VAR   int    V11 tmp7         u:3 $300
N005 (  4,  4) CSE #02 (def)[000104] ---XG-------                 \--*  IND       int    <l:$290, c:$28f>
N004 (  2,  2)              [000192] -------N----                    \--*  ADD       byref  $241
N002 (  1,  1)              [000103] ------------                       +--*  LCL_VAR   ref    V09 tmp5         u:2 $80
N003 (  1,  1)              [000191] ------------                       \--*  CNS_INT   long   16 field offset Fseq[_size] $201

------------ BB06 [01E..01F) -> BB09 (always), preds={BB05} succs={BB09}

***** BB06
STMT00025 (IL 0x01E...  ???)
N023 ( 18, 22)              [000116] -A-XG---R---              *  ASG       ref    <l:$19a, c:$199>
N022 (  1,  1)              [000115] D------N----              +--*  LCL_VAR   ref    V10 tmp6         d:4 <l:$194, c:$345>
N021 ( 18, 22)              [000207] -A-XG-------              \--*  COMMA     ref    <l:$19a, c:$199>
N006 (  4,  4)              [000194] -A-XG---R---                 +--*  ASG       ref    <l:$185, c:$184>
N005 (  1,  1)              [000193] D------N----                 |  +--*  LCL_VAR   ref    V17 tmp13        d:2 <l:$183, c:$343>
N004 (  4,  4)              [000110] ---XG-------                 |  \--*  IND       ref    <l:$185, c:$184>
N003 (  2,  2)              [000209] -------N----                 |     \--*  ADD       byref  $242
N001 (  1,  1)              [000109] ------------                 |        +--*  LCL_VAR   ref    V09 tmp5         u:2 (last use) $80
N002 (  1,  1)              [000208] ------------                 |        \--*  CNS_INT   long   8 field offset Fseq[_items] $202
N020 ( 14, 18)              [000206] ---XG-------                 \--*  COMMA     ref    <l:$196, c:$195>
N010 (  8, 11)              [000199] ---X--------                    +--*  ARR_BOUNDS_CHECK_Rng void   <l:$191, c:$190>
N007 (  1,  1)              [000113] ------------                    |  +--*  LCL_VAR   int    V11 tmp7         u:3 $300
N009 (  3,  3)              [000198] ---X--------                    |  \--*  ARR_LENGTH int    <l:$29e, c:$29d>
N008 (  1,  1)              [000195] ------------                    |     \--*  LCL_VAR   ref    V17 tmp13        u:2 <l:$183, c:$343>
N019 (  6,  7)              [000114] a---G-------                    \--*  IND       ref    <l:$194, c:$345>
N018 (  5,  6)              [000205] -------N----                       \--*  ADD       byref  $440
N011 (  1,  1)              [000196] ------------                          +--*  LCL_VAR   ref    V17 tmp13        u:2 (last use) <l:$183, c:$343>
N017 (  4,  5)              [000204] -------N----                          \--*  ADD       long   $402
N015 (  3,  4)              [000202] -------N----                             +--*  LSH       long   $401
N013 (  2,  3)              [000200] ------------                             |  +--*  CAST      long <- int $400
N012 (  1,  1)              [000197] i-----------                             |  |  \--*  LCL_VAR   int    V11 tmp7         u:3 $300
N014 (  1,  1)              [000201] -------N----                             |  \--*  CNS_INT   long   3 $203
N016 (  1,  1)              [000203] ------------                             \--*  CNS_INT   long   16 Fseq[#FirstElem] $201

***** BB06
STMT00026 (IL 0x01E...  ???)
N005 (  3,  3)              [000125] -A------R---              *  ASG       int    $29f
N004 (  1,  1)              [000124] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:6 $29f
N003 (  3,  3)              [000123] ------------              \--*  ADD       int    $29f
N001 (  1,  1)              [000121] ------------                 +--*  LCL_VAR   int    V11 tmp7         u:3 (last use) $300
N002 (  1,  1)              [000122] ------------                 \--*  CNS_INT   int    1 $44

***** BB06
STMT00027 (IL 0x01E...  ???)
N003 (  1,  3)              [000129] -A------R---              *  ASG       bool   $44
N002 (  1,  1)              [000128] D------N----              +--*  LCL_VAR   int    V07 tmp3         d:4 $44
N001 (  1,  1)              [000126] ------------              \--*  CNS_INT   int    1 $44

------------ BB07 [01E..01F) -> BB11 (cond), preds={BB04,BB05} succs={BB08,BB11}

***** BB07
STMT00029 (IL 0x01E...  ???)
N007 (  8,  8)              [000143] ---XG-------              *  JTRUE     void  
N006 (  6,  6)              [000142] J--XG--N----              \--*  NE        int    <l:$28c, c:$297>
N001 (  1,  1)              [000137] ------------                 +--*  LCL_VAR   int    V12 tmp8         u:2 <l:$281, c:$1c1>
N005 (  4,  4) CSE #01 (use)[000141] ---XG-------                 \--*  IND       int    <l:$288, c:$295>
N004 (  2,  2)              [000211] -------N----                    \--*  ADD       byref  $240
N002 (  1,  1)              [000140] ------------                       +--*  LCL_VAR   ref    V09 tmp5         u:2 $80
N003 (  1,  1)              [000210] ------------                       \--*  CNS_INT   long   20 field offset Fseq[_version] $200

------------ BB08 [01E..01F), preds={BB07} succs={BB09}

***** BB08
STMT00030 (IL 0x01E...  ???)
N008 (  6,  6)              [000153] -A-XG---R---              *  ASG       int    <l:$29c, c:$29b>
N007 (  1,  1)              [000152] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:5 <l:$29a, c:$299>
N006 (  6,  6)              [000151] ---XG-------              \--*  ADD       int    <l:$29c, c:$29b>
N004 (  4,  4) CSE #02 (def)[000149] ---XG-------                 +--*  IND       int    <l:$290, c:$298>
N003 (  2,  2)              [000213] -------N----                 |  \--*  ADD       byref  $241
N001 (  1,  1)              [000148] ------------                 |     +--*  LCL_VAR   ref    V09 tmp5         u:2 $80
N002 (  1,  1)              [000212] ------------                 |     \--*  CNS_INT   long   16 field offset Fseq[_size] $201
N005 (  1,  1)              [000150] ------------                 \--*  CNS_INT   int    1 $44

***** BB08
STMT00031 (IL 0x01E...  ???)
N003 (  1,  3)              [000160] -A------R---              *  ASG       ref    $VN.Null
N002 (  1,  1)              [000156] D------N----              +--*  LCL_VAR   ref    V10 tmp6         d:3 $VN.Null
N001 (  1,  1)              [000158] ------------              \--*  CNS_INT   ref    null $VN.Null

***** BB08
STMT00023 (IL 0x01E...  ???)
N003 (  1,  3)              [000098] -A------R---              *  ASG       bool   $40
N002 (  1,  1)              [000097] D------N----              +--*  LCL_VAR   int    V07 tmp3         d:3 $40
N001 (  1,  1)              [000096] ------------              \--*  CNS_INT   int    0 $40

------------ BB09 [???..???) -> BB03 (cond), preds={BB06,BB08} succs={BB10,BB03}

***** BB09
STMT00036 (IL   ???...  ???)
N005 (  0,  0)              [000228] -A------R---              *  ASG       ref   
N004 (  0,  0)              [000226] D------N----              +--*  LCL_VAR   ref    V10 tmp6         d:2
N003 (  0,  0)              [000227] ------------              \--*  PHI       ref   
N001 (  0,  0)              [000234] ------------ pred BB06       +--*  PHI_ARG   ref    V10 tmp6         u:4 <l:$194, c:$345>
N002 (  0,  0)              [000231] ------------ pred BB08       \--*  PHI_ARG   ref    V10 tmp6         u:3 $VN.Null

***** BB09
STMT00035 (IL   ???...  ???)
N005 (  0,  0)              [000225] -A------R---              *  ASG       bool  
N004 (  0,  0)              [000223] D------N----              +--*  LCL_VAR   bool   V07 tmp3         d:2
N003 (  0,  0)              [000224] ------------              \--*  PHI       bool  
N001 (  0,  0)              [000235] ------------ pred BB06       +--*  PHI_ARG   bool   V07 tmp3         u:4 $44
N002 (  0,  0)              [000232] ------------ pred BB08       \--*  PHI_ARG   bool   V07 tmp3         u:3 $40

***** BB09
STMT00033 (IL   ???...  ???)
N005 (  0,  0)              [000219] -A------R---              *  ASG       int   
N004 (  0,  0)              [000217] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:4
N003 (  0,  0)              [000218] ------------              \--*  PHI       int   
N001 (  0,  0)              [000236] ------------ pred BB06       +--*  PHI_ARG   int    V11 tmp7         u:6 $29f
N002 (  0,  0)              [000233] ------------ pred BB08       \--*  PHI_ARG   int    V11 tmp7         u:5 <l:$29a, c:$299>

***** BB09
STMT00006 (IL   ???...  ???)
N004 (  5,  5)              [000021] ------------              *  JTRUE     void  
N003 (  3,  3)              [000020] J------N----              \--*  NE        int    $2a1
N001 (  1,  1)              [000130] ------------                 +--*  LCL_VAR   bool   V07 tmp3         u:2 (last use) $4c0
N002 (  1,  1)              [000019] ------------                 \--*  CNS_INT   int    0 $40

------------ BB10 [027..03E) (return), preds={BB09} succs={}

***** BB10
STMT00011 (IL   ???...  ???)
N005 (  5,  5)              [000035] ---XG-------              *  RETURN    ref    $149
N004 (  4,  4)              [000166] ---XG-------              \--*  IND       ref    <l:$1a0, c:$19f>
N003 (  2,  2)              [000216] -------N----                 \--*  ADD       byref  $245
N001 (  1,  1)              [000032] ------------                    +--*  LCL_VAR   ref    V01 loc0         u:2 (last use) $180
N002 (  1,  1)              [000215] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_batches] $202

------------ BB11 [01E..01F) (throw), preds={BB07} succs={}

***** BB11
STMT00032 (IL 0x01E...  ???)
N001 ( 14,  5)              [000163] --CXG-------              *  CALL      void   System.ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion $VN.Void

-------------------------------------------------------------------------------------------------------------------


Aggressive CSE Promotion cutoff is 300.000000
Moderate CSE Promotion cutoff is 100.000000
enregCount is 15
Framesize estimate is 0x0000
We have a small frame

Sorted CSE candidates:
CSE #01, {$286, $181} useCnt=1: [def=800.000000, use=200.000000, cost=  4      ]
        :: N005 (  4,  4) CSE #01 (def)[000088] ---XG-------              *  IND       int    <l:$288, c:$287>
CSE #02, {$28e, $4  } useCnt=0: [def=300.000000, use=0.000000, cost=  4      ]
        :: N005 (  4,  4) CSE #02 (def)[000104] ---XG-------              *  IND       int    <l:$290, c:$28f>


Considering CSE #01 {$286, $181} [def=800.000000, use=200.000000, cost=  4      ]
CSE Expression : 
N005 (  4,  4) CSE #01 (def)[000088] ---XG-------              *  IND       int    <l:$288, c:$287>
N004 (  2,  2)              [000190] -------N----              \--*  ADD       byref  $240
N002 (  1,  1)              [000087] ------------                 +--*  LCL_VAR   ref    V08 tmp4         u:2 $80
N003 (  1,  1)              [000189] ------------                 \--*  CNS_INT   long   20 field offset Fseq[_version] $200

Aggressive CSE Promotion (1800.000000 >= 300.000000)
cseRefCnt=1800.000000, aggressiveRefCnt=300.000000, moderateRefCnt=100.000000
defCnt=800.000000, useCnt=200.000000, cost=4, size=4
def_cost=1, use_cost=1, extra_no_cost=6, extra_yes_cost=0
CSE cost savings check (806.000000 >= 1000.000000) fails
Did Not promote this CSE
Skipped CSE #02 because use count is 0

*************** Finishing PHASE Optimize Valnum CSEs

*************** Starting PHASE Assertion prop
*************** In optAssertionPropMain()
Blocks/Trees at start of phase

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i label target hascall gcsafe newobj nullcheck 
BB02 [0001]  1       BB01                  1       [00D..00F)-> BB04 (always)                     keep i label gcsafe 
BB03 [0002]  1       BB09                  2     0 [00F..01E)                                     i Loop label target hascall gcsafe bwd bwd-target 
BB04 [0003]  2       BB02,BB03             8     0 [01E..027)-> BB07 ( cond )                     i label target gcsafe bwd 
BB05 [0013]  1       BB04                  1     0 [01E..01F)-> BB07 ( cond )                     i gcsafe bwd 
BB06 [0014]  1       BB05                  2     0 [01E..01F)-> BB09 (always)                     i gcsafe idxlen bwd 
BB07 [0015]  2       BB04,BB05             2     0 [01E..01F)-> BB11 ( cond )                     i label target gcsafe bwd 
BB08 [0019]  1       BB07                  2     0 [01E..01F)                                     i label target gcsafe bwd 
BB09 [0016]  2       BB06,BB08             8     0 [???..???)-> BB03 ( cond )                     internal label target gcsafe bwd 
BB10 [0004]  1       BB09                  1       [027..03E)        (return)                     i gcsafe 
BB11 [0018]  1       BB07                  0       [01E..01F)        (throw )                     i rare label target hascall gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..00D), preds={} succs={BB02}

***** BB01
STMT00000 (IL 0x000...0x005)
N005 ( 16, 16) [000003] -AC-----R---              *  ASG       ref    $180
N004 (  1,  1) [000002] D------N----              +--*  LCL_VAR   ref    V05 tmp1         d:2 $180
N003 ( 16, 16) [000001] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $180
N002 (  2, 10) [000000] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e method $100

***** BB01
STMT00001 (IL   ???...  ???)
N003 ( 15,  8) [000005] --CXG-------              *  CALL      void   Batcher..ctor $VN.Void
N002 (  1,  1) [000004] ------------ this in rcx  \--*  LCL_VAR   ref    V05 tmp1         u:2 $180

***** BB01
STMT00002 (IL 0x005...  ???)
N003 (  1,  3) [000008] -A------R---              *  ASG       ref    $180
N002 (  1,  1) [000007] D------N----              +--*  LCL_VAR   ref    V01 loc0         d:2 $180
N001 (  1,  1) [000006] ------------              \--*  LCL_VAR   ref    V05 tmp1         u:2 (last use) $180

***** BB01
STMT00016 (IL 0x006...  ???)
N003 (  5,  4) [000055] -A------R---              *  ASG       ref    $80
N002 (  3,  2) [000054] D------N----              +--*  LCL_VAR   ref    V13 tmp9         d:2 $80
N001 (  1,  1) [000009] ------------              \--*  LCL_VAR   ref    V00 arg0         u:1 $80

***** BB01
STMT00017 (IL 0x006...  ???)
N003 (  5,  4) [000060] -A------R---              *  ASG       int    $40
N002 (  3,  2) [000059] D------N----              +--*  LCL_VAR   int    V15 tmp11        d:2 $40
N001 (  1,  1) [000058] ------------              \--*  CNS_INT   int    0 $40

***** BB01
STMT00018 (IL 0x006...  ???)
N006 (  8,  7) [000066] -A-XG---R---              *  ASG       int    <l:$283, c:$282>
N005 (  3,  2) [000065] D------N----              +--*  LCL_VAR   int    V16 tmp12        d:2 <l:$281, c:$1c1>
N004 (  4,  4) [000064] ---XG-------              \--*  IND       int    <l:$283, c:$282>
N003 (  2,  2) [000171] -------N----                 \--*  ADD       byref  $240
N001 (  1,  1) [000063] ------------                    +--*  LCL_VAR   ref    V13 tmp9         u:2 (last use) $80
N002 (  1,  1) [000170] ------------                    \--*  CNS_INT   long   20 field offset Fseq[_version] $200

***** BB01
STMT00004 (IL   ???...  ???)
N013 (  9,  9) [000186] -A----------              *  COMMA     void   <l:$281, c:$1c1>
N009 (  6,  6) [000182] -A----------              +--*  COMMA     void   $40
N005 (  3,  3) [000178] -A----------              |  +--*  COMMA     void   $2c0
N003 (  3,  3) [000174] -A------R---              |  |  +--*  ASG       ref    $80
N002 (  1,  1) [000172] D------N----              |  |  |  +--*  LCL_VAR   ref    V09 tmp5         d:2 $80
N001 (  3,  2) [000173] ------------              |  |  |  \--*  LCL_VAR   ref    V13 tmp9         u:2 (last use) $80
N004 (  0,  0) [000177] ------------              |  |  \--*  NOP       void   $2c0
N008 (  3,  3) [000181] -A------R---              |  \--*  ASG       int    $40
N007 (  1,  1) [000179] D------N----              |     +--*  LCL_VAR   int    V11 tmp7         d:2 $40
N006 (  3,  2) [000180] ------------              |     \--*  LCL_VAR   int    V15 tmp11        u:2 (last use) $40
N012 (  3,  3) [000185] -A------R---              \--*  ASG       int    <l:$281, c:$1c1>
N011 (  1,  1) [000183] D------N----                 +--*  LCL_VAR   int    V12 tmp8         d:2 <l:$281, c:$1c1>
N010 (  3,  2) [000184] ------------                 \--*  LCL_VAR   int    V16 tmp12        u:2 (last use) <l:$281, c:$1c1>

------------ BB02 [00D..00F) -> BB04 (always), preds={BB01} succs={BB04}

------------ BB03 [00F..01E), preds={BB09} succs={BB04}

***** BB03
STMT00009 (IL 0x017...0x019)
N005 ( 16, 10) [000031] --CXG-------              *  CALL nullcheck void   Batcher.Push $VN.Void
N003 (  1,  1) [000029] ------------ this in rcx  +--*  LCL_VAR   ref    V01 loc0         u:2 $180
N004 (  1,  1) [000030] ------------ arg1 in rdx  \--*  LCL_VAR   ref    V10 tmp6         u:2 (last use) $480

------------ BB04 [01E..027) -> BB07 (cond), preds={BB02,BB03} succs={BB05,BB07}

***** BB04
STMT00034 (IL   ???...  ???)
N005 (  0,  0) [000222] -A------R---              *  ASG       int   
N004 (  0,  0) [000220] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:3
N003 (  0,  0) [000221] ------------              \--*  PHI       int   
N001 (  0,  0) [000230] ------------ pred BB03       +--*  PHI_ARG   int    V11 tmp7         u:4
N002 (  0,  0) [000229] ------------ pred BB02       \--*  PHI_ARG   int    V11 tmp7         u:2 $40

***** BB04
STMT00020 (IL 0x01E...  ???)
N003 (  1,  3) [000083] -A------R---              *  ASG       ref    $80
N002 (  1,  1) [000082] D------N----              +--*  LCL_VAR   ref    V08 tmp4         d:2 $80
N001 (  1,  1) [000081] ------------              \--*  LCL_VAR   ref    V09 tmp5         u:2 $80

***** BB04
STMT00021 (IL 0x01E...  ???)
N007 (  8,  8) [000090] ---XG-------              *  JTRUE     void  
N006 (  6,  6) [000089] N--XG--N-U--              \--*  NE        int    <l:$28c, c:$28b>
N001 (  1,  1) [000086] ------------                 +--*  LCL_VAR   int    V12 tmp8         u:2 <l:$281, c:$1c1>
N005 (  4,  4) [000088] ---XG-------                 \--*  IND       int    <l:$288, c:$287>
N004 (  2,  2) [000190] -------N----                    \--*  ADD       byref  $240
N002 (  1,  1) [000087] ------------                       +--*  LCL_VAR   ref    V08 tmp4         u:2 $80
N003 (  1,  1) [000189] ------------                       \--*  CNS_INT   long   20 field offset Fseq[_version] $200

------------ BB05 [01E..01F) -> BB07 (cond), preds={BB04} succs={BB06,BB07}

***** BB05
STMT00024 (IL 0x01E...  ???)
N007 (  8,  8) [000106] ---XG-------              *  JTRUE     void  
N006 (  6,  6) [000105] N--XG--N-U--              \--*  GE        int    <l:$294, c:$293>
N001 (  1,  1) [000102] ------------                 +--*  LCL_VAR   int    V11 tmp7         u:3 $300
N005 (  4,  4) [000104] ---XG-------                 \--*  IND       int    <l:$290, c:$28f>
N004 (  2,  2) [000192] -------N----                    \--*  ADD       byref  $241
N002 (  1,  1) [000103] ------------                       +--*  LCL_VAR   ref    V09 tmp5         u:2 $80
N003 (  1,  1) [000191] ------------                       \--*  CNS_INT   long   16 field offset Fseq[_size] $201

------------ BB06 [01E..01F) -> BB09 (always), preds={BB05} succs={BB09}

***** BB06
STMT00025 (IL 0x01E...  ???)
N023 ( 18, 22) [000116] -A-XG---R---              *  ASG       ref    <l:$19a, c:$199>
N022 (  1,  1) [000115] D------N----              +--*  LCL_VAR   ref    V10 tmp6         d:4 <l:$194, c:$345>
N021 ( 18, 22) [000207] -A-XG-------              \--*  COMMA     ref    <l:$19a, c:$199>
N006 (  4,  4) [000194] -A-XG---R---                 +--*  ASG       ref    <l:$185, c:$184>
N005 (  1,  1) [000193] D------N----                 |  +--*  LCL_VAR   ref    V17 tmp13        d:2 <l:$183, c:$343>
N004 (  4,  4) [000110] ---XG-------                 |  \--*  IND       ref    <l:$185, c:$184>
N003 (  2,  2) [000209] -------N----                 |     \--*  ADD       byref  $242
N001 (  1,  1) [000109] ------------                 |        +--*  LCL_VAR   ref    V09 tmp5         u:2 (last use) $80
N002 (  1,  1) [000208] ------------                 |        \--*  CNS_INT   long   8 field offset Fseq[_items] $202
N020 ( 14, 18) [000206] ---XG-------                 \--*  COMMA     ref    <l:$196, c:$195>
N010 (  8, 11) [000199] ---X--------                    +--*  ARR_BOUNDS_CHECK_Rng void   <l:$191, c:$190>
N007 (  1,  1) [000113] ------------                    |  +--*  LCL_VAR   int    V11 tmp7         u:3 $300
N009 (  3,  3) [000198] ---X--------                    |  \--*  ARR_LENGTH int    <l:$29e, c:$29d>
N008 (  1,  1) [000195] ------------                    |     \--*  LCL_VAR   ref    V17 tmp13        u:2 <l:$183, c:$343>
N019 (  6,  7) [000114] a---G-------                    \--*  IND       ref    <l:$194, c:$345>
N018 (  5,  6) [000205] -------N----                       \--*  ADD       byref  $440
N011 (  1,  1) [000196] ------------                          +--*  LCL_VAR   ref    V17 tmp13        u:2 (last use) <l:$183, c:$343>
N017 (  4,  5) [000204] -------N----                          \--*  ADD       long   $402
N015 (  3,  4) [000202] -------N----                             +--*  LSH       long   $401
N013 (  2,  3) [000200] ------------                             |  +--*  CAST      long <- int $400
N012 (  1,  1) [000197] i-----------                             |  |  \--*  LCL_VAR   int    V11 tmp7         u:3 $300
N014 (  1,  1) [000201] -------N----                             |  \--*  CNS_INT   long   3 $203
N016 (  1,  1) [000203] ------------                             \--*  CNS_INT   long   16 Fseq[#FirstElem] $201

***** BB06
STMT00026 (IL 0x01E...  ???)
N005 (  3,  3) [000125] -A------R---              *  ASG       int    $29f
N004 (  1,  1) [000124] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:6 $29f
N003 (  3,  3) [000123] ------------              \--*  ADD       int    $29f
N001 (  1,  1) [000121] ------------                 +--*  LCL_VAR   int    V11 tmp7         u:3 (last use) $300
N002 (  1,  1) [000122] ------------                 \--*  CNS_INT   int    1 $44

***** BB06
STMT00027 (IL 0x01E...  ???)
N003 (  1,  3) [000129] -A------R---              *  ASG       bool   $44
N002 (  1,  1) [000128] D------N----              +--*  LCL_VAR   int    V07 tmp3         d:4 $44
N001 (  1,  1) [000126] ------------              \--*  CNS_INT   int    1 $44

------------ BB07 [01E..01F) -> BB11 (cond), preds={BB04,BB05} succs={BB08,BB11}

***** BB07
STMT00029 (IL 0x01E...  ???)
N007 (  8,  8) [000143] ---XG-------              *  JTRUE     void  
N006 (  6,  6) [000142] J--XG--N----              \--*  NE        int    <l:$28c, c:$297>
N001 (  1,  1) [000137] ------------                 +--*  LCL_VAR   int    V12 tmp8         u:2 <l:$281, c:$1c1>
N005 (  4,  4) [000141] ---XG-------                 \--*  IND       int    <l:$288, c:$295>
N004 (  2,  2) [000211] -------N----                    \--*  ADD       byref  $240
N002 (  1,  1) [000140] ------------                       +--*  LCL_VAR   ref    V09 tmp5         u:2 $80
N003 (  1,  1) [000210] ------------                       \--*  CNS_INT   long   20 field offset Fseq[_version] $200

------------ BB08 [01E..01F), preds={BB07} succs={BB09}

***** BB08
STMT00030 (IL 0x01E...  ???)
N008 (  6,  6) [000153] -A-XG---R---              *  ASG       int    <l:$29c, c:$29b>
N007 (  1,  1) [000152] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:5 <l:$29a, c:$299>
N006 (  6,  6) [000151] ---XG-------              \--*  ADD       int    <l:$29c, c:$29b>
N004 (  4,  4) [000149] ---XG-------                 +--*  IND       int    <l:$290, c:$298>
N003 (  2,  2) [000213] -------N----                 |  \--*  ADD       byref  $241
N001 (  1,  1) [000148] ------------                 |     +--*  LCL_VAR   ref    V09 tmp5         u:2 $80
N002 (  1,  1) [000212] ------------                 |     \--*  CNS_INT   long   16 field offset Fseq[_size] $201
N005 (  1,  1) [000150] ------------                 \--*  CNS_INT   int    1 $44

***** BB08
STMT00031 (IL 0x01E...  ???)
N003 (  1,  3) [000160] -A------R---              *  ASG       ref    $VN.Null
N002 (  1,  1) [000156] D------N----              +--*  LCL_VAR   ref    V10 tmp6         d:3 $VN.Null
N001 (  1,  1) [000158] ------------              \--*  CNS_INT   ref    null $VN.Null

***** BB08
STMT00023 (IL 0x01E...  ???)
N003 (  1,  3) [000098] -A------R---              *  ASG       bool   $40
N002 (  1,  1) [000097] D------N----              +--*  LCL_VAR   int    V07 tmp3         d:3 $40
N001 (  1,  1) [000096] ------------              \--*  CNS_INT   int    0 $40

------------ BB09 [???..???) -> BB03 (cond), preds={BB06,BB08} succs={BB10,BB03}

***** BB09
STMT00036 (IL   ???...  ???)
N005 (  0,  0) [000228] -A------R---              *  ASG       ref   
N004 (  0,  0) [000226] D------N----              +--*  LCL_VAR   ref    V10 tmp6         d:2
N003 (  0,  0) [000227] ------------              \--*  PHI       ref   
N001 (  0,  0) [000234] ------------ pred BB06       +--*  PHI_ARG   ref    V10 tmp6         u:4 <l:$194, c:$345>
N002 (  0,  0) [000231] ------------ pred BB08       \--*  PHI_ARG   ref    V10 tmp6         u:3 $VN.Null

***** BB09
STMT00035 (IL   ???...  ???)
N005 (  0,  0) [000225] -A------R---              *  ASG       bool  
N004 (  0,  0) [000223] D------N----              +--*  LCL_VAR   bool   V07 tmp3         d:2
N003 (  0,  0) [000224] ------------              \--*  PHI       bool  
N001 (  0,  0) [000235] ------------ pred BB06       +--*  PHI_ARG   bool   V07 tmp3         u:4 $44
N002 (  0,  0) [000232] ------------ pred BB08       \--*  PHI_ARG   bool   V07 tmp3         u:3 $40

***** BB09
STMT00033 (IL   ???...  ???)
N005 (  0,  0) [000219] -A------R---              *  ASG       int   
N004 (  0,  0) [000217] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:4
N003 (  0,  0) [000218] ------------              \--*  PHI       int   
N001 (  0,  0) [000236] ------------ pred BB06       +--*  PHI_ARG   int    V11 tmp7         u:6 $29f
N002 (  0,  0) [000233] ------------ pred BB08       \--*  PHI_ARG   int    V11 tmp7         u:5 <l:$29a, c:$299>

***** BB09
STMT00006 (IL   ???...  ???)
N004 (  5,  5) [000021] ------------              *  JTRUE     void  
N003 (  3,  3) [000020] J------N----              \--*  NE        int    $2a1
N001 (  1,  1) [000130] ------------                 +--*  LCL_VAR   bool   V07 tmp3         u:2 (last use) $4c0
N002 (  1,  1) [000019] ------------                 \--*  CNS_INT   int    0 $40

------------ BB10 [027..03E) (return), preds={BB09} succs={}

***** BB10
STMT00011 (IL   ???...  ???)
N005 (  5,  5) [000035] ---XG-------              *  RETURN    ref    $149
N004 (  4,  4) [000166] ---XG-------              \--*  IND       ref    <l:$1a0, c:$19f>
N003 (  2,  2) [000216] -------N----                 \--*  ADD       byref  $245
N001 (  1,  1) [000032] ------------                    +--*  LCL_VAR   ref    V01 loc0         u:2 (last use) $180
N002 (  1,  1) [000215] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_batches] $202

------------ BB11 [01E..01F) (throw), preds={BB07} succs={}

***** BB11
STMT00032 (IL 0x01E...  ???)
N001 ( 14,  5) [000163] --CXG-------              *  CALL      void   System.ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion $VN.Void

-------------------------------------------------------------------------------------------------------------------
GenTreeNode creates assertion:
N004 (  4,  4) [000064] ---XG-------              *  IND       int    <l:$283, c:$282>
In BB01 New Global Constant Assertion: (128, 0) ($80,$0) V13.02 != null index=#01, mask=0000000000000001
After constant propagation on [000180]:
STMT00004 (IL   ???...  ???)
N013 (  9,  9) [000186] -A----------              *  COMMA     void   <l:$281, c:$1c1>
N009 (  6,  6) [000182] -A----------              +--*  COMMA     void   $40
N005 (  3,  3) [000178] -A----------              |  +--*  COMMA     void   $2c0
N003 (  3,  3) [000174] -A------R---              |  |  +--*  ASG       ref    $80
N002 (  1,  1) [000172] D------N----              |  |  |  +--*  LCL_VAR   ref    V09 tmp5         d:2 $80
N001 (  3,  2) [000173] ------------              |  |  |  \--*  LCL_VAR   ref    V13 tmp9         u:2 (last use) $80
N004 (  0,  0) [000177] ------------              |  |  \--*  NOP       void   $2c0
N008 (  3,  3) [000181] -A------R---              |  \--*  ASG       int    $40
N007 (  1,  1) [000179] D------N----              |     +--*  LCL_VAR   int    V11 tmp7         d:2 $40
               [000237] ------------              |     \--*  CNS_INT   int    0 $40
N012 (  3,  3) [000185] -A------R---              \--*  ASG       int    <l:$281, c:$1c1>
N011 (  1,  1) [000183] D------N----                 +--*  LCL_VAR   int    V12 tmp8         d:2 <l:$281, c:$1c1>
N010 (  3,  2) [000184] ------------                 \--*  LCL_VAR   int    V16 tmp12        u:2 (last use) <l:$281, c:$1c1>
optVNAssertionPropCurStmt morphed tree:
N011 (  7,  9) [000186] -A----------              *  COMMA     void   <l:$281, c:$1c1>
N007 (  4,  6) [000238] -A----------              +--*  COMMA     void   $40
N003 (  3,  3) [000174] -A------R---              |  +--*  ASG       ref    $80
N002 (  1,  1) [000172] D------N----              |  |  +--*  LCL_VAR   ref    V09 tmp5         d:2 $80
N001 (  3,  2) [000173] ------------              |  |  \--*  LCL_VAR   ref    V13 tmp9         u:2 (last use) $80
N006 (  1,  3) [000181] -A------R---              |  \--*  ASG       int    $40
N005 (  1,  1) [000179] D------N----              |     +--*  LCL_VAR   int    V11 tmp7         d:2 $40
N004 (  1,  1) [000237] ------------              |     \--*  CNS_INT   int    0 $40
N010 (  3,  3) [000185] -A------R---              \--*  ASG       int    <l:$281, c:$1c1>
N009 (  1,  1) [000183] D------N----                 +--*  LCL_VAR   int    V12 tmp8         d:2 <l:$281, c:$1c1>
N008 (  3,  2) [000184] ------------                 \--*  LCL_VAR   int    V16 tmp12        u:2 (last use) <l:$281, c:$1c1>


VN based non-null prop in BB03:
N005 ( 16, 10) [000031] --CXG-------              *  CALL nullcheck void   Batcher.Push $VN.Void
ReMorphing args for 31.CALL:
argSlots=2, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32
ArgTable for 31.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 29.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]
fgArgTabEntry[arg 1 30.LCL_VAR ref (By ref), 1 reg: rdx, byteAlignment=8, lateArgInx=1, processed]

optVNAssertionPropCurStmt morphed tree:
N005 ( 16, 10) [000031] --CXG-------              *  CALL      void   Batcher.Push $VN.Void
N003 (  1,  1) [000029] ------------ this in rcx  +--*  LCL_VAR   ref    V01 loc0         u:2 $180
N004 (  1,  1) [000030] ------------ arg1 in rdx  \--*  LCL_VAR   ref    V10 tmp6         u:2 (last use) $480

GenTreeNode creates assertion:
N009 (  3,  3) [000198] ---X--------              *  ARR_LENGTH int    <l:$29e, c:$29d>
In BB06 New Global Constant Assertion: (835, 0) ($343,$0) V17.02 != null index=#02, mask=0000000000000002
GenTreeNode creates assertion:
N010 (  8, 11) [000199] ---X--------              *  ARR_BOUNDS_CHECK_Rng void   <l:$191, c:$190>
In BB06 New Global ArrBnds  Assertion: (0, 0) ($0,$0) [idx: {PhiDef($b, $3, $284)};len: {ARR_LENGTH($343)}] in range  index=#03, mask=0000000000000004
GenTreeNode creates assertion:
N004 (  5,  5) [000021] ------------              *  JTRUE     void  
In BB09 New Global Constant Assertion: (1216, 64) ($4c0,$40) V07.02 != 0 index=#04, mask=0000000000000008
GenTreeNode creates assertion:
N004 (  5,  5) [000021] ------------              *  JTRUE     void  
In BB09 New Global Constant Assertion: (1216, 64) ($4c0,$40) V07.02 == 0 index=#05, mask=0000000000000010

VN based non-null prop in BB10:
N004 (  4,  4) [000166] ---XG-------              *  IND       ref    <l:$1a0, c:$19f>
optVNAssertionPropCurStmt morphed tree:
N005 (  5,  5) [000035] ----GO------              *  RETURN    ref    $149
N004 (  4,  4) [000166] n---GO------              \--*  IND       ref    <l:$1a0, c:$19f>
N003 (  2,  2) [000216] -------N----                 \--*  ADD       byref  $245
N001 (  1,  1) [000032] ------------                    +--*  LCL_VAR   ref    V01 loc0         u:2 (last use) $180
N002 (  1,  1) [000215] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_batches] $202

GenTreeNode creates assertion:
N004 (  4,  4) [000166] n---GO------              *  IND       ref    <l:$1a0, c:$19f>
In BB10 New Global Constant Assertion: (384, 0) ($180,$0) V01.02 != null index=#06, mask=0000000000000020
BB01 valueGen = 0000000000000001
BB02 valueGen = 0000000000000000
BB03 valueGen = 0000000000000000
BB04 valueGen = 0000000000000001 => BB07 valueGen = 0000000000000001,
BB05 valueGen = 0000000000000001 => BB07 valueGen = 0000000000000001,
BB06 valueGen = 0000000000000007
BB07 valueGen = 0000000000000001 => BB11 valueGen = 0000000000000001,
BB08 valueGen = 0000000000000001
BB09 valueGen = 0000000000000010 => BB03 valueGen = 0000000000000008,
BB10 valueGen = 0000000000000020
BB11 valueGen = 0000000000000000
AssertionPropCallback::StartMerge: BB01 in -> 0000000000000000
AssertionPropCallback::EndMerge  : BB01 in -> 0000000000000000

AssertionPropCallback::Changed   : BB01 before out -> 000000000000003F; after out -> 0000000000000001;
		jumpDest before out -> 000000000000003F; jumpDest after out -> 0000000000000000;

AssertionPropCallback::StartMerge: BB02 in -> 000000000000003F
AssertionPropCallback::Merge     : BB02 in -> 000000000000003F, predBlock BB01 out -> 0000000000000001
AssertionPropCallback::EndMerge  : BB02 in -> 0000000000000001

AssertionPropCallback::Changed   : BB02 before out -> 000000000000003F; after out -> 0000000000000001;
		jumpDest before out -> 000000000000003F; jumpDest after out -> 0000000000000001;

AssertionPropCallback::StartMerge: BB04 in -> 000000000000003F
AssertionPropCallback::Merge     : BB04 in -> 000000000000003F, predBlock BB02 out -> 0000000000000001
AssertionPropCallback::Merge     : BB04 in -> 0000000000000001, predBlock BB03 out -> 000000000000003F
AssertionPropCallback::EndMerge  : BB04 in -> 0000000000000001

AssertionPropCallback::Changed   : BB04 before out -> 000000000000003F; after out -> 0000000000000001;
		jumpDest before out -> 000000000000003F; jumpDest after out -> 0000000000000001;

AssertionPropCallback::StartMerge: BB05 in -> 000000000000003F
AssertionPropCallback::Merge     : BB05 in -> 000000000000003F, predBlock BB04 out -> 0000000000000001
AssertionPropCallback::EndMerge  : BB05 in -> 0000000000000001

AssertionPropCallback::Changed   : BB05 before out -> 000000000000003F; after out -> 0000000000000001;
		jumpDest before out -> 000000000000003F; jumpDest after out -> 0000000000000001;

AssertionPropCallback::StartMerge: BB07 in -> 000000000000003F
AssertionPropCallback::Merge     : BB07 in -> 000000000000003F, predBlock BB04 out -> 0000000000000001
AssertionPropCallback::Merge     : BB07 in -> 0000000000000001, predBlock BB05 out -> 0000000000000001
AssertionPropCallback::EndMerge  : BB07 in -> 0000000000000001

AssertionPropCallback::Changed   : BB07 before out -> 000000000000003F; after out -> 0000000000000001;
		jumpDest before out -> 000000000000003F; jumpDest after out -> 0000000000000001;

AssertionPropCallback::StartMerge: BB06 in -> 000000000000003F
AssertionPropCallback::Merge     : BB06 in -> 000000000000003F, predBlock BB05 out -> 0000000000000001
AssertionPropCallback::EndMerge  : BB06 in -> 0000000000000001

AssertionPropCallback::Changed   : BB06 before out -> 000000000000003F; after out -> 0000000000000007;
		jumpDest before out -> 000000000000003F; jumpDest after out -> 0000000000000001;

AssertionPropCallback::StartMerge: BB07 in -> 0000000000000001
AssertionPropCallback::Merge     : BB07 in -> 0000000000000001, predBlock BB04 out -> 0000000000000001
AssertionPropCallback::Merge     : BB07 in -> 0000000000000001, predBlock BB05 out -> 0000000000000001
AssertionPropCallback::EndMerge  : BB07 in -> 0000000000000001

AssertionPropCallback::Unchanged  : BB07 out -> 0000000000000001; 		jumpDest out -> 0000000000000001

AssertionPropCallback::StartMerge: BB08 in -> 000000000000003F
AssertionPropCallback::Merge     : BB08 in -> 000000000000003F, predBlock BB07 out -> 0000000000000001
AssertionPropCallback::EndMerge  : BB08 in -> 0000000000000001

AssertionPropCallback::Changed   : BB08 before out -> 000000000000003F; after out -> 0000000000000001;
		jumpDest before out -> 000000000000003F; jumpDest after out -> 0000000000000001;

AssertionPropCallback::StartMerge: BB11 in -> 000000000000003F
AssertionPropCallback::Merge     : BB11 in -> 000000000000003F, predBlock BB07 out -> 0000000000000001
AssertionPropCallback::EndMerge  : BB11 in -> 0000000000000001

AssertionPropCallback::Changed   : BB11 before out -> 000000000000003F; after out -> 0000000000000001;
		jumpDest before out -> 000000000000003F; jumpDest after out -> 0000000000000001;

AssertionPropCallback::StartMerge: BB09 in -> 000000000000003F
AssertionPropCallback::Merge     : BB09 in -> 000000000000003F, predBlock BB06 out -> 0000000000000007
AssertionPropCallback::Merge     : BB09 in -> 0000000000000007, predBlock BB08 out -> 0000000000000001
AssertionPropCallback::EndMerge  : BB09 in -> 0000000000000001

AssertionPropCallback::Changed   : BB09 before out -> 000000000000003F; after out -> 0000000000000011;
		jumpDest before out -> 000000000000003F; jumpDest after out -> 0000000000000009;

AssertionPropCallback::StartMerge: BB09 in -> 0000000000000001
AssertionPropCallback::Merge     : BB09 in -> 0000000000000001, predBlock BB06 out -> 0000000000000007
AssertionPropCallback::Merge     : BB09 in -> 0000000000000001, predBlock BB08 out -> 0000000000000001
AssertionPropCallback::EndMerge  : BB09 in -> 0000000000000001

AssertionPropCallback::Unchanged  : BB09 out -> 0000000000000011; 		jumpDest out -> 0000000000000009

AssertionPropCallback::StartMerge: BB10 in -> 000000000000003F
AssertionPropCallback::Merge     : BB10 in -> 000000000000003F, predBlock BB09 out -> 0000000000000011
AssertionPropCallback::EndMerge  : BB10 in -> 0000000000000011

AssertionPropCallback::Changed   : BB10 before out -> 000000000000003F; after out -> 0000000000000031;
		jumpDest before out -> 000000000000003F; jumpDest after out -> 0000000000000011;

AssertionPropCallback::StartMerge: BB03 in -> 000000000000003F
AssertionPropCallback::Merge     : BB03 in -> 000000000000003F, predBlock BB09 out -> 0000000000000011
AssertionPropCallback::EndMerge  : BB03 in -> 0000000000000009

AssertionPropCallback::Changed   : BB03 before out -> 000000000000003F; after out -> 0000000000000009;
		jumpDest before out -> 000000000000003F; jumpDest after out -> 0000000000000009;

AssertionPropCallback::StartMerge: BB04 in -> 0000000000000001
AssertionPropCallback::Merge     : BB04 in -> 0000000000000001, predBlock BB02 out -> 0000000000000001
AssertionPropCallback::Merge     : BB04 in -> 0000000000000001, predBlock BB03 out -> 0000000000000009
AssertionPropCallback::EndMerge  : BB04 in -> 0000000000000001

AssertionPropCallback::Unchanged  : BB04 out -> 0000000000000001; 		jumpDest out -> 0000000000000001



BB01 valueIn  = 0000000000000000 valueOut = 0000000000000001
BB02 valueIn  = 0000000000000001 valueOut = 0000000000000001
BB03 valueIn  = 0000000000000009 valueOut = 0000000000000009
BB04 valueIn  = 0000000000000001 valueOut = 0000000000000001 => BB07 valueOut= 0000000000000001
BB05 valueIn  = 0000000000000001 valueOut = 0000000000000001 => BB07 valueOut= 0000000000000001
BB06 valueIn  = 0000000000000001 valueOut = 0000000000000007
BB07 valueIn  = 0000000000000001 valueOut = 0000000000000001 => BB11 valueOut= 0000000000000001
BB08 valueIn  = 0000000000000001 valueOut = 0000000000000001
BB09 valueIn  = 0000000000000001 valueOut = 0000000000000011 => BB03 valueOut= 0000000000000009
BB10 valueIn  = 0000000000000011 valueOut = 0000000000000031
BB11 valueIn  = 0000000000000001 valueOut = 0000000000000001
Propagating 0000000000000000 assertions for BB01, stmt STMT00000, tree [000168], tree -> 0
Propagating 0000000000000000 assertions for BB01, stmt STMT00000, tree [000000], tree -> 0
Propagating 0000000000000000 assertions for BB01, stmt STMT00000, tree [000001], tree -> 0
Propagating 0000000000000000 assertions for BB01, stmt STMT00000, tree [000002], tree -> 0
Propagating 0000000000000000 assertions for BB01, stmt STMT00000, tree [000003], tree -> 0
Propagating 0000000000000000 assertions for BB01, stmt STMT00001, tree [000169], tree -> 0
Propagating 0000000000000000 assertions for BB01, stmt STMT00001, tree [000004], tree -> 0
Propagating 0000000000000000 assertions for BB01, stmt STMT00001, tree [000005], tree -> 0
Propagating 0000000000000000 assertions for BB01, stmt STMT00002, tree [000006], tree -> 0
Propagating 0000000000000000 assertions for BB01, stmt STMT00002, tree [000007], tree -> 0
Propagating 0000000000000000 assertions for BB01, stmt STMT00002, tree [000008], tree -> 0
Propagating 0000000000000000 assertions for BB01, stmt STMT00016, tree [000009], tree -> 0
Propagating 0000000000000000 assertions for BB01, stmt STMT00016, tree [000054], tree -> 0
Propagating 0000000000000000 assertions for BB01, stmt STMT00016, tree [000055], tree -> 0
Propagating 0000000000000000 assertions for BB01, stmt STMT00017, tree [000058], tree -> 0
Propagating 0000000000000000 assertions for BB01, stmt STMT00017, tree [000059], tree -> 0
Propagating 0000000000000000 assertions for BB01, stmt STMT00017, tree [000060], tree -> 0
Propagating 0000000000000000 assertions for BB01, stmt STMT00018, tree [000063], tree -> 0
Propagating 0000000000000000 assertions for BB01, stmt STMT00018, tree [000170], tree -> 0
Propagating 0000000000000000 assertions for BB01, stmt STMT00018, tree [000171], tree -> 0
Propagating 0000000000000000 assertions for BB01, stmt STMT00018, tree [000064], tree -> 1
Propagating 0000000000000001 assertions for BB01, stmt STMT00018, tree [000065], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00018, tree [000066], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00004, tree [000173], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00004, tree [000172], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00004, tree [000174], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00004, tree [000237], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00004, tree [000179], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00004, tree [000181], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00004, tree [000238], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00004, tree [000184], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00004, tree [000183], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00004, tree [000185], tree -> 0
Propagating 0000000000000001 assertions for BB01, stmt STMT00004, tree [000186], tree -> 0
Propagating 0000000000000009 assertions for BB03, stmt STMT00009, tree [000187], tree -> 0
Propagating 0000000000000009 assertions for BB03, stmt STMT00009, tree [000188], tree -> 0
Propagating 0000000000000009 assertions for BB03, stmt STMT00009, tree [000029], tree -> 0
Propagating 0000000000000009 assertions for BB03, stmt STMT00009, tree [000030], tree -> 0
Propagating 0000000000000009 assertions for BB03, stmt STMT00009, tree [000031], tree -> 0
Propagating 0000000000000001 assertions for BB04, stmt STMT00020, tree [000081], tree -> 0
Propagating 0000000000000001 assertions for BB04, stmt STMT00020, tree [000082], tree -> 0
Propagating 0000000000000001 assertions for BB04, stmt STMT00020, tree [000083], tree -> 0
Propagating 0000000000000001 assertions for BB04, stmt STMT00021, tree [000086], tree -> 0
Propagating 0000000000000001 assertions for BB04, stmt STMT00021, tree [000087], tree -> 0
Propagating 0000000000000001 assertions for BB04, stmt STMT00021, tree [000189], tree -> 0
Propagating 0000000000000001 assertions for BB04, stmt STMT00021, tree [000190], tree -> 0
Propagating 0000000000000001 assertions for BB04, stmt STMT00021, tree [000088], tree -> 1

Non-null prop for index #01 in BB04:
N005 (  4,  4) [000088] ---XG-------              *  IND       int    <l:$288, c:$287>
Propagating 0000000000000001 assertions for BB04, stmt STMT00021, tree [000089], tree -> 0

VN relop, checking BB04 for redundancy
 ... checking dom BB02
 ... checking dom BB01
Failed to find a suitable dominating compare, so we won't optimize
Propagating 0000000000000001 assertions for BB04, stmt STMT00021, tree [000090], tree -> 0
Re-morphing this stmt:
STMT00021 (IL 0x01E...  ???)
N007 (  8,  8) [000090] ---XG-------              *  JTRUE     void  
N006 (  6,  6) [000089] N--XG--N-U--              \--*  NE        int    <l:$28c, c:$28b>
N001 (  1,  1) [000086] ------------                 +--*  LCL_VAR   int    V12 tmp8         u:2 <l:$281, c:$1c1>
N005 (  4,  4) [000088] n---GO------                 \--*  IND       int    <l:$288, c:$287>
N004 (  2,  2) [000190] -------N----                    \--*  ADD       byref  $240
N002 (  1,  1) [000087] ------------                       +--*  LCL_VAR   ref    V08 tmp4         u:2 $80
N003 (  1,  1) [000189] ------------                       \--*  CNS_INT   long   20 field offset Fseq[_version] $200

optAssertionPropMain morphed tree:
N007 (  8,  8) [000090] ----GO------              *  JTRUE     void  
N006 (  6,  6) [000089] N---GO-N-U--              \--*  NE        int    <l:$28c, c:$28b>
N001 (  1,  1) [000086] ------------                 +--*  LCL_VAR   int    V12 tmp8         u:2 <l:$281, c:$1c1>
N005 (  4,  4) [000088] n---GO------                 \--*  IND       int    <l:$288, c:$287>
N004 (  2,  2) [000190] -------N----                    \--*  ADD       byref  $240
N002 (  1,  1) [000087] ------------                       +--*  LCL_VAR   ref    V08 tmp4         u:2 $80
N003 (  1,  1) [000189] ------------                       \--*  CNS_INT   long   20 field offset Fseq[_version] $200

Propagating 0000000000000001 assertions for BB05, stmt STMT00024, tree [000102], tree -> 0
Propagating 0000000000000001 assertions for BB05, stmt STMT00024, tree [000103], tree -> 0
Propagating 0000000000000001 assertions for BB05, stmt STMT00024, tree [000191], tree -> 0
Propagating 0000000000000001 assertions for BB05, stmt STMT00024, tree [000192], tree -> 0
Propagating 0000000000000001 assertions for BB05, stmt STMT00024, tree [000104], tree -> 1

Non-null prop for index #01 in BB05:
N005 (  4,  4) [000104] ---XG-------              *  IND       int    <l:$290, c:$28f>
Propagating 0000000000000001 assertions for BB05, stmt STMT00024, tree [000105], tree -> 0

VN relop, checking BB05 for redundancy
 ... checking dom BB04
 ... checking dom BB02
 ... checking dom BB01
Failed to find a suitable dominating compare, so we won't optimize
Propagating 0000000000000001 assertions for BB05, stmt STMT00024, tree [000106], tree -> 0
Re-morphing this stmt:
STMT00024 (IL 0x01E...  ???)
N007 (  8,  8) [000106] ---XG-------              *  JTRUE     void  
N006 (  6,  6) [000105] N--XG--N-U--              \--*  GE        int    <l:$294, c:$293>
N001 (  1,  1) [000102] ------------                 +--*  LCL_VAR   int    V11 tmp7         u:3 $300
N005 (  4,  4) [000104] n---GO------                 \--*  IND       int    <l:$290, c:$28f>
N004 (  2,  2) [000192] -------N----                    \--*  ADD       byref  $241
N002 (  1,  1) [000103] ------------                       +--*  LCL_VAR   ref    V09 tmp5         u:2 $80
N003 (  1,  1) [000191] ------------                       \--*  CNS_INT   long   16 field offset Fseq[_size] $201

optAssertionPropMain morphed tree:
N007 (  8,  8) [000106] ----GO------              *  JTRUE     void  
N006 (  6,  6) [000105] N---GO-N-U--              \--*  GE        int    <l:$294, c:$293>
N001 (  1,  1) [000102] ------------                 +--*  LCL_VAR   int    V11 tmp7         u:3 $300
N005 (  4,  4) [000104] n---GO------                 \--*  IND       int    <l:$290, c:$28f>
N004 (  2,  2) [000192] -------N----                    \--*  ADD       byref  $241
N002 (  1,  1) [000103] ------------                       +--*  LCL_VAR   ref    V09 tmp5         u:2 $80
N003 (  1,  1) [000191] ------------                       \--*  CNS_INT   long   16 field offset Fseq[_size] $201

Propagating 0000000000000001 assertions for BB06, stmt STMT00025, tree [000109], tree -> 0
Propagating 0000000000000001 assertions for BB06, stmt STMT00025, tree [000208], tree -> 0
Propagating 0000000000000001 assertions for BB06, stmt STMT00025, tree [000209], tree -> 0
Propagating 0000000000000001 assertions for BB06, stmt STMT00025, tree [000110], tree -> 1

Non-null prop for index #01 in BB06:
N004 (  4,  4) [000110] ---XG-------              *  IND       ref    <l:$185, c:$184>
Propagating 0000000000000001 assertions for BB06, stmt STMT00025, tree [000193], tree -> 0
Propagating 0000000000000001 assertions for BB06, stmt STMT00025, tree [000194], tree -> 0
Propagating 0000000000000001 assertions for BB06, stmt STMT00025, tree [000113], tree -> 0
Propagating 0000000000000001 assertions for BB06, stmt STMT00025, tree [000195], tree -> 0
Propagating 0000000000000001 assertions for BB06, stmt STMT00025, tree [000198], tree -> 2
Propagating 0000000000000003 assertions for BB06, stmt STMT00025, tree [000199], tree -> 3
Propagating 0000000000000007 assertions for BB06, stmt STMT00025, tree [000196], tree -> 0
Propagating 0000000000000007 assertions for BB06, stmt STMT00025, tree [000197], tree -> 0
Propagating 0000000000000007 assertions for BB06, stmt STMT00025, tree [000200], tree -> 0
Propagating 0000000000000007 assertions for BB06, stmt STMT00025, tree [000201], tree -> 0
Propagating 0000000000000007 assertions for BB06, stmt STMT00025, tree [000202], tree -> 0
Propagating 0000000000000007 assertions for BB06, stmt STMT00025, tree [000203], tree -> 0
Propagating 0000000000000007 assertions for BB06, stmt STMT00025, tree [000204], tree -> 0
Propagating 0000000000000007 assertions for BB06, stmt STMT00025, tree [000205], tree -> 0
Propagating 0000000000000007 assertions for BB06, stmt STMT00025, tree [000114], tree -> 0
Propagating 0000000000000007 assertions for BB06, stmt STMT00025, tree [000206], tree -> 0
Propagating 0000000000000007 assertions for BB06, stmt STMT00025, tree [000207], tree -> 0
Propagating 0000000000000007 assertions for BB06, stmt STMT00025, tree [000115], tree -> 0
Propagating 0000000000000007 assertions for BB06, stmt STMT00025, tree [000116], tree -> 0
Re-morphing this stmt:
STMT00025 (IL 0x01E...  ???)
N023 ( 18, 22) [000116] -A-XG---R---              *  ASG       ref    <l:$19a, c:$199>
N022 (  1,  1) [000115] D------N----              +--*  LCL_VAR   ref    V10 tmp6         d:4 <l:$194, c:$345>
N021 ( 18, 22) [000207] -A-XG-------              \--*  COMMA     ref    <l:$19a, c:$199>
N006 (  4,  4) [000194] -A-XG---R---                 +--*  ASG       ref    <l:$185, c:$184>
N005 (  1,  1) [000193] D------N----                 |  +--*  LCL_VAR   ref    V17 tmp13        d:2 <l:$183, c:$343>
N004 (  4,  4) [000110] n---GO------                 |  \--*  IND       ref    <l:$185, c:$184>
N003 (  2,  2) [000209] -------N----                 |     \--*  ADD       byref  $242
N001 (  1,  1) [000109] ------------                 |        +--*  LCL_VAR   ref    V09 tmp5         u:2 (last use) $80
N002 (  1,  1) [000208] ------------                 |        \--*  CNS_INT   long   8 field offset Fseq[_items] $202
N020 ( 14, 18) [000206] ---XG-------                 \--*  COMMA     ref    <l:$196, c:$195>
N010 (  8, 11) [000199] ---X--------                    +--*  ARR_BOUNDS_CHECK_Rng void   <l:$191, c:$190>
N007 (  1,  1) [000113] ------------                    |  +--*  LCL_VAR   int    V11 tmp7         u:3 $300
N009 (  3,  3) [000198] ---X--------                    |  \--*  ARR_LENGTH int    <l:$29e, c:$29d>
N008 (  1,  1) [000195] ------------                    |     \--*  LCL_VAR   ref    V17 tmp13        u:2 <l:$183, c:$343>
N019 (  6,  7) [000114] a---G-------                    \--*  IND       ref    <l:$194, c:$345>
N018 (  5,  6) [000205] -------N----                       \--*  ADD       byref  $440
N011 (  1,  1) [000196] ------------                          +--*  LCL_VAR   ref    V17 tmp13        u:2 (last use) <l:$183, c:$343>
N017 (  4,  5) [000204] -------N----                          \--*  ADD       long   $402
N015 (  3,  4) [000202] -------N----                             +--*  LSH       long   $401
N013 (  2,  3) [000200] ------------                             |  +--*  CAST      long <- int $400
N012 (  1,  1) [000197] i-----------                             |  |  \--*  LCL_VAR   int    V11 tmp7         u:3 $300
N014 (  1,  1) [000201] -------N----                             |  \--*  CNS_INT   long   3 $203
N016 (  1,  1) [000203] ------------                             \--*  CNS_INT   long   16 Fseq[#FirstElem] $201

optAssertionPropMain morphed tree:
N023 ( 18, 22) [000116] -A-XGO--R---              *  ASG       ref    <l:$19a, c:$199>
N022 (  1,  1) [000115] D------N----              +--*  LCL_VAR   ref    V10 tmp6         d:4 <l:$194, c:$345>
N021 ( 18, 22) [000207] -A-XGO------              \--*  COMMA     ref    <l:$19a, c:$199>
N006 (  4,  4) [000194] -A--GO--R---                 +--*  ASG       ref    <l:$185, c:$184>
N005 (  1,  1) [000193] D------N----                 |  +--*  LCL_VAR   ref    V17 tmp13        d:2 <l:$183, c:$343>
N004 (  4,  4) [000110] n---GO------                 |  \--*  IND       ref    <l:$185, c:$184>
N003 (  2,  2) [000209] -------N----                 |     \--*  ADD       byref  $242
N001 (  1,  1) [000109] ------------                 |        +--*  LCL_VAR   ref    V09 tmp5         u:2 (last use) $80
N002 (  1,  1) [000208] ------------                 |        \--*  CNS_INT   long   8 field offset Fseq[_items] $202
N020 ( 14, 18) [000206] ---XG-------                 \--*  COMMA     ref    <l:$196, c:$195>
N010 (  8, 11) [000199] ---X--------                    +--*  ARR_BOUNDS_CHECK_Rng void   <l:$191, c:$190>
N007 (  1,  1) [000113] ------------                    |  +--*  LCL_VAR   int    V11 tmp7         u:3 $300
N009 (  3,  3) [000198] ---X--------                    |  \--*  ARR_LENGTH int    <l:$29e, c:$29d>
N008 (  1,  1) [000195] ------------                    |     \--*  LCL_VAR   ref    V17 tmp13        u:2 <l:$183, c:$343>
N019 (  6,  7) [000114] a---G-------                    \--*  IND       ref    <l:$194, c:$345>
N018 (  5,  6) [000205] -------N----                       \--*  ADD       byref  $440
N011 (  1,  1) [000196] ------------                          +--*  LCL_VAR   ref    V17 tmp13        u:2 (last use) <l:$183, c:$343>
N017 (  4,  5) [000204] -------N----                          \--*  ADD       long   $402
N015 (  3,  4) [000202] -------N----                             +--*  LSH       long   $401
N013 (  2,  3) [000200] ------------                             |  +--*  CAST      long <- int $400
N012 (  1,  1) [000197] i-----------                             |  |  \--*  LCL_VAR   int    V11 tmp7         u:3 $300
N014 (  1,  1) [000201] -------N----                             |  \--*  CNS_INT   long   3 $203
N016 (  1,  1) [000203] ------------                             \--*  CNS_INT   long   16 Fseq[#FirstElem] $201

Propagating 0000000000000007 assertions for BB06, stmt STMT00026, tree [000121], tree -> 0
Propagating 0000000000000007 assertions for BB06, stmt STMT00026, tree [000122], tree -> 0
Propagating 0000000000000007 assertions for BB06, stmt STMT00026, tree [000123], tree -> 0
Propagating 0000000000000007 assertions for BB06, stmt STMT00026, tree [000124], tree -> 0
Propagating 0000000000000007 assertions for BB06, stmt STMT00026, tree [000125], tree -> 0
Propagating 0000000000000007 assertions for BB06, stmt STMT00027, tree [000126], tree -> 0
Propagating 0000000000000007 assertions for BB06, stmt STMT00027, tree [000128], tree -> 0
Propagating 0000000000000007 assertions for BB06, stmt STMT00027, tree [000129], tree -> 0
Propagating 0000000000000001 assertions for BB07, stmt STMT00029, tree [000137], tree -> 0
Propagating 0000000000000001 assertions for BB07, stmt STMT00029, tree [000140], tree -> 0
Propagating 0000000000000001 assertions for BB07, stmt STMT00029, tree [000210], tree -> 0
Propagating 0000000000000001 assertions for BB07, stmt STMT00029, tree [000211], tree -> 0
Propagating 0000000000000001 assertions for BB07, stmt STMT00029, tree [000141], tree -> 1

Non-null prop for index #01 in BB07:
N005 (  4,  4) [000141] ---XG-------              *  IND       int    <l:$288, c:$295>
Propagating 0000000000000001 assertions for BB07, stmt STMT00029, tree [000142], tree -> 0

VN relop, checking BB07 for redundancy
 ... checking dom BB04
 ... checking dom BB02
 ... checking dom BB01
Failed to find a suitable dominating compare, so we won't optimize
Propagating 0000000000000001 assertions for BB07, stmt STMT00029, tree [000143], tree -> 0
Re-morphing this stmt:
STMT00029 (IL 0x01E...  ???)
N007 (  8,  8) [000143] ---XG-------              *  JTRUE     void  
N006 (  6,  6) [000142] J--XG--N----              \--*  NE        int    <l:$28c, c:$297>
N001 (  1,  1) [000137] ------------                 +--*  LCL_VAR   int    V12 tmp8         u:2 <l:$281, c:$1c1>
N005 (  4,  4) [000141] n---GO------                 \--*  IND       int    <l:$288, c:$295>
N004 (  2,  2) [000211] -------N----                    \--*  ADD       byref  $240
N002 (  1,  1) [000140] ------------                       +--*  LCL_VAR   ref    V09 tmp5         u:2 $80
N003 (  1,  1) [000210] ------------                       \--*  CNS_INT   long   20 field offset Fseq[_version] $200

optAssertionPropMain morphed tree:
N007 (  8,  8) [000143] ----GO------              *  JTRUE     void  
N006 (  6,  6) [000142] J---GO-N----              \--*  NE        int    <l:$28c, c:$297>
N001 (  1,  1) [000137] ------------                 +--*  LCL_VAR   int    V12 tmp8         u:2 <l:$281, c:$1c1>
N005 (  4,  4) [000141] n---GO------                 \--*  IND       int    <l:$288, c:$295>
N004 (  2,  2) [000211] -------N----                    \--*  ADD       byref  $240
N002 (  1,  1) [000140] ------------                       +--*  LCL_VAR   ref    V09 tmp5         u:2 $80
N003 (  1,  1) [000210] ------------                       \--*  CNS_INT   long   20 field offset Fseq[_version] $200

Propagating 0000000000000001 assertions for BB08, stmt STMT00030, tree [000148], tree -> 0
Propagating 0000000000000001 assertions for BB08, stmt STMT00030, tree [000212], tree -> 0
Propagating 0000000000000001 assertions for BB08, stmt STMT00030, tree [000213], tree -> 0
Propagating 0000000000000001 assertions for BB08, stmt STMT00030, tree [000149], tree -> 1

Non-null prop for index #01 in BB08:
N004 (  4,  4) [000149] ---XG-------              *  IND       int    <l:$290, c:$298>
Propagating 0000000000000001 assertions for BB08, stmt STMT00030, tree [000150], tree -> 0
Propagating 0000000000000001 assertions for BB08, stmt STMT00030, tree [000151], tree -> 0
Propagating 0000000000000001 assertions for BB08, stmt STMT00030, tree [000152], tree -> 0
Propagating 0000000000000001 assertions for BB08, stmt STMT00030, tree [000153], tree -> 0
Re-morphing this stmt:
STMT00030 (IL 0x01E...  ???)
N008 (  6,  6) [000153] -A-XG---R---              *  ASG       int    <l:$29c, c:$29b>
N007 (  1,  1) [000152] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:5 <l:$29a, c:$299>
N006 (  6,  6) [000151] ---XG-------              \--*  ADD       int    <l:$29c, c:$29b>
N004 (  4,  4) [000149] n---GO------                 +--*  IND       int    <l:$290, c:$298>
N003 (  2,  2) [000213] -------N----                 |  \--*  ADD       byref  $241
N001 (  1,  1) [000148] ------------                 |     +--*  LCL_VAR   ref    V09 tmp5         u:2 $80
N002 (  1,  1) [000212] ------------                 |     \--*  CNS_INT   long   16 field offset Fseq[_size] $201
N005 (  1,  1) [000150] ------------                 \--*  CNS_INT   int    1 $44

optAssertionPropMain morphed tree:
N008 (  6,  6) [000153] -A--GO--R---              *  ASG       int    <l:$29c, c:$29b>
N007 (  1,  1) [000152] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:5 <l:$29a, c:$299>
N006 (  6,  6) [000151] ----GO------              \--*  ADD       int    <l:$29c, c:$29b>
N004 (  4,  4) [000149] n---GO------                 +--*  IND       int    <l:$290, c:$298>
N003 (  2,  2) [000213] -------N----                 |  \--*  ADD       byref  $241
N001 (  1,  1) [000148] ------------                 |     +--*  LCL_VAR   ref    V09 tmp5         u:2 $80
N002 (  1,  1) [000212] ------------                 |     \--*  CNS_INT   long   16 field offset Fseq[_size] $201
N005 (  1,  1) [000150] ------------                 \--*  CNS_INT   int    1 $44

Propagating 0000000000000001 assertions for BB08, stmt STMT00031, tree [000158], tree -> 0
Propagating 0000000000000001 assertions for BB08, stmt STMT00031, tree [000156], tree -> 0
Propagating 0000000000000001 assertions for BB08, stmt STMT00031, tree [000160], tree -> 0
Propagating 0000000000000001 assertions for BB08, stmt STMT00023, tree [000096], tree -> 0
Propagating 0000000000000001 assertions for BB08, stmt STMT00023, tree [000097], tree -> 0
Propagating 0000000000000001 assertions for BB08, stmt STMT00023, tree [000098], tree -> 0
Propagating 0000000000000001 assertions for BB09, stmt STMT00006, tree [000130], tree -> 0
Propagating 0000000000000001 assertions for BB09, stmt STMT00006, tree [000019], tree -> 0
Propagating 0000000000000001 assertions for BB09, stmt STMT00006, tree [000020], tree -> 0

VN relop, checking BB09 for redundancy
 ... checking dom BB04
 ... checking dom BB02
 ... checking dom BB01
Failed to find a suitable dominating compare, so we won't optimize
Propagating 0000000000000001 assertions for BB09, stmt STMT00006, tree [000021], tree -> 4
Propagating 0000000000000011 assertions for BB10, stmt STMT00011, tree [000032], tree -> 0
Propagating 0000000000000011 assertions for BB10, stmt STMT00011, tree [000215], tree -> 0
Propagating 0000000000000011 assertions for BB10, stmt STMT00011, tree [000216], tree -> 0
Propagating 0000000000000011 assertions for BB10, stmt STMT00011, tree [000166], tree -> 6
Propagating 0000000000000031 assertions for BB10, stmt STMT00011, tree [000035], tree -> 0
Propagating 0000000000000001 assertions for BB11, stmt STMT00032, tree [000163], tree -> 0
*************** In fgDebugCheckBBlist

*************** Finishing PHASE Assertion prop

*************** Starting PHASE Optimize index checks
*************** In OptimizeRangeChecks()
Blocks/trees before phase

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i label target hascall gcsafe newobj nullcheck 
BB02 [0001]  1       BB01                  1       [00D..00F)-> BB04 (always)                     keep i label gcsafe 
BB03 [0002]  1       BB09                  2     0 [00F..01E)                                     i Loop label target hascall gcsafe bwd bwd-target 
BB04 [0003]  2       BB02,BB03             8     0 [01E..027)-> BB07 ( cond )                     i label target gcsafe bwd 
BB05 [0013]  1       BB04                  1     0 [01E..01F)-> BB07 ( cond )                     i gcsafe bwd 
BB06 [0014]  1       BB05                  2     0 [01E..01F)-> BB09 (always)                     i gcsafe idxlen bwd 
BB07 [0015]  2       BB04,BB05             2     0 [01E..01F)-> BB11 ( cond )                     i label target gcsafe bwd 
BB08 [0019]  1       BB07                  2     0 [01E..01F)                                     i label target gcsafe bwd 
BB09 [0016]  2       BB06,BB08             8     0 [???..???)-> BB03 ( cond )                     internal label target gcsafe bwd 
BB10 [0004]  1       BB09                  1       [027..03E)        (return)                     i gcsafe 
BB11 [0018]  1       BB07                  0       [01E..01F)        (throw )                     i rare label target hascall gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..00D), preds={} succs={BB02}

***** BB01
STMT00000 (IL 0x000...0x005)
N005 ( 16, 16) [000003] -AC-----R---              *  ASG       ref    $180
N004 (  1,  1) [000002] D------N----              +--*  LCL_VAR   ref    V05 tmp1         d:2 $180
N003 ( 16, 16) [000001] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $180
N002 (  2, 10) [000000] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e method $100

***** BB01
STMT00001 (IL   ???...  ???)
N003 ( 15,  8) [000005] --CXG-------              *  CALL      void   Batcher..ctor $VN.Void
N002 (  1,  1) [000004] ------------ this in rcx  \--*  LCL_VAR   ref    V05 tmp1         u:2 $180

***** BB01
STMT00002 (IL 0x005...  ???)
N003 (  1,  3) [000008] -A------R---              *  ASG       ref    $180
N002 (  1,  1) [000007] D------N----              +--*  LCL_VAR   ref    V01 loc0         d:2 $180
N001 (  1,  1) [000006] ------------              \--*  LCL_VAR   ref    V05 tmp1         u:2 (last use) $180

***** BB01
STMT00016 (IL 0x006...  ???)
N003 (  5,  4) [000055] -A------R---              *  ASG       ref    $80
N002 (  3,  2) [000054] D------N----              +--*  LCL_VAR   ref    V13 tmp9         d:2 $80
N001 (  1,  1) [000009] ------------              \--*  LCL_VAR   ref    V00 arg0         u:1 $80

***** BB01
STMT00017 (IL 0x006...  ???)
N003 (  5,  4) [000060] -A------R---              *  ASG       int    $40
N002 (  3,  2) [000059] D------N----              +--*  LCL_VAR   int    V15 tmp11        d:2 $40
N001 (  1,  1) [000058] ------------              \--*  CNS_INT   int    0 $40

***** BB01
STMT00018 (IL 0x006...  ???)
N006 (  8,  7) [000066] -A-XG---R---              *  ASG       int    <l:$283, c:$282>
N005 (  3,  2) [000065] D------N----              +--*  LCL_VAR   int    V16 tmp12        d:2 <l:$281, c:$1c1>
N004 (  4,  4) [000064] ---XG-------              \--*  IND       int    <l:$283, c:$282>
N003 (  2,  2) [000171] -------N----                 \--*  ADD       byref  $240
N001 (  1,  1) [000063] ------------                    +--*  LCL_VAR   ref    V13 tmp9         u:2 (last use) $80
N002 (  1,  1) [000170] ------------                    \--*  CNS_INT   long   20 field offset Fseq[_version] $200

***** BB01
STMT00004 (IL   ???...  ???)
N011 (  7,  9) [000186] -A----------              *  COMMA     void   <l:$281, c:$1c1>
N007 (  4,  6) [000238] -A----------              +--*  COMMA     void   $40
N003 (  3,  3) [000174] -A------R---              |  +--*  ASG       ref    $80
N002 (  1,  1) [000172] D------N----              |  |  +--*  LCL_VAR   ref    V09 tmp5         d:2 $80
N001 (  3,  2) [000173] ------------              |  |  \--*  LCL_VAR   ref    V13 tmp9         u:2 (last use) $80
N006 (  1,  3) [000181] -A------R---              |  \--*  ASG       int    $40
N005 (  1,  1) [000179] D------N----              |     +--*  LCL_VAR   int    V11 tmp7         d:2 $40
N004 (  1,  1) [000237] ------------              |     \--*  CNS_INT   int    0 $40
N010 (  3,  3) [000185] -A------R---              \--*  ASG       int    <l:$281, c:$1c1>
N009 (  1,  1) [000183] D------N----                 +--*  LCL_VAR   int    V12 tmp8         d:2 <l:$281, c:$1c1>
N008 (  3,  2) [000184] ------------                 \--*  LCL_VAR   int    V16 tmp12        u:2 (last use) <l:$281, c:$1c1>

------------ BB02 [00D..00F) -> BB04 (always), preds={BB01} succs={BB04}

------------ BB03 [00F..01E), preds={BB09} succs={BB04}

***** BB03
STMT00009 (IL 0x017...0x019)
N005 ( 16, 10) [000031] --CXG-------              *  CALL      void   Batcher.Push $VN.Void
N003 (  1,  1) [000029] ------------ this in rcx  +--*  LCL_VAR   ref    V01 loc0         u:2 $180
N004 (  1,  1) [000030] ------------ arg1 in rdx  \--*  LCL_VAR   ref    V10 tmp6         u:2 (last use) $480

------------ BB04 [01E..027) -> BB07 (cond), preds={BB02,BB03} succs={BB05,BB07}

***** BB04
STMT00034 (IL   ???...  ???)
N005 (  0,  0) [000222] -A------R---              *  ASG       int   
N004 (  0,  0) [000220] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:3
N003 (  0,  0) [000221] ------------              \--*  PHI       int   
N001 (  0,  0) [000230] ------------ pred BB03       +--*  PHI_ARG   int    V11 tmp7         u:4
N002 (  0,  0) [000229] ------------ pred BB02       \--*  PHI_ARG   int    V11 tmp7         u:2 $40

***** BB04
STMT00020 (IL 0x01E...  ???)
N003 (  1,  3) [000083] -A------R---              *  ASG       ref    $80
N002 (  1,  1) [000082] D------N----              +--*  LCL_VAR   ref    V08 tmp4         d:2 $80
N001 (  1,  1) [000081] ------------              \--*  LCL_VAR   ref    V09 tmp5         u:2 $80

***** BB04
STMT00021 (IL 0x01E...  ???)
N007 (  8,  8) [000090] ----GO------              *  JTRUE     void  
N006 (  6,  6) [000089] N---GO-N-U--              \--*  NE        int    <l:$28c, c:$28b>
N001 (  1,  1) [000086] ------------                 +--*  LCL_VAR   int    V12 tmp8         u:2 <l:$281, c:$1c1>
N005 (  4,  4) [000088] n---GO------                 \--*  IND       int    <l:$288, c:$287>
N004 (  2,  2) [000190] -------N----                    \--*  ADD       byref  $240
N002 (  1,  1) [000087] ------------                       +--*  LCL_VAR   ref    V08 tmp4         u:2 $80
N003 (  1,  1) [000189] ------------                       \--*  CNS_INT   long   20 field offset Fseq[_version] $200

------------ BB05 [01E..01F) -> BB07 (cond), preds={BB04} succs={BB06,BB07}

***** BB05
STMT00024 (IL 0x01E...  ???)
N007 (  8,  8) [000106] ----GO------              *  JTRUE     void  
N006 (  6,  6) [000105] N---GO-N-U--              \--*  GE        int    <l:$294, c:$293>
N001 (  1,  1) [000102] ------------                 +--*  LCL_VAR   int    V11 tmp7         u:3 $300
N005 (  4,  4) [000104] n---GO------                 \--*  IND       int    <l:$290, c:$28f>
N004 (  2,  2) [000192] -------N----                    \--*  ADD       byref  $241
N002 (  1,  1) [000103] ------------                       +--*  LCL_VAR   ref    V09 tmp5         u:2 $80
N003 (  1,  1) [000191] ------------                       \--*  CNS_INT   long   16 field offset Fseq[_size] $201

------------ BB06 [01E..01F) -> BB09 (always), preds={BB05} succs={BB09}

***** BB06
STMT00025 (IL 0x01E...  ???)
N023 ( 18, 22) [000116] -A-XGO--R---              *  ASG       ref    <l:$19a, c:$199>
N022 (  1,  1) [000115] D------N----              +--*  LCL_VAR   ref    V10 tmp6         d:4 <l:$194, c:$345>
N021 ( 18, 22) [000207] -A-XGO------              \--*  COMMA     ref    <l:$19a, c:$199>
N006 (  4,  4) [000194] -A--GO--R---                 +--*  ASG       ref    <l:$185, c:$184>
N005 (  1,  1) [000193] D------N----                 |  +--*  LCL_VAR   ref    V17 tmp13        d:2 <l:$183, c:$343>
N004 (  4,  4) [000110] n---GO------                 |  \--*  IND       ref    <l:$185, c:$184>
N003 (  2,  2) [000209] -------N----                 |     \--*  ADD       byref  $242
N001 (  1,  1) [000109] ------------                 |        +--*  LCL_VAR   ref    V09 tmp5         u:2 (last use) $80
N002 (  1,  1) [000208] ------------                 |        \--*  CNS_INT   long   8 field offset Fseq[_items] $202
N020 ( 14, 18) [000206] ---XG-------                 \--*  COMMA     ref    <l:$196, c:$195>
N010 (  8, 11) [000199] ---X--------                    +--*  ARR_BOUNDS_CHECK_Rng void   <l:$191, c:$190>
N007 (  1,  1) [000113] ------------                    |  +--*  LCL_VAR   int    V11 tmp7         u:3 $300
N009 (  3,  3) [000198] ---X--------                    |  \--*  ARR_LENGTH int    <l:$29e, c:$29d>
N008 (  1,  1) [000195] ------------                    |     \--*  LCL_VAR   ref    V17 tmp13        u:2 <l:$183, c:$343>
N019 (  6,  7) [000114] a---G-------                    \--*  IND       ref    <l:$194, c:$345>
N018 (  5,  6) [000205] -------N----                       \--*  ADD       byref  $440
N011 (  1,  1) [000196] ------------                          +--*  LCL_VAR   ref    V17 tmp13        u:2 (last use) <l:$183, c:$343>
N017 (  4,  5) [000204] -------N----                          \--*  ADD       long   $402
N015 (  3,  4) [000202] -------N----                             +--*  LSH       long   $401
N013 (  2,  3) [000200] ------------                             |  +--*  CAST      long <- int $400
N012 (  1,  1) [000197] i-----------                             |  |  \--*  LCL_VAR   int    V11 tmp7         u:3 $300
N014 (  1,  1) [000201] -------N----                             |  \--*  CNS_INT   long   3 $203
N016 (  1,  1) [000203] ------------                             \--*  CNS_INT   long   16 Fseq[#FirstElem] $201

***** BB06
STMT00026 (IL 0x01E...  ???)
N005 (  3,  3) [000125] -A------R---              *  ASG       int    $29f
N004 (  1,  1) [000124] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:6 $29f
N003 (  3,  3) [000123] ------------              \--*  ADD       int    $29f
N001 (  1,  1) [000121] ------------                 +--*  LCL_VAR   int    V11 tmp7         u:3 (last use) $300
N002 (  1,  1) [000122] ------------                 \--*  CNS_INT   int    1 $44

***** BB06
STMT00027 (IL 0x01E...  ???)
N003 (  1,  3) [000129] -A------R---              *  ASG       bool   $44
N002 (  1,  1) [000128] D------N----              +--*  LCL_VAR   int    V07 tmp3         d:4 $44
N001 (  1,  1) [000126] ------------              \--*  CNS_INT   int    1 $44

------------ BB07 [01E..01F) -> BB11 (cond), preds={BB04,BB05} succs={BB08,BB11}

***** BB07
STMT00029 (IL 0x01E...  ???)
N007 (  8,  8) [000143] ----GO------              *  JTRUE     void  
N006 (  6,  6) [000142] J---GO-N----              \--*  NE        int    <l:$28c, c:$297>
N001 (  1,  1) [000137] ------------                 +--*  LCL_VAR   int    V12 tmp8         u:2 <l:$281, c:$1c1>
N005 (  4,  4) [000141] n---GO------                 \--*  IND       int    <l:$288, c:$295>
N004 (  2,  2) [000211] -------N----                    \--*  ADD       byref  $240
N002 (  1,  1) [000140] ------------                       +--*  LCL_VAR   ref    V09 tmp5         u:2 $80
N003 (  1,  1) [000210] ------------                       \--*  CNS_INT   long   20 field offset Fseq[_version] $200

------------ BB08 [01E..01F), preds={BB07} succs={BB09}

***** BB08
STMT00030 (IL 0x01E...  ???)
N008 (  6,  6) [000153] -A--GO--R---              *  ASG       int    <l:$29c, c:$29b>
N007 (  1,  1) [000152] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:5 <l:$29a, c:$299>
N006 (  6,  6) [000151] ----GO------              \--*  ADD       int    <l:$29c, c:$29b>
N004 (  4,  4) [000149] n---GO------                 +--*  IND       int    <l:$290, c:$298>
N003 (  2,  2) [000213] -------N----                 |  \--*  ADD       byref  $241
N001 (  1,  1) [000148] ------------                 |     +--*  LCL_VAR   ref    V09 tmp5         u:2 $80
N002 (  1,  1) [000212] ------------                 |     \--*  CNS_INT   long   16 field offset Fseq[_size] $201
N005 (  1,  1) [000150] ------------                 \--*  CNS_INT   int    1 $44

***** BB08
STMT00031 (IL 0x01E...  ???)
N003 (  1,  3) [000160] -A------R---              *  ASG       ref    $VN.Null
N002 (  1,  1) [000156] D------N----              +--*  LCL_VAR   ref    V10 tmp6         d:3 $VN.Null
N001 (  1,  1) [000158] ------------              \--*  CNS_INT   ref    null $VN.Null

***** BB08
STMT00023 (IL 0x01E...  ???)
N003 (  1,  3) [000098] -A------R---              *  ASG       bool   $40
N002 (  1,  1) [000097] D------N----              +--*  LCL_VAR   int    V07 tmp3         d:3 $40
N001 (  1,  1) [000096] ------------              \--*  CNS_INT   int    0 $40

------------ BB09 [???..???) -> BB03 (cond), preds={BB06,BB08} succs={BB10,BB03}

***** BB09
STMT00036 (IL   ???...  ???)
N005 (  0,  0) [000228] -A------R---              *  ASG       ref   
N004 (  0,  0) [000226] D------N----              +--*  LCL_VAR   ref    V10 tmp6         d:2
N003 (  0,  0) [000227] ------------              \--*  PHI       ref   
N001 (  0,  0) [000234] ------------ pred BB06       +--*  PHI_ARG   ref    V10 tmp6         u:4 <l:$194, c:$345>
N002 (  0,  0) [000231] ------------ pred BB08       \--*  PHI_ARG   ref    V10 tmp6         u:3 $VN.Null

***** BB09
STMT00035 (IL   ???...  ???)
N005 (  0,  0) [000225] -A------R---              *  ASG       bool  
N004 (  0,  0) [000223] D------N----              +--*  LCL_VAR   bool   V07 tmp3         d:2
N003 (  0,  0) [000224] ------------              \--*  PHI       bool  
N001 (  0,  0) [000235] ------------ pred BB06       +--*  PHI_ARG   bool   V07 tmp3         u:4 $44
N002 (  0,  0) [000232] ------------ pred BB08       \--*  PHI_ARG   bool   V07 tmp3         u:3 $40

***** BB09
STMT00033 (IL   ???...  ???)
N005 (  0,  0) [000219] -A------R---              *  ASG       int   
N004 (  0,  0) [000217] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:4
N003 (  0,  0) [000218] ------------              \--*  PHI       int   
N001 (  0,  0) [000236] ------------ pred BB06       +--*  PHI_ARG   int    V11 tmp7         u:6 $29f
N002 (  0,  0) [000233] ------------ pred BB08       \--*  PHI_ARG   int    V11 tmp7         u:5 <l:$29a, c:$299>

***** BB09
STMT00006 (IL   ???...  ???)
N004 (  5,  5) [000021] ------------              *  JTRUE     void  
N003 (  3,  3) [000020] J------N----              \--*  NE        int    $2a1
N001 (  1,  1) [000130] ------------                 +--*  LCL_VAR   bool   V07 tmp3         u:2 (last use) $4c0
N002 (  1,  1) [000019] ------------                 \--*  CNS_INT   int    0 $40

------------ BB10 [027..03E) (return), preds={BB09} succs={}

***** BB10
STMT00011 (IL   ???...  ???)
N005 (  5,  5) [000035] ----GO------              *  RETURN    ref    $149
N004 (  4,  4) [000166] n---GO------              \--*  IND       ref    <l:$1a0, c:$19f>
N003 (  2,  2) [000216] -------N----                 \--*  ADD       byref  $245
N001 (  1,  1) [000032] ------------                    +--*  LCL_VAR   ref    V01 loc0         u:2 (last use) $180
N002 (  1,  1) [000215] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_batches] $202

------------ BB11 [01E..01F) (throw), preds={BB07} succs={}

***** BB11
STMT00032 (IL 0x01E...  ???)
N001 ( 14,  5) [000163] --CXG-------              *  CALL      void   System.ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion $VN.Void

-------------------------------------------------------------------------------------------------------------------
Looking for array size assertions for: $3c0
ArrSize for lengthVN:3C0 = 0
[RangeCheck::GetRange] BB06N007 (  1,  1) [000113] ------------              *  LCL_VAR   int    V11 tmp7         u:3 $300
{
----------------------------------------------------
N005 (  0,  0) [000222] -A------R---              *  ASG       int   
N004 (  0,  0) [000220] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:3
N003 (  0,  0) [000221] ------------              \--*  PHI       int   
N001 (  0,  0) [000230] ------------ pred BB03       +--*  PHI_ARG   int    V11 tmp7         u:4
N002 (  0,  0) [000229] ------------ pred BB02       \--*  PHI_ARG   int    V11 tmp7         u:2 $40
----------------------------------------------------
   [RangeCheck::GetRange] BB04N003 (  0,  0) [000221] ------------              *  PHI       int   
N001 (  0,  0) [000230] ------------ pred BB03    +--*  PHI_ARG   int    V11 tmp7         u:4
N002 (  0,  0) [000229] ------------ pred BB02    \--*  PHI_ARG   int    V11 tmp7         u:2 $40
   {
      [RangeCheck::GetRange] BB04N001 (  0,  0) [000230] ------------              *  PHI_ARG   int    V11 tmp7         u:4
      {
----------------------------------------------------
N005 (  0,  0) [000219] -A------R---              *  ASG       int   
N004 (  0,  0) [000217] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:4
N003 (  0,  0) [000218] ------------              \--*  PHI       int   
N001 (  0,  0) [000236] ------------ pred BB06       +--*  PHI_ARG   int    V11 tmp7         u:6 $29f
N002 (  0,  0) [000233] ------------ pred BB08       \--*  PHI_ARG   int    V11 tmp7         u:5 <l:$29a, c:$299>
----------------------------------------------------
         [RangeCheck::GetRange] BB09N003 (  0,  0) [000218] ------------              *  PHI       int   
N001 (  0,  0) [000236] ------------ pred BB06    +--*  PHI_ARG   int    V11 tmp7         u:6 $29f
N002 (  0,  0) [000233] ------------ pred BB08    \--*  PHI_ARG   int    V11 tmp7         u:5 <l:$29a, c:$299>
         {
            [RangeCheck::GetRange] BB09N001 (  0,  0) [000236] ------------              *  PHI_ARG   int    V11 tmp7         u:6 $29f
            {
----------------------------------------------------
N005 (  3,  3) [000125] -A------R---              *  ASG       int    $29f
N004 (  1,  1) [000124] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:6 $29f
N003 (  3,  3) [000123] ------------              \--*  ADD       int    $29f
N001 (  1,  1) [000121] ------------                 +--*  LCL_VAR   int    V11 tmp7         u:3 (last use) $300
N002 (  1,  1) [000122] ------------                 \--*  CNS_INT   int    1 $44
----------------------------------------------------
               [RangeCheck::GetRange] BB06N003 (  3,  3) [000123] ------------              *  ADD       int    $29f
N001 (  1,  1) [000121] ------------              +--*  LCL_VAR   int    V11 tmp7         u:3 (last use) $300
N002 (  1,  1) [000122] ------------              \--*  CNS_INT   int    1 $44
               {
                  [RangeCheck::GetRange] BB06N001 (  1,  1) [000121] ------------              *  LCL_VAR   int    V11 tmp7         u:3 (last use) $300
                  {
----------------------------------------------------
N005 (  0,  0) [000222] -A------R---              *  ASG       int   
N004 (  0,  0) [000220] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:3
N003 (  0,  0) [000221] ------------              \--*  PHI       int   
N001 (  0,  0) [000230] ------------ pred BB03       +--*  PHI_ARG   int    V11 tmp7         u:4
N002 (  0,  0) [000229] ------------ pred BB02       \--*  PHI_ARG   int    V11 tmp7         u:2 $40
----------------------------------------------------
                     [RangeCheck::GetRange] BB04N003 (  0,  0) [000221] ------------              *  PHI       int   
N001 (  0,  0) [000230] ------------ pred BB03    +--*  PHI_ARG   int    V11 tmp7         u:4
N002 (  0,  0) [000229] ------------ pred BB02    \--*  PHI_ARG   int    V11 tmp7         u:2 $40
                     {
PhiArg [000230] is already being computed
Merging assertions from pred edges of BB04 for op [000230] $ffffffff
Merge assertions from pred BB03 edge: 0000000000000009
Merging ranges <Undef, Undef> <Dependent, Dependent>:<Dependent, Dependent>
                        [RangeCheck::GetRange] BB04N002 (  0,  0) [000229] ------------              *  PHI_ARG   int    V11 tmp7         u:2 $40
                        {
                           Computed Range [000229] => <0, 0>
                        }
Merging assertions from pred edges of BB04 for op [000229] $40
Merge assertions from pred BB02 JTrue edge: 0000000000000001
Merging ranges <Dependent, Dependent> <0, 0>:<Dependent, Dependent>
                        Computed Range [000221] => <Dependent, Dependent>
                     }
Merge assertions from BB06:0000000000000001 for assignment about [000220]
done merging
Merging assertions from pred edges of BB06 for op [000121] $300
                     Computed Range [000121] => <Dependent, Dependent>
                  }
Merging assertions from pred edges of BB06 for op [000121] $300
                  [RangeCheck::GetRange] BB06N002 (  1,  1) [000122] ------------              *  CNS_INT   int    1 $44
                  {
                     Computed Range [000122] => <1, 1>
                  }
Merging assertions from pred edges of BB06 for op [000122] $44
BinOp add ranges <Dependent, Dependent> <1, 1> = <Dependent, Dependent>
                  Computed Range [000123] => <Dependent, Dependent>
               }
Merge assertions from BB09:0000000000000001 for assignment about [000124]
done merging
Merging assertions from pred edges of BB09 for op [000236] $29f
Merge assertions from pred BB06 JTrue edge: 0000000000000001
               Computed Range [000236] => <Dependent, Dependent>
            }
Merging assertions from pred edges of BB09 for op [000236] $29f
Merge assertions from pred BB06 JTrue edge: 0000000000000001
Merging ranges <Undef, Undef> <Dependent, Dependent>:<Dependent, Dependent>
            [RangeCheck::GetRange] BB09N002 (  0,  0) [000233] ------------              *  PHI_ARG   int    V11 tmp7         u:5 <l:$29a, c:$299>
            {
----------------------------------------------------
N008 (  6,  6) [000153] -A--GO--R---              *  ASG       int    <l:$29c, c:$29b>
N007 (  1,  1) [000152] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:5 <l:$29a, c:$299>
N006 (  6,  6) [000151] ----GO------              \--*  ADD       int    <l:$29c, c:$29b>
N004 (  4,  4) [000149] n---GO------                 +--*  IND       int    <l:$290, c:$298>
N003 (  2,  2) [000213] -------N----                 |  \--*  ADD       byref  $241
N001 (  1,  1) [000148] ------------                 |     +--*  LCL_VAR   ref    V09 tmp5         u:2 $80
N002 (  1,  1) [000212] ------------                 |     \--*  CNS_INT   long   16 field offset Fseq[_size] $201
N005 (  1,  1) [000150] ------------                 \--*  CNS_INT   int    1 $44
----------------------------------------------------
               [RangeCheck::GetRange] BB08N006 (  6,  6) [000151] ----GO------              *  ADD       int    <l:$29c, c:$29b>
N004 (  4,  4) [000149] n---GO------              +--*  IND       int    <l:$290, c:$298>
N003 (  2,  2) [000213] -------N----              |  \--*  ADD       byref  $241
N001 (  1,  1) [000148] ------------              |     +--*  LCL_VAR   ref    V09 tmp5         u:2 $80
N002 (  1,  1) [000212] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[_size] $201
N005 (  1,  1) [000150] ------------              \--*  CNS_INT   int    1 $44
               {
                  [RangeCheck::GetRange] BB08N004 (  4,  4) [000149] n---GO------              *  IND       int    <l:$290, c:$298>
N003 (  2,  2) [000213] -------N----              \--*  ADD       byref  $241
N001 (  1,  1) [000148] ------------                 +--*  LCL_VAR   ref    V09 tmp5         u:2 $80
N002 (  1,  1) [000212] ------------                 \--*  CNS_INT   long   16 field offset Fseq[_size] $201
                  {
                     Computed Range [000149] => <Unknown, Unknown>
                  }
Merging assertions from pred edges of BB08 for op [000149] $383
                  [RangeCheck::GetRange] BB08N005 (  1,  1) [000150] ------------              *  CNS_INT   int    1 $44
                  {
                     Computed Range [000150] => <1, 1>
                  }
Merging assertions from pred edges of BB08 for op [000150] $44
BinOp add ranges <Unknown, Unknown> <1, 1> = <Unknown, Unknown>
                  Computed Range [000151] => <Unknown, Unknown>
               }
Merge assertions from BB09:0000000000000001 for assignment about [000152]
done merging
Merging assertions from pred edges of BB09 for op [000233] $299
Merge assertions from pred BB08 edge: 0000000000000001
               Computed Range [000233] => <Unknown, Unknown>
            }
Merging assertions from pred edges of BB09 for op [000233] $299
Merge assertions from pred BB08 edge: 0000000000000001
Merging ranges <Dependent, Dependent> <Unknown, Unknown>:<Unknown, Unknown>
            Computed Range [000218] => <Unknown, Unknown>
         }
Merge assertions from BB04:0000000000000001 for assignment about [000217]
done merging
Merging assertions from pred edges of BB04 for op [000230] $ffffffff
Merge assertions from pred BB03 edge: 0000000000000009
         Computed Range [000230] => <Unknown, Unknown>
      }
Merging assertions from pred edges of BB04 for op [000230] $ffffffff
Merge assertions from pred BB03 edge: 0000000000000009
Merging ranges <Undef, Undef> <Unknown, Unknown>:<Unknown, Unknown>
      [RangeCheck::GetRange] BB04N002 (  0,  0) [000229] ------------              *  PHI_ARG   int    V11 tmp7         u:2 $40
      {
         Cached Range [000229] => <0, 0>
      }
Merging assertions from pred edges of BB04 for op [000229] $40
Merge assertions from pred BB02 JTrue edge: 0000000000000001
Merging ranges <Unknown, Unknown> <0, 0>:<Unknown, Unknown>
      Computed Range [000221] => <Unknown, Unknown>
   }
Merge assertions from BB06:0000000000000001 for assignment about [000220]
done merging
Merging assertions from pred edges of BB06 for op [000113] $300
   Computed Range [000113] => <Unknown, Unknown>
}

*************** Finishing PHASE Optimize index checks

*************** Starting PHASE Insert GC Polls

*************** Finishing PHASE Insert GC Polls [no changes]

*************** Starting PHASE Determine first cold block

*************** In fgDetermineFirstColdBlock()
No procedure splitting will be done for this method

*************** Finishing PHASE Determine first cold block
Trees before Rationalize IR

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i label target hascall gcsafe newobj nullcheck 
BB02 [0001]  1       BB01                  1       [00D..00F)-> BB04 (always)                     keep i label gcsafe 
BB03 [0002]  1       BB09                  2     0 [00F..01E)                                     i Loop label target hascall gcsafe bwd bwd-target 
BB04 [0003]  2       BB02,BB03             8     0 [01E..027)-> BB07 ( cond )                     i label target gcsafe bwd 
BB05 [0013]  1       BB04                  1     0 [01E..01F)-> BB07 ( cond )                     i gcsafe bwd 
BB06 [0014]  1       BB05                  2     0 [01E..01F)-> BB09 (always)                     i gcsafe idxlen bwd 
BB07 [0015]  2       BB04,BB05             2     0 [01E..01F)-> BB11 ( cond )                     i label target gcsafe bwd 
BB08 [0019]  1       BB07                  2     0 [01E..01F)                                     i label target gcsafe bwd 
BB09 [0016]  2       BB06,BB08             8     0 [???..???)-> BB03 ( cond )                     internal label target gcsafe bwd 
BB10 [0004]  1       BB09                  1       [027..03E)        (return)                     i gcsafe 
BB11 [0018]  1       BB07                  0       [01E..01F)        (throw )                     i rare label target hascall gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..00D), preds={} succs={BB02}

***** BB01
STMT00000 (IL 0x000...0x005)
N005 ( 16, 16) [000003] -AC-----R---              *  ASG       ref    $180
N004 (  1,  1) [000002] D------N----              +--*  LCL_VAR   ref    V05 tmp1         d:2 $180
N003 ( 16, 16) [000001] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $180
N002 (  2, 10) [000000] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0xd1ffab1e method $100

***** BB01
STMT00001 (IL   ???...  ???)
N003 ( 15,  8) [000005] --CXG-------              *  CALL      void   Batcher..ctor $VN.Void
N002 (  1,  1) [000004] ------------ this in rcx  \--*  LCL_VAR   ref    V05 tmp1         u:2 $180

***** BB01
STMT00002 (IL 0x005...  ???)
N003 (  1,  3) [000008] -A------R---              *  ASG       ref    $180
N002 (  1,  1) [000007] D------N----              +--*  LCL_VAR   ref    V01 loc0         d:2 $180
N001 (  1,  1) [000006] ------------              \--*  LCL_VAR   ref    V05 tmp1         u:2 (last use) $180

***** BB01
STMT00016 (IL 0x006...  ???)
N003 (  5,  4) [000055] -A------R---              *  ASG       ref    $80
N002 (  3,  2) [000054] D------N----              +--*  LCL_VAR   ref    V13 tmp9         d:2 $80
N001 (  1,  1) [000009] ------------              \--*  LCL_VAR   ref    V00 arg0         u:1 $80

***** BB01
STMT00017 (IL 0x006...  ???)
N003 (  5,  4) [000060] -A------R---              *  ASG       int    $40
N002 (  3,  2) [000059] D------N----              +--*  LCL_VAR   int    V15 tmp11        d:2 $40
N001 (  1,  1) [000058] ------------              \--*  CNS_INT   int    0 $40

***** BB01
STMT00018 (IL 0x006...  ???)
N006 (  8,  7) [000066] -A-XG---R---              *  ASG       int    <l:$283, c:$282>
N005 (  3,  2) [000065] D------N----              +--*  LCL_VAR   int    V16 tmp12        d:2 <l:$281, c:$1c1>
N004 (  4,  4) [000064] ---XG-------              \--*  IND       int    <l:$283, c:$282>
N003 (  2,  2) [000171] -------N----                 \--*  ADD       byref  $240
N001 (  1,  1) [000063] ------------                    +--*  LCL_VAR   ref    V13 tmp9         u:2 (last use) $80
N002 (  1,  1) [000170] ------------                    \--*  CNS_INT   long   20 field offset Fseq[_version] $200

***** BB01
STMT00004 (IL   ???...  ???)
N011 (  7,  9) [000186] -A----------              *  COMMA     void   <l:$281, c:$1c1>
N007 (  4,  6) [000238] -A----------              +--*  COMMA     void   $40
N003 (  3,  3) [000174] -A------R---              |  +--*  ASG       ref    $80
N002 (  1,  1) [000172] D------N----              |  |  +--*  LCL_VAR   ref    V09 tmp5         d:2 $80
N001 (  3,  2) [000173] ------------              |  |  \--*  LCL_VAR   ref    V13 tmp9         u:2 (last use) $80
N006 (  1,  3) [000181] -A------R---              |  \--*  ASG       int    $40
N005 (  1,  1) [000179] D------N----              |     +--*  LCL_VAR   int    V11 tmp7         d:2 $40
N004 (  1,  1) [000237] ------------              |     \--*  CNS_INT   int    0 $40
N010 (  3,  3) [000185] -A------R---              \--*  ASG       int    <l:$281, c:$1c1>
N009 (  1,  1) [000183] D------N----                 +--*  LCL_VAR   int    V12 tmp8         d:2 <l:$281, c:$1c1>
N008 (  3,  2) [000184] ------------                 \--*  LCL_VAR   int    V16 tmp12        u:2 (last use) <l:$281, c:$1c1>

------------ BB02 [00D..00F) -> BB04 (always), preds={BB01} succs={BB04}

------------ BB03 [00F..01E), preds={BB09} succs={BB04}

***** BB03
STMT00009 (IL 0x017...0x019)
N005 ( 16, 10) [000031] --CXG-------              *  CALL      void   Batcher.Push $VN.Void
N003 (  1,  1) [000029] ------------ this in rcx  +--*  LCL_VAR   ref    V01 loc0         u:2 $180
N004 (  1,  1) [000030] ------------ arg1 in rdx  \--*  LCL_VAR   ref    V10 tmp6         u:2 (last use) $480

------------ BB04 [01E..027) -> BB07 (cond), preds={BB02,BB03} succs={BB05,BB07}

***** BB04
STMT00034 (IL   ???...  ???)
N005 (  0,  0) [000222] -A------R---              *  ASG       int   
N004 (  0,  0) [000220] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:3
N003 (  0,  0) [000221] ------------              \--*  PHI       int   
N001 (  0,  0) [000230] ------------ pred BB03       +--*  PHI_ARG   int    V11 tmp7         u:4
N002 (  0,  0) [000229] ------------ pred BB02       \--*  PHI_ARG   int    V11 tmp7         u:2 $40

***** BB04
STMT00020 (IL 0x01E...  ???)
N003 (  1,  3) [000083] -A------R---              *  ASG       ref    $80
N002 (  1,  1) [000082] D------N----              +--*  LCL_VAR   ref    V08 tmp4         d:2 $80
N001 (  1,  1) [000081] ------------              \--*  LCL_VAR   ref    V09 tmp5         u:2 $80

***** BB04
STMT00021 (IL 0x01E...  ???)
N007 (  8,  8) [000090] ----GO------              *  JTRUE     void  
N006 (  6,  6) [000089] N---GO-N-U--              \--*  NE        int    <l:$28c, c:$28b>
N001 (  1,  1) [000086] ------------                 +--*  LCL_VAR   int    V12 tmp8         u:2 <l:$281, c:$1c1>
N005 (  4,  4) [000088] n---GO------                 \--*  IND       int    <l:$288, c:$287>
N004 (  2,  2) [000190] -------N----                    \--*  ADD       byref  $240
N002 (  1,  1) [000087] ------------                       +--*  LCL_VAR   ref    V08 tmp4         u:2 $80
N003 (  1,  1) [000189] ------------                       \--*  CNS_INT   long   20 field offset Fseq[_version] $200

------------ BB05 [01E..01F) -> BB07 (cond), preds={BB04} succs={BB06,BB07}

***** BB05
STMT00024 (IL 0x01E...  ???)
N007 (  8,  8) [000106] ----GO------              *  JTRUE     void  
N006 (  6,  6) [000105] N---GO-N-U--              \--*  GE        int    <l:$294, c:$293>
N001 (  1,  1) [000102] ------------                 +--*  LCL_VAR   int    V11 tmp7         u:3 $300
N005 (  4,  4) [000104] n---GO------                 \--*  IND       int    <l:$290, c:$28f>
N004 (  2,  2) [000192] -------N----                    \--*  ADD       byref  $241
N002 (  1,  1) [000103] ------------                       +--*  LCL_VAR   ref    V09 tmp5         u:2 $80
N003 (  1,  1) [000191] ------------                       \--*  CNS_INT   long   16 field offset Fseq[_size] $201

------------ BB06 [01E..01F) -> BB09 (always), preds={BB05} succs={BB09}

***** BB06
STMT00025 (IL 0x01E...  ???)
N023 ( 18, 22) [000116] -A-XGO--R---              *  ASG       ref    <l:$19a, c:$199>
N022 (  1,  1) [000115] D------N----              +--*  LCL_VAR   ref    V10 tmp6         d:4 <l:$194, c:$345>
N021 ( 18, 22) [000207] -A-XGO------              \--*  COMMA     ref    <l:$19a, c:$199>
N006 (  4,  4) [000194] -A--GO--R---                 +--*  ASG       ref    <l:$185, c:$184>
N005 (  1,  1) [000193] D------N----                 |  +--*  LCL_VAR   ref    V17 tmp13        d:2 <l:$183, c:$343>
N004 (  4,  4) [000110] n---GO------                 |  \--*  IND       ref    <l:$185, c:$184>
N003 (  2,  2) [000209] -------N----                 |     \--*  ADD       byref  $242
N001 (  1,  1) [000109] ------------                 |        +--*  LCL_VAR   ref    V09 tmp5         u:2 (last use) $80
N002 (  1,  1) [000208] ------------                 |        \--*  CNS_INT   long   8 field offset Fseq[_items] $202
N020 ( 14, 18) [000206] ---XG-------                 \--*  COMMA     ref    <l:$196, c:$195>
N010 (  8, 11) [000199] ---X--------                    +--*  ARR_BOUNDS_CHECK_Rng void   <l:$191, c:$190>
N007 (  1,  1) [000113] ------------                    |  +--*  LCL_VAR   int    V11 tmp7         u:3 $300
N009 (  3,  3) [000198] ---X--------                    |  \--*  ARR_LENGTH int    <l:$29e, c:$29d>
N008 (  1,  1) [000195] ------------                    |     \--*  LCL_VAR   ref    V17 tmp13        u:2 <l:$183, c:$343>
N019 (  6,  7) [000114] a---G-------                    \--*  IND       ref    <l:$194, c:$345>
N018 (  5,  6) [000205] -------N----                       \--*  ADD       byref  $440
N011 (  1,  1) [000196] ------------                          +--*  LCL_VAR   ref    V17 tmp13        u:2 (last use) <l:$183, c:$343>
N017 (  4,  5) [000204] -------N----                          \--*  ADD       long   $402
N015 (  3,  4) [000202] -------N----                             +--*  LSH       long   $401
N013 (  2,  3) [000200] ------------                             |  +--*  CAST      long <- int $400
N012 (  1,  1) [000197] i-----------                             |  |  \--*  LCL_VAR   int    V11 tmp7         u:3 $300
N014 (  1,  1) [000201] -------N----                             |  \--*  CNS_INT   long   3 $203
N016 (  1,  1) [000203] ------------                             \--*  CNS_INT   long   16 Fseq[#FirstElem] $201

***** BB06
STMT00026 (IL 0x01E...  ???)
N005 (  3,  3) [000125] -A------R---              *  ASG       int    $29f
N004 (  1,  1) [000124] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:6 $29f
N003 (  3,  3) [000123] ------------              \--*  ADD       int    $29f
N001 (  1,  1) [000121] ------------                 +--*  LCL_VAR   int    V11 tmp7         u:3 (last use) $300
N002 (  1,  1) [000122] ------------                 \--*  CNS_INT   int    1 $44

***** BB06
STMT00027 (IL 0x01E...  ???)
N003 (  1,  3) [000129] -A------R---              *  ASG       bool   $44
N002 (  1,  1) [000128] D------N----              +--*  LCL_VAR   int    V07 tmp3         d:4 $44
N001 (  1,  1) [000126] ------------              \--*  CNS_INT   int    1 $44

------------ BB07 [01E..01F) -> BB11 (cond), preds={BB04,BB05} succs={BB08,BB11}

***** BB07
STMT00029 (IL 0x01E...  ???)
N007 (  8,  8) [000143] ----GO------              *  JTRUE     void  
N006 (  6,  6) [000142] J---GO-N----              \--*  NE        int    <l:$28c, c:$297>
N001 (  1,  1) [000137] ------------                 +--*  LCL_VAR   int    V12 tmp8         u:2 <l:$281, c:$1c1>
N005 (  4,  4) [000141] n---GO------                 \--*  IND       int    <l:$288, c:$295>
N004 (  2,  2) [000211] -------N----                    \--*  ADD       byref  $240
N002 (  1,  1) [000140] ------------                       +--*  LCL_VAR   ref    V09 tmp5         u:2 $80
N003 (  1,  1) [000210] ------------                       \--*  CNS_INT   long   20 field offset Fseq[_version] $200

------------ BB08 [01E..01F), preds={BB07} succs={BB09}

***** BB08
STMT00030 (IL 0x01E...  ???)
N008 (  6,  6) [000153] -A--GO--R---              *  ASG       int    <l:$29c, c:$29b>
N007 (  1,  1) [000152] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:5 <l:$29a, c:$299>
N006 (  6,  6) [000151] ----GO------              \--*  ADD       int    <l:$29c, c:$29b>
N004 (  4,  4) [000149] n---GO------                 +--*  IND       int    <l:$290, c:$298>
N003 (  2,  2) [000213] -------N----                 |  \--*  ADD       byref  $241
N001 (  1,  1) [000148] ------------                 |     +--*  LCL_VAR   ref    V09 tmp5         u:2 $80
N002 (  1,  1) [000212] ------------                 |     \--*  CNS_INT   long   16 field offset Fseq[_size] $201
N005 (  1,  1) [000150] ------------                 \--*  CNS_INT   int    1 $44

***** BB08
STMT00031 (IL 0x01E...  ???)
N003 (  1,  3) [000160] -A------R---              *  ASG       ref    $VN.Null
N002 (  1,  1) [000156] D------N----              +--*  LCL_VAR   ref    V10 tmp6         d:3 $VN.Null
N001 (  1,  1) [000158] ------------              \--*  CNS_INT   ref    null $VN.Null

***** BB08
STMT00023 (IL 0x01E...  ???)
N003 (  1,  3) [000098] -A------R---              *  ASG       bool   $40
N002 (  1,  1) [000097] D------N----              +--*  LCL_VAR   int    V07 tmp3         d:3 $40
N001 (  1,  1) [000096] ------------              \--*  CNS_INT   int    0 $40

------------ BB09 [???..???) -> BB03 (cond), preds={BB06,BB08} succs={BB10,BB03}

***** BB09
STMT00036 (IL   ???...  ???)
N005 (  0,  0) [000228] -A------R---              *  ASG       ref   
N004 (  0,  0) [000226] D------N----              +--*  LCL_VAR   ref    V10 tmp6         d:2
N003 (  0,  0) [000227] ------------              \--*  PHI       ref   
N001 (  0,  0) [000234] ------------ pred BB06       +--*  PHI_ARG   ref    V10 tmp6         u:4 <l:$194, c:$345>
N002 (  0,  0) [000231] ------------ pred BB08       \--*  PHI_ARG   ref    V10 tmp6         u:3 $VN.Null

***** BB09
STMT00035 (IL   ???...  ???)
N005 (  0,  0) [000225] -A------R---              *  ASG       bool  
N004 (  0,  0) [000223] D------N----              +--*  LCL_VAR   bool   V07 tmp3         d:2
N003 (  0,  0) [000224] ------------              \--*  PHI       bool  
N001 (  0,  0) [000235] ------------ pred BB06       +--*  PHI_ARG   bool   V07 tmp3         u:4 $44
N002 (  0,  0) [000232] ------------ pred BB08       \--*  PHI_ARG   bool   V07 tmp3         u:3 $40

***** BB09
STMT00033 (IL   ???...  ???)
N005 (  0,  0) [000219] -A------R---              *  ASG       int   
N004 (  0,  0) [000217] D------N----              +--*  LCL_VAR   int    V11 tmp7         d:4
N003 (  0,  0) [000218] ------------              \--*  PHI       int   
N001 (  0,  0) [000236] ------------ pred BB06       +--*  PHI_ARG   int    V11 tmp7         u:6 $29f
N002 (  0,  0) [000233] ------------ pred BB08       \--*  PHI_ARG   int    V11 tmp7         u:5 <l:$29a, c:$299>

***** BB09
STMT00006 (IL   ???...  ???)
N004 (  5,  5) [000021] ------------              *  JTRUE     void  
N003 (  3,  3) [000020] J------N----              \--*  NE        int    $2a1
N001 (  1,  1) [000130] ------------                 +--*  LCL_VAR   bool   V07 tmp3         u:2 (last use) $4c0
N002 (  1,  1) [000019] ------------                 \--*  CNS_INT   int    0 $40

------------ BB10 [027..03E) (return), preds={BB09} succs={}

***** BB10
STMT00011 (IL   ???...  ???)
N005 (  5,  5) [000035] ----GO------              *  RETURN    ref    $149
N004 (  4,  4) [000166] n---GO------              \--*  IND       ref    <l:$1a0, c:$19f>
N003 (  2,  2) [000216] -------N----                 \--*  ADD       byref  $245
N001 (  1,  1) [000032] ------------                    +--*  LCL_VAR   ref    V01 loc0         u:2 (last use) $180
N002 (  1,  1) [000215] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_batches] $202

------------ BB11 [01E..01F) (throw), preds={BB07} succs={}

***** BB11
STMT00032 (IL 0x01E...  ???)
N001 ( 14,  5) [000163] --CXG-------              *  CALL      void   System.ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion $VN.Void

-------------------------------------------------------------------------------------------------------------------

*************** Starting PHASE Rationalize IR
rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N005 ( 16, 16) [000003] DAC---------              *  STORE_LCL_VAR ref    V05 tmp1         d:2

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N003 (  1,  3) [000008] DA----------              *  STORE_LCL_VAR ref    V01 loc0         d:2

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N003 (  5,  4) [000055] DA----------              *  STORE_LCL_VAR ref    V13 tmp9         d:2

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N003 (  5,  4) [000060] DA----------              *  STORE_LCL_VAR int    V15 tmp11        d:2

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N006 (  8,  7) [000066] DA-XG-------              *  STORE_LCL_VAR int    V16 tmp12        d:2

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N003 (  3,  3) [000174] DA----------              *  STORE_LCL_VAR ref    V09 tmp5         d:2

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N006 (  1,  3) [000181] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:2

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N010 (  3,  3) [000185] DA----------              *  STORE_LCL_VAR int    V12 tmp8         d:2

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N005 (  0,  0) [000222] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:3

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N003 (  1,  3) [000083] DA----------              *  STORE_LCL_VAR ref    V08 tmp4         d:2

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N006 (  4,  4) [000194] DA--GO------              *  STORE_LCL_VAR ref    V17 tmp13        d:2

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N023 ( 18, 22) [000116] DA-XGO------              *  STORE_LCL_VAR ref    V10 tmp6         d:4

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N005 (  3,  3) [000125] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:6

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N003 (  1,  3) [000129] DA----------              *  STORE_LCL_VAR int    V07 tmp3         d:4

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N008 (  6,  6) [000153] DA--GO------              *  STORE_LCL_VAR int    V11 tmp7         d:5

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N003 (  1,  3) [000160] DA----------              *  STORE_LCL_VAR ref    V10 tmp6         d:3

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N003 (  1,  3) [000098] DA----------              *  STORE_LCL_VAR int    V07 tmp3         d:3

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N005 (  0,  0) [000228] DA----------              *  STORE_LCL_VAR ref    V10 tmp6         d:2

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N005 (  0,  0) [000225] DA----------              *  STORE_LCL_VAR bool   V07 tmp3         d:2

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N005 (  0,  0) [000219] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:4


*************** Finishing PHASE Rationalize IR
Trees after Rationalize IR

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i label target hascall gcsafe newobj nullcheck LIR 
BB02 [0001]  1       BB01                  1       [00D..00F)-> BB04 (always)                     keep i label gcsafe LIR 
BB03 [0002]  1       BB09                  2     0 [00F..01E)                                     i Loop label target hascall gcsafe bwd bwd-target LIR 
BB04 [0003]  2       BB02,BB03             8     0 [01E..027)-> BB07 ( cond )                     i label target gcsafe bwd LIR 
BB05 [0013]  1       BB04                  1     0 [01E..01F)-> BB07 ( cond )                     i gcsafe bwd LIR 
BB06 [0014]  1       BB05                  2     0 [01E..01F)-> BB09 (always)                     i gcsafe idxlen bwd LIR 
BB07 [0015]  2       BB04,BB05             2     0 [01E..01F)-> BB11 ( cond )                     i label target gcsafe bwd LIR 
BB08 [0019]  1       BB07                  2     0 [01E..01F)                                     i label target gcsafe bwd LIR 
BB09 [0016]  2       BB06,BB08             8     0 [???..???)-> BB03 ( cond )                     internal label target gcsafe bwd LIR 
BB10 [0004]  1       BB09                  1       [027..03E)        (return)                     i gcsafe LIR 
BB11 [0018]  1       BB07                  0       [01E..01F)        (throw )                     i rare label target hascall gcsafe bwd LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..00D), preds={} succs={BB02}
               [000239] ------------                 IL_OFFSET void   IL offset: 0x0
N002 (  2, 10) [000000] H-----------         t0 =    CNS_INT(h) long   0xd1ffab1e method $100
                                                  /--*  t0     long   arg0 in rcx
N003 ( 16, 16) [000001] --C---------         t1 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $180
                                                  /--*  t1     ref    
N005 ( 16, 16) [000003] DA----------              *  STORE_LCL_VAR ref    V05 tmp1         d:2
N002 (  1,  1) [000004] ------------         t4 =    LCL_VAR   ref    V05 tmp1         u:2 $180
                                                  /--*  t4     ref    this in rcx
N003 ( 15,  8) [000005] --CXG-------              *  CALL      void   Batcher..ctor $VN.Void
               [000240] ------------                 IL_OFFSET void   IL offset: 0x5
N001 (  1,  1) [000006] ------------         t6 =    LCL_VAR   ref    V05 tmp1         u:2 (last use) $180
                                                  /--*  t6     ref    
N003 (  1,  3) [000008] DA----------              *  STORE_LCL_VAR ref    V01 loc0         d:2
               [000241] ------------                 IL_OFFSET void   IL offset: 0x6
N001 (  1,  1) [000009] ------------         t9 =    LCL_VAR   ref    V00 arg0         u:1 $80
                                                  /--*  t9     ref    
N003 (  5,  4) [000055] DA----------              *  STORE_LCL_VAR ref    V13 tmp9         d:2
               [000242] ------------                 IL_OFFSET void   IL offset: 0x6
N001 (  1,  1) [000058] ------------        t58 =    CNS_INT   int    0 $40
                                                  /--*  t58    int    
N003 (  5,  4) [000060] DA----------              *  STORE_LCL_VAR int    V15 tmp11        d:2
               [000243] ------------                 IL_OFFSET void   IL offset: 0x6
N001 (  1,  1) [000063] ------------        t63 =    LCL_VAR   ref    V13 tmp9         u:2 (last use) $80
N002 (  1,  1) [000170] ------------       t170 =    CNS_INT   long   20 field offset Fseq[_version] $200
                                                  /--*  t63    ref    
                                                  +--*  t170   long   
N003 (  2,  2) [000171] -------N----       t171 = *  ADD       byref  $240
                                                  /--*  t171   byref  
N004 (  4,  4) [000064] ---XG-------        t64 = *  IND       int    <l:$283, c:$282>
                                                  /--*  t64    int    
N006 (  8,  7) [000066] DA-XG-------              *  STORE_LCL_VAR int    V16 tmp12        d:2
N001 (  3,  2) [000173] ------------       t173 =    LCL_VAR   ref    V13 tmp9         u:2 (last use) $80
                                                  /--*  t173   ref    
N003 (  3,  3) [000174] DA----------              *  STORE_LCL_VAR ref    V09 tmp5         d:2
N004 (  1,  1) [000237] ------------       t237 =    CNS_INT   int    0 $40
                                                  /--*  t237   int    
N006 (  1,  3) [000181] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:2
N008 (  3,  2) [000184] ------------       t184 =    LCL_VAR   int    V16 tmp12        u:2 (last use) <l:$281, c:$1c1>
                                                  /--*  t184   int    
N010 (  3,  3) [000185] DA----------              *  STORE_LCL_VAR int    V12 tmp8         d:2

------------ BB02 [00D..00F) -> BB04 (always), preds={BB01} succs={BB04}

------------ BB03 [00F..01E), preds={BB09} succs={BB04}
               [000244] ------------                 IL_OFFSET void   IL offset: 0x17
N003 (  1,  1) [000029] ------------        t29 =    LCL_VAR   ref    V01 loc0         u:2 $180
N004 (  1,  1) [000030] ------------        t30 =    LCL_VAR   ref    V10 tmp6         u:2 (last use) $480
                                                  /--*  t29    ref    this in rcx
                                                  +--*  t30    ref    arg1 in rdx
N005 ( 16, 10) [000031] --CXG-------              *  CALL      void   Batcher.Push $VN.Void

------------ BB04 [01E..027) -> BB07 (cond), preds={BB02,BB03} succs={BB05,BB07}
N001 (  0,  0) [000230] ------------       t230 =    PHI_ARG   int    V11 tmp7         u:4
N002 (  0,  0) [000229] ------------       t229 =    PHI_ARG   int    V11 tmp7         u:2 $40
                                                  /--*  t230   int    
                                                  +--*  t229   int    
N003 (  0,  0) [000221] ------------       t221 = *  PHI       int   
                                                  /--*  t221   int    
N005 (  0,  0) [000222] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:3
               [000245] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000081] ------------        t81 =    LCL_VAR   ref    V09 tmp5         u:2 $80
                                                  /--*  t81    ref    
N003 (  1,  3) [000083] DA----------              *  STORE_LCL_VAR ref    V08 tmp4         d:2
               [000246] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000086] ------------        t86 =    LCL_VAR   int    V12 tmp8         u:2 <l:$281, c:$1c1>
N002 (  1,  1) [000087] ------------        t87 =    LCL_VAR   ref    V08 tmp4         u:2 $80
N003 (  1,  1) [000189] ------------       t189 =    CNS_INT   long   20 field offset Fseq[_version] $200
                                                  /--*  t87    ref    
                                                  +--*  t189   long   
N004 (  2,  2) [000190] -------N----       t190 = *  ADD       byref  $240
                                                  /--*  t190   byref  
N005 (  4,  4) [000088] n---GO------        t88 = *  IND       int    <l:$288, c:$287>
                                                  /--*  t86    int    
                                                  +--*  t88    int    
N006 (  6,  6) [000089] N---GO-N-U--        t89 = *  NE        int    <l:$28c, c:$28b>
                                                  /--*  t89    int    
N007 (  8,  8) [000090] ----GO------              *  JTRUE     void  

------------ BB05 [01E..01F) -> BB07 (cond), preds={BB04} succs={BB06,BB07}
               [000247] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000102] ------------       t102 =    LCL_VAR   int    V11 tmp7         u:3 $300
N002 (  1,  1) [000103] ------------       t103 =    LCL_VAR   ref    V09 tmp5         u:2 $80
N003 (  1,  1) [000191] ------------       t191 =    CNS_INT   long   16 field offset Fseq[_size] $201
                                                  /--*  t103   ref    
                                                  +--*  t191   long   
N004 (  2,  2) [000192] -------N----       t192 = *  ADD       byref  $241
                                                  /--*  t192   byref  
N005 (  4,  4) [000104] n---GO------       t104 = *  IND       int    <l:$290, c:$28f>
                                                  /--*  t102   int    
                                                  +--*  t104   int    
N006 (  6,  6) [000105] N---GO-N-U--       t105 = *  GE        int    <l:$294, c:$293>
                                                  /--*  t105   int    
N007 (  8,  8) [000106] ----GO------              *  JTRUE     void  

------------ BB06 [01E..01F) -> BB09 (always), preds={BB05} succs={BB09}
               [000248] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000109] ------------       t109 =    LCL_VAR   ref    V09 tmp5         u:2 (last use) $80
N002 (  1,  1) [000208] ------------       t208 =    CNS_INT   long   8 field offset Fseq[_items] $202
                                                  /--*  t109   ref    
                                                  +--*  t208   long   
N003 (  2,  2) [000209] -------N----       t209 = *  ADD       byref  $242
                                                  /--*  t209   byref  
N004 (  4,  4) [000110] n---GO------       t110 = *  IND       ref    <l:$185, c:$184>
                                                  /--*  t110   ref    
N006 (  4,  4) [000194] DA--GO------              *  STORE_LCL_VAR ref    V17 tmp13        d:2
N007 (  1,  1) [000113] ------------       t113 =    LCL_VAR   int    V11 tmp7         u:3 $300
N008 (  1,  1) [000195] ------------       t195 =    LCL_VAR   ref    V17 tmp13        u:2 <l:$183, c:$343>
                                                  /--*  t195   ref    
N009 (  3,  3) [000198] ---X--------       t198 = *  ARR_LENGTH int    <l:$29e, c:$29d>
                                                  /--*  t113   int    
                                                  +--*  t198   int    
N010 (  8, 11) [000199] ---X--------              *  ARR_BOUNDS_CHECK_Rng void   <l:$191, c:$190>
N011 (  1,  1) [000196] ------------       t196 =    LCL_VAR   ref    V17 tmp13        u:2 (last use) <l:$183, c:$343>
N012 (  1,  1) [000197] ------------       t197 =    LCL_VAR   int    V11 tmp7         u:3 $300
                                                  /--*  t197   int    
N013 (  2,  3) [000200] ------------       t200 = *  CAST      long <- int $400
N014 (  1,  1) [000201] -------N----       t201 =    CNS_INT   long   3 $203
                                                  /--*  t200   long   
                                                  +--*  t201   long   
N015 (  3,  4) [000202] -------N----       t202 = *  LSH       long   $401
N016 (  1,  1) [000203] ------------       t203 =    CNS_INT   long   16 Fseq[#FirstElem] $201
                                                  /--*  t202   long   
                                                  +--*  t203   long   
N017 (  4,  5) [000204] -------N----       t204 = *  ADD       long   $402
                                                  /--*  t196   ref    
                                                  +--*  t204   long   
N018 (  5,  6) [000205] -------N----       t205 = *  ADD       byref  $440
                                                  /--*  t205   byref  
N019 (  6,  7) [000114] a---G-------       t114 = *  IND       ref    <l:$194, c:$345>
                                                  /--*  t114   ref    
N023 ( 18, 22) [000116] DA-XGO------              *  STORE_LCL_VAR ref    V10 tmp6         d:4
               [000249] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000121] ------------       t121 =    LCL_VAR   int    V11 tmp7         u:3 (last use) $300
N002 (  1,  1) [000122] ------------       t122 =    CNS_INT   int    1 $44
                                                  /--*  t121   int    
                                                  +--*  t122   int    
N003 (  3,  3) [000123] ------------       t123 = *  ADD       int    $29f
                                                  /--*  t123   int    
N005 (  3,  3) [000125] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:6
               [000250] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000126] ------------       t126 =    CNS_INT   int    1 $44
                                                  /--*  t126   int    
N003 (  1,  3) [000129] DA----------              *  STORE_LCL_VAR int    V07 tmp3         d:4

------------ BB07 [01E..01F) -> BB11 (cond), preds={BB04,BB05} succs={BB08,BB11}
               [000251] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000137] ------------       t137 =    LCL_VAR   int    V12 tmp8         u:2 <l:$281, c:$1c1>
N002 (  1,  1) [000140] ------------       t140 =    LCL_VAR   ref    V09 tmp5         u:2 $80
N003 (  1,  1) [000210] ------------       t210 =    CNS_INT   long   20 field offset Fseq[_version] $200
                                                  /--*  t140   ref    
                                                  +--*  t210   long   
N004 (  2,  2) [000211] -------N----       t211 = *  ADD       byref  $240
                                                  /--*  t211   byref  
N005 (  4,  4) [000141] n---GO------       t141 = *  IND       int    <l:$288, c:$295>
                                                  /--*  t137   int    
                                                  +--*  t141   int    
N006 (  6,  6) [000142] J---GO-N----       t142 = *  NE        int    <l:$28c, c:$297>
                                                  /--*  t142   int    
N007 (  8,  8) [000143] ----GO------              *  JTRUE     void  

------------ BB08 [01E..01F), preds={BB07} succs={BB09}
               [000252] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000148] ------------       t148 =    LCL_VAR   ref    V09 tmp5         u:2 $80
N002 (  1,  1) [000212] ------------       t212 =    CNS_INT   long   16 field offset Fseq[_size] $201
                                                  /--*  t148   ref    
                                                  +--*  t212   long   
N003 (  2,  2) [000213] -------N----       t213 = *  ADD       byref  $241
                                                  /--*  t213   byref  
N004 (  4,  4) [000149] n---GO------       t149 = *  IND       int    <l:$290, c:$298>
N005 (  1,  1) [000150] ------------       t150 =    CNS_INT   int    1 $44
                                                  /--*  t149   int    
                                                  +--*  t150   int    
N006 (  6,  6) [000151] ----GO------       t151 = *  ADD       int    <l:$29c, c:$29b>
                                                  /--*  t151   int    
N008 (  6,  6) [000153] DA--GO------              *  STORE_LCL_VAR int    V11 tmp7         d:5
               [000253] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000158] ------------       t158 =    CNS_INT   ref    null $VN.Null
                                                  /--*  t158   ref    
N003 (  1,  3) [000160] DA----------              *  STORE_LCL_VAR ref    V10 tmp6         d:3
               [000254] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000096] ------------        t96 =    CNS_INT   int    0 $40
                                                  /--*  t96    int    
N003 (  1,  3) [000098] DA----------              *  STORE_LCL_VAR int    V07 tmp3         d:3

------------ BB09 [???..???) -> BB03 (cond), preds={BB06,BB08} succs={BB10,BB03}
N001 (  0,  0) [000234] ------------       t234 =    PHI_ARG   ref    V10 tmp6         u:4 <l:$194, c:$345>
N002 (  0,  0) [000231] ------------       t231 =    PHI_ARG   ref    V10 tmp6         u:3 $VN.Null
                                                  /--*  t234   ref    
                                                  +--*  t231   ref    
N003 (  0,  0) [000227] ------------       t227 = *  PHI       ref   
                                                  /--*  t227   ref    
N005 (  0,  0) [000228] DA----------              *  STORE_LCL_VAR ref    V10 tmp6         d:2
N001 (  0,  0) [000235] ------------       t235 =    PHI_ARG   bool   V07 tmp3         u:4 $44
N002 (  0,  0) [000232] ------------       t232 =    PHI_ARG   bool   V07 tmp3         u:3 $40
                                                  /--*  t235   bool   
                                                  +--*  t232   bool   
N003 (  0,  0) [000224] ------------       t224 = *  PHI       bool  
                                                  /--*  t224   bool   
N005 (  0,  0) [000225] DA----------              *  STORE_LCL_VAR bool   V07 tmp3         d:2
N001 (  0,  0) [000236] ------------       t236 =    PHI_ARG   int    V11 tmp7         u:6 $29f
N002 (  0,  0) [000233] ------------       t233 =    PHI_ARG   int    V11 tmp7         u:5 <l:$29a, c:$299>
                                                  /--*  t236   int    
                                                  +--*  t233   int    
N003 (  0,  0) [000218] ------------       t218 = *  PHI       int   
                                                  /--*  t218   int    
N005 (  0,  0) [000219] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:4
N001 (  1,  1) [000130] ------------       t130 =    LCL_VAR   bool   V07 tmp3         u:2 (last use) $4c0
N002 (  1,  1) [000019] ------------        t19 =    CNS_INT   int    0 $40
                                                  /--*  t130   bool   
                                                  +--*  t19    int    
N003 (  3,  3) [000020] J------N----        t20 = *  NE        int    $2a1
                                                  /--*  t20    int    
N004 (  5,  5) [000021] ------------              *  JTRUE     void  

------------ BB10 [027..03E) (return), preds={BB09} succs={}
N001 (  1,  1) [000032] ------------        t32 =    LCL_VAR   ref    V01 loc0         u:2 (last use) $180
N002 (  1,  1) [000215] ------------       t215 =    CNS_INT   long   8 field offset Fseq[_batches] $202
                                                  /--*  t32    ref    
                                                  +--*  t215   long   
N003 (  2,  2) [000216] -------N----       t216 = *  ADD       byref  $245
                                                  /--*  t216   byref  
N004 (  4,  4) [000166] n---GO------       t166 = *  IND       ref    <l:$1a0, c:$19f>
                                                  /--*  t166   ref    
N005 (  5,  5) [000035] ----GO------              *  RETURN    ref    $149

------------ BB11 [01E..01F) (throw), preds={BB07} succs={}
               [000255] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 ( 14,  5) [000163] --CXG-------                 CALL      void   System.ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion $VN.Void

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist

*************** Starting PHASE Do 'simple' lowering
Bumping outgoingArgSpaceSize to 32 for call [000001]
outgoingArgSpaceSize 32 sufficient for call [000005], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000031], which needs 32
*** Computing fgRngChkTarget for block BB06
fgNewBBinRegion(jumpKind=3, tryIndex=0, hndIndex=0, putInFilter=false, runRarely=true, insertAtEnd=true): inserting after BB11
New Basic Block BB12 [0023] created.

fgAddCodeRef - Add BB in non-EH region for RNGCHK_FAIL, new block BB12 [0023]
Initializing arg info for 258.CALL:
ArgTable for 258.CALL after fgInitArgInfo:

Morphing args for 258.CALL:
argSlots=0, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32
ArgTable for 258.CALL after fgMorphArgs:

outgoingArgSpaceSize 32 sufficient for call [000163], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000258], which needs 32

After fgSimpleLowering() added some RngChk throw blocks
-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i label target hascall gcsafe newobj nullcheck LIR 
BB02 [0001]  1       BB01                  1       [00D..00F)-> BB04 (always)                     keep i label gcsafe LIR 
BB03 [0002]  1       BB09                  2     0 [00F..01E)                                     i Loop label target hascall gcsafe bwd bwd-target LIR 
BB04 [0003]  2       BB02,BB03             8     0 [01E..027)-> BB07 ( cond )                     i label target gcsafe bwd LIR 
BB05 [0013]  1       BB04                  1     0 [01E..01F)-> BB07 ( cond )                     i gcsafe bwd LIR 
BB06 [0014]  1       BB05                  2     0 [01E..01F)-> BB09 (always)                     i gcsafe idxlen bwd LIR 
BB07 [0015]  2       BB04,BB05             2     0 [01E..01F)-> BB11 ( cond )                     i label target gcsafe bwd LIR 
BB08 [0019]  1       BB07                  2     0 [01E..01F)                                     i label target gcsafe bwd LIR 
BB09 [0016]  2       BB06,BB08             8     0 [???..???)-> BB03 ( cond )                     internal label target gcsafe bwd LIR 
BB10 [0004]  1       BB09                  1       [027..03E)        (return)                     i gcsafe LIR 
BB11 [0018]  1       BB07                  0       [01E..01F)        (throw )                     i rare label target hascall gcsafe bwd LIR 
BB12 [0023]  0                             0       [???..???)        (throw )                     keep i internal rare label target LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table is empty


*************** Finishing PHASE Do 'simple' lowering
*************** In fgDebugCheckBBlist
Trees before Lowering nodeinfo

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i label target hascall gcsafe newobj nullcheck LIR 
BB02 [0001]  1       BB01                  1       [00D..00F)-> BB04 (always)                     keep i label gcsafe LIR 
BB03 [0002]  1       BB09                  2     0 [00F..01E)                                     i Loop label target hascall gcsafe bwd bwd-target LIR 
BB04 [0003]  2       BB02,BB03             8     0 [01E..027)-> BB07 ( cond )                     i label target gcsafe bwd LIR 
BB05 [0013]  1       BB04                  1     0 [01E..01F)-> BB07 ( cond )                     i gcsafe bwd LIR 
BB06 [0014]  1       BB05                  2     0 [01E..01F)-> BB09 (always)                     i gcsafe idxlen bwd LIR 
BB07 [0015]  2       BB04,BB05             2     0 [01E..01F)-> BB11 ( cond )                     i label target gcsafe bwd LIR 
BB08 [0019]  1       BB07                  2     0 [01E..01F)                                     i label target gcsafe bwd LIR 
BB09 [0016]  2       BB06,BB08             8     0 [???..???)-> BB03 ( cond )                     internal label target gcsafe bwd LIR 
BB10 [0004]  1       BB09                  1       [027..03E)        (return)                     i gcsafe LIR 
BB11 [0018]  1       BB07                  0       [01E..01F)        (throw )                     i rare label target hascall gcsafe bwd LIR 
BB12 [0023]  0                             0       [???..???)        (throw )                     keep i internal rare label target LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..00D), preds={} succs={BB02}
               [000239] ------------                 IL_OFFSET void   IL offset: 0x0
N002 (  2, 10) [000000] H-----------         t0 =    CNS_INT(h) long   0xd1ffab1e method $100
                                                  /--*  t0     long   arg0 in rcx
N003 ( 16, 16) [000001] --C---------         t1 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $180
                                                  /--*  t1     ref    
N005 ( 16, 16) [000003] DA----------              *  STORE_LCL_VAR ref    V05 tmp1         d:2
N002 (  1,  1) [000004] ------------         t4 =    LCL_VAR   ref    V05 tmp1         u:2 $180
                                                  /--*  t4     ref    this in rcx
N003 ( 15,  8) [000005] --CXG-------              *  CALL      void   Batcher..ctor $VN.Void
               [000240] ------------                 IL_OFFSET void   IL offset: 0x5
N001 (  1,  1) [000006] ------------         t6 =    LCL_VAR   ref    V05 tmp1         u:2 (last use) $180
                                                  /--*  t6     ref    
N003 (  1,  3) [000008] DA----------              *  STORE_LCL_VAR ref    V01 loc0         d:2
               [000241] ------------                 IL_OFFSET void   IL offset: 0x6
N001 (  1,  1) [000009] ------------         t9 =    LCL_VAR   ref    V00 arg0         u:1 $80
                                                  /--*  t9     ref    
N003 (  5,  4) [000055] DA----------              *  STORE_LCL_VAR ref    V13 tmp9         d:2
               [000242] ------------                 IL_OFFSET void   IL offset: 0x6
N001 (  1,  1) [000058] ------------        t58 =    CNS_INT   int    0 $40
                                                  /--*  t58    int    
N003 (  5,  4) [000060] DA----------              *  STORE_LCL_VAR int    V15 tmp11        d:2
               [000243] ------------                 IL_OFFSET void   IL offset: 0x6
N001 (  1,  1) [000063] ------------        t63 =    LCL_VAR   ref    V13 tmp9         u:2 (last use) $80
N002 (  1,  1) [000170] ------------       t170 =    CNS_INT   long   20 field offset Fseq[_version] $200
                                                  /--*  t63    ref    
                                                  +--*  t170   long   
N003 (  2,  2) [000171] -------N----       t171 = *  ADD       byref  $240
                                                  /--*  t171   byref  
N004 (  4,  4) [000064] ---XG-------        t64 = *  IND       int    <l:$283, c:$282>
                                                  /--*  t64    int    
N006 (  8,  7) [000066] DA-XG-------              *  STORE_LCL_VAR int    V16 tmp12        d:2
N001 (  3,  2) [000173] ------------       t173 =    LCL_VAR   ref    V13 tmp9         u:2 (last use) $80
                                                  /--*  t173   ref    
N003 (  3,  3) [000174] DA----------              *  STORE_LCL_VAR ref    V09 tmp5         d:2
N004 (  1,  1) [000237] ------------       t237 =    CNS_INT   int    0 $40
                                                  /--*  t237   int    
N006 (  1,  3) [000181] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:2
N008 (  3,  2) [000184] ------------       t184 =    LCL_VAR   int    V16 tmp12        u:2 (last use) <l:$281, c:$1c1>
                                                  /--*  t184   int    
N010 (  3,  3) [000185] DA----------              *  STORE_LCL_VAR int    V12 tmp8         d:2

------------ BB02 [00D..00F) -> BB04 (always), preds={BB01} succs={BB04}

------------ BB03 [00F..01E), preds={BB09} succs={BB04}
               [000244] ------------                 IL_OFFSET void   IL offset: 0x17
N003 (  1,  1) [000029] ------------        t29 =    LCL_VAR   ref    V01 loc0         u:2 $180
N004 (  1,  1) [000030] ------------        t30 =    LCL_VAR   ref    V10 tmp6         u:2 (last use) $480
                                                  /--*  t29    ref    this in rcx
                                                  +--*  t30    ref    arg1 in rdx
N005 ( 16, 10) [000031] --CXG-------              *  CALL      void   Batcher.Push $VN.Void

------------ BB04 [01E..027) -> BB07 (cond), preds={BB02,BB03} succs={BB05,BB07}
N001 (  0,  0) [000230] ------------       t230 =    PHI_ARG   int    V11 tmp7         u:4
N002 (  0,  0) [000229] ------------       t229 =    PHI_ARG   int    V11 tmp7         u:2 $40
                                                  /--*  t230   int    
                                                  +--*  t229   int    
N003 (  0,  0) [000221] ------------       t221 = *  PHI       int   
                                                  /--*  t221   int    
N005 (  0,  0) [000222] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:3
               [000245] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000081] ------------        t81 =    LCL_VAR   ref    V09 tmp5         u:2 $80
                                                  /--*  t81    ref    
N003 (  1,  3) [000083] DA----------              *  STORE_LCL_VAR ref    V08 tmp4         d:2
               [000246] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000086] ------------        t86 =    LCL_VAR   int    V12 tmp8         u:2 <l:$281, c:$1c1>
N002 (  1,  1) [000087] ------------        t87 =    LCL_VAR   ref    V08 tmp4         u:2 $80
N003 (  1,  1) [000189] ------------       t189 =    CNS_INT   long   20 field offset Fseq[_version] $200
                                                  /--*  t87    ref    
                                                  +--*  t189   long   
N004 (  2,  2) [000190] -------N----       t190 = *  ADD       byref  $240
                                                  /--*  t190   byref  
N005 (  4,  4) [000088] n---GO------        t88 = *  IND       int    <l:$288, c:$287>
                                                  /--*  t86    int    
                                                  +--*  t88    int    
N006 (  6,  6) [000089] N---GO-N-U--        t89 = *  NE        int    <l:$28c, c:$28b>
                                                  /--*  t89    int    
N007 (  8,  8) [000090] ----GO------              *  JTRUE     void  

------------ BB05 [01E..01F) -> BB07 (cond), preds={BB04} succs={BB06,BB07}
               [000247] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000102] ------------       t102 =    LCL_VAR   int    V11 tmp7         u:3 $300
N002 (  1,  1) [000103] ------------       t103 =    LCL_VAR   ref    V09 tmp5         u:2 $80
N003 (  1,  1) [000191] ------------       t191 =    CNS_INT   long   16 field offset Fseq[_size] $201
                                                  /--*  t103   ref    
                                                  +--*  t191   long   
N004 (  2,  2) [000192] -------N----       t192 = *  ADD       byref  $241
                                                  /--*  t192   byref  
N005 (  4,  4) [000104] n---GO------       t104 = *  IND       int    <l:$290, c:$28f>
                                                  /--*  t102   int    
                                                  +--*  t104   int    
N006 (  6,  6) [000105] N---GO-N-U--       t105 = *  GE        int    <l:$294, c:$293>
                                                  /--*  t105   int    
N007 (  8,  8) [000106] ----GO------              *  JTRUE     void  

------------ BB06 [01E..01F) -> BB09 (always), preds={BB05} succs={BB09}
               [000248] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000109] ------------       t109 =    LCL_VAR   ref    V09 tmp5         u:2 (last use) $80
N002 (  1,  1) [000208] ------------       t208 =    CNS_INT   long   8 field offset Fseq[_items] $202
                                                  /--*  t109   ref    
                                                  +--*  t208   long   
N003 (  2,  2) [000209] -------N----       t209 = *  ADD       byref  $242
                                                  /--*  t209   byref  
N004 (  4,  4) [000110] n---GO------       t110 = *  IND       ref    <l:$185, c:$184>
                                                  /--*  t110   ref    
N006 (  4,  4) [000194] DA--GO------              *  STORE_LCL_VAR ref    V17 tmp13        d:2
N007 (  1,  1) [000113] ------------       t113 =    LCL_VAR   int    V11 tmp7         u:3 $300
N008 (  1,  1) [000195] ------------       t195 =    LCL_VAR   ref    V17 tmp13        u:2 <l:$183, c:$343>
               [000256] ------------       t256 =    CNS_INT   long   8
                                                  /--*  t195   ref    
                                                  +--*  t256   long   
               [000257] ------------       t257 = *  ADD       ref   
                                                  /--*  t257   ref    
N009 (  3,  3) [000198] ---X--------       t198 = *  IND       int    <l:$29e, c:$29d>
                                                  /--*  t113   int    
                                                  +--*  t198   int    
N010 (  8, 11) [000199] ---X--------              *  ARR_BOUNDS_CHECK_Rng void   <l:$191, c:$190>
N011 (  1,  1) [000196] ------------       t196 =    LCL_VAR   ref    V17 tmp13        u:2 (last use) <l:$183, c:$343>
N012 (  1,  1) [000197] ------------       t197 =    LCL_VAR   int    V11 tmp7         u:3 $300
                                                  /--*  t197   int    
N013 (  2,  3) [000200] ------------       t200 = *  CAST      long <- int $400
N014 (  1,  1) [000201] -------N----       t201 =    CNS_INT   long   3 $203
                                                  /--*  t200   long   
                                                  +--*  t201   long   
N015 (  3,  4) [000202] -------N----       t202 = *  LSH       long   $401
N016 (  1,  1) [000203] ------------       t203 =    CNS_INT   long   16 Fseq[#FirstElem] $201
                                                  /--*  t202   long   
                                                  +--*  t203   long   
N017 (  4,  5) [000204] -------N----       t204 = *  ADD       long   $402
                                                  /--*  t196   ref    
                                                  +--*  t204   long   
N018 (  5,  6) [000205] -------N----       t205 = *  ADD       byref  $440
                                                  /--*  t205   byref  
N019 (  6,  7) [000114] a---G-------       t114 = *  IND       ref    <l:$194, c:$345>
                                                  /--*  t114   ref    
N023 ( 18, 22) [000116] DA-XGO------              *  STORE_LCL_VAR ref    V10 tmp6         d:4
               [000249] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000121] ------------       t121 =    LCL_VAR   int    V11 tmp7         u:3 (last use) $300
N002 (  1,  1) [000122] ------------       t122 =    CNS_INT   int    1 $44
                                                  /--*  t121   int    
                                                  +--*  t122   int    
N003 (  3,  3) [000123] ------------       t123 = *  ADD       int    $29f
                                                  /--*  t123   int    
N005 (  3,  3) [000125] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:6
               [000250] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000126] ------------       t126 =    CNS_INT   int    1 $44
                                                  /--*  t126   int    
N003 (  1,  3) [000129] DA----------              *  STORE_LCL_VAR int    V07 tmp3         d:4

------------ BB07 [01E..01F) -> BB11 (cond), preds={BB04,BB05} succs={BB08,BB11}
               [000251] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000137] ------------       t137 =    LCL_VAR   int    V12 tmp8         u:2 <l:$281, c:$1c1>
N002 (  1,  1) [000140] ------------       t140 =    LCL_VAR   ref    V09 tmp5         u:2 $80
N003 (  1,  1) [000210] ------------       t210 =    CNS_INT   long   20 field offset Fseq[_version] $200
                                                  /--*  t140   ref    
                                                  +--*  t210   long   
N004 (  2,  2) [000211] -------N----       t211 = *  ADD       byref  $240
                                                  /--*  t211   byref  
N005 (  4,  4) [000141] n---GO------       t141 = *  IND       int    <l:$288, c:$295>
                                                  /--*  t137   int    
                                                  +--*  t141   int    
N006 (  6,  6) [000142] J---GO-N----       t142 = *  NE        int    <l:$28c, c:$297>
                                                  /--*  t142   int    
N007 (  8,  8) [000143] ----GO------              *  JTRUE     void  

------------ BB08 [01E..01F), preds={BB07} succs={BB09}
               [000252] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000148] ------------       t148 =    LCL_VAR   ref    V09 tmp5         u:2 $80
N002 (  1,  1) [000212] ------------       t212 =    CNS_INT   long   16 field offset Fseq[_size] $201
                                                  /--*  t148   ref    
                                                  +--*  t212   long   
N003 (  2,  2) [000213] -------N----       t213 = *  ADD       byref  $241
                                                  /--*  t213   byref  
N004 (  4,  4) [000149] n---GO------       t149 = *  IND       int    <l:$290, c:$298>
N005 (  1,  1) [000150] ------------       t150 =    CNS_INT   int    1 $44
                                                  /--*  t149   int    
                                                  +--*  t150   int    
N006 (  6,  6) [000151] ----GO------       t151 = *  ADD       int    <l:$29c, c:$29b>
                                                  /--*  t151   int    
N008 (  6,  6) [000153] DA--GO------              *  STORE_LCL_VAR int    V11 tmp7         d:5
               [000253] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000158] ------------       t158 =    CNS_INT   ref    null $VN.Null
                                                  /--*  t158   ref    
N003 (  1,  3) [000160] DA----------              *  STORE_LCL_VAR ref    V10 tmp6         d:3
               [000254] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000096] ------------        t96 =    CNS_INT   int    0 $40
                                                  /--*  t96    int    
N003 (  1,  3) [000098] DA----------              *  STORE_LCL_VAR int    V07 tmp3         d:3

------------ BB09 [???..???) -> BB03 (cond), preds={BB06,BB08} succs={BB10,BB03}
N001 (  0,  0) [000234] ------------       t234 =    PHI_ARG   ref    V10 tmp6         u:4 <l:$194, c:$345>
N002 (  0,  0) [000231] ------------       t231 =    PHI_ARG   ref    V10 tmp6         u:3 $VN.Null
                                                  /--*  t234   ref    
                                                  +--*  t231   ref    
N003 (  0,  0) [000227] ------------       t227 = *  PHI       ref   
                                                  /--*  t227   ref    
N005 (  0,  0) [000228] DA----------              *  STORE_LCL_VAR ref    V10 tmp6         d:2
N001 (  0,  0) [000235] ------------       t235 =    PHI_ARG   bool   V07 tmp3         u:4 $44
N002 (  0,  0) [000232] ------------       t232 =    PHI_ARG   bool   V07 tmp3         u:3 $40
                                                  /--*  t235   bool   
                                                  +--*  t232   bool   
N003 (  0,  0) [000224] ------------       t224 = *  PHI       bool  
                                                  /--*  t224   bool   
N005 (  0,  0) [000225] DA----------              *  STORE_LCL_VAR bool   V07 tmp3         d:2
N001 (  0,  0) [000236] ------------       t236 =    PHI_ARG   int    V11 tmp7         u:6 $29f
N002 (  0,  0) [000233] ------------       t233 =    PHI_ARG   int    V11 tmp7         u:5 <l:$29a, c:$299>
                                                  /--*  t236   int    
                                                  +--*  t233   int    
N003 (  0,  0) [000218] ------------       t218 = *  PHI       int   
                                                  /--*  t218   int    
N005 (  0,  0) [000219] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:4
N001 (  1,  1) [000130] ------------       t130 =    LCL_VAR   bool   V07 tmp3         u:2 (last use) $4c0
N002 (  1,  1) [000019] ------------        t19 =    CNS_INT   int    0 $40
                                                  /--*  t130   bool   
                                                  +--*  t19    int    
N003 (  3,  3) [000020] J------N----        t20 = *  NE        int    $2a1
                                                  /--*  t20    int    
N004 (  5,  5) [000021] ------------              *  JTRUE     void  

------------ BB10 [027..03E) (return), preds={BB09} succs={}
N001 (  1,  1) [000032] ------------        t32 =    LCL_VAR   ref    V01 loc0         u:2 (last use) $180
N002 (  1,  1) [000215] ------------       t215 =    CNS_INT   long   8 field offset Fseq[_batches] $202
                                                  /--*  t32    ref    
                                                  +--*  t215   long   
N003 (  2,  2) [000216] -------N----       t216 = *  ADD       byref  $245
                                                  /--*  t216   byref  
N004 (  4,  4) [000166] n---GO------       t166 = *  IND       ref    <l:$1a0, c:$19f>
                                                  /--*  t166   ref    
N005 (  5,  5) [000035] ----GO------              *  RETURN    ref    $149

------------ BB11 [01E..01F) (throw), preds={BB07} succs={}
               [000255] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 ( 14,  5) [000163] --CXG-------                 CALL      void   System.ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion $VN.Void

------------ BB12 [???..???) (throw), preds={} succs={}
N001 ( 14,  5) [000258] --CXG-------                 CALL help void   HELPER.CORINFO_HELP_RNGCHKFAIL

-------------------------------------------------------------------------------------------------------------------

*************** Starting PHASE Lowering nodeinfo
lowering call (before):
N002 (  2, 10) [000000] H-----------         t0 =    CNS_INT(h) long   0xd1ffab1e method $100
                                                  /--*  t0     long   arg0 in rcx
N003 ( 16, 16) [000001] --C---------         t1 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $180

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000168] ----------L-              *  ARGPLACE  long   $100

late:
======
lowering arg : N002 (  2, 10) [000000] H-----------              *  CNS_INT(h) long   0xd1ffab1e method $100
new node is :                [000259] ------------              *  PUTARG_REG long   REG rcx

lowering call (after):
N002 (  2, 10) [000000] H-----------         t0 =    CNS_INT(h) long   0xd1ffab1e method $100
                                                  /--*  t0     long   
               [000259] ------------       t259 = *  PUTARG_REG long   REG rcx
                                                  /--*  t259   long   arg0 in rcx
N003 ( 16, 16) [000001] --C---------         t1 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $180

lowering store lcl var/field (before):
N002 (  2, 10) [000000] H-----------         t0 =    CNS_INT(h) long   0xd1ffab1e method $100
                                                  /--*  t0     long   
               [000259] ------------       t259 = *  PUTARG_REG long   REG rcx
                                                  /--*  t259   long   arg0 in rcx
N003 ( 16, 16) [000001] --C---------         t1 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $180
                                                  /--*  t1     ref    
N005 ( 16, 16) [000003] DA----------              *  STORE_LCL_VAR ref    V05 tmp1         d:2

lowering store lcl var/field (after):
N002 (  2, 10) [000000] H-----------         t0 =    CNS_INT(h) long   0xd1ffab1e method $100
                                                  /--*  t0     long   
               [000259] ------------       t259 = *  PUTARG_REG long   REG rcx
                                                  /--*  t259   long   arg0 in rcx
N003 ( 16, 16) [000001] --C---------         t1 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $180
                                                  /--*  t1     ref    
N005 ( 16, 16) [000003] DA----------              *  STORE_LCL_VAR ref    V05 tmp1         d:2

lowering call (before):
N002 (  1,  1) [000004] ------------         t4 =    LCL_VAR   ref    V05 tmp1         u:2 $180
                                                  /--*  t4     ref    this in rcx
N003 ( 15,  8) [000005] --CXG-------              *  CALL      void   Batcher..ctor $VN.Void

objp:
======
lowering arg : N001 (  0,  0) [000169] ----------L-              *  ARGPLACE  ref    $142

args:
======

late:
======
lowering arg : N002 (  1,  1) [000004] ------------              *  LCL_VAR   ref    V05 tmp1         u:2 $180
new node is :                [000260] ------------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N002 (  1,  1) [000004] ------------         t4 =    LCL_VAR   ref    V05 tmp1         u:2 $180
                                                  /--*  t4     ref    
               [000260] ------------       t260 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t260   ref    this in rcx
N003 ( 15,  8) [000005] --CXG-------              *  CALL      void   Batcher..ctor $VN.Void

lowering store lcl var/field (before):
N001 (  1,  1) [000006] ------------         t6 =    LCL_VAR   ref    V05 tmp1         u:2 (last use) $180
                                                  /--*  t6     ref    
N003 (  1,  3) [000008] DA----------              *  STORE_LCL_VAR ref    V01 loc0         d:2

lowering store lcl var/field (after):
N001 (  1,  1) [000006] ------------         t6 =    LCL_VAR   ref    V05 tmp1         u:2 (last use) $180
                                                  /--*  t6     ref    
N003 (  1,  3) [000008] DA----------              *  STORE_LCL_VAR ref    V01 loc0         d:2

lowering store lcl var/field (before):
N001 (  1,  1) [000009] ------------         t9 =    LCL_VAR   ref    V00 arg0         u:1 $80
                                                  /--*  t9     ref    
N003 (  5,  4) [000055] DA----------              *  STORE_LCL_VAR ref    V13 tmp9         d:2

lowering store lcl var/field (after):
N001 (  1,  1) [000009] ------------         t9 =    LCL_VAR   ref    V00 arg0         u:1 $80
                                                  /--*  t9     ref    
N003 (  5,  4) [000055] DA----------              *  STORE_LCL_VAR ref    V13 tmp9         d:2

lowering store lcl var/field (before):
N001 (  1,  1) [000058] ------------        t58 =    CNS_INT   int    0 $40
                                                  /--*  t58    int    
N003 (  5,  4) [000060] DA----------              *  STORE_LCL_VAR int    V15 tmp11        d:2

lowering store lcl var/field (after):
N001 (  1,  1) [000058] ------------        t58 =    CNS_INT   int    0 $40
                                                  /--*  t58    int    
N003 (  5,  4) [000060] DA----------              *  STORE_LCL_VAR int    V15 tmp11        d:2

Addressing mode:
  Base
    N001 (  1,  1) [000063] ------------              *  LCL_VAR   ref    V13 tmp9         u:2 (last use) $80
  + 20
Removing unused node:
  N002 (  1,  1) [000170] -c----------              *  CNS_INT   long   20 field offset Fseq[_version] $200
New addressing mode node:
  N003 (  2,  2) [000171] ------------              *  LEA(b+20) byref 

lowering store lcl var/field (before):
N001 (  1,  1) [000063] ------------        t63 =    LCL_VAR   ref    V13 tmp9         u:2 (last use) $80
                                                  /--*  t63    ref    
N003 (  2,  2) [000171] -c----------       t171 = *  LEA(b+20) byref 
                                                  /--*  t171   byref  
N004 (  4,  4) [000064] ---XG-------        t64 = *  IND       int    <l:$283, c:$282>
                                                  /--*  t64    int    
N006 (  8,  7) [000066] DA-XG-------              *  STORE_LCL_VAR int    V16 tmp12        d:2

lowering store lcl var/field (after):
N001 (  1,  1) [000063] ------------        t63 =    LCL_VAR   ref    V13 tmp9         u:2 (last use) $80
                                                  /--*  t63    ref    
N003 (  2,  2) [000171] -c----------       t171 = *  LEA(b+20) byref 
                                                  /--*  t171   byref  
N004 (  4,  4) [000064] ---XG-------        t64 = *  IND       int    <l:$283, c:$282>
                                                  /--*  t64    int    
N006 (  8,  7) [000066] DA-XG-------              *  STORE_LCL_VAR int    V16 tmp12        d:2

lowering store lcl var/field (before):
N001 (  3,  2) [000173] ------------       t173 =    LCL_VAR   ref    V13 tmp9         u:2 (last use) $80
                                                  /--*  t173   ref    
N003 (  3,  3) [000174] DA----------              *  STORE_LCL_VAR ref    V09 tmp5         d:2

lowering store lcl var/field (after):
N001 (  3,  2) [000173] ------------       t173 =    LCL_VAR   ref    V13 tmp9         u:2 (last use) $80
                                                  /--*  t173   ref    
N003 (  3,  3) [000174] DA----------              *  STORE_LCL_VAR ref    V09 tmp5         d:2

lowering store lcl var/field (before):
N004 (  1,  1) [000237] ------------       t237 =    CNS_INT   int    0 $40
                                                  /--*  t237   int    
N006 (  1,  3) [000181] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:2

lowering store lcl var/field (after):
N004 (  1,  1) [000237] ------------       t237 =    CNS_INT   int    0 $40
                                                  /--*  t237   int    
N006 (  1,  3) [000181] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:2

lowering store lcl var/field (before):
N008 (  3,  2) [000184] ------------       t184 =    LCL_VAR   int    V16 tmp12        u:2 (last use) <l:$281, c:$1c1>
                                                  /--*  t184   int    
N010 (  3,  3) [000185] DA----------              *  STORE_LCL_VAR int    V12 tmp8         d:2

lowering store lcl var/field (after):
N008 (  3,  2) [000184] ------------       t184 =    LCL_VAR   int    V16 tmp12        u:2 (last use) <l:$281, c:$1c1>
                                                  /--*  t184   int    
N010 (  3,  3) [000185] DA----------              *  STORE_LCL_VAR int    V12 tmp8         d:2

lowering call (before):
N003 (  1,  1) [000029] ------------        t29 =    LCL_VAR   ref    V01 loc0         u:2 $180
N004 (  1,  1) [000030] ------------        t30 =    LCL_VAR   ref    V10 tmp6         u:2 (last use) $480
                                                  /--*  t29    ref    this in rcx
                                                  +--*  t30    ref    arg1 in rdx
N005 ( 16, 10) [000031] --CXG-------              *  CALL      void   Batcher.Push $VN.Void

objp:
======
lowering arg : N001 (  0,  0) [000187] ----------L-              *  ARGPLACE  ref    $347

args:
======
lowering arg : N002 (  0,  0) [000188] ----------L-              *  ARGPLACE  ref    $180

late:
======
lowering arg : N003 (  1,  1) [000029] ------------              *  LCL_VAR   ref    V01 loc0         u:2 $180
new node is :                [000261] ------------              *  PUTARG_REG ref    REG rcx

lowering arg : N004 (  1,  1) [000030] ------------              *  LCL_VAR   ref    V10 tmp6         u:2 (last use) $480
new node is :                [000262] ------------              *  PUTARG_REG ref    REG rdx

lowering call (after):
N003 (  1,  1) [000029] ------------        t29 =    LCL_VAR   ref    V01 loc0         u:2 $180
                                                  /--*  t29    ref    
               [000261] ------------       t261 = *  PUTARG_REG ref    REG rcx
N004 (  1,  1) [000030] ------------        t30 =    LCL_VAR   ref    V10 tmp6         u:2 (last use) $480
                                                  /--*  t30    ref    
               [000262] ------------       t262 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t261   ref    this in rcx
                                                  +--*  t262   ref    arg1 in rdx
N005 ( 16, 10) [000031] --CXG-------              *  CALL      void   Batcher.Push $VN.Void

lowering store lcl var/field (before):
N001 (  0,  0) [000230] ------------       t230 =    PHI_ARG   int    V11 tmp7         u:4
N002 (  0,  0) [000229] ------------       t229 =    PHI_ARG   int    V11 tmp7         u:2 $40
                                                  /--*  t230   int    
                                                  +--*  t229   int    
N003 (  0,  0) [000221] ------------       t221 = *  PHI       int   
                                                  /--*  t221   int    
N005 (  0,  0) [000222] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:3

lowering store lcl var/field (after):
N001 (  0,  0) [000230] ------------       t230 =    PHI_ARG   int    V11 tmp7         u:4
N002 (  0,  0) [000229] ------------       t229 =    PHI_ARG   int    V11 tmp7         u:2 $40
                                                  /--*  t230   int    
                                                  +--*  t229   int    
N003 (  0,  0) [000221] ------------       t221 = *  PHI       int   
                                                  /--*  t221   int    
N005 (  0,  0) [000222] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:3

lowering store lcl var/field (before):
N001 (  1,  1) [000081] ------------        t81 =    LCL_VAR   ref    V09 tmp5         u:2 $80
                                                  /--*  t81    ref    
N003 (  1,  3) [000083] DA----------              *  STORE_LCL_VAR ref    V08 tmp4         d:2

lowering store lcl var/field (after):
N001 (  1,  1) [000081] ------------        t81 =    LCL_VAR   ref    V09 tmp5         u:2 $80
                                                  /--*  t81    ref    
N003 (  1,  3) [000083] DA----------              *  STORE_LCL_VAR ref    V08 tmp4         d:2

Addressing mode:
  Base
    N002 (  1,  1) [000087] ------------              *  LCL_VAR   ref    V08 tmp4         u:2 $80
  + 20
Removing unused node:
  N003 (  1,  1) [000189] -c----------              *  CNS_INT   long   20 field offset Fseq[_version] $200
New addressing mode node:
  N004 (  2,  2) [000190] ------------              *  LEA(b+20) byref 

Addressing mode:
  Base
    N002 (  1,  1) [000103] ------------              *  LCL_VAR   ref    V09 tmp5         u:2 $80
  + 16
Removing unused node:
  N003 (  1,  1) [000191] -c----------              *  CNS_INT   long   16 field offset Fseq[_size] $201
New addressing mode node:
  N004 (  2,  2) [000192] ------------              *  LEA(b+16) byref 

Addressing mode:
  Base
    N001 (  1,  1) [000109] ------------              *  LCL_VAR   ref    V09 tmp5         u:2 (last use) $80
  + 8
Removing unused node:
  N002 (  1,  1) [000208] -c----------              *  CNS_INT   long   8 field offset Fseq[_items] $202
New addressing mode node:
  N003 (  2,  2) [000209] ------------              *  LEA(b+8)  byref 

lowering store lcl var/field (before):
N001 (  1,  1) [000109] ------------       t109 =    LCL_VAR   ref    V09 tmp5         u:2 (last use) $80
                                                  /--*  t109   ref    
N003 (  2,  2) [000209] -c----------       t209 = *  LEA(b+8)  byref 
                                                  /--*  t209   byref  
N004 (  4,  4) [000110] n---GO------       t110 = *  IND       ref    <l:$185, c:$184>
                                                  /--*  t110   ref    
N006 (  4,  4) [000194] DA--GO------              *  STORE_LCL_VAR ref    V17 tmp13        d:2

lowering store lcl var/field (after):
N001 (  1,  1) [000109] ------------       t109 =    LCL_VAR   ref    V09 tmp5         u:2 (last use) $80
                                                  /--*  t109   ref    
N003 (  2,  2) [000209] -c----------       t209 = *  LEA(b+8)  byref 
                                                  /--*  t209   byref  
N004 (  4,  4) [000110] n---GO------       t110 = *  IND       ref    <l:$185, c:$184>
                                                  /--*  t110   ref    
N006 (  4,  4) [000194] DA--GO------              *  STORE_LCL_VAR ref    V17 tmp13        d:2

Addressing mode:
  Base
    N008 (  1,  1) [000195] ------------              *  LCL_VAR   ref    V17 tmp13        u:2 <l:$183, c:$343>
  + 8
Removing unused node:
                 [000256] -c----------              *  CNS_INT   long   8
New addressing mode node:
                 [000257] ------------              *  LEA(b+8)  ref   

Addressing mode:
  Base
    N011 (  1,  1) [000196] ------------              *  LCL_VAR   ref    V17 tmp13        u:2 (last use) <l:$183, c:$343>
  + Index * 8 + 16
    N013 (  2,  3) [000200] ------------              *  CAST      long <- int $400
Removing unused node:
  N017 (  4,  5) [000204] -------N----              *  ADD       long   $402
Removing unused node:
  N016 (  1,  1) [000203] -c----------              *  CNS_INT   long   16 Fseq[#FirstElem] $201
Removing unused node:
  N015 (  3,  4) [000202] -------N----              *  LSH       long   $401
Removing unused node:
  N014 (  1,  1) [000201] -c-----N----              *  CNS_INT   long   3 $203
New addressing mode node:
  N018 (  5,  6) [000205] ------------              *  LEA(b+(i*8)+16) byref 

lowering store lcl var/field (before):
N011 (  1,  1) [000196] ------------       t196 =    LCL_VAR   ref    V17 tmp13        u:2 (last use) <l:$183, c:$343>
N012 (  1,  1) [000197] ------------       t197 =    LCL_VAR   int    V11 tmp7         u:3 $300
                                                  /--*  t197   int    
N013 (  2,  3) [000200] ------------       t200 = *  CAST      long <- int $400
                                                  /--*  t196   ref    
                                                  +--*  t200   long   
N018 (  5,  6) [000205] -c----------       t205 = *  LEA(b+(i*8)+16) byref 
                                                  /--*  t205   byref  
N019 (  6,  7) [000114] a---G-------       t114 = *  IND       ref    <l:$194, c:$345>
                                                  /--*  t114   ref    
N023 ( 18, 22) [000116] DA-XGO------              *  STORE_LCL_VAR ref    V10 tmp6         d:4

lowering store lcl var/field (after):
N011 (  1,  1) [000196] ------------       t196 =    LCL_VAR   ref    V17 tmp13        u:2 (last use) <l:$183, c:$343>
N012 (  1,  1) [000197] ------------       t197 =    LCL_VAR   int    V11 tmp7         u:3 $300
                                                  /--*  t197   int    
N013 (  2,  3) [000200] ------------       t200 = *  CAST      long <- int $400
                                                  /--*  t196   ref    
                                                  +--*  t200   long   
N018 (  5,  6) [000205] -c----------       t205 = *  LEA(b+(i*8)+16) byref 
                                                  /--*  t205   byref  
N019 (  6,  7) [000114] a---G-------       t114 = *  IND       ref    <l:$194, c:$345>
                                                  /--*  t114   ref    
N023 ( 18, 22) [000116] DA-XGO------              *  STORE_LCL_VAR ref    V10 tmp6         d:4

lowering store lcl var/field (before):
N001 (  1,  1) [000121] ------------       t121 =    LCL_VAR   int    V11 tmp7         u:3 (last use) $300
N002 (  1,  1) [000122] -c----------       t122 =    CNS_INT   int    1 $44
                                                  /--*  t121   int    
                                                  +--*  t122   int    
N003 (  3,  3) [000123] ------------       t123 = *  ADD       int    $29f
                                                  /--*  t123   int    
N005 (  3,  3) [000125] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:6

lowering store lcl var/field (after):
N001 (  1,  1) [000121] ------------       t121 =    LCL_VAR   int    V11 tmp7         u:3 (last use) $300
N002 (  1,  1) [000122] -c----------       t122 =    CNS_INT   int    1 $44
                                                  /--*  t121   int    
                                                  +--*  t122   int    
N003 (  3,  3) [000123] ------------       t123 = *  ADD       int    $29f
                                                  /--*  t123   int    
N005 (  3,  3) [000125] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:6

lowering store lcl var/field (before):
N001 (  1,  1) [000126] ------------       t126 =    CNS_INT   int    1 $44
                                                  /--*  t126   int    
N003 (  1,  3) [000129] DA----------              *  STORE_LCL_VAR int    V07 tmp3         d:4

lowering store lcl var/field (after):
N001 (  1,  1) [000126] -c----------       t126 =    CNS_INT   int    1 $44
                                                  /--*  t126   int    
N003 (  1,  3) [000129] DA----------              *  STORE_LCL_VAR int    V07 tmp3         d:4

Addressing mode:
  Base
    N002 (  1,  1) [000140] ------------              *  LCL_VAR   ref    V09 tmp5         u:2 $80
  + 20
Removing unused node:
  N003 (  1,  1) [000210] -c----------              *  CNS_INT   long   20 field offset Fseq[_version] $200
New addressing mode node:
  N004 (  2,  2) [000211] ------------              *  LEA(b+20) byref 

Addressing mode:
  Base
    N001 (  1,  1) [000148] ------------              *  LCL_VAR   ref    V09 tmp5         u:2 $80
  + 16
Removing unused node:
  N002 (  1,  1) [000212] -c----------              *  CNS_INT   long   16 field offset Fseq[_size] $201
New addressing mode node:
  N003 (  2,  2) [000213] ------------              *  LEA(b+16) byref 

lowering store lcl var/field (before):
N001 (  1,  1) [000148] ------------       t148 =    LCL_VAR   ref    V09 tmp5         u:2 $80
                                                  /--*  t148   ref    
N003 (  2,  2) [000213] -c----------       t213 = *  LEA(b+16) byref 
                                                  /--*  t213   byref  
N004 (  4,  4) [000149] n---GO------       t149 = *  IND       int    <l:$290, c:$298>
N005 (  1,  1) [000150] -c----------       t150 =    CNS_INT   int    1 $44
                                                  /--*  t149   int    
                                                  +--*  t150   int    
N006 (  6,  6) [000151] ----GO------       t151 = *  ADD       int    <l:$29c, c:$29b>
                                                  /--*  t151   int    
N008 (  6,  6) [000153] DA--GO------              *  STORE_LCL_VAR int    V11 tmp7         d:5

lowering store lcl var/field (after):
N001 (  1,  1) [000148] ------------       t148 =    LCL_VAR   ref    V09 tmp5         u:2 $80
                                                  /--*  t148   ref    
N003 (  2,  2) [000213] -c----------       t213 = *  LEA(b+16) byref 
                                                  /--*  t213   byref  
N004 (  4,  4) [000149] n---GO------       t149 = *  IND       int    <l:$290, c:$298>
N005 (  1,  1) [000150] -c----------       t150 =    CNS_INT   int    1 $44
                                                  /--*  t149   int    
                                                  +--*  t150   int    
N006 (  6,  6) [000151] ----GO------       t151 = *  ADD       int    <l:$29c, c:$29b>
                                                  /--*  t151   int    
N008 (  6,  6) [000153] DA--GO------              *  STORE_LCL_VAR int    V11 tmp7         d:5

lowering store lcl var/field (before):
N001 (  1,  1) [000158] ------------       t158 =    CNS_INT   ref    null $VN.Null
                                                  /--*  t158   ref    
N003 (  1,  3) [000160] DA----------              *  STORE_LCL_VAR ref    V10 tmp6         d:3

lowering store lcl var/field (after):
N001 (  1,  1) [000158] ------------       t158 =    CNS_INT   ref    null $VN.Null
                                                  /--*  t158   ref    
N003 (  1,  3) [000160] DA----------              *  STORE_LCL_VAR ref    V10 tmp6         d:3

lowering store lcl var/field (before):
N001 (  1,  1) [000096] ------------        t96 =    CNS_INT   int    0 $40
                                                  /--*  t96    int    
N003 (  1,  3) [000098] DA----------              *  STORE_LCL_VAR int    V07 tmp3         d:3

lowering store lcl var/field (after):
N001 (  1,  1) [000096] ------------        t96 =    CNS_INT   int    0 $40
                                                  /--*  t96    int    
N003 (  1,  3) [000098] DA----------              *  STORE_LCL_VAR int    V07 tmp3         d:3

lowering store lcl var/field (before):
N001 (  0,  0) [000234] ------------       t234 =    PHI_ARG   ref    V10 tmp6         u:4 <l:$194, c:$345>
N002 (  0,  0) [000231] ------------       t231 =    PHI_ARG   ref    V10 tmp6         u:3 $VN.Null
                                                  /--*  t234   ref    
                                                  +--*  t231   ref    
N003 (  0,  0) [000227] ------------       t227 = *  PHI       ref   
                                                  /--*  t227   ref    
N005 (  0,  0) [000228] DA----------              *  STORE_LCL_VAR ref    V10 tmp6         d:2

lowering store lcl var/field (after):
N001 (  0,  0) [000234] ------------       t234 =    PHI_ARG   ref    V10 tmp6         u:4 <l:$194, c:$345>
N002 (  0,  0) [000231] ------------       t231 =    PHI_ARG   ref    V10 tmp6         u:3 $VN.Null
                                                  /--*  t234   ref    
                                                  +--*  t231   ref    
N003 (  0,  0) [000227] ------------       t227 = *  PHI       ref   
                                                  /--*  t227   ref    
N005 (  0,  0) [000228] DA----------              *  STORE_LCL_VAR ref    V10 tmp6         d:2

lowering store lcl var/field (before):
N001 (  0,  0) [000235] ------------       t235 =    PHI_ARG   bool   V07 tmp3         u:4 $44
N002 (  0,  0) [000232] ------------       t232 =    PHI_ARG   bool   V07 tmp3         u:3 $40
                                                  /--*  t235   bool   
                                                  +--*  t232   bool   
N003 (  0,  0) [000224] ------------       t224 = *  PHI       bool  
                                                  /--*  t224   bool   
N005 (  0,  0) [000225] DA----------              *  STORE_LCL_VAR bool   V07 tmp3         d:2

lowering store lcl var/field (after):
N001 (  0,  0) [000235] ------------       t235 =    PHI_ARG   bool   V07 tmp3         u:4 $44
N002 (  0,  0) [000232] ------------       t232 =    PHI_ARG   bool   V07 tmp3         u:3 $40
                                                  /--*  t235   bool   
                                                  +--*  t232   bool   
N003 (  0,  0) [000224] ------------       t224 = *  PHI       bool  
                                                  /--*  t224   bool   
N005 (  0,  0) [000225] DA----------              *  STORE_LCL_VAR bool   V07 tmp3         d:2

lowering store lcl var/field (before):
N001 (  0,  0) [000236] ------------       t236 =    PHI_ARG   int    V11 tmp7         u:6 $29f
N002 (  0,  0) [000233] ------------       t233 =    PHI_ARG   int    V11 tmp7         u:5 <l:$29a, c:$299>
                                                  /--*  t236   int    
                                                  +--*  t233   int    
N003 (  0,  0) [000218] ------------       t218 = *  PHI       int   
                                                  /--*  t218   int    
N005 (  0,  0) [000219] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:4

lowering store lcl var/field (after):
N001 (  0,  0) [000236] ------------       t236 =    PHI_ARG   int    V11 tmp7         u:6 $29f
N002 (  0,  0) [000233] ------------       t233 =    PHI_ARG   int    V11 tmp7         u:5 <l:$29a, c:$299>
                                                  /--*  t236   int    
                                                  +--*  t233   int    
N003 (  0,  0) [000218] ------------       t218 = *  PHI       int   
                                                  /--*  t218   int    
N005 (  0,  0) [000219] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:4

Addressing mode:
  Base
    N001 (  1,  1) [000032] ------------              *  LCL_VAR   ref    V01 loc0         u:2 (last use) $180
  + 8
Removing unused node:
  N002 (  1,  1) [000215] -c----------              *  CNS_INT   long   8 field offset Fseq[_batches] $202
New addressing mode node:
  N003 (  2,  2) [000216] ------------              *  LEA(b+8)  byref 

lowering GT_RETURN
N005 (  5,  5) [000035] ----GO------              *  RETURN    ref    $149
============lowering call (before):
N001 ( 14,  5) [000163] --CXG-------                 CALL      void   System.ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion $VN.Void

objp:
======

args:
======

late:
======
lowering call (after):
N001 ( 14,  5) [000163] --CXG-------                 CALL      void   System.ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion $VN.Void

lowering call (before):
N001 ( 14,  5) [000258] --CXG-------                 CALL help void   HELPER.CORINFO_HELP_RNGCHKFAIL

objp:
======

args:
======

late:
======
lowering call (after):
N001 ( 14,  5) [000258] --CXG-------                 CALL help void   HELPER.CORINFO_HELP_RNGCHKFAIL

Lower has completed modifying nodes.

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i label target hascall gcsafe newobj nullcheck LIR 
BB02 [0001]  1       BB01                  1       [00D..00F)-> BB04 (always)                     keep i label gcsafe LIR 
BB03 [0002]  1       BB09                  2     0 [00F..01E)                                     i Loop label target hascall gcsafe bwd bwd-target LIR 
BB04 [0003]  2       BB02,BB03             8     0 [01E..027)-> BB07 ( cond )                     i label target gcsafe bwd LIR 
BB05 [0013]  1       BB04                  1     0 [01E..01F)-> BB07 ( cond )                     i gcsafe bwd LIR 
BB06 [0014]  1       BB05                  2     0 [01E..01F)-> BB09 (always)                     i gcsafe idxlen bwd LIR 
BB07 [0015]  2       BB04,BB05             2     0 [01E..01F)-> BB11 ( cond )                     i label target gcsafe bwd LIR 
BB08 [0019]  1       BB07                  2     0 [01E..01F)                                     i label target gcsafe bwd LIR 
BB09 [0016]  2       BB06,BB08             8     0 [???..???)-> BB03 ( cond )                     internal label target gcsafe bwd LIR 
BB10 [0004]  1       BB09                  1       [027..03E)        (return)                     i gcsafe LIR 
BB11 [0018]  1       BB07                  0       [01E..01F)        (throw )                     i rare label target hascall gcsafe bwd LIR 
BB12 [0023]  0                             0       [???..???)        (throw )                     keep i internal rare label target LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..00D), preds={} succs={BB02}
               [000239] ------------                 IL_OFFSET void   IL offset: 0x0
N002 (  2, 10) [000000] H-----------         t0 =    CNS_INT(h) long   0xd1ffab1e method $100
                                                  /--*  t0     long   
               [000259] ------------       t259 = *  PUTARG_REG long   REG rcx
                                                  /--*  t259   long   arg0 in rcx
N003 ( 16, 16) [000001] --C---------         t1 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $180
                                                  /--*  t1     ref    
N005 ( 16, 16) [000003] DA----------              *  STORE_LCL_VAR ref    V05 tmp1         d:2
N002 (  1,  1) [000004] ------------         t4 =    LCL_VAR   ref    V05 tmp1         u:2 $180
                                                  /--*  t4     ref    
               [000260] ------------       t260 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t260   ref    this in rcx
N003 ( 15,  8) [000005] --CXG-------              *  CALL      void   Batcher..ctor $VN.Void
               [000240] ------------                 IL_OFFSET void   IL offset: 0x5
N001 (  1,  1) [000006] ------------         t6 =    LCL_VAR   ref    V05 tmp1         u:2 (last use) $180
                                                  /--*  t6     ref    
N003 (  1,  3) [000008] DA----------              *  STORE_LCL_VAR ref    V01 loc0         d:2
               [000241] ------------                 IL_OFFSET void   IL offset: 0x6
N001 (  1,  1) [000009] ------------         t9 =    LCL_VAR   ref    V00 arg0         u:1 $80
                                                  /--*  t9     ref    
N003 (  5,  4) [000055] DA----------              *  STORE_LCL_VAR ref    V13 tmp9         d:2
               [000242] ------------                 IL_OFFSET void   IL offset: 0x6
N001 (  1,  1) [000058] ------------        t58 =    CNS_INT   int    0 $40
                                                  /--*  t58    int    
N003 (  5,  4) [000060] DA----------              *  STORE_LCL_VAR int    V15 tmp11        d:2
               [000243] ------------                 IL_OFFSET void   IL offset: 0x6
N001 (  1,  1) [000063] ------------        t63 =    LCL_VAR   ref    V13 tmp9         u:2 (last use) $80
                                                  /--*  t63    ref    
N003 (  2,  2) [000171] -c----------       t171 = *  LEA(b+20) byref 
                                                  /--*  t171   byref  
N004 (  4,  4) [000064] ---XG-------        t64 = *  IND       int    <l:$283, c:$282>
                                                  /--*  t64    int    
N006 (  8,  7) [000066] DA-XG-------              *  STORE_LCL_VAR int    V16 tmp12        d:2
N001 (  3,  2) [000173] ------------       t173 =    LCL_VAR   ref    V13 tmp9         u:2 (last use) $80
                                                  /--*  t173   ref    
N003 (  3,  3) [000174] DA----------              *  STORE_LCL_VAR ref    V09 tmp5         d:2
N004 (  1,  1) [000237] ------------       t237 =    CNS_INT   int    0 $40
                                                  /--*  t237   int    
N006 (  1,  3) [000181] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:2
N008 (  3,  2) [000184] ------------       t184 =    LCL_VAR   int    V16 tmp12        u:2 (last use) <l:$281, c:$1c1>
                                                  /--*  t184   int    
N010 (  3,  3) [000185] DA----------              *  STORE_LCL_VAR int    V12 tmp8         d:2

------------ BB02 [00D..00F) -> BB04 (always), preds={BB01} succs={BB04}

------------ BB03 [00F..01E), preds={BB09} succs={BB04}
               [000244] ------------                 IL_OFFSET void   IL offset: 0x17
N003 (  1,  1) [000029] ------------        t29 =    LCL_VAR   ref    V01 loc0         u:2 $180
                                                  /--*  t29    ref    
               [000261] ------------       t261 = *  PUTARG_REG ref    REG rcx
N004 (  1,  1) [000030] ------------        t30 =    LCL_VAR   ref    V10 tmp6         u:2 (last use) $480
                                                  /--*  t30    ref    
               [000262] ------------       t262 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t261   ref    this in rcx
                                                  +--*  t262   ref    arg1 in rdx
N005 ( 16, 10) [000031] --CXG-------              *  CALL      void   Batcher.Push $VN.Void

------------ BB04 [01E..027) -> BB07 (cond), preds={BB02,BB03} succs={BB05,BB07}
N001 (  0,  0) [000230] ------------       t230 =    PHI_ARG   int    V11 tmp7         u:4
N002 (  0,  0) [000229] ------------       t229 =    PHI_ARG   int    V11 tmp7         u:2 $40
                                                  /--*  t230   int    
                                                  +--*  t229   int    
N003 (  0,  0) [000221] ------------       t221 = *  PHI       int   
                                                  /--*  t221   int    
N005 (  0,  0) [000222] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:3
               [000245] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000081] ------------        t81 =    LCL_VAR   ref    V09 tmp5         u:2 $80
                                                  /--*  t81    ref    
N003 (  1,  3) [000083] DA----------              *  STORE_LCL_VAR ref    V08 tmp4         d:2
               [000246] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000086] ------------        t86 =    LCL_VAR   int    V12 tmp8         u:2 <l:$281, c:$1c1>
N002 (  1,  1) [000087] ------------        t87 =    LCL_VAR   ref    V08 tmp4         u:2 $80
                                                  /--*  t87    ref    
N004 (  2,  2) [000190] -c----------       t190 = *  LEA(b+20) byref 
                                                  /--*  t190   byref  
N005 (  4,  4) [000088] nc--GO------        t88 = *  IND       int    <l:$288, c:$287>
                                                  /--*  t86    int    
                                                  +--*  t88    int    
N006 (  6,  6) [000089] N---GO-N-U--              *  NE        void   <l:$28c, c:$28b>
N007 (  8,  8) [000090] ----GO------              *  JTRUE     void  

------------ BB05 [01E..01F) -> BB07 (cond), preds={BB04} succs={BB06,BB07}
               [000247] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000102] ------------       t102 =    LCL_VAR   int    V11 tmp7         u:3 $300
N002 (  1,  1) [000103] ------------       t103 =    LCL_VAR   ref    V09 tmp5         u:2 $80
                                                  /--*  t103   ref    
N004 (  2,  2) [000192] -c----------       t192 = *  LEA(b+16) byref 
                                                  /--*  t192   byref  
N005 (  4,  4) [000104] nc--GO------       t104 = *  IND       int    <l:$290, c:$28f>
                                                  /--*  t102   int    
                                                  +--*  t104   int    
N006 (  6,  6) [000105] N---GO-N-U--              *  GE        void   <l:$294, c:$293>
N007 (  8,  8) [000106] ----GO------              *  JTRUE     void  

------------ BB06 [01E..01F) -> BB09 (always), preds={BB05} succs={BB09}
               [000248] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000109] ------------       t109 =    LCL_VAR   ref    V09 tmp5         u:2 (last use) $80
                                                  /--*  t109   ref    
N003 (  2,  2) [000209] -c----------       t209 = *  LEA(b+8)  byref 
                                                  /--*  t209   byref  
N004 (  4,  4) [000110] n---GO------       t110 = *  IND       ref    <l:$185, c:$184>
                                                  /--*  t110   ref    
N006 (  4,  4) [000194] DA--GO------              *  STORE_LCL_VAR ref    V17 tmp13        d:2
N007 (  1,  1) [000113] ------------       t113 =    LCL_VAR   int    V11 tmp7         u:3 $300
N008 (  1,  1) [000195] ------------       t195 =    LCL_VAR   ref    V17 tmp13        u:2 <l:$183, c:$343>
                                                  /--*  t195   ref    
               [000257] -c----------       t257 = *  LEA(b+8)  ref   
                                                  /--*  t257   ref    
N009 (  3,  3) [000198] -c-X--------       t198 = *  IND       int    <l:$29e, c:$29d>
                                                  /--*  t113   int    
                                                  +--*  t198   int    
N010 (  8, 11) [000199] ---X--------              *  ARR_BOUNDS_CHECK_Rng void   <l:$191, c:$190>
N011 (  1,  1) [000196] ------------       t196 =    LCL_VAR   ref    V17 tmp13        u:2 (last use) <l:$183, c:$343>
N012 (  1,  1) [000197] ------------       t197 =    LCL_VAR   int    V11 tmp7         u:3 $300
                                                  /--*  t197   int    
N013 (  2,  3) [000200] ------------       t200 = *  CAST      long <- int $400
                                                  /--*  t196   ref    
                                                  +--*  t200   long   
N018 (  5,  6) [000205] -c----------       t205 = *  LEA(b+(i*8)+16) byref 
                                                  /--*  t205   byref  
N019 (  6,  7) [000114] a---G-------       t114 = *  IND       ref    <l:$194, c:$345>
                                                  /--*  t114   ref    
N023 ( 18, 22) [000116] DA-XGO------              *  STORE_LCL_VAR ref    V10 tmp6         d:4
               [000249] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000121] ------------       t121 =    LCL_VAR   int    V11 tmp7         u:3 (last use) $300
N002 (  1,  1) [000122] -c----------       t122 =    CNS_INT   int    1 $44
                                                  /--*  t121   int    
                                                  +--*  t122   int    
N003 (  3,  3) [000123] ------------       t123 = *  ADD       int    $29f
                                                  /--*  t123   int    
N005 (  3,  3) [000125] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:6
               [000250] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000126] -c----------       t126 =    CNS_INT   int    1 $44
                                                  /--*  t126   int    
N003 (  1,  3) [000129] DA----------              *  STORE_LCL_VAR int    V07 tmp3         d:4

------------ BB07 [01E..01F) -> BB11 (cond), preds={BB04,BB05} succs={BB08,BB11}
               [000251] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000137] ------------       t137 =    LCL_VAR   int    V12 tmp8         u:2 <l:$281, c:$1c1>
N002 (  1,  1) [000140] ------------       t140 =    LCL_VAR   ref    V09 tmp5         u:2 $80
                                                  /--*  t140   ref    
N004 (  2,  2) [000211] -c----------       t211 = *  LEA(b+20) byref 
                                                  /--*  t211   byref  
N005 (  4,  4) [000141] nc--GO------       t141 = *  IND       int    <l:$288, c:$295>
                                                  /--*  t137   int    
                                                  +--*  t141   int    
N006 (  6,  6) [000142] J---GO-N----              *  NE        void   <l:$28c, c:$297>
N007 (  8,  8) [000143] ----GO------              *  JTRUE     void  

------------ BB08 [01E..01F), preds={BB07} succs={BB09}
               [000252] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000148] ------------       t148 =    LCL_VAR   ref    V09 tmp5         u:2 $80
                                                  /--*  t148   ref    
N003 (  2,  2) [000213] -c----------       t213 = *  LEA(b+16) byref 
                                                  /--*  t213   byref  
N004 (  4,  4) [000149] n---GO------       t149 = *  IND       int    <l:$290, c:$298>
N005 (  1,  1) [000150] -c----------       t150 =    CNS_INT   int    1 $44
                                                  /--*  t149   int    
                                                  +--*  t150   int    
N006 (  6,  6) [000151] ----GO------       t151 = *  ADD       int    <l:$29c, c:$29b>
                                                  /--*  t151   int    
N008 (  6,  6) [000153] DA--GO------              *  STORE_LCL_VAR int    V11 tmp7         d:5
               [000253] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000158] ------------       t158 =    CNS_INT   ref    null $VN.Null
                                                  /--*  t158   ref    
N003 (  1,  3) [000160] DA----------              *  STORE_LCL_VAR ref    V10 tmp6         d:3
               [000254] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000096] ------------        t96 =    CNS_INT   int    0 $40
                                                  /--*  t96    int    
N003 (  1,  3) [000098] DA----------              *  STORE_LCL_VAR int    V07 tmp3         d:3

------------ BB09 [???..???) -> BB03 (cond), preds={BB06,BB08} succs={BB10,BB03}
N001 (  0,  0) [000234] ------------       t234 =    PHI_ARG   ref    V10 tmp6         u:4 <l:$194, c:$345>
N002 (  0,  0) [000231] ------------       t231 =    PHI_ARG   ref    V10 tmp6         u:3 $VN.Null
                                                  /--*  t234   ref    
                                                  +--*  t231   ref    
N003 (  0,  0) [000227] ------------       t227 = *  PHI       ref   
                                                  /--*  t227   ref    
N005 (  0,  0) [000228] DA----------              *  STORE_LCL_VAR ref    V10 tmp6         d:2
N001 (  0,  0) [000235] ------------       t235 =    PHI_ARG   bool   V07 tmp3         u:4 $44
N002 (  0,  0) [000232] ------------       t232 =    PHI_ARG   bool   V07 tmp3         u:3 $40
                                                  /--*  t235   bool   
                                                  +--*  t232   bool   
N003 (  0,  0) [000224] ------------       t224 = *  PHI       bool  
                                                  /--*  t224   bool   
N005 (  0,  0) [000225] DA----------              *  STORE_LCL_VAR bool   V07 tmp3         d:2
N001 (  0,  0) [000236] ------------       t236 =    PHI_ARG   int    V11 tmp7         u:6 $29f
N002 (  0,  0) [000233] ------------       t233 =    PHI_ARG   int    V11 tmp7         u:5 <l:$29a, c:$299>
                                                  /--*  t236   int    
                                                  +--*  t233   int    
N003 (  0,  0) [000218] ------------       t218 = *  PHI       int   
                                                  /--*  t218   int    
N005 (  0,  0) [000219] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:4
N001 (  1,  1) [000130] ------------       t130 =    LCL_VAR   bool   V07 tmp3         u:2 (last use) $4c0
N002 (  1,  1) [000019] -c----------        t19 =    CNS_INT   int    0 $40
                                                  /--*  t130   bool   
                                                  +--*  t19    int    
N003 (  3,  3) [000020] J------N----              *  NE        void   $2a1
N004 (  5,  5) [000021] ------------              *  JTRUE     void  

------------ BB10 [027..03E) (return), preds={BB09} succs={}
N001 (  1,  1) [000032] ------------        t32 =    LCL_VAR   ref    V01 loc0         u:2 (last use) $180
                                                  /--*  t32    ref    
N003 (  2,  2) [000216] -c----------       t216 = *  LEA(b+8)  byref 
                                                  /--*  t216   byref  
N004 (  4,  4) [000166] n---GO------       t166 = *  IND       ref    <l:$1a0, c:$19f>
                                                  /--*  t166   ref    
N005 (  5,  5) [000035] ----GO------              *  RETURN    ref    $149

------------ BB11 [01E..01F) (throw), preds={BB07} succs={}
               [000255] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 ( 14,  5) [000163] --CXG-------                 CALL      void   System.ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion $VN.Void

------------ BB12 [???..???) (throw), preds={} succs={}
N001 ( 14,  5) [000258] --CXG-------                 CALL help void   HELPER.CORINFO_HELP_RNGCHKFAIL

-------------------------------------------------------------------------------------------------------------------

*** lvaComputeRefCounts ***

*** lvaComputeRefCounts -- explicit counts ***
New refCnts for V05: refCnt =  1, refCntWtd = 2   
New refCnts for V05: refCnt =  2, refCntWtd = 4   
New refCnts for V05: refCnt =  3, refCntWtd = 6   
New refCnts for V01: refCnt =  1, refCntWtd = 1   
New refCnts for V00: refCnt =  1, refCntWtd = 1   
New refCnts for V13: refCnt =  1, refCntWtd = 1   
New refCnts for V15: refCnt =  1, refCntWtd = 1   
New refCnts for V13: refCnt =  2, refCntWtd = 2   
New refCnts for V16: refCnt =  1, refCntWtd = 1   
New refCnts for V13: refCnt =  3, refCntWtd = 3   
New refCnts for V09: refCnt =  1, refCntWtd = 1   
New refCnts for V11: refCnt =  1, refCntWtd = 1   
New refCnts for V16: refCnt =  2, refCntWtd = 2   
New refCnts for V12: refCnt =  1, refCntWtd = 1   
New refCnts for V01: refCnt =  2, refCntWtd = 3   
New refCnts for V10: refCnt =  1, refCntWtd = 2   
New refCnts for V09: refCnt =  2, refCntWtd = 9   
New refCnts for V08: refCnt =  1, refCntWtd = 8   
New refCnts for V12: refCnt =  2, refCntWtd = 9   
New refCnts for V08: refCnt =  2, refCntWtd = 16   
New refCnts for V11: refCnt =  2, refCntWtd = 2   
New refCnts for V09: refCnt =  3, refCntWtd = 10   
New refCnts for V09: refCnt =  4, refCntWtd = 12   
New refCnts for V17: refCnt =  1, refCntWtd = 4   
New refCnts for V11: refCnt =  3, refCntWtd = 4   
New refCnts for V17: refCnt =  2, refCntWtd = 8   
New refCnts for V17: refCnt =  3, refCntWtd = 12   
New refCnts for V11: refCnt =  4, refCntWtd = 6   
New refCnts for V10: refCnt =  2, refCntWtd = 4   
New refCnts for V11: refCnt =  5, refCntWtd = 8   
New refCnts for V11: refCnt =  6, refCntWtd = 10   
New refCnts for V07: refCnt =  1, refCntWtd = 2   
New refCnts for V12: refCnt =  3, refCntWtd = 11   
New refCnts for V09: refCnt =  5, refCntWtd = 14   
New refCnts for V09: refCnt =  6, refCntWtd = 16   
New refCnts for V11: refCnt =  7, refCntWtd = 12   
New refCnts for V10: refCnt =  3, refCntWtd = 6   
New refCnts for V07: refCnt =  2, refCntWtd = 4   
New refCnts for V07: refCnt =  3, refCntWtd = 12   
New refCnts for V01: refCnt =  3, refCntWtd = 4   

*** lvaComputeRefCounts -- implicit counts ***
New refCnts for V00: refCnt =  2, refCntWtd = 2   
New refCnts for V00: refCnt =  3, refCntWtd = 3   
*************** In fgLocalVarLiveness()
; Initial local variable assignments
;
;  V00 arg0              ref  class-hnd
;  V01 loc0              ref  class-hnd exact
;  V02 loc1           struct <System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> ld-addr-op
;  V03 loc2              ref  class-hnd
;  V04 OutArgs        lclBlk <32>  "OutgoingArgSpace"
;  V05 tmp1              ref  class-hnd exact "NewObj constructor temp"
;  V06 tmp2           struct <System.Collections.Generic.List`1+Enumerator[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], 24> "NewObj constructor temp"
;  V07 tmp3             bool  "Inline return value spill temp"
;  V08 tmp4              ref  class-hnd "Inline stloc first use temp"
;  V09 tmp5              ref  V02._list(offs=0x00) P-INDEP "field V02._list (fldOffset=0x0)"
;  V10 tmp6              ref  V02._current(offs=0x08) P-INDEP "field V02._current (fldOffset=0x8)"
;  V11 tmp7              int  V02._index(offs=0x10) P-INDEP "field V02._index (fldOffset=0x10)"
;  V12 tmp8              int  V02._version(offs=0x14) P-INDEP "field V02._version (fldOffset=0x14)"
;  V13 tmp9              ref  V06._list(offs=0x00) P-INDEP "field V06._list (fldOffset=0x0)"
;  V14 tmp10             ref  V06._current(offs=0x08) P-INDEP "field V06._current (fldOffset=0x8)"
;  V15 tmp11             int  V06._index(offs=0x10) P-INDEP "field V06._index (fldOffset=0x10)"
;  V16 tmp12             int  V06._version(offs=0x14) P-INDEP "field V06._version (fldOffset=0x14)"
;  V17 tmp13             ref  "arr expr"
In fgLocalVarLivenessInit
Tracked variable (13 out of 18) table:
V09 tmp5          [   ref]: refCnt =    6, refCntWtd =  16   
V08 tmp4          [   ref]: refCnt =    2, refCntWtd =  16   
V11 tmp7          [   int]: refCnt =    7, refCntWtd =  12   
V17 tmp13         [   ref]: refCnt =    3, refCntWtd =  12   
V07 tmp3          [  bool]: refCnt =    3, refCntWtd =  12   
V12 tmp8          [   int]: refCnt =    3, refCntWtd =  11   
V05 tmp1          [   ref]: refCnt =    3, refCntWtd =   6   
V10 tmp6          [   ref]: refCnt =    3, refCntWtd =   6   
V00 arg0          [   ref]: refCnt =    3, refCntWtd =   3   
V01 loc0          [   ref]: refCnt =    3, refCntWtd =   4   
V13 tmp9          [   ref]: refCnt =    3, refCntWtd =   3   
V16 tmp12         [   int]: refCnt =    2, refCntWtd =   2   
V15 tmp11         [   int]: refCnt =    1, refCntWtd =   1   

*************** In fgPerBlockLocalVarLiveness()
BB01 USE(1)={                V00                } + ByrefExposed + GcHeap
     DEF(8)={V09 V11 V12 V05     V01 V13 V16 V15} + ByrefExposed* + GcHeap*

BB02 USE(0)={}
     DEF(0)={}

BB03 USE(2)={V10 V01} + ByrefExposed + GcHeap
     DEF(0)={       } + ByrefExposed* + GcHeap*

BB04 USE(2)={V09     V12} + ByrefExposed + GcHeap
     DEF(1)={    V08    }

BB05 USE(2)={V09 V11} + ByrefExposed + GcHeap
     DEF(0)={       }

BB06 USE(2)={V09 V11            } + ByrefExposed + GcHeap
     DEF(4)={    V11 V17 V07 V10}

BB07 USE(2)={V09 V12} + ByrefExposed + GcHeap
     DEF(0)={       }

BB08 USE(1)={V09            } + ByrefExposed + GcHeap
     DEF(3)={    V11 V07 V10}

BB09 USE(1)={V07}
     DEF(0)={   }

BB10 USE(1)={V01} + ByrefExposed + GcHeap
     DEF(0)={   }

BB11 USE(0)={} + ByrefExposed + GcHeap
     DEF(0)={} + ByrefExposed* + GcHeap*

BB12 USE(0)={}
     DEF(0)={}

** Memory liveness computed, GcHeap states and ByrefExposed states match
*************** In fgInterBlockLocalVarLiveness()

BB liveness after fgLiveVarAnalysis():

BB01 IN (1)={            V00    } + ByrefExposed + GcHeap
     OUT(4)={V09 V11 V12     V01} + ByrefExposed + GcHeap

BB02 IN (4)={V09 V11 V12 V01} + ByrefExposed + GcHeap
     OUT(4)={V09 V11 V12 V01} + ByrefExposed + GcHeap

BB03 IN (5)={V09 V11 V12 V10 V01} + ByrefExposed + GcHeap
     OUT(4)={V09 V11 V12     V01} + ByrefExposed + GcHeap

BB04 IN (4)={V09 V11 V12 V01} + ByrefExposed + GcHeap
     OUT(4)={V09 V11 V12 V01} + ByrefExposed + GcHeap

BB05 IN (4)={V09 V11 V12 V01} + ByrefExposed + GcHeap
     OUT(4)={V09 V11 V12 V01} + ByrefExposed + GcHeap

BB06 IN (4)={V09 V11     V12     V01} + ByrefExposed + GcHeap
     OUT(6)={V09 V11 V07 V12 V10 V01} + ByrefExposed + GcHeap

BB07 IN (3)={V09 V12 V01} + ByrefExposed + GcHeap
     OUT(3)={V09 V12 V01} + ByrefExposed + GcHeap

BB08 IN (3)={V09         V12     V01} + ByrefExposed + GcHeap
     OUT(6)={V09 V11 V07 V12 V10 V01} + ByrefExposed + GcHeap

BB09 IN (6)={V09 V11 V07 V12 V10 V01} + ByrefExposed + GcHeap
     OUT(5)={V09 V11     V12 V10 V01} + ByrefExposed + GcHeap

BB10 IN (1)={V01} + ByrefExposed + GcHeap
     OUT(0)={   }

BB11 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={}

BB12 IN (0)={}
     OUT(0)={}

Removing dead store:
N003 (  5,  4) [000060] DA----------              *  STORE_LCL_VAR int    V15 tmp11        d:2 (last use)
Removing dead node:
N001 (  1,  1) [000058] ------------              *  CNS_INT   int    0 $40

*************** In fgUpdateFlowGraph()
Before updating the flow graph:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i label target hascall gcsafe newobj nullcheck LIR 
BB02 [0001]  1       BB01                  1       [00D..00F)-> BB04 (always)                     keep i label gcsafe LIR 
BB03 [0002]  1       BB09                  2     0 [00F..01E)                                     i Loop label target hascall gcsafe bwd bwd-target LIR 
BB04 [0003]  2       BB02,BB03             8     0 [01E..027)-> BB07 ( cond )                     i label target gcsafe bwd LIR 
BB05 [0013]  1       BB04                  1     0 [01E..01F)-> BB07 ( cond )                     i gcsafe bwd LIR 
BB06 [0014]  1       BB05                  2     0 [01E..01F)-> BB09 (always)                     i gcsafe idxlen bwd LIR 
BB07 [0015]  2       BB04,BB05             2     0 [01E..01F)-> BB11 ( cond )                     i label target gcsafe bwd LIR 
BB08 [0019]  1       BB07                  2     0 [01E..01F)                                     i label target gcsafe bwd LIR 
BB09 [0016]  2       BB06,BB08             8     0 [???..???)-> BB03 ( cond )                     internal label target gcsafe bwd LIR 
BB10 [0004]  1       BB09                  1       [027..03E)        (return)                     i gcsafe LIR 
BB11 [0018]  1       BB07                  0       [01E..01F)        (throw )                     i rare label target hascall gcsafe bwd LIR 
BB12 [0023]  0                             0       [???..???)        (throw )                     keep i internal rare label target LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

*************** In fgDebugCheckBBlist

*** lvaComputeRefCounts ***

*** lvaComputeRefCounts -- explicit counts ***
New refCnts for V05: refCnt =  1, refCntWtd = 2   
New refCnts for V05: refCnt =  2, refCntWtd = 4   
New refCnts for V05: refCnt =  3, refCntWtd = 6   
New refCnts for V01: refCnt =  1, refCntWtd = 1   
New refCnts for V00: refCnt =  1, refCntWtd = 1   
New refCnts for V13: refCnt =  1, refCntWtd = 1   
New refCnts for V13: refCnt =  2, refCntWtd = 2   
New refCnts for V16: refCnt =  1, refCntWtd = 1   
New refCnts for V13: refCnt =  3, refCntWtd = 3   
New refCnts for V09: refCnt =  1, refCntWtd = 1   
New refCnts for V11: refCnt =  1, refCntWtd = 1   
New refCnts for V16: refCnt =  2, refCntWtd = 2   
New refCnts for V12: refCnt =  1, refCntWtd = 1   
New refCnts for V01: refCnt =  2, refCntWtd = 3   
New refCnts for V10: refCnt =  1, refCntWtd = 2   
New refCnts for V09: refCnt =  2, refCntWtd = 9   
New refCnts for V08: refCnt =  1, refCntWtd = 8   
New refCnts for V12: refCnt =  2, refCntWtd = 9   
New refCnts for V08: refCnt =  2, refCntWtd = 16   
New refCnts for V11: refCnt =  2, refCntWtd = 2   
New refCnts for V09: refCnt =  3, refCntWtd = 10   
New refCnts for V09: refCnt =  4, refCntWtd = 12   
New refCnts for V17: refCnt =  1, refCntWtd = 4   
New refCnts for V11: refCnt =  3, refCntWtd = 4   
New refCnts for V17: refCnt =  2, refCntWtd = 8   
New refCnts for V17: refCnt =  3, refCntWtd = 12   
New refCnts for V11: refCnt =  4, refCntWtd = 6   
New refCnts for V10: refCnt =  2, refCntWtd = 4   
New refCnts for V11: refCnt =  5, refCntWtd = 8   
New refCnts for V11: refCnt =  6, refCntWtd = 10   
New refCnts for V07: refCnt =  1, refCntWtd = 2   
New refCnts for V12: refCnt =  3, refCntWtd = 11   
New refCnts for V09: refCnt =  5, refCntWtd = 14   
New refCnts for V09: refCnt =  6, refCntWtd = 16   
New refCnts for V11: refCnt =  7, refCntWtd = 12   
New refCnts for V10: refCnt =  3, refCntWtd = 6   
New refCnts for V07: refCnt =  2, refCntWtd = 4   
New refCnts for V07: refCnt =  3, refCntWtd = 12   
New refCnts for V01: refCnt =  3, refCntWtd = 4   

*** lvaComputeRefCounts -- implicit counts ***
New refCnts for V00: refCnt =  2, refCntWtd = 2   
New refCnts for V00: refCnt =  3, refCntWtd = 3   

*************** Finishing PHASE Lowering nodeinfo
Trees after Lowering nodeinfo

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i label target hascall gcsafe newobj nullcheck LIR 
BB02 [0001]  1       BB01                  1       [00D..00F)-> BB04 (always)                     keep i label gcsafe LIR 
BB03 [0002]  1       BB09                  2     0 [00F..01E)                                     i Loop label target hascall gcsafe bwd bwd-target LIR 
BB04 [0003]  2       BB02,BB03             8     0 [01E..027)-> BB07 ( cond )                     i label target gcsafe bwd LIR 
BB05 [0013]  1       BB04                  1     0 [01E..01F)-> BB07 ( cond )                     i gcsafe bwd LIR 
BB06 [0014]  1       BB05                  2     0 [01E..01F)-> BB09 (always)                     i gcsafe idxlen bwd LIR 
BB07 [0015]  2       BB04,BB05             2     0 [01E..01F)-> BB11 ( cond )                     i label target gcsafe bwd LIR 
BB08 [0019]  1       BB07                  2     0 [01E..01F)                                     i label target gcsafe bwd LIR 
BB09 [0016]  2       BB06,BB08             8     0 [???..???)-> BB03 ( cond )                     internal label target gcsafe bwd LIR 
BB10 [0004]  1       BB09                  1       [027..03E)        (return)                     i gcsafe LIR 
BB11 [0018]  1       BB07                  0       [01E..01F)        (throw )                     i rare label target hascall gcsafe bwd LIR 
BB12 [0023]  0                             0       [???..???)        (throw )                     keep i internal rare label target LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..00D), preds={} succs={BB02}
               [000239] ------------                 IL_OFFSET void   IL offset: 0x0
N002 (  2, 10) [000000] H-----------         t0 =    CNS_INT(h) long   0xd1ffab1e method $100
                                                  /--*  t0     long   
               [000259] ------------       t259 = *  PUTARG_REG long   REG rcx
                                                  /--*  t259   long   arg0 in rcx
N003 ( 16, 16) [000001] --C---------         t1 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $180
                                                  /--*  t1     ref    
N005 ( 16, 16) [000003] DA----------              *  STORE_LCL_VAR ref    V05 tmp1         d:2
N002 (  1,  1) [000004] ------------         t4 =    LCL_VAR   ref    V05 tmp1         u:2 $180
                                                  /--*  t4     ref    
               [000260] ------------       t260 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t260   ref    this in rcx
N003 ( 15,  8) [000005] --CXG-------              *  CALL      void   Batcher..ctor $VN.Void
               [000240] ------------                 IL_OFFSET void   IL offset: 0x5
N001 (  1,  1) [000006] ------------         t6 =    LCL_VAR   ref    V05 tmp1         u:2 (last use) $180
                                                  /--*  t6     ref    
N003 (  1,  3) [000008] DA----------              *  STORE_LCL_VAR ref    V01 loc0         d:2
               [000241] ------------                 IL_OFFSET void   IL offset: 0x6
N001 (  1,  1) [000009] ------------         t9 =    LCL_VAR   ref    V00 arg0         u:1 (last use) $80
                                                  /--*  t9     ref    
N003 (  5,  4) [000055] DA----------              *  STORE_LCL_VAR ref    V13 tmp9         d:2
               [000242] ------------                 IL_OFFSET void   IL offset: 0x6
               [000243] ------------                 IL_OFFSET void   IL offset: 0x6
N001 (  1,  1) [000063] ------------        t63 =    LCL_VAR   ref    V13 tmp9         u:2 $80
                                                  /--*  t63    ref    
N003 (  2,  2) [000171] -c----------       t171 = *  LEA(b+20) byref 
                                                  /--*  t171   byref  
N004 (  4,  4) [000064] ---XG-------        t64 = *  IND       int    <l:$283, c:$282>
                                                  /--*  t64    int    
N006 (  8,  7) [000066] DA-XG-------              *  STORE_LCL_VAR int    V16 tmp12        d:2
N001 (  3,  2) [000173] ------------       t173 =    LCL_VAR   ref    V13 tmp9         u:2 (last use) $80
                                                  /--*  t173   ref    
N003 (  3,  3) [000174] DA----------              *  STORE_LCL_VAR ref    V09 tmp5         d:2
N004 (  1,  1) [000237] ------------       t237 =    CNS_INT   int    0 $40
                                                  /--*  t237   int    
N006 (  1,  3) [000181] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:2
N008 (  3,  2) [000184] ------------       t184 =    LCL_VAR   int    V16 tmp12        u:2 (last use) <l:$281, c:$1c1>
                                                  /--*  t184   int    
N010 (  3,  3) [000185] DA----------              *  STORE_LCL_VAR int    V12 tmp8         d:2

------------ BB02 [00D..00F) -> BB04 (always), preds={BB01} succs={BB04}

------------ BB03 [00F..01E), preds={BB09} succs={BB04}
               [000244] ------------                 IL_OFFSET void   IL offset: 0x17
N003 (  1,  1) [000029] ------------        t29 =    LCL_VAR   ref    V01 loc0         u:2 $180
                                                  /--*  t29    ref    
               [000261] ------------       t261 = *  PUTARG_REG ref    REG rcx
N004 (  1,  1) [000030] ------------        t30 =    LCL_VAR   ref    V10 tmp6         u:2 (last use) $480
                                                  /--*  t30    ref    
               [000262] ------------       t262 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t261   ref    this in rcx
                                                  +--*  t262   ref    arg1 in rdx
N005 ( 16, 10) [000031] --CXG-------              *  CALL      void   Batcher.Push $VN.Void

------------ BB04 [01E..027) -> BB07 (cond), preds={BB02,BB03} succs={BB05,BB07}
N001 (  0,  0) [000230] ------------       t230 =    PHI_ARG   int    V11 tmp7         u:4
N002 (  0,  0) [000229] ------------       t229 =    PHI_ARG   int    V11 tmp7         u:2 $40
                                                  /--*  t230   int    
                                                  +--*  t229   int    
N003 (  0,  0) [000221] ------------       t221 = *  PHI       int   
                                                  /--*  t221   int    
N005 (  0,  0) [000222] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:3
               [000245] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000081] ------------        t81 =    LCL_VAR   ref    V09 tmp5         u:2 $80
                                                  /--*  t81    ref    
N003 (  1,  3) [000083] DA----------              *  STORE_LCL_VAR ref    V08 tmp4         d:2
               [000246] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000086] ------------        t86 =    LCL_VAR   int    V12 tmp8         u:2 <l:$281, c:$1c1>
N002 (  1,  1) [000087] ------------        t87 =    LCL_VAR   ref    V08 tmp4         u:2 (last use) $80
                                                  /--*  t87    ref    
N004 (  2,  2) [000190] -c----------       t190 = *  LEA(b+20) byref 
                                                  /--*  t190   byref  
N005 (  4,  4) [000088] nc--GO------        t88 = *  IND       int    <l:$288, c:$287>
                                                  /--*  t86    int    
                                                  +--*  t88    int    
N006 (  6,  6) [000089] N---GO-N-U--              *  NE        void   <l:$28c, c:$28b>
N007 (  8,  8) [000090] ----GO------              *  JTRUE     void  

------------ BB05 [01E..01F) -> BB07 (cond), preds={BB04} succs={BB06,BB07}
               [000247] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000102] ------------       t102 =    LCL_VAR   int    V11 tmp7         u:3 $300
N002 (  1,  1) [000103] ------------       t103 =    LCL_VAR   ref    V09 tmp5         u:2 $80
                                                  /--*  t103   ref    
N004 (  2,  2) [000192] -c----------       t192 = *  LEA(b+16) byref 
                                                  /--*  t192   byref  
N005 (  4,  4) [000104] nc--GO------       t104 = *  IND       int    <l:$290, c:$28f>
                                                  /--*  t102   int    
                                                  +--*  t104   int    
N006 (  6,  6) [000105] N---GO-N-U--              *  GE        void   <l:$294, c:$293>
N007 (  8,  8) [000106] ----GO------              *  JTRUE     void  

------------ BB06 [01E..01F) -> BB09 (always), preds={BB05} succs={BB09}
               [000248] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000109] ------------       t109 =    LCL_VAR   ref    V09 tmp5         u:2 $80
                                                  /--*  t109   ref    
N003 (  2,  2) [000209] -c----------       t209 = *  LEA(b+8)  byref 
                                                  /--*  t209   byref  
N004 (  4,  4) [000110] n---GO------       t110 = *  IND       ref    <l:$185, c:$184>
                                                  /--*  t110   ref    
N006 (  4,  4) [000194] DA--GO------              *  STORE_LCL_VAR ref    V17 tmp13        d:2
N007 (  1,  1) [000113] ------------       t113 =    LCL_VAR   int    V11 tmp7         u:3 $300
N008 (  1,  1) [000195] ------------       t195 =    LCL_VAR   ref    V17 tmp13        u:2 <l:$183, c:$343>
                                                  /--*  t195   ref    
               [000257] -c----------       t257 = *  LEA(b+8)  ref   
                                                  /--*  t257   ref    
N009 (  3,  3) [000198] -c-X--------       t198 = *  IND       int    <l:$29e, c:$29d>
                                                  /--*  t113   int    
                                                  +--*  t198   int    
N010 (  8, 11) [000199] ---X--------              *  ARR_BOUNDS_CHECK_Rng void   <l:$191, c:$190>
N011 (  1,  1) [000196] ------------       t196 =    LCL_VAR   ref    V17 tmp13        u:2 (last use) <l:$183, c:$343>
N012 (  1,  1) [000197] ------------       t197 =    LCL_VAR   int    V11 tmp7         u:3 $300
                                                  /--*  t197   int    
N013 (  2,  3) [000200] ------------       t200 = *  CAST      long <- int $400
                                                  /--*  t196   ref    
                                                  +--*  t200   long   
N018 (  5,  6) [000205] -c----------       t205 = *  LEA(b+(i*8)+16) byref 
                                                  /--*  t205   byref  
N019 (  6,  7) [000114] a---G-------       t114 = *  IND       ref    <l:$194, c:$345>
                                                  /--*  t114   ref    
N023 ( 18, 22) [000116] DA-XGO------              *  STORE_LCL_VAR ref    V10 tmp6         d:4
               [000249] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000121] ------------       t121 =    LCL_VAR   int    V11 tmp7         u:3 (last use) $300
N002 (  1,  1) [000122] -c----------       t122 =    CNS_INT   int    1 $44
                                                  /--*  t121   int    
                                                  +--*  t122   int    
N003 (  3,  3) [000123] ------------       t123 = *  ADD       int    $29f
                                                  /--*  t123   int    
N005 (  3,  3) [000125] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:6
               [000250] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000126] -c----------       t126 =    CNS_INT   int    1 $44
                                                  /--*  t126   int    
N003 (  1,  3) [000129] DA----------              *  STORE_LCL_VAR int    V07 tmp3         d:4

------------ BB07 [01E..01F) -> BB11 (cond), preds={BB04,BB05} succs={BB08,BB11}
               [000251] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000137] ------------       t137 =    LCL_VAR   int    V12 tmp8         u:2 <l:$281, c:$1c1>
N002 (  1,  1) [000140] ------------       t140 =    LCL_VAR   ref    V09 tmp5         u:2 $80
                                                  /--*  t140   ref    
N004 (  2,  2) [000211] -c----------       t211 = *  LEA(b+20) byref 
                                                  /--*  t211   byref  
N005 (  4,  4) [000141] nc--GO------       t141 = *  IND       int    <l:$288, c:$295>
                                                  /--*  t137   int    
                                                  +--*  t141   int    
N006 (  6,  6) [000142] J---GO-N----              *  NE        void   <l:$28c, c:$297>
N007 (  8,  8) [000143] ----GO------              *  JTRUE     void  

------------ BB08 [01E..01F), preds={BB07} succs={BB09}
               [000252] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000148] ------------       t148 =    LCL_VAR   ref    V09 tmp5         u:2 $80
                                                  /--*  t148   ref    
N003 (  2,  2) [000213] -c----------       t213 = *  LEA(b+16) byref 
                                                  /--*  t213   byref  
N004 (  4,  4) [000149] n---GO------       t149 = *  IND       int    <l:$290, c:$298>
N005 (  1,  1) [000150] -c----------       t150 =    CNS_INT   int    1 $44
                                                  /--*  t149   int    
                                                  +--*  t150   int    
N006 (  6,  6) [000151] ----GO------       t151 = *  ADD       int    <l:$29c, c:$29b>
                                                  /--*  t151   int    
N008 (  6,  6) [000153] DA--GO------              *  STORE_LCL_VAR int    V11 tmp7         d:5
               [000253] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000158] ------------       t158 =    CNS_INT   ref    null $VN.Null
                                                  /--*  t158   ref    
N003 (  1,  3) [000160] DA----------              *  STORE_LCL_VAR ref    V10 tmp6         d:3
               [000254] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000096] ------------        t96 =    CNS_INT   int    0 $40
                                                  /--*  t96    int    
N003 (  1,  3) [000098] DA----------              *  STORE_LCL_VAR int    V07 tmp3         d:3

------------ BB09 [???..???) -> BB03 (cond), preds={BB06,BB08} succs={BB10,BB03}
N001 (  0,  0) [000234] ------------       t234 =    PHI_ARG   ref    V10 tmp6         u:4 <l:$194, c:$345>
N002 (  0,  0) [000231] ------------       t231 =    PHI_ARG   ref    V10 tmp6         u:3 $VN.Null
                                                  /--*  t234   ref    
                                                  +--*  t231   ref    
N003 (  0,  0) [000227] ------------       t227 = *  PHI       ref   
                                                  /--*  t227   ref    
N005 (  0,  0) [000228] DA----------              *  STORE_LCL_VAR ref    V10 tmp6         d:2
N001 (  0,  0) [000235] ------------       t235 =    PHI_ARG   bool   V07 tmp3         u:4 $44
N002 (  0,  0) [000232] ------------       t232 =    PHI_ARG   bool   V07 tmp3         u:3 $40
                                                  /--*  t235   bool   
                                                  +--*  t232   bool   
N003 (  0,  0) [000224] ------------       t224 = *  PHI       bool  
                                                  /--*  t224   bool   
N005 (  0,  0) [000225] DA----------              *  STORE_LCL_VAR bool   V07 tmp3         d:2
N001 (  0,  0) [000236] ------------       t236 =    PHI_ARG   int    V11 tmp7         u:6 $29f
N002 (  0,  0) [000233] ------------       t233 =    PHI_ARG   int    V11 tmp7         u:5 <l:$29a, c:$299>
                                                  /--*  t236   int    
                                                  +--*  t233   int    
N003 (  0,  0) [000218] ------------       t218 = *  PHI       int   
                                                  /--*  t218   int    
N005 (  0,  0) [000219] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:4
N001 (  1,  1) [000130] ------------       t130 =    LCL_VAR   bool   V07 tmp3         u:2 (last use) $4c0
N002 (  1,  1) [000019] -c----------        t19 =    CNS_INT   int    0 $40
                                                  /--*  t130   bool   
                                                  +--*  t19    int    
N003 (  3,  3) [000020] J------N----              *  NE        void   $2a1
N004 (  5,  5) [000021] ------------              *  JTRUE     void  

------------ BB10 [027..03E) (return), preds={BB09} succs={}
N001 (  1,  1) [000032] ------------        t32 =    LCL_VAR   ref    V01 loc0         u:2 (last use) $180
                                                  /--*  t32    ref    
N003 (  2,  2) [000216] -c----------       t216 = *  LEA(b+8)  byref 
                                                  /--*  t216   byref  
N004 (  4,  4) [000166] n---GO------       t166 = *  IND       ref    <l:$1a0, c:$19f>
                                                  /--*  t166   ref    
N005 (  5,  5) [000035] ----GO------              *  RETURN    ref    $149

------------ BB11 [01E..01F) (throw), preds={BB07} succs={}
               [000255] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 ( 14,  5) [000163] --CXG-------                 CALL      void   System.ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion $VN.Void

------------ BB12 [???..???) (throw), preds={} succs={}
N001 ( 14,  5) [000258] --CXG-------                 CALL help void   HELPER.CORINFO_HELP_RNGCHKFAIL

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist
Trees before Calculate stack level slots

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i label target hascall gcsafe newobj nullcheck LIR 
BB02 [0001]  1       BB01                  1       [00D..00F)-> BB04 (always)                     keep i label gcsafe LIR 
BB03 [0002]  1       BB09                  2     0 [00F..01E)                                     i Loop label target hascall gcsafe bwd bwd-target LIR 
BB04 [0003]  2       BB02,BB03             8     0 [01E..027)-> BB07 ( cond )                     i label target gcsafe bwd LIR 
BB05 [0013]  1       BB04                  1     0 [01E..01F)-> BB07 ( cond )                     i gcsafe bwd LIR 
BB06 [0014]  1       BB05                  2     0 [01E..01F)-> BB09 (always)                     i gcsafe idxlen bwd LIR 
BB07 [0015]  2       BB04,BB05             2     0 [01E..01F)-> BB11 ( cond )                     i label target gcsafe bwd LIR 
BB08 [0019]  1       BB07                  2     0 [01E..01F)                                     i label target gcsafe bwd LIR 
BB09 [0016]  2       BB06,BB08             8     0 [???..???)-> BB03 ( cond )                     internal label target gcsafe bwd LIR 
BB10 [0004]  1       BB09                  1       [027..03E)        (return)                     i gcsafe LIR 
BB11 [0018]  1       BB07                  0       [01E..01F)        (throw )                     i rare label target hascall gcsafe bwd LIR 
BB12 [0023]  0                             0       [???..???)        (throw )                     keep i internal rare label target LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..00D), preds={} succs={BB02}
               [000239] ------------                 IL_OFFSET void   IL offset: 0x0
N002 (  2, 10) [000000] H-----------         t0 =    CNS_INT(h) long   0xd1ffab1e method $100
                                                  /--*  t0     long   
               [000259] ------------       t259 = *  PUTARG_REG long   REG rcx
                                                  /--*  t259   long   arg0 in rcx
N003 ( 16, 16) [000001] --C---------         t1 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $180
                                                  /--*  t1     ref    
N005 ( 16, 16) [000003] DA----------              *  STORE_LCL_VAR ref    V05 tmp1         d:2
N002 (  1,  1) [000004] ------------         t4 =    LCL_VAR   ref    V05 tmp1         u:2 $180
                                                  /--*  t4     ref    
               [000260] ------------       t260 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t260   ref    this in rcx
N003 ( 15,  8) [000005] --CXG-------              *  CALL      void   Batcher..ctor $VN.Void
               [000240] ------------                 IL_OFFSET void   IL offset: 0x5
N001 (  1,  1) [000006] ------------         t6 =    LCL_VAR   ref    V05 tmp1         u:2 (last use) $180
                                                  /--*  t6     ref    
N003 (  1,  3) [000008] DA----------              *  STORE_LCL_VAR ref    V01 loc0         d:2
               [000241] ------------                 IL_OFFSET void   IL offset: 0x6
N001 (  1,  1) [000009] ------------         t9 =    LCL_VAR   ref    V00 arg0         u:1 (last use) $80
                                                  /--*  t9     ref    
N003 (  5,  4) [000055] DA----------              *  STORE_LCL_VAR ref    V13 tmp9         d:2
               [000242] ------------                 IL_OFFSET void   IL offset: 0x6
               [000243] ------------                 IL_OFFSET void   IL offset: 0x6
N001 (  1,  1) [000063] ------------        t63 =    LCL_VAR   ref    V13 tmp9         u:2 $80
                                                  /--*  t63    ref    
N003 (  2,  2) [000171] -c----------       t171 = *  LEA(b+20) byref 
                                                  /--*  t171   byref  
N004 (  4,  4) [000064] ---XG-------        t64 = *  IND       int    <l:$283, c:$282>
                                                  /--*  t64    int    
N006 (  8,  7) [000066] DA-XG-------              *  STORE_LCL_VAR int    V16 tmp12        d:2
N001 (  3,  2) [000173] ------------       t173 =    LCL_VAR   ref    V13 tmp9         u:2 (last use) $80
                                                  /--*  t173   ref    
N003 (  3,  3) [000174] DA----------              *  STORE_LCL_VAR ref    V09 tmp5         d:2
N004 (  1,  1) [000237] ------------       t237 =    CNS_INT   int    0 $40
                                                  /--*  t237   int    
N006 (  1,  3) [000181] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:2
N008 (  3,  2) [000184] ------------       t184 =    LCL_VAR   int    V16 tmp12        u:2 (last use) <l:$281, c:$1c1>
                                                  /--*  t184   int    
N010 (  3,  3) [000185] DA----------              *  STORE_LCL_VAR int    V12 tmp8         d:2

------------ BB02 [00D..00F) -> BB04 (always), preds={BB01} succs={BB04}

------------ BB03 [00F..01E), preds={BB09} succs={BB04}
               [000244] ------------                 IL_OFFSET void   IL offset: 0x17
N003 (  1,  1) [000029] ------------        t29 =    LCL_VAR   ref    V01 loc0         u:2 $180
                                                  /--*  t29    ref    
               [000261] ------------       t261 = *  PUTARG_REG ref    REG rcx
N004 (  1,  1) [000030] ------------        t30 =    LCL_VAR   ref    V10 tmp6         u:2 (last use) $480
                                                  /--*  t30    ref    
               [000262] ------------       t262 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t261   ref    this in rcx
                                                  +--*  t262   ref    arg1 in rdx
N005 ( 16, 10) [000031] --CXG-------              *  CALL      void   Batcher.Push $VN.Void

------------ BB04 [01E..027) -> BB07 (cond), preds={BB02,BB03} succs={BB05,BB07}
N001 (  0,  0) [000230] ------------       t230 =    PHI_ARG   int    V11 tmp7         u:4
N002 (  0,  0) [000229] ------------       t229 =    PHI_ARG   int    V11 tmp7         u:2 $40
                                                  /--*  t230   int    
                                                  +--*  t229   int    
N003 (  0,  0) [000221] ------------       t221 = *  PHI       int   
                                                  /--*  t221   int    
N005 (  0,  0) [000222] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:3
               [000245] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000081] ------------        t81 =    LCL_VAR   ref    V09 tmp5         u:2 $80
                                                  /--*  t81    ref    
N003 (  1,  3) [000083] DA----------              *  STORE_LCL_VAR ref    V08 tmp4         d:2
               [000246] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000086] ------------        t86 =    LCL_VAR   int    V12 tmp8         u:2 <l:$281, c:$1c1>
N002 (  1,  1) [000087] ------------        t87 =    LCL_VAR   ref    V08 tmp4         u:2 (last use) $80
                                                  /--*  t87    ref    
N004 (  2,  2) [000190] -c----------       t190 = *  LEA(b+20) byref 
                                                  /--*  t190   byref  
N005 (  4,  4) [000088] nc--GO------        t88 = *  IND       int    <l:$288, c:$287>
                                                  /--*  t86    int    
                                                  +--*  t88    int    
N006 (  6,  6) [000089] N---GO-N-U--              *  NE        void   <l:$28c, c:$28b>
N007 (  8,  8) [000090] ----GO------              *  JTRUE     void  

------------ BB05 [01E..01F) -> BB07 (cond), preds={BB04} succs={BB06,BB07}
               [000247] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000102] ------------       t102 =    LCL_VAR   int    V11 tmp7         u:3 $300
N002 (  1,  1) [000103] ------------       t103 =    LCL_VAR   ref    V09 tmp5         u:2 $80
                                                  /--*  t103   ref    
N004 (  2,  2) [000192] -c----------       t192 = *  LEA(b+16) byref 
                                                  /--*  t192   byref  
N005 (  4,  4) [000104] nc--GO------       t104 = *  IND       int    <l:$290, c:$28f>
                                                  /--*  t102   int    
                                                  +--*  t104   int    
N006 (  6,  6) [000105] N---GO-N-U--              *  GE        void   <l:$294, c:$293>
N007 (  8,  8) [000106] ----GO------              *  JTRUE     void  

------------ BB06 [01E..01F) -> BB09 (always), preds={BB05} succs={BB09}
               [000248] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000109] ------------       t109 =    LCL_VAR   ref    V09 tmp5         u:2 $80
                                                  /--*  t109   ref    
N003 (  2,  2) [000209] -c----------       t209 = *  LEA(b+8)  byref 
                                                  /--*  t209   byref  
N004 (  4,  4) [000110] n---GO------       t110 = *  IND       ref    <l:$185, c:$184>
                                                  /--*  t110   ref    
N006 (  4,  4) [000194] DA--GO------              *  STORE_LCL_VAR ref    V17 tmp13        d:2
N007 (  1,  1) [000113] ------------       t113 =    LCL_VAR   int    V11 tmp7         u:3 $300
N008 (  1,  1) [000195] ------------       t195 =    LCL_VAR   ref    V17 tmp13        u:2 <l:$183, c:$343>
                                                  /--*  t195   ref    
               [000257] -c----------       t257 = *  LEA(b+8)  ref   
                                                  /--*  t257   ref    
N009 (  3,  3) [000198] -c-X--------       t198 = *  IND       int    <l:$29e, c:$29d>
                                                  /--*  t113   int    
                                                  +--*  t198   int    
N010 (  8, 11) [000199] ---X--------              *  ARR_BOUNDS_CHECK_Rng void   <l:$191, c:$190>
N011 (  1,  1) [000196] ------------       t196 =    LCL_VAR   ref    V17 tmp13        u:2 (last use) <l:$183, c:$343>
N012 (  1,  1) [000197] ------------       t197 =    LCL_VAR   int    V11 tmp7         u:3 $300
                                                  /--*  t197   int    
N013 (  2,  3) [000200] ------------       t200 = *  CAST      long <- int $400
                                                  /--*  t196   ref    
                                                  +--*  t200   long   
N018 (  5,  6) [000205] -c----------       t205 = *  LEA(b+(i*8)+16) byref 
                                                  /--*  t205   byref  
N019 (  6,  7) [000114] a---G-------       t114 = *  IND       ref    <l:$194, c:$345>
                                                  /--*  t114   ref    
N023 ( 18, 22) [000116] DA-XGO------              *  STORE_LCL_VAR ref    V10 tmp6         d:4
               [000249] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000121] ------------       t121 =    LCL_VAR   int    V11 tmp7         u:3 (last use) $300
N002 (  1,  1) [000122] -c----------       t122 =    CNS_INT   int    1 $44
                                                  /--*  t121   int    
                                                  +--*  t122   int    
N003 (  3,  3) [000123] ------------       t123 = *  ADD       int    $29f
                                                  /--*  t123   int    
N005 (  3,  3) [000125] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:6
               [000250] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000126] -c----------       t126 =    CNS_INT   int    1 $44
                                                  /--*  t126   int    
N003 (  1,  3) [000129] DA----------              *  STORE_LCL_VAR int    V07 tmp3         d:4

------------ BB07 [01E..01F) -> BB11 (cond), preds={BB04,BB05} succs={BB08,BB11}
               [000251] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000137] ------------       t137 =    LCL_VAR   int    V12 tmp8         u:2 <l:$281, c:$1c1>
N002 (  1,  1) [000140] ------------       t140 =    LCL_VAR   ref    V09 tmp5         u:2 $80
                                                  /--*  t140   ref    
N004 (  2,  2) [000211] -c----------       t211 = *  LEA(b+20) byref 
                                                  /--*  t211   byref  
N005 (  4,  4) [000141] nc--GO------       t141 = *  IND       int    <l:$288, c:$295>
                                                  /--*  t137   int    
                                                  +--*  t141   int    
N006 (  6,  6) [000142] J---GO-N----              *  NE        void   <l:$28c, c:$297>
N007 (  8,  8) [000143] ----GO------              *  JTRUE     void  

------------ BB08 [01E..01F), preds={BB07} succs={BB09}
               [000252] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000148] ------------       t148 =    LCL_VAR   ref    V09 tmp5         u:2 $80
                                                  /--*  t148   ref    
N003 (  2,  2) [000213] -c----------       t213 = *  LEA(b+16) byref 
                                                  /--*  t213   byref  
N004 (  4,  4) [000149] n---GO------       t149 = *  IND       int    <l:$290, c:$298>
N005 (  1,  1) [000150] -c----------       t150 =    CNS_INT   int    1 $44
                                                  /--*  t149   int    
                                                  +--*  t150   int    
N006 (  6,  6) [000151] ----GO------       t151 = *  ADD       int    <l:$29c, c:$29b>
                                                  /--*  t151   int    
N008 (  6,  6) [000153] DA--GO------              *  STORE_LCL_VAR int    V11 tmp7         d:5
               [000253] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000158] ------------       t158 =    CNS_INT   ref    null $VN.Null
                                                  /--*  t158   ref    
N003 (  1,  3) [000160] DA----------              *  STORE_LCL_VAR ref    V10 tmp6         d:3
               [000254] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 (  1,  1) [000096] ------------        t96 =    CNS_INT   int    0 $40
                                                  /--*  t96    int    
N003 (  1,  3) [000098] DA----------              *  STORE_LCL_VAR int    V07 tmp3         d:3

------------ BB09 [???..???) -> BB03 (cond), preds={BB06,BB08} succs={BB10,BB03}
N001 (  0,  0) [000234] ------------       t234 =    PHI_ARG   ref    V10 tmp6         u:4 <l:$194, c:$345>
N002 (  0,  0) [000231] ------------       t231 =    PHI_ARG   ref    V10 tmp6         u:3 $VN.Null
                                                  /--*  t234   ref    
                                                  +--*  t231   ref    
N003 (  0,  0) [000227] ------------       t227 = *  PHI       ref   
                                                  /--*  t227   ref    
N005 (  0,  0) [000228] DA----------              *  STORE_LCL_VAR ref    V10 tmp6         d:2
N001 (  0,  0) [000235] ------------       t235 =    PHI_ARG   bool   V07 tmp3         u:4 $44
N002 (  0,  0) [000232] ------------       t232 =    PHI_ARG   bool   V07 tmp3         u:3 $40
                                                  /--*  t235   bool   
                                                  +--*  t232   bool   
N003 (  0,  0) [000224] ------------       t224 = *  PHI       bool  
                                                  /--*  t224   bool   
N005 (  0,  0) [000225] DA----------              *  STORE_LCL_VAR bool   V07 tmp3         d:2
N001 (  0,  0) [000236] ------------       t236 =    PHI_ARG   int    V11 tmp7         u:6 $29f
N002 (  0,  0) [000233] ------------       t233 =    PHI_ARG   int    V11 tmp7         u:5 <l:$29a, c:$299>
                                                  /--*  t236   int    
                                                  +--*  t233   int    
N003 (  0,  0) [000218] ------------       t218 = *  PHI       int   
                                                  /--*  t218   int    
N005 (  0,  0) [000219] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:4
N001 (  1,  1) [000130] ------------       t130 =    LCL_VAR   bool   V07 tmp3         u:2 (last use) $4c0
N002 (  1,  1) [000019] -c----------        t19 =    CNS_INT   int    0 $40
                                                  /--*  t130   bool   
                                                  +--*  t19    int    
N003 (  3,  3) [000020] J------N----              *  NE        void   $2a1
N004 (  5,  5) [000021] ------------              *  JTRUE     void  

------------ BB10 [027..03E) (return), preds={BB09} succs={}
N001 (  1,  1) [000032] ------------        t32 =    LCL_VAR   ref    V01 loc0         u:2 (last use) $180
                                                  /--*  t32    ref    
N003 (  2,  2) [000216] -c----------       t216 = *  LEA(b+8)  byref 
                                                  /--*  t216   byref  
N004 (  4,  4) [000166] n---GO------       t166 = *  IND       ref    <l:$1a0, c:$19f>
                                                  /--*  t166   ref    
N005 (  5,  5) [000035] ----GO------              *  RETURN    ref    $149

------------ BB11 [01E..01F) (throw), preds={BB07} succs={}
               [000255] ------------                 IL_OFFSET void   IL offset: 0x1e
N001 ( 14,  5) [000163] --CXG-------                 CALL      void   System.ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion $VN.Void

------------ BB12 [???..???) (throw), preds={} succs={}
N001 ( 14,  5) [000258] --CXG-------                 CALL help void   HELPER.CORINFO_HELP_RNGCHKFAIL

-------------------------------------------------------------------------------------------------------------------

*************** Starting PHASE Calculate stack level slots

*************** Finishing PHASE Calculate stack level slots [no changes]

*************** Starting PHASE Linear scan register alloc
Clearing modified regs.

buildIntervals ========

-----------------
LIVENESS:
-----------------
BB01 use def in out
{V00}
{V01 V05 V09 V11 V12 V13 V15 V16}
{V00}
{V01 V09 V11 V12}
BB02 use def in out
{}
{}
{V01 V09 V11 V12}
{V01 V09 V11 V12}
BB03 use def in out
{V01 V10}
{}
{V01 V09 V10 V11 V12}
{V01 V09 V11 V12}
BB04 use def in out
{V09 V12}
{V08}
{V01 V09 V11 V12}
{V01 V09 V11 V12}
BB05 use def in out
{V09 V11}
{}
{V01 V09 V11 V12}
{V01 V09 V11 V12}
BB06 use def in out
{V09 V11}
{V07 V10 V11 V17}
{V01 V09 V11 V12}
{V01 V07 V09 V10 V11 V12}
BB07 use def in out
{V09 V12}
{}
{V01 V09 V12}
{V01 V09 V12}
BB08 use def in out
{V09}
{V07 V10 V11}
{V01 V09 V12}
{V01 V07 V09 V10 V11 V12}
BB09 use def in out
{V07}
{}
{V01 V07 V09 V10 V11 V12}
{V01 V09 V10 V11 V12}
BB10 use def in out
{V01}
{}
{V01}
{}
BB11 use def in out
{}
{}
{}
{}
BB12 use def in out
{}
{}
{}
{}
Interval  0: ref RefPositions {} physReg:NA Preferences=[allInt]
  Interval  0: (V00) ref RefPositions {} physReg:NA Preferences=[allInt]
Interval  1: ref RefPositions {} physReg:NA Preferences=[allInt]
  Interval  1: (V01) ref RefPositions {} physReg:NA Preferences=[allInt]
Interval  2: ref RefPositions {} physReg:NA Preferences=[allInt]
  Interval  2: (V05) ref RefPositions {} physReg:NA Preferences=[allInt]
Interval  3: int RefPositions {} physReg:NA Preferences=[allInt]
  Interval  3: (V07) int RefPositions {} physReg:NA Preferences=[allInt]
Interval  4: ref RefPositions {} physReg:NA Preferences=[allInt]
  Interval  4: (V08) ref RefPositions {} physReg:NA Preferences=[allInt]
Interval  5: ref RefPositions {} physReg:NA Preferences=[allInt]
  Interval  5: (V09) ref (field) RefPositions {} physReg:NA Preferences=[allInt]
Interval  6: ref RefPositions {} physReg:NA Preferences=[allInt]
  Interval  6: (V10) ref (field) RefPositions {} physReg:NA Preferences=[allInt]
Interval  7: int RefPositions {} physReg:NA Preferences=[allInt]
  Interval  7: (V11) int (field) RefPositions {} physReg:NA Preferences=[allInt]
Interval  8: int RefPositions {} physReg:NA Preferences=[allInt]
  Interval  8: (V12) int (field) RefPositions {} physReg:NA Preferences=[allInt]
Interval  9: ref RefPositions {} physReg:NA Preferences=[allInt]
  Interval  9: (V13) ref (field) RefPositions {} physReg:NA Preferences=[allInt]
Interval 10: int RefPositions {} physReg:NA Preferences=[allInt]
  Interval 10: (V16) int (field) RefPositions {} physReg:NA Preferences=[allInt]
Interval 11: ref RefPositions {} physReg:NA Preferences=[allInt]
  Interval 11: (V17) ref RefPositions {} physReg:NA Preferences=[allInt]

FP callee save candidate vars: None

floatVarCount = 0; hasLoops = 1, singleExit = 1
TUPLE STYLE DUMP BEFORE LSRA

New BlockSet epoch 4, # of blocks (including unused BB00): 13, bitset array size: 1 (short)
LSRA Block Sequence: BB01(  1   ) 
BB02(  1   ) 
BB04(  8   ) 
BB05(  1   ) 
BB06(  2   ) 
BB07(  2   ) 
BB08(  2   ) 
BB09(  8   ) 
BB03(  2   ) 
BB10(  1   ) 
BB11(  0   ) 
BB12(  0   ) 

BB01 [000..00D), preds={} succs={BB02}
=====
  N000.                    IL_OFFSET IL offset: 0x0
  N002. t0              =  CNS_INT(h) 0xd1ffab1e method
  N000. t259            =  PUTARG_REG; t0
  N003. t1              =  CALL help; t259
  N005.                    V05(t3); t1
  N002.                    V05(t4)
  N000. t260            =  PUTARG_REG; t4
  N003.                    CALL     ; t260
  N000.                    IL_OFFSET IL offset: 0x5
  N001.                    V05(t6*)
  N003.                    V01(t8); t6*
  N000.                    IL_OFFSET IL offset: 0x6
  N001.                    V00(t9*)
  N003.                    V13(t55); t9*
  N000.                    IL_OFFSET IL offset: 0x6
  N000.                    IL_OFFSET IL offset: 0x6
  N001.                    V13(t63)
  N003. t171            =  LEA(b+20); t63
  N004. t64             =  IND      ; t171
  N006.                    V16(t66); t64
  N001.                    V13(t173*)
  N003.                    V09(t174); t173*
  N004. t237            =  CNS_INT   0
  N006.                    V11(t181); t237
  N008.                    V16(t184*)
  N010.                    V12(t185); t184*

BB02 [00D..00F) -> BB04 (always), preds={BB01} succs={BB04}
=====

BB04 [01E..027) -> BB07 (cond), preds={BB02,BB03} succs={BB05,BB07}
=====
  N000.                    IL_OFFSET IL offset: 0x1e
  N001.                    V09(t81)
  N003.                    V08(t83); t81
  N000.                    IL_OFFSET IL offset: 0x1e
  N001.                    V12(t86)
  N002.                    V08(t87*)
  N004. t190            =  LEA(b+20); t87*
  N005. t88             =  IND      ; t190
  N006.                    NE       ; t86,t88
  N007.                    JTRUE    

BB05 [01E..01F) -> BB07 (cond), preds={BB04} succs={BB06,BB07}
=====
  N000.                    IL_OFFSET IL offset: 0x1e
  N001.                    V11(t102)
  N002.                    V09(t103)
  N004. t192            =  LEA(b+16); t103
  N005. t104            =  IND      ; t192
  N006.                    GE       ; t102,t104
  N007.                    JTRUE    

BB06 [01E..01F) -> BB09 (always), preds={BB05} succs={BB09}
=====
  N000.                    IL_OFFSET IL offset: 0x1e
  N001.                    V09(t109)
  N003. t209            =  LEA(b+8) ; t109
  N004. t110            =  IND      ; t209
  N006.                    V17(t194); t110
  N007.                    V11(t113)
  N008.                    V17(t195)
  N000. t257            =  LEA(b+8) ; t195
  N009. t198            =  IND      ; t257
  N010.                    ARR_BOUNDS_CHECK_Rng; t113,t198
  N011.                    V17(t196*)
  N012.                    V11(t197)
  N013. t200            =  CAST     ; t197
  N018. t205            =  LEA(b+(i*8)+16); t196*,t200
  N019. t114            =  IND      ; t205
  N023.                    V10(t116); t114
  N000.                    IL_OFFSET IL offset: 0x1e
  N001.                    V11(t121*)
  N002.                    CNS_INT   1
  N003. t123            =  ADD      ; t121*
  N005.                    V11(t125); t123
  N000.                    IL_OFFSET IL offset: 0x1e
  N001.                    CNS_INT   1
  N003.                    V07(t129)

BB07 [01E..01F) -> BB11 (cond), preds={BB04,BB05} succs={BB08,BB11}
=====
  N000.                    IL_OFFSET IL offset: 0x1e
  N001.                    V12(t137)
  N002.                    V09(t140)
  N004. t211            =  LEA(b+20); t140
  N005. t141            =  IND      ; t211
  N006.                    NE       ; t137,t141
  N007.                    JTRUE    

BB08 [01E..01F), preds={BB07} succs={BB09}
=====
  N000.                    IL_OFFSET IL offset: 0x1e
  N001.                    V09(t148)
  N003. t213            =  LEA(b+16); t148
  N004. t149            =  IND      ; t213
  N005.                    CNS_INT   1
  N006. t151            =  ADD      ; t149
  N008.                    V11(t153); t151
  N000.                    IL_OFFSET IL offset: 0x1e
  N001. t158            =  CNS_INT   null
  N003.                    V10(t160); t158
  N000.                    IL_OFFSET IL offset: 0x1e
  N001. t96             =  CNS_INT   0
  N003.                    V07(t98); t96

BB09 [???..???) -> BB03 (cond), preds={BB06,BB08} succs={BB10,BB03}
=====
  N001.                    V07(t130*)
  N002.                    CNS_INT   0
  N003.                    NE       ; t130*
  N004.                    JTRUE    

BB03 [00F..01E), preds={BB09} succs={BB04}
=====
  N000.                    IL_OFFSET IL offset: 0x17
  N003.                    V01(t29)
  N000. t261            =  PUTARG_REG; t29
  N004.                    V10(t30*)
  N000. t262            =  PUTARG_REG; t30*
  N005.                    CALL     ; t261,t262

BB10 [027..03E) (return), preds={BB09} succs={}
=====
  N001.                    V01(t32*)
  N003. t216            =  LEA(b+8) ; t32*
  N004. t166            =  IND      ; t216
  N005.                    RETURN   ; t166

BB11 [01E..01F) (throw), preds={BB07} succs={}
=====
  N000.                    IL_OFFSET IL offset: 0x1e
  N001.                    CALL     

BB12 [???..???) (throw), preds={} succs={}
=====
  N001.                    CALL help




buildIntervals second part ========
Int arg V00 in reg rcx
<RefPosition #0   @0   RefTypeParamDef <Ivl:0 V00>  BB00 regmask=[rcx] minReg=1 fixed>

NEW BLOCK BB01
<RefPosition #1   @1   RefTypeBB  BB01 regmask=[] minReg=1>

DefList: {  }
N003 (???,???) [000239] ------------              *  IL_OFFSET void   IL offset: 0x0 REG NA

DefList: {  }
N005 (  2, 10) [000000] H-----------              *  CNS_INT(h) long   0xd1ffab1e method REG NA $100
Interval 12: long RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #2   @6   RefTypeDef <Ivl:12> CNS_INT BB01 regmask=[allInt] minReg=1>

DefList: { N005.t0. CNS_INT }
N007 (???,???) [000259] ------------              *  PUTARG_REG long   REG rcx
<RefPosition #3   @7   RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #4   @7   RefTypeUse <Ivl:12>  BB01 regmask=[rcx] minReg=1 last fixed>
Interval 13: long RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #5   @8   RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #6   @8   RefTypeDef <Ivl:13> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>

DefList: { N007.t259. PUTARG_REG }
N009 ( 16, 16) [000001] --C---------              *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST REG NA $180
<RefPosition #7   @9   RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #8   @9   RefTypeUse <Ivl:13>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #9   @10  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #10  @10  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #11  @10  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #12  @10  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #13  @10  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1>
<RefPosition #14  @10  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1>
<RefPosition #15  @10  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1>
Interval 14: ref RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #16  @10  RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #17  @10  RefTypeDef <Ivl:14> CALL BB01 regmask=[rax] minReg=1 fixed>

DefList: { N009.t1. CALL }
N011 ( 16, 16) [000003] DA----------              *  STORE_LCL_VAR ref    V05 tmp1         d:2 NA REG NA
<RefPosition #18  @11  RefTypeUse <Ivl:14>  BB01 regmask=[allInt] minReg=1 last>
Assigning related <V05/L2> to <I14>
<RefPosition #19  @12  RefTypeDef <Ivl:2 V05> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1 last>

DefList: {  }
N013 (  1,  1) [000004] ------------              *  LCL_VAR   ref    V05 tmp1         u:2 NA REG NA $180

DefList: {  }
N015 (???,???) [000260] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #20  @15  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #21  @15  RefTypeUse <Ivl:2 V05> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed>
Setting putarg_reg as a pass-through of a non-last use lclVar
Interval 15: ref RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #22  @16  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #23  @16  RefTypeDef <Ivl:15> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>
Assigning related <V05/L2> to <I15>

DefList: { N015.t260. PUTARG_REG }
N017 ( 15,  8) [000005] --CXG-------              *  CALL      void   Batcher..ctor REG NA $VN.Void
<RefPosition #24  @17  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #25  @17  RefTypeUse <Ivl:15>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #26  @18  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #27  @18  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #28  @18  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1>
<RefPosition #29  @18  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1>
<RefPosition #30  @18  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1>
<RefPosition #31  @18  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1>
<RefPosition #32  @18  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1>

DefList: {  }
N019 (???,???) [000240] ------------              *  IL_OFFSET void   IL offset: 0x5 REG NA

DefList: {  }
N021 (  1,  1) [000006] ------------              *  LCL_VAR   ref    V05 tmp1         u:2 NA (last use) REG NA $180

DefList: {  }
N023 (  1,  3) [000008] DA----------              *  STORE_LCL_VAR ref    V01 loc0         d:2 NA REG NA
<RefPosition #33  @23  RefTypeUse <Ivl:2 V05> LCL_VAR BB01 regmask=[allInt] minReg=1 last>
Assigning related <V01/L1> to <V05/L2>
<RefPosition #34  @24  RefTypeDef <Ivl:1 V01> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1 last>

DefList: {  }
N025 (???,???) [000241] ------------              *  IL_OFFSET void   IL offset: 0x6 REG NA

DefList: {  }
N027 (  1,  1) [000009] ------------              *  LCL_VAR   ref    V00 arg0         u:1 NA (last use) REG NA $80

DefList: {  }
N029 (  5,  4) [000055] DA----------              *  STORE_LCL_VAR ref    V13 tmp9         d:2 NA REG NA
<RefPosition #35  @29  RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[allInt] minReg=1 last>
Assigning related <V13/L9> to <V00/L0>
<RefPosition #36  @30  RefTypeDef <Ivl:9 V13> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1 last>

DefList: {  }
N031 (???,???) [000242] ------------              *  IL_OFFSET void   IL offset: 0x6 REG NA

DefList: {  }
N033 (???,???) [000243] ------------              *  IL_OFFSET void   IL offset: 0x6 REG NA

DefList: {  }
N035 (  1,  1) [000063] ------------              *  LCL_VAR   ref    V13 tmp9         u:2 NA REG NA $80

DefList: {  }
N037 (  2,  2) [000171] -c----------              *  LEA(b+20) byref  REG NA
Contained
DefList: {  }
N039 (  4,  4) [000064] ---XG-------              *  IND       int    REG NA <l:$283, c:$282>
<RefPosition #37  @39  RefTypeUse <Ivl:9 V13> LCL_VAR BB01 regmask=[allInt] minReg=1 last>
Interval 16: int RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #38  @40  RefTypeDef <Ivl:16> IND BB01 regmask=[allInt] minReg=1>

DefList: { N039.t64. IND }
N041 (  8,  7) [000066] DA-XG-------              *  STORE_LCL_VAR int    V16 tmp12        d:2 NA REG NA
<RefPosition #39  @41  RefTypeUse <Ivl:16>  BB01 regmask=[allInt] minReg=1 last>
Assigning related <V16/L10> to <I16>
<RefPosition #40  @42  RefTypeDef <Ivl:10 V16> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1 last>

DefList: {  }
N043 (  3,  2) [000173] ------------              *  LCL_VAR   ref    V13 tmp9         u:2 NA (last use) REG NA $80

DefList: {  }
N045 (  3,  3) [000174] DA----------              *  STORE_LCL_VAR ref    V09 tmp5         d:2 NA REG NA
<RefPosition #41  @45  RefTypeUse <Ivl:9 V13> LCL_VAR BB01 regmask=[allInt] minReg=1 last>
Assigning related <V09/L5> to <V13/L9>
<RefPosition #42  @46  RefTypeDef <Ivl:5 V09> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1 last>

DefList: {  }
N047 (  1,  1) [000237] ------------              *  CNS_INT   int    0 REG NA $40
Interval 17: int RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #43  @48  RefTypeDef <Ivl:17> CNS_INT BB01 regmask=[allInt] minReg=1>

DefList: { N047.t237. CNS_INT }
N049 (  1,  3) [000181] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:2 NA REG NA
<RefPosition #44  @49  RefTypeUse <Ivl:17>  BB01 regmask=[allInt] minReg=1 last>
Assigning related <V11/L7> to <I17>
<RefPosition #45  @50  RefTypeDef <Ivl:7 V11> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1 last>

DefList: {  }
N051 (  3,  2) [000184] ------------              *  LCL_VAR   int    V16 tmp12        u:2 NA (last use) REG NA <l:$281, c:$1c1>

DefList: {  }
N053 (  3,  3) [000185] DA----------              *  STORE_LCL_VAR int    V12 tmp8         d:2 NA REG NA
<RefPosition #46  @53  RefTypeUse <Ivl:10 V16> LCL_VAR BB01 regmask=[allInt] minReg=1 last>
Assigning related <V12/L8> to <V16/L10>
<RefPosition #47  @54  RefTypeDef <Ivl:8 V12> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1 last>



CHECKING LAST USES for BB01, liveout={V01 V09 V11 V12}
==============================
use: {V00}
def: {V01 V05 V09 V11 V12 V13 V15 V16}

NEW BLOCK BB02


Setting BB01 as the predecessor for determining incoming variable registers of BB02
<RefPosition #48  @55  RefTypeBB  BB02 regmask=[] minReg=1>



CHECKING LAST USES for BB02, liveout={V01 V09 V11 V12}
==============================
use: {}
def: {}

NEW BLOCK BB04


Setting BB02 as the predecessor for determining incoming variable registers of BB04
<RefPosition #49  @57  RefTypeBB  BB04 regmask=[] minReg=1>

DefList: {  }
N059 (???,???) [000245] ------------              *  IL_OFFSET void   IL offset: 0x1e REG NA

DefList: {  }
N061 (  1,  1) [000081] ------------              *  LCL_VAR   ref    V09 tmp5         u:2 NA REG NA $80

DefList: {  }
N063 (  1,  3) [000083] DA----------              *  STORE_LCL_VAR ref    V08 tmp4         d:2 NA REG NA
<RefPosition #50  @63  RefTypeUse <Ivl:5 V09> LCL_VAR BB04 regmask=[allInt] minReg=1 last>
<RefPosition #51  @64  RefTypeDef <Ivl:4 V08> STORE_LCL_VAR BB04 regmask=[allInt] minReg=1 last>

DefList: {  }
N065 (???,???) [000246] ------------              *  IL_OFFSET void   IL offset: 0x1e REG NA

DefList: {  }
N067 (  1,  1) [000086] ------------              *  LCL_VAR   int    V12 tmp8         u:2 NA REG NA <l:$281, c:$1c1>

DefList: {  }
N069 (  1,  1) [000087] ------------              *  LCL_VAR   ref    V08 tmp4         u:2 NA (last use) REG NA $80

DefList: {  }
N071 (  2,  2) [000190] -c----------              *  LEA(b+20) byref  REG NA
Contained
DefList: {  }
N073 (  4,  4) [000088] nc--GO------              *  IND       int    REG NA <l:$288, c:$287>
Contained
DefList: {  }
N075 (  6,  6) [000089] N---GO-N-U--              *  NE        void   REG NA <l:$28c, c:$28b>
<RefPosition #52  @75  RefTypeUse <Ivl:8 V12> LCL_VAR BB04 regmask=[allInt] minReg=1 last>
<RefPosition #53  @75  RefTypeUse <Ivl:4 V08> LCL_VAR BB04 regmask=[allInt] minReg=1 last>

DefList: {  }
N077 (  8,  8) [000090] ----GO------              *  JTRUE     void   REG NA



CHECKING LAST USES for BB04, liveout={V01 V09 V11 V12}
==============================
use: {V09 V12}
def: {V08}

NEW BLOCK BB05


Setting BB04 as the predecessor for determining incoming variable registers of BB05
<RefPosition #54  @79  RefTypeBB  BB05 regmask=[] minReg=1>

DefList: {  }
N081 (???,???) [000247] ------------              *  IL_OFFSET void   IL offset: 0x1e REG NA

DefList: {  }
N083 (  1,  1) [000102] ------------              *  LCL_VAR   int    V11 tmp7         u:3 NA REG NA $300

DefList: {  }
N085 (  1,  1) [000103] ------------              *  LCL_VAR   ref    V09 tmp5         u:2 NA REG NA $80

DefList: {  }
N087 (  2,  2) [000192] -c----------              *  LEA(b+16) byref  REG NA
Contained
DefList: {  }
N089 (  4,  4) [000104] nc--GO------              *  IND       int    REG NA <l:$290, c:$28f>
Contained
DefList: {  }
N091 (  6,  6) [000105] N---GO-N-U--              *  GE        void   REG NA <l:$294, c:$293>
<RefPosition #55  @91  RefTypeUse <Ivl:7 V11> LCL_VAR BB05 regmask=[allInt] minReg=1 last>
<RefPosition #56  @91  RefTypeUse <Ivl:5 V09> LCL_VAR BB05 regmask=[allInt] minReg=1 last>

DefList: {  }
N093 (  8,  8) [000106] ----GO------              *  JTRUE     void   REG NA



CHECKING LAST USES for BB05, liveout={V01 V09 V11 V12}
==============================
use: {V09 V11}
def: {}

NEW BLOCK BB06


Setting BB05 as the predecessor for determining incoming variable registers of BB06
<RefPosition #57  @95  RefTypeBB  BB06 regmask=[] minReg=1>

DefList: {  }
N097 (???,???) [000248] ------------              *  IL_OFFSET void   IL offset: 0x1e REG NA

DefList: {  }
N099 (  1,  1) [000109] ------------              *  LCL_VAR   ref    V09 tmp5         u:2 NA REG NA $80

DefList: {  }
N101 (  2,  2) [000209] -c----------              *  LEA(b+8)  byref  REG NA
Contained
DefList: {  }
N103 (  4,  4) [000110] n---GO------              *  IND       ref    REG NA <l:$185, c:$184>
<RefPosition #58  @103 RefTypeUse <Ivl:5 V09> LCL_VAR BB06 regmask=[allInt] minReg=1 last>
Interval 18: ref RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #59  @104 RefTypeDef <Ivl:18> IND BB06 regmask=[allInt] minReg=1>

DefList: { N103.t110. IND }
N105 (  4,  4) [000194] DA--GO------              *  STORE_LCL_VAR ref    V17 tmp13        d:2 NA REG NA
<RefPosition #60  @105 RefTypeUse <Ivl:18>  BB06 regmask=[allInt] minReg=1 last>
Assigning related <V17/L11> to <I18>
<RefPosition #61  @106 RefTypeDef <Ivl:11 V17> STORE_LCL_VAR BB06 regmask=[allInt] minReg=1 last>

DefList: {  }
N107 (  1,  1) [000113] ------------              *  LCL_VAR   int    V11 tmp7         u:3 NA REG NA $300

DefList: {  }
N109 (  1,  1) [000195] ------------              *  LCL_VAR   ref    V17 tmp13        u:2 NA REG NA <l:$183, c:$343>

DefList: {  }
N111 (???,???) [000257] -c----------              *  LEA(b+8)  ref    REG NA
Contained
DefList: {  }
N113 (  3,  3) [000198] -c-X--------              *  IND       int    REG NA <l:$29e, c:$29d>
Contained
DefList: {  }
N115 (  8, 11) [000199] ---X--------              *  ARR_BOUNDS_CHECK_Rng void   REG NA <l:$191, c:$190>
<RefPosition #62  @115 RefTypeUse <Ivl:7 V11> LCL_VAR BB06 regmask=[allInt] minReg=1 last>
<RefPosition #63  @115 RefTypeUse <Ivl:11 V17> LCL_VAR BB06 regmask=[allInt] minReg=1 last>

DefList: {  }
N117 (  1,  1) [000196] ------------              *  LCL_VAR   ref    V17 tmp13        u:2 NA (last use) REG NA <l:$183, c:$343>

DefList: {  }
N119 (  1,  1) [000197] ------------              *  LCL_VAR   int    V11 tmp7         u:3 NA REG NA $300

DefList: {  }
N121 (  2,  3) [000200] ------------              *  CAST      long <- int REG NA $400
<RefPosition #64  @121 RefTypeUse <Ivl:7 V11> LCL_VAR BB06 regmask=[allInt] minReg=1 last>
Interval 19: long RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #65  @122 RefTypeDef <Ivl:19> CAST BB06 regmask=[allInt] minReg=1>

DefList: { N121.t200. CAST }
N123 (  5,  6) [000205] -c----------              *  LEA(b+(i*8)+16) byref  REG NA
Contained
DefList: { N121.t200. CAST }
N125 (  6,  7) [000114] a---G-------              *  IND       ref    REG NA <l:$194, c:$345>
<RefPosition #66  @125 RefTypeUse <Ivl:11 V17> LCL_VAR BB06 regmask=[allInt] minReg=1 last>
<RefPosition #67  @125 RefTypeUse <Ivl:19>  BB06 regmask=[allInt] minReg=1 last>
Interval 20: ref RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #68  @126 RefTypeDef <Ivl:20> IND BB06 regmask=[allInt] minReg=1>

DefList: { N125.t114. IND }
N127 ( 18, 22) [000116] DA-XGO------              *  STORE_LCL_VAR ref    V10 tmp6         d:4 NA REG NA
<RefPosition #69  @127 RefTypeUse <Ivl:20>  BB06 regmask=[allInt] minReg=1 last>
Assigning related <V10/L6> to <I20>
<RefPosition #70  @128 RefTypeDef <Ivl:6 V10> STORE_LCL_VAR BB06 regmask=[allInt] minReg=1 last>

DefList: {  }
N129 (???,???) [000249] ------------              *  IL_OFFSET void   IL offset: 0x1e REG NA

DefList: {  }
N131 (  1,  1) [000121] ------------              *  LCL_VAR   int    V11 tmp7         u:3 NA (last use) REG NA $300

DefList: {  }
N133 (  1,  1) [000122] -c----------              *  CNS_INT   int    1 REG NA $44
Contained
DefList: {  }
N135 (  3,  3) [000123] ------------              *  ADD       int    REG NA $29f
<RefPosition #71  @135 RefTypeUse <Ivl:7 V11> LCL_VAR BB06 regmask=[allInt] minReg=1 last>
Interval 21: int RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #72  @136 RefTypeDef <Ivl:21> ADD BB06 regmask=[allInt] minReg=1>
Assigning related <I21> to <V11/L7>

DefList: { N135.t123. ADD }
N137 (  3,  3) [000125] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:6 NA REG NA
<RefPosition #73  @137 RefTypeUse <Ivl:21>  BB06 regmask=[allInt] minReg=1 last>
Assigning related <V11/L7> to <I21>
<RefPosition #74  @138 RefTypeDef <Ivl:7 V11> STORE_LCL_VAR BB06 regmask=[allInt] minReg=1 last>

DefList: {  }
N139 (???,???) [000250] ------------              *  IL_OFFSET void   IL offset: 0x1e REG NA

DefList: {  }
N141 (  1,  1) [000126] -c----------              *  CNS_INT   int    1 REG NA $44
Contained
DefList: {  }
N143 (  1,  3) [000129] DA----------              *  STORE_LCL_VAR int    V07 tmp3         d:4 NA REG NA
<RefPosition #75  @144 RefTypeDef <Ivl:3 V07> STORE_LCL_VAR BB06 regmask=[allInt] minReg=1 last>



CHECKING LAST USES for BB06, liveout={V01 V07 V09 V10 V11 V12}
==============================
use: {V09 V11}
def: {V07 V10 V11 V17}

NEW BLOCK BB07


Setting BB04 as the predecessor for determining incoming variable registers of BB07
<RefPosition #76  @145 RefTypeBB  BB07 regmask=[] minReg=1>

DefList: {  }
N147 (???,???) [000251] ------------              *  IL_OFFSET void   IL offset: 0x1e REG NA

DefList: {  }
N149 (  1,  1) [000137] ------------              *  LCL_VAR   int    V12 tmp8         u:2 NA REG NA <l:$281, c:$1c1>

DefList: {  }
N151 (  1,  1) [000140] ------------              *  LCL_VAR   ref    V09 tmp5         u:2 NA REG NA $80

DefList: {  }
N153 (  2,  2) [000211] -c----------              *  LEA(b+20) byref  REG NA
Contained
DefList: {  }
N155 (  4,  4) [000141] nc--GO------              *  IND       int    REG NA <l:$288, c:$295>
Contained
DefList: {  }
N157 (  6,  6) [000142] J---GO-N----              *  NE        void   REG NA <l:$28c, c:$297>
<RefPosition #77  @157 RefTypeUse <Ivl:8 V12> LCL_VAR BB07 regmask=[allInt] minReg=1 last>
<RefPosition #78  @157 RefTypeUse <Ivl:5 V09> LCL_VAR BB07 regmask=[allInt] minReg=1 last>

DefList: {  }
N159 (  8,  8) [000143] ----GO------              *  JTRUE     void   REG NA



CHECKING LAST USES for BB07, liveout={V01 V09 V12}
==============================
use: {V09 V12}
def: {}

NEW BLOCK BB08


Setting BB07 as the predecessor for determining incoming variable registers of BB08
<RefPosition #79  @161 RefTypeBB  BB08 regmask=[] minReg=1>

DefList: {  }
N163 (???,???) [000252] ------------              *  IL_OFFSET void   IL offset: 0x1e REG NA

DefList: {  }
N165 (  1,  1) [000148] ------------              *  LCL_VAR   ref    V09 tmp5         u:2 NA REG NA $80

DefList: {  }
N167 (  2,  2) [000213] -c----------              *  LEA(b+16) byref  REG NA
Contained
DefList: {  }
N169 (  4,  4) [000149] n---GO------              *  IND       int    REG NA <l:$290, c:$298>
<RefPosition #80  @169 RefTypeUse <Ivl:5 V09> LCL_VAR BB08 regmask=[allInt] minReg=1 last>
Interval 22: int RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #81  @170 RefTypeDef <Ivl:22> IND BB08 regmask=[allInt] minReg=1>

DefList: { N169.t149. IND }
N171 (  1,  1) [000150] -c----------              *  CNS_INT   int    1 REG NA $44
Contained
DefList: { N169.t149. IND }
N173 (  6,  6) [000151] ----GO------              *  ADD       int    REG NA <l:$29c, c:$29b>
<RefPosition #82  @173 RefTypeUse <Ivl:22>  BB08 regmask=[allInt] minReg=1 last>
Interval 23: int RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #83  @174 RefTypeDef <Ivl:23> ADD BB08 regmask=[allInt] minReg=1>
Assigning related <I23> to <I22>

DefList: { N173.t151. ADD }
N175 (  6,  6) [000153] DA--GO------              *  STORE_LCL_VAR int    V11 tmp7         d:5 NA REG NA
<RefPosition #84  @175 RefTypeUse <Ivl:23>  BB08 regmask=[allInt] minReg=1 last>
Assigning related <V11/L7> to <I23>
<RefPosition #85  @176 RefTypeDef <Ivl:7 V11> STORE_LCL_VAR BB08 regmask=[allInt] minReg=1 last>

DefList: {  }
N177 (???,???) [000253] ------------              *  IL_OFFSET void   IL offset: 0x1e REG NA

DefList: {  }
N179 (  1,  1) [000158] ------------              *  CNS_INT   ref    null REG NA $VN.Null
Interval 24: ref RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #86  @180 RefTypeDef <Ivl:24> CNS_INT BB08 regmask=[allInt] minReg=1>

DefList: { N179.t158. CNS_INT }
N181 (  1,  3) [000160] DA----------              *  STORE_LCL_VAR ref    V10 tmp6         d:3 NA REG NA
<RefPosition #87  @181 RefTypeUse <Ivl:24>  BB08 regmask=[allInt] minReg=1 last>
Assigning related <V10/L6> to <I24>
<RefPosition #88  @182 RefTypeDef <Ivl:6 V10> STORE_LCL_VAR BB08 regmask=[allInt] minReg=1 last>

DefList: {  }
N183 (???,???) [000254] ------------              *  IL_OFFSET void   IL offset: 0x1e REG NA

DefList: {  }
N185 (  1,  1) [000096] ------------              *  CNS_INT   int    0 REG NA $40
Interval 25: int RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #89  @186 RefTypeDef <Ivl:25> CNS_INT BB08 regmask=[allInt] minReg=1>

DefList: { N185.t96. CNS_INT }
N187 (  1,  3) [000098] DA----------              *  STORE_LCL_VAR int    V07 tmp3         d:3 NA REG NA
<RefPosition #90  @187 RefTypeUse <Ivl:25>  BB08 regmask=[allInt] minReg=1 last>
Assigning related <V07/L3> to <I25>
<RefPosition #91  @188 RefTypeDef <Ivl:3 V07> STORE_LCL_VAR BB08 regmask=[allInt] minReg=1 last>



CHECKING LAST USES for BB08, liveout={V01 V07 V09 V10 V11 V12}
==============================
use: {V09}
def: {V07 V10 V11}

NEW BLOCK BB09


Setting BB06 as the predecessor for determining incoming variable registers of BB09
<RefPosition #92  @189 RefTypeBB  BB09 regmask=[] minReg=1>

DefList: {  }
N191 (  1,  1) [000130] ------------              *  LCL_VAR   bool   V07 tmp3         u:2 NA (last use) REG NA $4c0

DefList: {  }
N193 (  1,  1) [000019] -c----------              *  CNS_INT   int    0 REG NA $40
Contained
DefList: {  }
N195 (  3,  3) [000020] J------N----              *  NE        void   REG NA $2a1
<RefPosition #93  @195 RefTypeUse <Ivl:3 V07> LCL_VAR BB09 regmask=[allInt] minReg=1 last>

DefList: {  }
N197 (  5,  5) [000021] ------------              *  JTRUE     void   REG NA



CHECKING LAST USES for BB09, liveout={V01 V09 V10 V11 V12}
==============================
use: {V07}
def: {}

NEW BLOCK BB03


Setting BB09 as the predecessor for determining incoming variable registers of BB03
<RefPosition #94  @199 RefTypeBB  BB03 regmask=[] minReg=1>

DefList: {  }
N201 (???,???) [000244] ------------              *  IL_OFFSET void   IL offset: 0x17 REG NA

DefList: {  }
N203 (  1,  1) [000029] ------------              *  LCL_VAR   ref    V01 loc0         u:2 NA REG NA $180

DefList: {  }
N205 (???,???) [000261] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #95  @205 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1>
<RefPosition #96  @205 RefTypeUse <Ivl:1 V01> LCL_VAR BB03 regmask=[rcx] minReg=1 last fixed>
Setting putarg_reg as a pass-through of a non-last use lclVar
Interval 26: ref RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #97  @206 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1>
<RefPosition #98  @206 RefTypeDef <Ivl:26> PUTARG_REG BB03 regmask=[rcx] minReg=1 fixed>
Assigning related <V01/L1> to <I26>

DefList: { N205.t261. PUTARG_REG }
N207 (  1,  1) [000030] ------------              *  LCL_VAR   ref    V10 tmp6         u:2 NA (last use) REG NA $480

DefList: { N205.t261. PUTARG_REG }
N209 (???,???) [000262] ------------              *  PUTARG_REG ref    REG rdx
<RefPosition #99  @209 RefTypeFixedReg <Reg:rdx>  BB03 regmask=[rdx] minReg=1>
<RefPosition #100 @209 RefTypeUse <Ivl:6 V10> LCL_VAR BB03 regmask=[rdx] minReg=1 last fixed>
Interval 27: ref RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #101 @210 RefTypeFixedReg <Reg:rdx>  BB03 regmask=[rdx] minReg=1>
<RefPosition #102 @210 RefTypeDef <Ivl:27> PUTARG_REG BB03 regmask=[rdx] minReg=1 fixed>

DefList: { N205.t261. PUTARG_REG; N209.t262. PUTARG_REG }
N211 ( 16, 10) [000031] --CXG-------              *  CALL      void   Batcher.Push REG NA $VN.Void
<RefPosition #103 @211 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1>
<RefPosition #104 @211 RefTypeUse <Ivl:26>  BB03 regmask=[rcx] minReg=1 last fixed>
<RefPosition #105 @211 RefTypeFixedReg <Reg:rdx>  BB03 regmask=[rdx] minReg=1>
<RefPosition #106 @211 RefTypeUse <Ivl:27>  BB03 regmask=[rdx] minReg=1 last fixed>
<RefPosition #107 @212 RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1>
<RefPosition #108 @212 RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1>
<RefPosition #109 @212 RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1>
<RefPosition #110 @212 RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1>
<RefPosition #111 @212 RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1>
<RefPosition #112 @212 RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1>
<RefPosition #113 @212 RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1>

Exposed uses:<RefPosition #114 @213 RefTypeExpUse <Ivl:5 V09>  BB03 regmask=[allInt] minReg=1>
 V09<RefPosition #115 @213 RefTypeExpUse <Ivl:7 V11>  BB03 regmask=[allInt] minReg=1>
 V11<RefPosition #116 @213 RefTypeExpUse <Ivl:8 V12>  BB03 regmask=[allInt] minReg=1>
 V12


CHECKING LAST USES for BB03, liveout={V01 V09 V11 V12}
==============================
use: {V01 V10}
def: {}

NEW BLOCK BB10


Setting BB09 as the predecessor for determining incoming variable registers of BB10
<RefPosition #117 @213 RefTypeBB  BB10 regmask=[] minReg=1>

DefList: {  }
N215 (  1,  1) [000032] ------------              *  LCL_VAR   ref    V01 loc0         u:2 NA (last use) REG NA $180

DefList: {  }
N217 (  2,  2) [000216] -c----------              *  LEA(b+8)  byref  REG NA
Contained
DefList: {  }
N219 (  4,  4) [000166] n---GO------              *  IND       ref    REG NA <l:$1a0, c:$19f>
<RefPosition #118 @219 RefTypeUse <Ivl:1 V01> LCL_VAR BB10 regmask=[allInt] minReg=1 last>
Interval 28: ref RefPositions {} physReg:NA Preferences=[allInt]
<RefPosition #119 @220 RefTypeDef <Ivl:28> IND BB10 regmask=[allInt] minReg=1>

DefList: { N219.t166. IND }
N221 (  5,  5) [000035] ----GO------              *  RETURN    ref    REG NA $149
<RefPosition #120 @221 RefTypeFixedReg <Reg:rax>  BB10 regmask=[rax] minReg=1>
<RefPosition #121 @221 RefTypeUse <Ivl:28>  BB10 regmask=[rax] minReg=1 last fixed>



CHECKING LAST USES for BB10, liveout={}
==============================
use: {V01}
def: {}

NEW BLOCK BB11


Setting BB07 as the predecessor for determining incoming variable registers of BB11
<RefPosition #122 @223 RefTypeBB  BB11 regmask=[] minReg=1>

firstColdLoc = 225
DefList: {  }
N225 (???,???) [000255] ------------              *  IL_OFFSET void   IL offset: 0x1e REG NA

DefList: {  }
N227 ( 14,  5) [000163] --CXG-------              *  CALL      void   System.ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion REG NA $VN.Void
<RefPosition #123 @228 RefTypeKill <Reg:rax>  BB11 regmask=[rax] minReg=1>
<RefPosition #124 @228 RefTypeKill <Reg:rcx>  BB11 regmask=[rcx] minReg=1>
<RefPosition #125 @228 RefTypeKill <Reg:rdx>  BB11 regmask=[rdx] minReg=1>
<RefPosition #126 @228 RefTypeKill <Reg:r8 >  BB11 regmask=[r8] minReg=1>
<RefPosition #127 @228 RefTypeKill <Reg:r9 >  BB11 regmask=[r9] minReg=1>
<RefPosition #128 @228 RefTypeKill <Reg:r10>  BB11 regmask=[r10] minReg=1>
<RefPosition #129 @228 RefTypeKill <Reg:r11>  BB11 regmask=[r11] minReg=1>



CHECKING LAST USES for BB11, liveout={}
==============================
use: {}
def: {}

NEW BLOCK BB12


No predecessor; 

Setting BB11 as the predecessor for determining incoming variable registers of BB12
<RefPosition #130 @229 RefTypeBB  BB12 regmask=[] minReg=1>

DefList: {  }
N231 ( 14,  5) [000258] --CXG-------              *  CALL help void   HELPER.CORINFO_HELP_RNGCHKFAIL REG NA
<RefPosition #131 @232 RefTypeKill <Reg:rax>  BB12 regmask=[rax] minReg=1>
<RefPosition #132 @232 RefTypeKill <Reg:rcx>  BB12 regmask=[rcx] minReg=1>
<RefPosition #133 @232 RefTypeKill <Reg:rdx>  BB12 regmask=[rdx] minReg=1>
<RefPosition #134 @232 RefTypeKill <Reg:r8 >  BB12 regmask=[r8] minReg=1>
<RefPosition #135 @232 RefTypeKill <Reg:r9 >  BB12 regmask=[r9] minReg=1>
<RefPosition #136 @232 RefTypeKill <Reg:r10>  BB12 regmask=[r10] minReg=1>
<RefPosition #137 @232 RefTypeKill <Reg:r11>  BB12 regmask=[r11] minReg=1>



CHECKING LAST USES for BB12, liveout={}
==============================
use: {}
def: {}

Linear scan intervals BEFORE VALIDATING INTERVALS:
Interval  0: (V00) ref RefPositions {#0@0 #35@29} physReg:rcx Preferences=[rbx rbp rsi rdi r12-r15] RelatedInterval <V13/L9>
Interval  1: (V01) ref RefPositions {#34@24 #96@205 #118@219} physReg:NA Preferences=[rbx rbp rsi rdi r12-r15]
Interval  2: (V05) ref RefPositions {#19@12 #21@15 #33@23} physReg:NA Preferences=[rbx rbp rsi rdi r12-r15] RelatedInterval <V01/L1>
Interval  3: (V07) int RefPositions {#75@144 #91@188 #93@195} physReg:NA Preferences=[allInt]
Interval  4: (V08) ref RefPositions {#51@64 #53@75} physReg:NA Preferences=[allInt]
Interval  5: (V09) ref (field) RefPositions {#42@46 #50@63 #56@91 #58@103 #78@157 #80@169 #114@213} physReg:NA Preferences=[rbx rbp rsi rdi r12-r15]
Interval  6: (V10) ref (field) RefPositions {#70@128 #88@182 #100@209} physReg:NA Preferences=[rdx]
Interval  7: (V11) int (field) RefPositions {#45@50 #55@91 #62@115 #64@121 #71@135 #74@138 #85@176 #115@213} physReg:NA Preferences=[rbx rbp rsi rdi r12-r15] RelatedInterval <I21>
Interval  8: (V12) int (field) RefPositions {#47@54 #52@75 #77@157 #116@213} physReg:NA Preferences=[rbx rbp rsi rdi r12-r15]
Interval  9: (V13) ref (field) RefPositions {#36@30 #37@39 #41@45} physReg:NA Preferences=[allInt] RelatedInterval <V09/L5>
Interval 10: (V16) int (field) RefPositions {#40@42 #46@53} physReg:NA Preferences=[allInt] RelatedInterval <V12/L8>
Interval 11: (V17) ref RefPositions {#61@106 #63@115 #66@125} physReg:NA Preferences=[allInt]
Interval 12: long (constant) RefPositions {#2@6 #4@7} physReg:NA Preferences=[rcx]
Interval 13: long RefPositions {#6@8 #8@9} physReg:NA Preferences=[rcx]
Interval 14: ref RefPositions {#17@10 #18@11} physReg:NA Preferences=[rax] RelatedInterval <V05/L2>
Interval 15: ref (specialPutArg) RefPositions {#23@16 #25@17} physReg:NA Preferences=[rcx] RelatedInterval <V05/L2>
Interval 16: int RefPositions {#38@40 #39@41} physReg:NA Preferences=[allInt] RelatedInterval <V16/L10>
Interval 17: int (constant) RefPositions {#43@48 #44@49} physReg:NA Preferences=[allInt] RelatedInterval <V11/L7>
Interval 18: ref RefPositions {#59@104 #60@105} physReg:NA Preferences=[allInt] RelatedInterval <V17/L11>
Interval 19: long RefPositions {#65@122 #67@125} physReg:NA Preferences=[allInt]
Interval 20: ref RefPositions {#68@126 #69@127} physReg:NA Preferences=[allInt] RelatedInterval <V10/L6>
Interval 21: int RefPositions {#72@136 #73@137} physReg:NA Preferences=[allInt] RelatedInterval <V11/L7>
Interval 22: int RefPositions {#81@170 #82@173} physReg:NA Preferences=[allInt] RelatedInterval <I23>
Interval 23: int RefPositions {#83@174 #84@175} physReg:NA Preferences=[allInt] RelatedInterval <V11/L7>
Interval 24: ref (constant) RefPositions {#86@180 #87@181} physReg:NA Preferences=[allInt] RelatedInterval <V10/L6>
Interval 25: int (constant) RefPositions {#89@186 #90@187} physReg:NA Preferences=[allInt] RelatedInterval <V07/L3>
Interval 26: ref (specialPutArg) RefPositions {#98@206 #104@211} physReg:NA Preferences=[rcx] RelatedInterval <V01/L1>
Interval 27: ref RefPositions {#102@210 #106@211} physReg:NA Preferences=[rdx]
Interval 28: ref RefPositions {#119@220 #121@221} physReg:NA Preferences=[rax]

------------
REFPOSITIONS BEFORE VALIDATING INTERVALS: 
------------
<RefPosition #0   @0   RefTypeParamDef <Ivl:0 V00>  BB00 regmask=[rcx] minReg=1 fixed regOptional>
<RefPosition #1   @1   RefTypeBB  BB01 regmask=[] minReg=1>
<RefPosition #2   @6   RefTypeDef <Ivl:12> CNS_INT BB01 regmask=[rcx] minReg=1>
<RefPosition #3   @7   RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #4   @7   RefTypeUse <Ivl:12>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #5   @8   RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #6   @8   RefTypeDef <Ivl:13> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #7   @9   RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #8   @9   RefTypeUse <Ivl:13>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #9   @10  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #10  @10  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #11  @10  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #12  @10  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #13  @10  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #14  @10  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #15  @10  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #16  @10  RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #17  @10  RefTypeDef <Ivl:14> CALL BB01 regmask=[rax] minReg=1 fixed>
<RefPosition #18  @11  RefTypeUse <Ivl:14>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #19  @12  RefTypeDef <Ivl:2 V05> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #20  @15  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #21  @15  RefTypeUse <Ivl:2 V05> LCL_VAR BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #22  @16  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #23  @16  RefTypeDef <Ivl:15> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #24  @17  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #25  @17  RefTypeUse <Ivl:15>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #26  @18  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #27  @18  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #28  @18  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #29  @18  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #30  @18  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #31  @18  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #32  @18  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #33  @23  RefTypeUse <Ivl:2 V05> LCL_VAR BB01 regmask=[allInt] minReg=1 last>
<RefPosition #34  @24  RefTypeDef <Ivl:1 V01> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #35  @29  RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[allInt] minReg=1 last>
<RefPosition #36  @30  RefTypeDef <Ivl:9 V13> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #37  @39  RefTypeUse <Ivl:9 V13> LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #38  @40  RefTypeDef <Ivl:16> IND BB01 regmask=[allInt] minReg=1>
<RefPosition #39  @41  RefTypeUse <Ivl:16>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #40  @42  RefTypeDef <Ivl:10 V16> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #41  @45  RefTypeUse <Ivl:9 V13> LCL_VAR BB01 regmask=[allInt] minReg=1 last>
<RefPosition #42  @46  RefTypeDef <Ivl:5 V09> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #43  @48  RefTypeDef <Ivl:17> CNS_INT BB01 regmask=[allInt] minReg=1>
<RefPosition #44  @49  RefTypeUse <Ivl:17>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #45  @50  RefTypeDef <Ivl:7 V11> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #46  @53  RefTypeUse <Ivl:10 V16> LCL_VAR BB01 regmask=[allInt] minReg=1 last>
<RefPosition #47  @54  RefTypeDef <Ivl:8 V12> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #48  @55  RefTypeBB  BB02 regmask=[] minReg=1>
<RefPosition #49  @57  RefTypeBB  BB04 regmask=[] minReg=1>
<RefPosition #50  @63  RefTypeUse <Ivl:5 V09> LCL_VAR BB04 regmask=[allInt] minReg=1>
<RefPosition #51  @64  RefTypeDef <Ivl:4 V08> STORE_LCL_VAR BB04 regmask=[allInt] minReg=1>
<RefPosition #52  @75  RefTypeUse <Ivl:8 V12> LCL_VAR BB04 regmask=[allInt] minReg=1>
<RefPosition #53  @75  RefTypeUse <Ivl:4 V08> LCL_VAR BB04 regmask=[allInt] minReg=1 last>
<RefPosition #54  @79  RefTypeBB  BB05 regmask=[] minReg=1>
<RefPosition #55  @91  RefTypeUse <Ivl:7 V11> LCL_VAR BB05 regmask=[allInt] minReg=1>
<RefPosition #56  @91  RefTypeUse <Ivl:5 V09> LCL_VAR BB05 regmask=[allInt] minReg=1>
<RefPosition #57  @95  RefTypeBB  BB06 regmask=[] minReg=1>
<RefPosition #58  @103 RefTypeUse <Ivl:5 V09> LCL_VAR BB06 regmask=[allInt] minReg=1>
<RefPosition #59  @104 RefTypeDef <Ivl:18> IND BB06 regmask=[allInt] minReg=1>
<RefPosition #60  @105 RefTypeUse <Ivl:18>  BB06 regmask=[allInt] minReg=1 last>
<RefPosition #61  @106 RefTypeDef <Ivl:11 V17> STORE_LCL_VAR BB06 regmask=[allInt] minReg=1>
<RefPosition #62  @115 RefTypeUse <Ivl:7 V11> LCL_VAR BB06 regmask=[allInt] minReg=1>
<RefPosition #63  @115 RefTypeUse <Ivl:11 V17> LCL_VAR BB06 regmask=[allInt] minReg=1>
<RefPosition #64  @121 RefTypeUse <Ivl:7 V11> LCL_VAR BB06 regmask=[allInt] minReg=1>
<RefPosition #65  @122 RefTypeDef <Ivl:19> CAST BB06 regmask=[allInt] minReg=1>
<RefPosition #66  @125 RefTypeUse <Ivl:11 V17> LCL_VAR BB06 regmask=[allInt] minReg=1 last>
<RefPosition #67  @125 RefTypeUse <Ivl:19>  BB06 regmask=[allInt] minReg=1 last>
<RefPosition #68  @126 RefTypeDef <Ivl:20> IND BB06 regmask=[allInt] minReg=1>
<RefPosition #69  @127 RefTypeUse <Ivl:20>  BB06 regmask=[allInt] minReg=1 last>
<RefPosition #70  @128 RefTypeDef <Ivl:6 V10> STORE_LCL_VAR BB06 regmask=[allInt] minReg=1>
<RefPosition #71  @135 RefTypeUse <Ivl:7 V11> LCL_VAR BB06 regmask=[allInt] minReg=1 last>
<RefPosition #72  @136 RefTypeDef <Ivl:21> ADD BB06 regmask=[allInt] minReg=1>
<RefPosition #73  @137 RefTypeUse <Ivl:21>  BB06 regmask=[allInt] minReg=1 last>
<RefPosition #74  @138 RefTypeDef <Ivl:7 V11> STORE_LCL_VAR BB06 regmask=[allInt] minReg=1>
<RefPosition #75  @144 RefTypeDef <Ivl:3 V07> STORE_LCL_VAR BB06 regmask=[allInt] minReg=1>
<RefPosition #76  @145 RefTypeBB  BB07 regmask=[] minReg=1>
<RefPosition #77  @157 RefTypeUse <Ivl:8 V12> LCL_VAR BB07 regmask=[allInt] minReg=1>
<RefPosition #78  @157 RefTypeUse <Ivl:5 V09> LCL_VAR BB07 regmask=[allInt] minReg=1>
<RefPosition #79  @161 RefTypeBB  BB08 regmask=[] minReg=1>
<RefPosition #80  @169 RefTypeUse <Ivl:5 V09> LCL_VAR BB08 regmask=[allInt] minReg=1>
<RefPosition #81  @170 RefTypeDef <Ivl:22> IND BB08 regmask=[allInt] minReg=1>
<RefPosition #82  @173 RefTypeUse <Ivl:22>  BB08 regmask=[allInt] minReg=1 last>
<RefPosition #83  @174 RefTypeDef <Ivl:23> ADD BB08 regmask=[allInt] minReg=1>
<RefPosition #84  @175 RefTypeUse <Ivl:23>  BB08 regmask=[allInt] minReg=1 last>
<RefPosition #85  @176 RefTypeDef <Ivl:7 V11> STORE_LCL_VAR BB08 regmask=[allInt] minReg=1>
<RefPosition #86  @180 RefTypeDef <Ivl:24> CNS_INT BB08 regmask=[allInt] minReg=1>
<RefPosition #87  @181 RefTypeUse <Ivl:24>  BB08 regmask=[allInt] minReg=1 last>
<RefPosition #88  @182 RefTypeDef <Ivl:6 V10> STORE_LCL_VAR BB08 regmask=[allInt] minReg=1>
<RefPosition #89  @186 RefTypeDef <Ivl:25> CNS_INT BB08 regmask=[allInt] minReg=1>
<RefPosition #90  @187 RefTypeUse <Ivl:25>  BB08 regmask=[allInt] minReg=1 last>
<RefPosition #91  @188 RefTypeDef <Ivl:3 V07> STORE_LCL_VAR BB08 regmask=[allInt] minReg=1>
<RefPosition #92  @189 RefTypeBB  BB09 regmask=[] minReg=1>
<RefPosition #93  @195 RefTypeUse <Ivl:3 V07> LCL_VAR BB09 regmask=[allInt] minReg=1 last>
<RefPosition #94  @199 RefTypeBB  BB03 regmask=[] minReg=1>
<RefPosition #95  @205 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1>
<RefPosition #96  @205 RefTypeUse <Ivl:1 V01> LCL_VAR BB03 regmask=[rcx] minReg=1 fixed>
<RefPosition #97  @206 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1>
<RefPosition #98  @206 RefTypeDef <Ivl:26> PUTARG_REG BB03 regmask=[rcx] minReg=1 fixed>
<RefPosition #99  @209 RefTypeFixedReg <Reg:rdx>  BB03 regmask=[rdx] minReg=1>
<RefPosition #100 @209 RefTypeUse <Ivl:6 V10> LCL_VAR BB03 regmask=[rdx] minReg=1 last fixed>
<RefPosition #101 @210 RefTypeFixedReg <Reg:rdx>  BB03 regmask=[rdx] minReg=1>
<RefPosition #102 @210 RefTypeDef <Ivl:27> PUTARG_REG BB03 regmask=[rdx] minReg=1 fixed>
<RefPosition #103 @211 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1>
<RefPosition #104 @211 RefTypeUse <Ivl:26>  BB03 regmask=[rcx] minReg=1 last fixed>
<RefPosition #105 @211 RefTypeFixedReg <Reg:rdx>  BB03 regmask=[rdx] minReg=1>
<RefPosition #106 @211 RefTypeUse <Ivl:27>  BB03 regmask=[rdx] minReg=1 last fixed>
<RefPosition #107 @212 RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 last>
<RefPosition #108 @212 RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 last>
<RefPosition #109 @212 RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 last>
<RefPosition #110 @212 RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 last>
<RefPosition #111 @212 RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 last>
<RefPosition #112 @212 RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 last>
<RefPosition #113 @212 RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 last>
<RefPosition #114 @213 RefTypeExpUse <Ivl:5 V09>  BB03 regmask=[allInt] minReg=1 regOptional>
<RefPosition #115 @213 RefTypeExpUse <Ivl:7 V11>  BB03 regmask=[allInt] minReg=1 regOptional>
<RefPosition #116 @213 RefTypeExpUse <Ivl:8 V12>  BB03 regmask=[allInt] minReg=1 regOptional>
<RefPosition #117 @213 RefTypeBB  BB10 regmask=[] minReg=1>
<RefPosition #118 @219 RefTypeUse <Ivl:1 V01> LCL_VAR BB10 regmask=[allInt] minReg=1 last>
<RefPosition #119 @220 RefTypeDef <Ivl:28> IND BB10 regmask=[rax] minReg=1>
<RefPosition #120 @221 RefTypeFixedReg <Reg:rax>  BB10 regmask=[rax] minReg=1>
<RefPosition #121 @221 RefTypeUse <Ivl:28>  BB10 regmask=[rax] minReg=1 last fixed>
<RefPosition #122 @223 RefTypeBB  BB11 regmask=[] minReg=1>
<RefPosition #123 @228 RefTypeKill <Reg:rax>  BB11 regmask=[rax] minReg=1 last>
<RefPosition #124 @228 RefTypeKill <Reg:rcx>  BB11 regmask=[rcx] minReg=1 last>
<RefPosition #125 @228 RefTypeKill <Reg:rdx>  BB11 regmask=[rdx] minReg=1 last>
<RefPosition #126 @228 RefTypeKill <Reg:r8 >  BB11 regmask=[r8] minReg=1 last>
<RefPosition #127 @228 RefTypeKill <Reg:r9 >  BB11 regmask=[r9] minReg=1 last>
<RefPosition #128 @228 RefTypeKill <Reg:r10>  BB11 regmask=[r10] minReg=1 last>
<RefPosition #129 @228 RefTypeKill <Reg:r11>  BB11 regmask=[r11] minReg=1 last>
<RefPosition #130 @229 RefTypeBB  BB12 regmask=[] minReg=1>
<RefPosition #131 @232 RefTypeKill <Reg:rax>  BB12 regmask=[rax] minReg=1 last>
<RefPosition #132 @232 RefTypeKill <Reg:rcx>  BB12 regmask=[rcx] minReg=1 last>
<RefPosition #133 @232 RefTypeKill <Reg:rdx>  BB12 regmask=[rdx] minReg=1 last>
<RefPosition #134 @232 RefTypeKill <Reg:r8 >  BB12 regmask=[r8] minReg=1 last>
<RefPosition #135 @232 RefTypeKill <Reg:r9 >  BB12 regmask=[r9] minReg=1 last>
<RefPosition #136 @232 RefTypeKill <Reg:r10>  BB12 regmask=[r10] minReg=1 last>
<RefPosition #137 @232 RefTypeKill <Reg:r11>  BB12 regmask=[r11] minReg=1 last>
-----------------
<RefPosition #42  @46  RefTypeDef <Ivl:5 V09> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #50  @63  RefTypeUse <Ivl:5 V09> LCL_VAR BB04 regmask=[allInt] minReg=1>
<RefPosition #56  @91  RefTypeUse <Ivl:5 V09> LCL_VAR BB05 regmask=[allInt] minReg=1>
<RefPosition #58  @103 RefTypeUse <Ivl:5 V09> LCL_VAR BB06 regmask=[allInt] minReg=1>
<RefPosition #78  @157 RefTypeUse <Ivl:5 V09> LCL_VAR BB07 regmask=[allInt] minReg=1>
<RefPosition #80  @169 RefTypeUse <Ivl:5 V09> LCL_VAR BB08 regmask=[allInt] minReg=1>
<RefPosition #114 @213 RefTypeExpUse <Ivl:5 V09>  BB03 regmask=[allInt] minReg=1 regOptional>
-----------------
<RefPosition #51  @64  RefTypeDef <Ivl:4 V08> STORE_LCL_VAR BB04 regmask=[allInt] minReg=1>
<RefPosition #53  @75  RefTypeUse <Ivl:4 V08> LCL_VAR BB04 regmask=[allInt] minReg=1 last>
-----------------
<RefPosition #45  @50  RefTypeDef <Ivl:7 V11> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #55  @91  RefTypeUse <Ivl:7 V11> LCL_VAR BB05 regmask=[allInt] minReg=1>
<RefPosition #62  @115 RefTypeUse <Ivl:7 V11> LCL_VAR BB06 regmask=[allInt] minReg=1>
<RefPosition #64  @121 RefTypeUse <Ivl:7 V11> LCL_VAR BB06 regmask=[allInt] minReg=1>
<RefPosition #71  @135 RefTypeUse <Ivl:7 V11> LCL_VAR BB06 regmask=[allInt] minReg=1 last>
<RefPosition #74  @138 RefTypeDef <Ivl:7 V11> STORE_LCL_VAR BB06 regmask=[allInt] minReg=1>
<RefPosition #85  @176 RefTypeDef <Ivl:7 V11> STORE_LCL_VAR BB08 regmask=[allInt] minReg=1>
<RefPosition #115 @213 RefTypeExpUse <Ivl:7 V11>  BB03 regmask=[allInt] minReg=1 regOptional>
-----------------
<RefPosition #61  @106 RefTypeDef <Ivl:11 V17> STORE_LCL_VAR BB06 regmask=[allInt] minReg=1>
<RefPosition #63  @115 RefTypeUse <Ivl:11 V17> LCL_VAR BB06 regmask=[allInt] minReg=1>
<RefPosition #66  @125 RefTypeUse <Ivl:11 V17> LCL_VAR BB06 regmask=[allInt] minReg=1 last>
-----------------
<RefPosition #75  @144 RefTypeDef <Ivl:3 V07> STORE_LCL_VAR BB06 regmask=[allInt] minReg=1>
<RefPosition #91  @188 RefTypeDef <Ivl:3 V07> STORE_LCL_VAR BB08 regmask=[allInt] minReg=1>
<RefPosition #93  @195 RefTypeUse <Ivl:3 V07> LCL_VAR BB09 regmask=[allInt] minReg=1 last>
-----------------
<RefPosition #47  @54  RefTypeDef <Ivl:8 V12> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #52  @75  RefTypeUse <Ivl:8 V12> LCL_VAR BB04 regmask=[allInt] minReg=1>
<RefPosition #77  @157 RefTypeUse <Ivl:8 V12> LCL_VAR BB07 regmask=[allInt] minReg=1>
<RefPosition #116 @213 RefTypeExpUse <Ivl:8 V12>  BB03 regmask=[allInt] minReg=1 regOptional>
-----------------
<RefPosition #19  @12  RefTypeDef <Ivl:2 V05> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #21  @15  RefTypeUse <Ivl:2 V05> LCL_VAR BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #33  @23  RefTypeUse <Ivl:2 V05> LCL_VAR BB01 regmask=[allInt] minReg=1 last>
-----------------
<RefPosition #70  @128 RefTypeDef <Ivl:6 V10> STORE_LCL_VAR BB06 regmask=[allInt] minReg=1>
<RefPosition #88  @182 RefTypeDef <Ivl:6 V10> STORE_LCL_VAR BB08 regmask=[allInt] minReg=1>
<RefPosition #100 @209 RefTypeUse <Ivl:6 V10> LCL_VAR BB03 regmask=[rdx] minReg=1 last fixed>
-----------------
<RefPosition #0   @0   RefTypeParamDef <Ivl:0 V00>  BB00 regmask=[rcx] minReg=1 fixed regOptional>
<RefPosition #35  @29  RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[allInt] minReg=1 last>
-----------------
<RefPosition #34  @24  RefTypeDef <Ivl:1 V01> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #96  @205 RefTypeUse <Ivl:1 V01> LCL_VAR BB03 regmask=[rcx] minReg=1 fixed>
<RefPosition #118 @219 RefTypeUse <Ivl:1 V01> LCL_VAR BB10 regmask=[allInt] minReg=1 last>
-----------------
<RefPosition #36  @30  RefTypeDef <Ivl:9 V13> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #37  @39  RefTypeUse <Ivl:9 V13> LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #41  @45  RefTypeUse <Ivl:9 V13> LCL_VAR BB01 regmask=[allInt] minReg=1 last>
-----------------
<RefPosition #40  @42  RefTypeDef <Ivl:10 V16> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #46  @53  RefTypeUse <Ivl:10 V16> LCL_VAR BB01 regmask=[allInt] minReg=1 last>
TUPLE STYLE DUMP WITH REF POSITIONS
Incoming Parameters:  V00
BB01 [000..00D), preds={} succs={BB02}
=====
  N003.                    IL_OFFSET IL offset: 0x0
  N005.                    CNS_INT(h) 0xd1ffab1e method
        Def:<I12>(#2)
  N007.                    PUTARG_REG
                               Use:<I12>(#4) Fixed:rcx(#3) *
        Def:<I13>(#6) rcx
  N009.                    CALL help
                               Use:<I13>(#8) Fixed:rcx(#7) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I14>(#17) rax Pref:<V05/L2>
  N011.                    V05(L2)
                               Use:<I14>(#18) *
        Def:<V05/L2>(#19) Pref:<V01/L1>
  N013.                    V05(L2)
  N015.                    PUTARG_REG
                               Use:<V05/L2>(#21) Fixed:rcx(#20)
        Def:<I15>(#23) rcx Pref:<V05/L2>
  N017.                    CALL     
                               Use:<I15>(#25) Fixed:rcx(#24) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N019.                    IL_OFFSET IL offset: 0x5
  N021.                    V05(L2)
  N023.                    V01(L1)
                               Use:<V05/L2>(#33) *
        Def:<V01/L1>(#34)
  N025.                    IL_OFFSET IL offset: 0x6
  N027.                    V00(L0)
  N029.                    V13(L9)
                               Use:<V00/L0>(#35) *
        Def:<V13/L9>(#36) Pref:<V09/L5>
  N031.                    IL_OFFSET IL offset: 0x6
  N033.                    IL_OFFSET IL offset: 0x6
  N035.                    V13(L9)
  N037.                    LEA(b+20)
  N039.                    IND      
                               Use:<V13/L9>(#37)
        Def:<I16>(#38) Pref:<V16/L10>
  N041.                    V16(L10)
                               Use:<I16>(#39) *
        Def:<V16/L10>(#40) Pref:<V12/L8>
  N043.                    V13(L9)
  N045.                    V09(L5)
                               Use:<V13/L9>(#41) *
        Def:<V09/L5>(#42)
  N047.                    CNS_INT   0
        Def:<I17>(#43) Pref:<V11/L7>
  N049.                    V11(L7)
                               Use:<I17>(#44) *
        Def:<V11/L7>(#45) Pref:<I21>
  N051.                    V16(L10)
  N053.                    V12(L8)
                               Use:<V16/L10>(#46) *
        Def:<V12/L8>(#47)

BB02 [00D..00F) -> BB04 (always), preds={BB01} succs={BB04}
=====

BB04 [01E..027) -> BB07 (cond), preds={BB02,BB03} succs={BB05,BB07}
=====
  N059.                    IL_OFFSET IL offset: 0x1e
  N061.                    V09(L5)
  N063.                    V08(L4)
                               Use:<V09/L5>(#50)
        Def:<V08/L4>(#51)
  N065.                    IL_OFFSET IL offset: 0x1e
  N067.                    V12(L8)
  N069.                    V08(L4)
  N071.                    LEA(b+20)
  N073.                    IND      
  N075.                    NE       
                               Use:<V12/L8>(#52)
                               Use:<V08/L4>(#53) *
  N077.                    JTRUE    

BB05 [01E..01F) -> BB07 (cond), preds={BB04} succs={BB06,BB07}
=====
  N081.                    IL_OFFSET IL offset: 0x1e
  N083.                    V11(L7)
  N085.                    V09(L5)
  N087.                    LEA(b+16)
  N089.                    IND      
  N091.                    GE       
                               Use:<V11/L7>(#55)
                               Use:<V09/L5>(#56)
  N093.                    JTRUE    

BB06 [01E..01F) -> BB09 (always), preds={BB05} succs={BB09}
=====
  N097.                    IL_OFFSET IL offset: 0x1e
  N099.                    V09(L5)
  N101.                    LEA(b+8) 
  N103.                    IND      
                               Use:<V09/L5>(#58)
        Def:<I18>(#59) Pref:<V17/L11>
  N105.                    V17(L11)
                               Use:<I18>(#60) *
        Def:<V17/L11>(#61)
  N107.                    V11(L7)
  N109.                    V17(L11)
  N111.                    LEA(b+8) 
  N113.                    IND      
  N115.                    ARR_BOUNDS_CHECK_Rng
                               Use:<V11/L7>(#62)
                               Use:<V17/L11>(#63)
  N117.                    V17(L11)
  N119.                    V11(L7)
  N121.                    CAST     
                               Use:<V11/L7>(#64)
        Def:<I19>(#65)
  N123.                    LEA(b+(i*8)+16)
  N125.                    IND      
                               Use:<V17/L11>(#66) *
                               Use:<I19>(#67) *
        Def:<I20>(#68) Pref:<V10/L6>
  N127.                    V10(L6)
                               Use:<I20>(#69) *
        Def:<V10/L6>(#70)
  N129.                    IL_OFFSET IL offset: 0x1e
  N131.                    V11(L7)
  N133.                    CNS_INT   1
  N135.                    ADD      
                               Use:<V11/L7>(#71) *
        Def:<I21>(#72) Pref:<V11/L7>
  N137.                    V11(L7)
                               Use:<I21>(#73) *
        Def:<V11/L7>(#74) Pref:<I21>
  N139.                    IL_OFFSET IL offset: 0x1e
  N141.                    CNS_INT   1
  N143.                    V07(L3)
        Def:<V07/L3>(#75)

BB07 [01E..01F) -> BB11 (cond), preds={BB04,BB05} succs={BB08,BB11}
=====
  N147.                    IL_OFFSET IL offset: 0x1e
  N149.                    V12(L8)
  N151.                    V09(L5)
  N153.                    LEA(b+20)
  N155.                    IND      
  N157.                    NE       
                               Use:<V12/L8>(#77)
                               Use:<V09/L5>(#78)
  N159.                    JTRUE    

BB08 [01E..01F), preds={BB07} succs={BB09}
=====
  N163.                    IL_OFFSET IL offset: 0x1e
  N165.                    V09(L5)
  N167.                    LEA(b+16)
  N169.                    IND      
                               Use:<V09/L5>(#80)
        Def:<I22>(#81) Pref:<I23>
  N171.                    CNS_INT   1
  N173.                    ADD      
                               Use:<I22>(#82) *
        Def:<I23>(#83) Pref:<V11/L7>
  N175.                    V11(L7)
                               Use:<I23>(#84) *
        Def:<V11/L7>(#85) Pref:<I21>
  N177.                    IL_OFFSET IL offset: 0x1e
  N179.                    CNS_INT   null
        Def:<I24>(#86) Pref:<V10/L6>
  N181.                    V10(L6)
                               Use:<I24>(#87) *
        Def:<V10/L6>(#88)
  N183.                    IL_OFFSET IL offset: 0x1e
  N185.                    CNS_INT   0
        Def:<I25>(#89) Pref:<V07/L3>
  N187.                    V07(L3)
                               Use:<I25>(#90) *
        Def:<V07/L3>(#91)

BB09 [???..???) -> BB03 (cond), preds={BB06,BB08} succs={BB10,BB03}
=====
  N191.                    V07(L3)
  N193.                    CNS_INT   0
  N195.                    NE       
                               Use:<V07/L3>(#93) *
  N197.                    JTRUE    

BB03 [00F..01E), preds={BB09} succs={BB04}
=====
  N201.                    IL_OFFSET IL offset: 0x17
  N203.                    V01(L1)
  N205.                    PUTARG_REG
                               Use:<V01/L1>(#96) Fixed:rcx(#95)
        Def:<I26>(#98) rcx Pref:<V01/L1>
  N207.                    V10(L6)
  N209.                    PUTARG_REG
                               Use:<V10/L6>(#100) Fixed:rdx(#99) *
        Def:<I27>(#102) rdx
  N211.                    CALL     
                               Use:<I26>(#104) Fixed:rcx(#103) *
                               Use:<I27>(#106) Fixed:rdx(#105) *
        Kill: rax rcx rdx r8 r9 r10 r11 

  Exposed use of V09 at #114
  Exposed use of V11 at #115
  Exposed use of V12 at #116
BB10 [027..03E) (return), preds={BB09} succs={}
=====
  N215.                    V01(L1)
  N217.                    LEA(b+8) 
  N219.                    IND      
                               Use:<V01/L1>(#118) *
        Def:<I28>(#119)
  N221.                    RETURN   
                               Use:<I28>(#121) Fixed:rax(#120) *

BB11 [01E..01F) (throw), preds={BB07} succs={}
=====
  N225.                    IL_OFFSET IL offset: 0x1e
  N227.                    CALL     
        Kill: rax rcx rdx r8 r9 r10 r11 

BB12 [???..???) (throw), preds={} succs={}
=====
  N231.                    CALL help
        Kill: rax rcx rdx r8 r9 r10 r11 




Linear scan intervals after buildIntervals:
Interval  0: (V00) ref RefPositions {#0@0 #35@29} physReg:rcx Preferences=[rbx rbp rsi rdi r12-r15] RelatedInterval <V13/L9>
Interval  1: (V01) ref RefPositions {#34@24 #96@205 #118@219} physReg:NA Preferences=[rbx rbp rsi rdi r12-r15]
Interval  2: (V05) ref RefPositions {#19@12 #21@15 #33@23} physReg:NA Preferences=[rbx rbp rsi rdi r12-r15] RelatedInterval <V01/L1>
Interval  3: (V07) int RefPositions {#75@144 #91@188 #93@195} physReg:NA Preferences=[allInt]
Interval  4: (V08) ref RefPositions {#51@64 #53@75} physReg:NA Preferences=[allInt]
Interval  5: (V09) ref (field) RefPositions {#42@46 #50@63 #56@91 #58@103 #78@157 #80@169 #114@213} physReg:NA Preferences=[rbx rbp rsi rdi r12-r15]
Interval  6: (V10) ref (field) RefPositions {#70@128 #88@182 #100@209} physReg:NA Preferences=[rdx]
Interval  7: (V11) int (field) RefPositions {#45@50 #55@91 #62@115 #64@121 #71@135 #74@138 #85@176 #115@213} physReg:NA Preferences=[rbx rbp rsi rdi r12-r15] RelatedInterval <I21>
Interval  8: (V12) int (field) RefPositions {#47@54 #52@75 #77@157 #116@213} physReg:NA Preferences=[rbx rbp rsi rdi r12-r15]
Interval  9: (V13) ref (field) RefPositions {#36@30 #37@39 #41@45} physReg:NA Preferences=[allInt] RelatedInterval <V09/L5>
Interval 10: (V16) int (field) RefPositions {#40@42 #46@53} physReg:NA Preferences=[allInt] RelatedInterval <V12/L8>
Interval 11: (V17) ref RefPositions {#61@106 #63@115 #66@125} physReg:NA Preferences=[allInt]
Interval 12: long (constant) RefPositions {#2@6 #4@7} physReg:NA Preferences=[rcx]
Interval 13: long RefPositions {#6@8 #8@9} physReg:NA Preferences=[rcx]
Interval 14: ref RefPositions {#17@10 #18@11} physReg:NA Preferences=[rax] RelatedInterval <V05/L2>
Interval 15: ref (specialPutArg) RefPositions {#23@16 #25@17} physReg:NA Preferences=[rcx] RelatedInterval <V05/L2>
Interval 16: int RefPositions {#38@40 #39@41} physReg:NA Preferences=[allInt] RelatedInterval <V16/L10>
Interval 17: int (constant) RefPositions {#43@48 #44@49} physReg:NA Preferences=[allInt] RelatedInterval <V11/L7>
Interval 18: ref RefPositions {#59@104 #60@105} physReg:NA Preferences=[allInt] RelatedInterval <V17/L11>
Interval 19: long RefPositions {#65@122 #67@125} physReg:NA Preferences=[allInt]
Interval 20: ref RefPositions {#68@126 #69@127} physReg:NA Preferences=[allInt] RelatedInterval <V10/L6>
Interval 21: int RefPositions {#72@136 #73@137} physReg:NA Preferences=[allInt] RelatedInterval <V11/L7>
Interval 22: int RefPositions {#81@170 #82@173} physReg:NA Preferences=[allInt] RelatedInterval <I23>
Interval 23: int RefPositions {#83@174 #84@175} physReg:NA Preferences=[allInt] RelatedInterval <V11/L7>
Interval 24: ref (constant) RefPositions {#86@180 #87@181} physReg:NA Preferences=[allInt] RelatedInterval <V10/L6>
Interval 25: int (constant) RefPositions {#89@186 #90@187} physReg:NA Preferences=[allInt] RelatedInterval <V07/L3>
Interval 26: ref (specialPutArg) RefPositions {#98@206 #104@211} physReg:NA Preferences=[rcx] RelatedInterval <V01/L1>
Interval 27: ref RefPositions {#102@210 #106@211} physReg:NA Preferences=[rdx]
Interval 28: ref RefPositions {#119@220 #121@221} physReg:NA Preferences=[rax]

*************** In LinearScan::allocateRegisters()

Linear scan intervals before allocateRegisters:
Interval  0: (V00) ref RefPositions {#0@0 #35@29} physReg:rcx Preferences=[rbx rbp rsi rdi r12-r15] RelatedInterval <V13/L9>
Interval  1: (V01) ref RefPositions {#34@24 #96@205 #118@219} physReg:NA Preferences=[rbx rbp rsi rdi r12-r15]
Interval  2: (V05) ref RefPositions {#19@12 #21@15 #33@23} physReg:NA Preferences=[rbx rbp rsi rdi r12-r15] RelatedInterval <V01/L1>
Interval  3: (V07) int RefPositions {#75@144 #91@188 #93@195} physReg:NA Preferences=[allInt]
Interval  4: (V08) ref RefPositions {#51@64 #53@75} physReg:NA Preferences=[allInt]
Interval  5: (V09) ref (field) RefPositions {#42@46 #50@63 #56@91 #58@103 #78@157 #80@169 #114@213} physReg:NA Preferences=[rbx rbp rsi rdi r12-r15]
Interval  6: (V10) ref (field) RefPositions {#70@128 #88@182 #100@209} physReg:NA Preferences=[rdx]
Interval  7: (V11) int (field) RefPositions {#45@50 #55@91 #62@115 #64@121 #71@135 #74@138 #85@176 #115@213} physReg:NA Preferences=[rbx rbp rsi rdi r12-r15] RelatedInterval <I21>
Interval  8: (V12) int (field) RefPositions {#47@54 #52@75 #77@157 #116@213} physReg:NA Preferences=[rbx rbp rsi rdi r12-r15]
Interval  9: (V13) ref (field) RefPositions {#36@30 #37@39 #41@45} physReg:NA Preferences=[allInt] RelatedInterval <V09/L5>
Interval 10: (V16) int (field) RefPositions {#40@42 #46@53} physReg:NA Preferences=[allInt] RelatedInterval <V12/L8>
Interval 11: (V17) ref RefPositions {#61@106 #63@115 #66@125} physReg:NA Preferences=[allInt]
Interval 12: long (constant) RefPositions {#2@6 #4@7} physReg:NA Preferences=[rcx]
Interval 13: long RefPositions {#6@8 #8@9} physReg:NA Preferences=[rcx]
Interval 14: ref RefPositions {#17@10 #18@11} physReg:NA Preferences=[rax] RelatedInterval <V05/L2>
Interval 15: ref (specialPutArg) RefPositions {#23@16 #25@17} physReg:NA Preferences=[rcx] RelatedInterval <V05/L2>
Interval 16: int RefPositions {#38@40 #39@41} physReg:NA Preferences=[allInt] RelatedInterval <V16/L10>
Interval 17: int (constant) RefPositions {#43@48 #44@49} physReg:NA Preferences=[allInt] RelatedInterval <V11/L7>
Interval 18: ref RefPositions {#59@104 #60@105} physReg:NA Preferences=[allInt] RelatedInterval <V17/L11>
Interval 19: long RefPositions {#65@122 #67@125} physReg:NA Preferences=[allInt]
Interval 20: ref RefPositions {#68@126 #69@127} physReg:NA Preferences=[allInt] RelatedInterval <V10/L6>
Interval 21: int RefPositions {#72@136 #73@137} physReg:NA Preferences=[allInt] RelatedInterval <V11/L7>
Interval 22: int RefPositions {#81@170 #82@173} physReg:NA Preferences=[allInt] RelatedInterval <I23>
Interval 23: int RefPositions {#83@174 #84@175} physReg:NA Preferences=[allInt] RelatedInterval <V11/L7>
Interval 24: ref (constant) RefPositions {#86@180 #87@181} physReg:NA Preferences=[allInt] RelatedInterval <V10/L6>
Interval 25: int (constant) RefPositions {#89@186 #90@187} physReg:NA Preferences=[allInt] RelatedInterval <V07/L3>
Interval 26: ref (specialPutArg) RefPositions {#98@206 #104@211} physReg:NA Preferences=[rcx] RelatedInterval <V01/L1>
Interval 27: ref RefPositions {#102@210 #106@211} physReg:NA Preferences=[rdx]
Interval 28: ref RefPositions {#119@220 #121@221} physReg:NA Preferences=[rax]

------------
REFPOSITIONS BEFORE ALLOCATION: 
------------
<RefPosition #0   @0   RefTypeParamDef <Ivl:0 V00>  BB00 regmask=[rcx] minReg=1 fixed regOptional>
<RefPosition #1   @1   RefTypeBB  BB01 regmask=[] minReg=1>
<RefPosition #2   @6   RefTypeDef <Ivl:12> CNS_INT BB01 regmask=[rcx] minReg=1>
<RefPosition #3   @7   RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #4   @7   RefTypeUse <Ivl:12>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #5   @8   RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #6   @8   RefTypeDef <Ivl:13> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #7   @9   RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #8   @9   RefTypeUse <Ivl:13>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #9   @10  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #10  @10  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #11  @10  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #12  @10  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #13  @10  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #14  @10  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #15  @10  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #16  @10  RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #17  @10  RefTypeDef <Ivl:14> CALL BB01 regmask=[rax] minReg=1 fixed>
<RefPosition #18  @11  RefTypeUse <Ivl:14>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #19  @12  RefTypeDef <Ivl:2 V05> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #20  @15  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #21  @15  RefTypeUse <Ivl:2 V05> LCL_VAR BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #22  @16  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #23  @16  RefTypeDef <Ivl:15> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #24  @17  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #25  @17  RefTypeUse <Ivl:15>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #26  @18  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #27  @18  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #28  @18  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #29  @18  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #30  @18  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #31  @18  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #32  @18  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #33  @23  RefTypeUse <Ivl:2 V05> LCL_VAR BB01 regmask=[allInt] minReg=1 last>
<RefPosition #34  @24  RefTypeDef <Ivl:1 V01> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #35  @29  RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[allInt] minReg=1 last>
<RefPosition #36  @30  RefTypeDef <Ivl:9 V13> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #37  @39  RefTypeUse <Ivl:9 V13> LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #38  @40  RefTypeDef <Ivl:16> IND BB01 regmask=[allInt] minReg=1>
<RefPosition #39  @41  RefTypeUse <Ivl:16>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #40  @42  RefTypeDef <Ivl:10 V16> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #41  @45  RefTypeUse <Ivl:9 V13> LCL_VAR BB01 regmask=[allInt] minReg=1 last>
<RefPosition #42  @46  RefTypeDef <Ivl:5 V09> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #43  @48  RefTypeDef <Ivl:17> CNS_INT BB01 regmask=[allInt] minReg=1>
<RefPosition #44  @49  RefTypeUse <Ivl:17>  BB01 regmask=[allInt] minReg=1 last>
<RefPosition #45  @50  RefTypeDef <Ivl:7 V11> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #46  @53  RefTypeUse <Ivl:10 V16> LCL_VAR BB01 regmask=[allInt] minReg=1 last>
<RefPosition #47  @54  RefTypeDef <Ivl:8 V12> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #48  @55  RefTypeBB  BB02 regmask=[] minReg=1>
<RefPosition #49  @57  RefTypeBB  BB04 regmask=[] minReg=1>
<RefPosition #50  @63  RefTypeUse <Ivl:5 V09> LCL_VAR BB04 regmask=[allInt] minReg=1>
<RefPosition #51  @64  RefTypeDef <Ivl:4 V08> STORE_LCL_VAR BB04 regmask=[allInt] minReg=1>
<RefPosition #52  @75  RefTypeUse <Ivl:8 V12> LCL_VAR BB04 regmask=[allInt] minReg=1>
<RefPosition #53  @75  RefTypeUse <Ivl:4 V08> LCL_VAR BB04 regmask=[allInt] minReg=1 last>
<RefPosition #54  @79  RefTypeBB  BB05 regmask=[] minReg=1>
<RefPosition #55  @91  RefTypeUse <Ivl:7 V11> LCL_VAR BB05 regmask=[allInt] minReg=1>
<RefPosition #56  @91  RefTypeUse <Ivl:5 V09> LCL_VAR BB05 regmask=[allInt] minReg=1>
<RefPosition #57  @95  RefTypeBB  BB06 regmask=[] minReg=1>
<RefPosition #58  @103 RefTypeUse <Ivl:5 V09> LCL_VAR BB06 regmask=[allInt] minReg=1>
<RefPosition #59  @104 RefTypeDef <Ivl:18> IND BB06 regmask=[allInt] minReg=1>
<RefPosition #60  @105 RefTypeUse <Ivl:18>  BB06 regmask=[allInt] minReg=1 last>
<RefPosition #61  @106 RefTypeDef <Ivl:11 V17> STORE_LCL_VAR BB06 regmask=[allInt] minReg=1>
<RefPosition #62  @115 RefTypeUse <Ivl:7 V11> LCL_VAR BB06 regmask=[allInt] minReg=1>
<RefPosition #63  @115 RefTypeUse <Ivl:11 V17> LCL_VAR BB06 regmask=[allInt] minReg=1>
<RefPosition #64  @121 RefTypeUse <Ivl:7 V11> LCL_VAR BB06 regmask=[allInt] minReg=1>
<RefPosition #65  @122 RefTypeDef <Ivl:19> CAST BB06 regmask=[allInt] minReg=1>
<RefPosition #66  @125 RefTypeUse <Ivl:11 V17> LCL_VAR BB06 regmask=[allInt] minReg=1 last>
<RefPosition #67  @125 RefTypeUse <Ivl:19>  BB06 regmask=[allInt] minReg=1 last>
<RefPosition #68  @126 RefTypeDef <Ivl:20> IND BB06 regmask=[allInt] minReg=1>
<RefPosition #69  @127 RefTypeUse <Ivl:20>  BB06 regmask=[allInt] minReg=1 last>
<RefPosition #70  @128 RefTypeDef <Ivl:6 V10> STORE_LCL_VAR BB06 regmask=[allInt] minReg=1>
<RefPosition #71  @135 RefTypeUse <Ivl:7 V11> LCL_VAR BB06 regmask=[allInt] minReg=1 last>
<RefPosition #72  @136 RefTypeDef <Ivl:21> ADD BB06 regmask=[allInt] minReg=1>
<RefPosition #73  @137 RefTypeUse <Ivl:21>  BB06 regmask=[allInt] minReg=1 last>
<RefPosition #74  @138 RefTypeDef <Ivl:7 V11> STORE_LCL_VAR BB06 regmask=[allInt] minReg=1>
<RefPosition #75  @144 RefTypeDef <Ivl:3 V07> STORE_LCL_VAR BB06 regmask=[allInt] minReg=1>
<RefPosition #76  @145 RefTypeBB  BB07 regmask=[] minReg=1>
<RefPosition #77  @157 RefTypeUse <Ivl:8 V12> LCL_VAR BB07 regmask=[allInt] minReg=1>
<RefPosition #78  @157 RefTypeUse <Ivl:5 V09> LCL_VAR BB07 regmask=[allInt] minReg=1>
<RefPosition #79  @161 RefTypeBB  BB08 regmask=[] minReg=1>
<RefPosition #80  @169 RefTypeUse <Ivl:5 V09> LCL_VAR BB08 regmask=[allInt] minReg=1>
<RefPosition #81  @170 RefTypeDef <Ivl:22> IND BB08 regmask=[allInt] minReg=1>
<RefPosition #82  @173 RefTypeUse <Ivl:22>  BB08 regmask=[allInt] minReg=1 last>
<RefPosition #83  @174 RefTypeDef <Ivl:23> ADD BB08 regmask=[allInt] minReg=1>
<RefPosition #84  @175 RefTypeUse <Ivl:23>  BB08 regmask=[allInt] minReg=1 last>
<RefPosition #85  @176 RefTypeDef <Ivl:7 V11> STORE_LCL_VAR BB08 regmask=[allInt] minReg=1>
<RefPosition #86  @180 RefTypeDef <Ivl:24> CNS_INT BB08 regmask=[allInt] minReg=1>
<RefPosition #87  @181 RefTypeUse <Ivl:24>  BB08 regmask=[allInt] minReg=1 last>
<RefPosition #88  @182 RefTypeDef <Ivl:6 V10> STORE_LCL_VAR BB08 regmask=[allInt] minReg=1>
<RefPosition #89  @186 RefTypeDef <Ivl:25> CNS_INT BB08 regmask=[allInt] minReg=1>
<RefPosition #90  @187 RefTypeUse <Ivl:25>  BB08 regmask=[allInt] minReg=1 last>
<RefPosition #91  @188 RefTypeDef <Ivl:3 V07> STORE_LCL_VAR BB08 regmask=[allInt] minReg=1>
<RefPosition #92  @189 RefTypeBB  BB09 regmask=[] minReg=1>
<RefPosition #93  @195 RefTypeUse <Ivl:3 V07> LCL_VAR BB09 regmask=[allInt] minReg=1 last>
<RefPosition #94  @199 RefTypeBB  BB03 regmask=[] minReg=1>
<RefPosition #95  @205 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1>
<RefPosition #96  @205 RefTypeUse <Ivl:1 V01> LCL_VAR BB03 regmask=[rcx] minReg=1 fixed>
<RefPosition #97  @206 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1>
<RefPosition #98  @206 RefTypeDef <Ivl:26> PUTARG_REG BB03 regmask=[rcx] minReg=1 fixed>
<RefPosition #99  @209 RefTypeFixedReg <Reg:rdx>  BB03 regmask=[rdx] minReg=1>
<RefPosition #100 @209 RefTypeUse <Ivl:6 V10> LCL_VAR BB03 regmask=[rdx] minReg=1 last fixed>
<RefPosition #101 @210 RefTypeFixedReg <Reg:rdx>  BB03 regmask=[rdx] minReg=1>
<RefPosition #102 @210 RefTypeDef <Ivl:27> PUTARG_REG BB03 regmask=[rdx] minReg=1 fixed>
<RefPosition #103 @211 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1>
<RefPosition #104 @211 RefTypeUse <Ivl:26>  BB03 regmask=[rcx] minReg=1 last fixed>
<RefPosition #105 @211 RefTypeFixedReg <Reg:rdx>  BB03 regmask=[rdx] minReg=1>
<RefPosition #106 @211 RefTypeUse <Ivl:27>  BB03 regmask=[rdx] minReg=1 last fixed>
<RefPosition #107 @212 RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 last>
<RefPosition #108 @212 RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 last>
<RefPosition #109 @212 RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 last>
<RefPosition #110 @212 RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 last>
<RefPosition #111 @212 RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 last>
<RefPosition #112 @212 RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 last>
<RefPosition #113 @212 RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 last>
<RefPosition #114 @213 RefTypeExpUse <Ivl:5 V09>  BB03 regmask=[allInt] minReg=1 regOptional>
<RefPosition #115 @213 RefTypeExpUse <Ivl:7 V11>  BB03 regmask=[allInt] minReg=1 regOptional>
<RefPosition #116 @213 RefTypeExpUse <Ivl:8 V12>  BB03 regmask=[allInt] minReg=1 regOptional>
<RefPosition #117 @213 RefTypeBB  BB10 regmask=[] minReg=1>
<RefPosition #118 @219 RefTypeUse <Ivl:1 V01> LCL_VAR BB10 regmask=[allInt] minReg=1 last>
<RefPosition #119 @220 RefTypeDef <Ivl:28> IND BB10 regmask=[rax] minReg=1>
<RefPosition #120 @221 RefTypeFixedReg <Reg:rax>  BB10 regmask=[rax] minReg=1>
<RefPosition #121 @221 RefTypeUse <Ivl:28>  BB10 regmask=[rax] minReg=1 last fixed>
<RefPosition #122 @223 RefTypeBB  BB11 regmask=[] minReg=1>
<RefPosition #123 @228 RefTypeKill <Reg:rax>  BB11 regmask=[rax] minReg=1 last>
<RefPosition #124 @228 RefTypeKill <Reg:rcx>  BB11 regmask=[rcx] minReg=1 last>
<RefPosition #125 @228 RefTypeKill <Reg:rdx>  BB11 regmask=[rdx] minReg=1 last>
<RefPosition #126 @228 RefTypeKill <Reg:r8 >  BB11 regmask=[r8] minReg=1 last>
<RefPosition #127 @228 RefTypeKill <Reg:r9 >  BB11 regmask=[r9] minReg=1 last>
<RefPosition #128 @228 RefTypeKill <Reg:r10>  BB11 regmask=[r10] minReg=1 last>
<RefPosition #129 @228 RefTypeKill <Reg:r11>  BB11 regmask=[r11] minReg=1 last>
<RefPosition #130 @229 RefTypeBB  BB12 regmask=[] minReg=1>
<RefPosition #131 @232 RefTypeKill <Reg:rax>  BB12 regmask=[rax] minReg=1 last>
<RefPosition #132 @232 RefTypeKill <Reg:rcx>  BB12 regmask=[rcx] minReg=1 last>
<RefPosition #133 @232 RefTypeKill <Reg:rdx>  BB12 regmask=[rdx] minReg=1 last>
<RefPosition #134 @232 RefTypeKill <Reg:r8 >  BB12 regmask=[r8] minReg=1 last>
<RefPosition #135 @232 RefTypeKill <Reg:r9 >  BB12 regmask=[r9] minReg=1 last>
<RefPosition #136 @232 RefTypeKill <Reg:r10>  BB12 regmask=[r10] minReg=1 last>
<RefPosition #137 @232 RefTypeKill <Reg:r11>  BB12 regmask=[r11] minReg=1 last>

VAR REFPOSITIONS BEFORE ALLOCATION
--- V00  (Interval 0)
<RefPosition #0   @0   RefTypeParamDef <Ivl:0 V00>  BB00 regmask=[rcx] minReg=1 fixed regOptional>
<RefPosition #35  @29  RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[allInt] minReg=1 last>
--- V01  (Interval 1)
<RefPosition #34  @24  RefTypeDef <Ivl:1 V01> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #96  @205 RefTypeUse <Ivl:1 V01> LCL_VAR BB03 regmask=[rcx] minReg=1 fixed>
<RefPosition #118 @219 RefTypeUse <Ivl:1 V01> LCL_VAR BB10 regmask=[allInt] minReg=1 last>
--- V02
--- V03
--- V04
--- V05  (Interval 2)
<RefPosition #19  @12  RefTypeDef <Ivl:2 V05> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #21  @15  RefTypeUse <Ivl:2 V05> LCL_VAR BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #33  @23  RefTypeUse <Ivl:2 V05> LCL_VAR BB01 regmask=[allInt] minReg=1 last>
--- V06
--- V07  (Interval 3)
<RefPosition #75  @144 RefTypeDef <Ivl:3 V07> STORE_LCL_VAR BB06 regmask=[allInt] minReg=1>
<RefPosition #91  @188 RefTypeDef <Ivl:3 V07> STORE_LCL_VAR BB08 regmask=[allInt] minReg=1>
<RefPosition #93  @195 RefTypeUse <Ivl:3 V07> LCL_VAR BB09 regmask=[allInt] minReg=1 last>
--- V08  (Interval 4)
<RefPosition #51  @64  RefTypeDef <Ivl:4 V08> STORE_LCL_VAR BB04 regmask=[allInt] minReg=1>
<RefPosition #53  @75  RefTypeUse <Ivl:4 V08> LCL_VAR BB04 regmask=[allInt] minReg=1 last>
--- V09  (Interval 5)
<RefPosition #42  @46  RefTypeDef <Ivl:5 V09> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #50  @63  RefTypeUse <Ivl:5 V09> LCL_VAR BB04 regmask=[allInt] minReg=1>
<RefPosition #56  @91  RefTypeUse <Ivl:5 V09> LCL_VAR BB05 regmask=[allInt] minReg=1>
<RefPosition #58  @103 RefTypeUse <Ivl:5 V09> LCL_VAR BB06 regmask=[allInt] minReg=1>
<RefPosition #78  @157 RefTypeUse <Ivl:5 V09> LCL_VAR BB07 regmask=[allInt] minReg=1>
<RefPosition #80  @169 RefTypeUse <Ivl:5 V09> LCL_VAR BB08 regmask=[allInt] minReg=1>
<RefPosition #114 @213 RefTypeExpUse <Ivl:5 V09>  BB03 regmask=[allInt] minReg=1 regOptional>
--- V10  (Interval 6)
<RefPosition #70  @128 RefTypeDef <Ivl:6 V10> STORE_LCL_VAR BB06 regmask=[allInt] minReg=1>
<RefPosition #88  @182 RefTypeDef <Ivl:6 V10> STORE_LCL_VAR BB08 regmask=[allInt] minReg=1>
<RefPosition #100 @209 RefTypeUse <Ivl:6 V10> LCL_VAR BB03 regmask=[rdx] minReg=1 last fixed>
--- V11  (Interval 7)
<RefPosition #45  @50  RefTypeDef <Ivl:7 V11> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #55  @91  RefTypeUse <Ivl:7 V11> LCL_VAR BB05 regmask=[allInt] minReg=1>
<RefPosition #62  @115 RefTypeUse <Ivl:7 V11> LCL_VAR BB06 regmask=[allInt] minReg=1>
<RefPosition #64  @121 RefTypeUse <Ivl:7 V11> LCL_VAR BB06 regmask=[allInt] minReg=1>
<RefPosition #71  @135 RefTypeUse <Ivl:7 V11> LCL_VAR BB06 regmask=[allInt] minReg=1 last>
<RefPosition #74  @138 RefTypeDef <Ivl:7 V11> STORE_LCL_VAR BB06 regmask=[allInt] minReg=1>
<RefPosition #85  @176 RefTypeDef <Ivl:7 V11> STORE_LCL_VAR BB08 regmask=[allInt] minReg=1>
<RefPosition #115 @213 RefTypeExpUse <Ivl:7 V11>  BB03 regmask=[allInt] minReg=1 regOptional>
--- V12  (Interval 8)
<RefPosition #47  @54  RefTypeDef <Ivl:8 V12> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #52  @75  RefTypeUse <Ivl:8 V12> LCL_VAR BB04 regmask=[allInt] minReg=1>
<RefPosition #77  @157 RefTypeUse <Ivl:8 V12> LCL_VAR BB07 regmask=[allInt] minReg=1>
<RefPosition #116 @213 RefTypeExpUse <Ivl:8 V12>  BB03 regmask=[allInt] minReg=1 regOptional>
--- V13  (Interval 9)
<RefPosition #36  @30  RefTypeDef <Ivl:9 V13> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #37  @39  RefTypeUse <Ivl:9 V13> LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #41  @45  RefTypeUse <Ivl:9 V13> LCL_VAR BB01 regmask=[allInt] minReg=1 last>
--- V14
--- V15
--- V16  (Interval 10)
<RefPosition #40  @42  RefTypeDef <Ivl:10 V16> STORE_LCL_VAR BB01 regmask=[allInt] minReg=1>
<RefPosition #46  @53  RefTypeUse <Ivl:10 V16> LCL_VAR BB01 regmask=[allInt] minReg=1 last>
--- V17  (Interval 11)
<RefPosition #61  @106 RefTypeDef <Ivl:11 V17> STORE_LCL_VAR BB06 regmask=[allInt] minReg=1>
<RefPosition #63  @115 RefTypeUse <Ivl:11 V17> LCL_VAR BB06 regmask=[allInt] minReg=1>
<RefPosition #66  @125 RefTypeUse <Ivl:11 V17> LCL_VAR BB06 regmask=[allInt] minReg=1 last>



Allocating Registers
--------------------
The following table has one or more rows for each RefPosition that is handled during allocation.
The first column provides the basic information about the RefPosition, with its type (e.g. Def,
Use, Fixd) followed by a '*' if it is a last use, and a 'D' if it is delayRegFree, and then the
action taken during allocation (e.g. Alloc a new register, or Keep an existing one).
The subsequent columns show the Interval occupying each register, if any, followed by 'a' if it is
active, a 'p' if it is a large vector that has been partially spilled, and 'i'if it is inactive.
Columns are only printed up to the last modifed register, which may increase during allocation,
in which case additional columns will appear.  
Registers which are not marked modified have ---- in their column.

--------------------------------+----+----+----+----+----+----+----+----+----+
Loc RP#  Name Type  Action Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------+----+----+----+----+----+----+----+----+----+
                                |    |V0 a|    |    |    |    |    |    |    |
  0.#0   V0   Parm   Alloc rsi  |    |    |    |    |    |V0 a|    |    |    |
  1.#1   BB1  PredBB0           |    |    |    |    |    |V0 a|    |    |    |
  6.#2   C12  Def    Alloc rcx  |    |C12a|    |    |    |V0 a|    |    |    |
  7.#3   rcx  Fixd   Keep  rcx  |    |C12a|    |    |    |V0 a|    |    |    |
  7.#4   C12  Use *  Keep  rcx  |    |C12a|    |    |    |V0 a|    |    |    |
  8.#5   rcx  Fixd   Keep  rcx  |    |    |    |    |    |V0 a|    |    |    |
  8.#6   I13  Def    Alloc rcx  |    |I13a|    |    |    |V0 a|    |    |    |
  9.#7   rcx  Fixd   Keep  rcx  |    |I13a|    |    |    |V0 a|    |    |    |
  9.#8   I13  Use *  Keep  rcx  |    |I13a|    |    |    |V0 a|    |    |    |
 10.#9   rax  Kill   Keep  rax  |    |    |    |    |    |V0 a|    |    |    |
 10.#10  rcx  Kill   Keep  rcx  |    |    |    |    |    |V0 a|    |    |    |
 10.#11  rdx  Kill   Keep  rdx  |    |    |    |    |    |V0 a|    |    |    |
 10.#12  r8   Kill   Keep  r8   |    |    |    |    |    |V0 a|    |    |    |
 10.#13  r9   Kill   Keep  r9   |    |    |    |    |    |V0 a|    |    |    |
 10.#14  r10  Kill   Keep  r10  |    |    |    |    |    |V0 a|    |    |    |
 10.#15  r11  Kill   Keep  r11  |    |    |    |    |    |V0 a|    |    |    |
 10.#16  rax  Fixd   Keep  rax  |    |    |    |    |    |V0 a|    |    |    |
 10.#17  I14  Def    Alloc rax  |I14a|    |    |    |    |V0 a|    |    |    |
 11.#18  I14  Use *  Keep  rax  |I14a|    |    |    |    |V0 a|    |    |    |
 12.#19  V5   Def    Alloc rdi  |    |    |    |    |    |V0 a|V5 a|    |    |
 15.#20  rcx  Fixd   Keep  rcx  |    |    |    |    |    |V0 a|V5 a|    |    |
 15.#21  V5   Use    Copy  rcx  |    |V5 a|    |    |    |V0 a|V5 a|    |    |
 16.#22  rcx  Fixd   Keep  rcx  |    |V5 a|    |    |    |V0 a|V5 a|    |    |
 16.#23  I15  Def    Alloc rcx  |    |I15a|    |    |    |V0 a|V5 a|    |    |
 17.#24  rcx  Fixd   Keep  rcx  |    |I15a|    |    |    |V0 a|V5 a|    |    |
 17.#25  I15  Use *  Keep  rcx  |    |I15a|    |    |    |V0 a|V5 a|    |    |
 18.#26  rax  Kill   Keep  rax  |    |    |    |    |    |V0 a|V5 a|    |    |
 18.#27  rcx  Kill   Keep  rcx  |    |    |    |    |    |V0 a|V5 a|    |    |
 18.#28  rdx  Kill   Keep  rdx  |    |    |    |    |    |V0 a|V5 a|    |    |
 18.#29  r8   Kill   Keep  r8   |    |    |    |    |    |V0 a|V5 a|    |    |
 18.#30  r9   Kill   Keep  r9   |    |    |    |    |    |V0 a|V5 a|    |    |
 18.#31  r10  Kill   Keep  r10  |    |    |    |    |    |V0 a|V5 a|    |    |
 18.#32  r11  Kill   Keep  r11  |    |    |    |    |    |V0 a|V5 a|    |    |
 23.#33  V5   Use *  Keep  rdi  |    |    |    |    |    |V0 a|V5 a|    |    |
 24.#34  V1   Def    Alloc rdi  |    |    |    |    |    |V0 a|V1 a|    |    |
 29.#35  V0   Use *  Keep  rsi  |    |    |    |    |    |V0 a|V1 a|    |    |
 30.#36  V13  Def    Alloc rsi  |    |    |    |    |    |V13a|V1 a|    |    |
 39.#37  V13  Use    Keep  rsi  |    |    |    |    |    |V13a|V1 a|    |    |
 40.#38  I16  Def    Alloc rbx  |    |    |    |I16a|    |V13a|V1 a|    |    |
 41.#39  I16  Use *  Keep  rbx  |    |    |    |I16a|    |V13a|V1 a|    |    |
 42.#40  V16  Def    Alloc rbx  |    |    |    |V16a|    |V13a|V1 a|    |    |
 45.#41  V13  Use *  Keep  rsi  |    |    |    |V16a|    |V13a|V1 a|    |    |
 46.#42  V9   Def    Alloc rsi  |    |    |    |V16a|    |V9 a|V1 a|    |    |
 48.#43  C17  Def    Alloc rbp  |    |    |    |V16a|C17a|V9 a|V1 a|    |    |
 49.#44  C17  Use *  Keep  rbp  |    |    |    |V16a|C17a|V9 a|V1 a|    |    |
 50.#45  V11  Def    Alloc rbp  |    |    |    |V16a|V11a|V9 a|V1 a|    |    |
 53.#46  V16  Use *  Keep  rbx  |    |    |    |V16a|V11a|V9 a|V1 a|    |    |
 54.#47  V12  Def    Alloc rbx  |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
--------------------------------+----+----+----+----+----+----+----+----+----+
Loc RP#  Name Type  Action Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------+----+----+----+----+----+----+----+----+----+
 55.#48  BB2  PredBB1           |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
--------------------------------+----+----+----+----+----+----+----+----+----+
Loc RP#  Name Type  Action Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------+----+----+----+----+----+----+----+----+----+
 57.#49  BB4  PredBB2           |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
 63.#50  V9   Use    Keep  rsi  |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
 64.#51  V8   Def    Alloc rcx  |    |V8 a|    |V12a|V11a|V9 a|V1 a|    |    |
 75.#52  V12  Use    Keep  rbx  |    |V8 a|    |V12a|V11a|V9 a|V1 a|    |    |
 75.#53  V8   Use *  Keep  rcx  |    |V8 a|    |V12a|V11a|V9 a|V1 a|    |    |
--------------------------------+----+----+----+----+----+----+----+----+----+
Loc RP#  Name Type  Action Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------+----+----+----+----+----+----+----+----+----+
 79.#54  BB5  PredBB4           |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
 91.#55  V11  Use    Keep  rbp  |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
 91.#56  V9   Use    Keep  rsi  |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
--------------------------------+----+----+----+----+----+----+----+----+----+
Loc RP#  Name Type  Action Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------+----+----+----+----+----+----+----+----+----+
 95.#57  BB6  PredBB5           |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
103.#58  V9   Use    Keep  rsi  |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
104.#59  I18  Def    Alloc rcx  |    |I18a|    |V12a|V11a|V9 a|V1 a|    |    |
105.#60  I18  Use *  Keep  rcx  |    |I18a|    |V12a|V11a|V9 a|V1 a|    |    |
106.#61  V17  Def    Alloc rcx  |    |V17a|    |V12a|V11a|V9 a|V1 a|    |    |
115.#62  V11  Use    Keep  rbp  |    |V17a|    |V12a|V11a|V9 a|V1 a|    |    |
115.#63  V17  Use    Keep  rcx  |    |V17a|    |V12a|V11a|V9 a|V1 a|    |    |
121.#64  V11  Use    Keep  rbp  |    |V17a|    |V12a|V11a|V9 a|V1 a|    |    |
122.#65  I19  Def    Alloc rdx  |    |V17a|I19a|V12a|V11a|V9 a|V1 a|    |    |
125.#66  V17  Use *  Keep  rcx  |    |V17a|I19a|V12a|V11a|V9 a|V1 a|    |    |
125.#67  I19  Use *  Keep  rdx  |    |V17a|I19a|V12a|V11a|V9 a|V1 a|    |    |
126.#68  I20  Def    Alloc rdx  |    |    |I20a|V12a|V11a|V9 a|V1 a|    |    |
127.#69  I20  Use *  Keep  rdx  |    |    |I20a|V12a|V11a|V9 a|V1 a|    |    |
128.#70  V10  Def    Alloc rdx  |    |    |V10a|V12a|V11a|V9 a|V1 a|    |    |
135.#71  V11  Use *  Keep  rbp  |    |    |V10a|V12a|V11i|V9 a|V1 a|    |    |
136.#72  I21  Def    Alloc rbp  |    |    |V10a|V12a|I21a|V9 a|V1 a|    |    |
137.#73  I21  Use *  Keep  rbp  |    |    |V10a|V12a|I21a|V9 a|V1 a|    |    |
                     Restr rbp  |    |    |V10a|V12a|V11i|V9 a|V1 a|    |    |
138.#74  V11  Def    Alloc rbp  |    |    |V10a|V12a|V11a|V9 a|V1 a|    |    |
144.#75  V7   Def    Alloc rcx  |    |V7 a|V10a|V12a|V11a|V9 a|V1 a|    |    |
--------------------------------+----+----+----+----+----+----+----+----+----+
Loc RP#  Name Type  Action Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------+----+----+----+----+----+----+----+----+----+
145.#76  BB7  PredBB4           |    |V7 i|V10i|V12a|V11i|V9 a|V1 a|    |    |
157.#77  V12  Use    Keep  rbx  |    |V7 i|V10i|V12a|V11i|V9 a|V1 a|    |    |
157.#78  V9   Use    Keep  rsi  |    |V7 i|V10i|V12a|V11i|V9 a|V1 a|    |    |
--------------------------------+----+----+----+----+----+----+----+----+----+
Loc RP#  Name Type  Action Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------+----+----+----+----+----+----+----+----+----+
161.#79  BB8  PredBB7           |    |V7 i|V10i|V12a|V11i|V9 a|V1 a|    |    |
169.#80  V9   Use    Keep  rsi  |    |V7 i|V10i|V12a|V11i|V9 a|V1 a|    |    |
170.#81  I22  Def    Alloc rbp  |    |V7 i|V10i|V12a|I22a|V9 a|V1 a|    |    |
173.#82  I22  Use *  Keep  rbp  |    |V7 i|V10i|V12a|I22a|V9 a|V1 a|    |    |
                     Restr rbp  |    |V7 i|V10i|V12a|V11i|V9 a|V1 a|    |    |
174.#83  I23  Def    Alloc rbp  |    |V7 i|V10i|V12a|I23a|V9 a|V1 a|    |    |
175.#84  I23  Use *  Keep  rbp  |    |V7 i|V10i|V12a|I23a|V9 a|V1 a|    |    |
176.#85  V11  Def    Alloc rbp  |    |V7 i|V10i|V12a|V11a|V9 a|V1 a|    |    |
180.#86  C24  Def    Alloc rdx  |    |V7 i|C24a|V12a|V11a|V9 a|V1 a|    |    |
181.#87  C24  Use *  Keep  rdx  |    |V7 i|C24a|V12a|V11a|V9 a|V1 a|    |    |
182.#88  V10  Def    Restr rdx  |    |V7 i|V10i|V12a|V11a|V9 a|V1 a|    |    |
                     Alloc rdx  |    |V7 i|V10a|V12a|V11a|V9 a|V1 a|    |    |
186.#89  C25  Def    Alloc rcx  |    |C25a|V10a|V12a|V11a|V9 a|V1 a|    |    |
187.#90  C25  Use *  Keep  rcx  |    |C25a|V10a|V12a|V11a|V9 a|V1 a|    |    |
188.#91  V7   Def    Restr rcx  |    |V7 i|V10a|V12a|V11a|V9 a|V1 a|    |    |
                     Alloc rcx  |    |V7 a|V10a|V12a|V11a|V9 a|V1 a|    |    |
--------------------------------+----+----+----+----+----+----+----+----+----+
Loc RP#  Name Type  Action Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------+----+----+----+----+----+----+----+----+----+
189.#92  BB9  PredBB6           |    |V7 a|V10a|V12a|V11a|V9 a|V1 a|    |    |
195.#93  V7   Use *  Keep  rcx  |    |V7 a|V10a|V12a|V11a|V9 a|V1 a|    |    |
--------------------------------+----+----+----+----+----+----+----+----+----+
Loc RP#  Name Type  Action Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------+----+----+----+----+----+----+----+----+----+
199.#94  BB3  PredBB9           |    |    |V10a|V12a|V11a|V9 a|V1 a|    |    |
205.#95  rcx  Fixd   Keep  rcx  |    |    |V10a|V12a|V11a|V9 a|V1 a|    |    |
205.#96  V1   Use    Copy  rcx  |    |V1 a|V10a|V12a|V11a|V9 a|V1 a|    |    |
206.#97  rcx  Fixd   Keep  rcx  |    |V1 a|V10a|V12a|V11a|V9 a|V1 a|    |    |
206.#98  I26  Def    Alloc rcx  |    |I26a|V10a|V12a|V11a|V9 a|V1 a|    |    |
209.#99  rdx  Fixd   Keep  rdx  |    |I26a|V10a|V12a|V11a|V9 a|V1 a|    |    |
209.#100 V10  Use *  Keep  rdx  |    |I26a|V10a|V12a|V11a|V9 a|V1 a|    |    |
210.#101 rdx  Fixd   Keep  rdx  |    |I26a|    |V12a|V11a|V9 a|V1 a|    |    |
210.#102 I27  Def    Alloc rdx  |    |I26a|I27a|V12a|V11a|V9 a|V1 a|    |    |
211.#103 rcx  Fixd   Keep  rcx  |    |I26a|I27a|V12a|V11a|V9 a|V1 a|    |    |
211.#104 I26  Use *  Keep  rcx  |    |I26a|I27a|V12a|V11a|V9 a|V1 a|    |    |
211.#105 rdx  Fixd   Keep  rdx  |    |I26a|I27a|V12a|V11a|V9 a|V1 a|    |    |
211.#106 I27  Use *  Keep  rdx  |    |I26a|I27a|V12a|V11a|V9 a|V1 a|    |    |
212.#107 rax  Kill   Keep  rax  |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
212.#108 rcx  Kill   Keep  rcx  |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
212.#109 rdx  Kill   Keep  rdx  |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
212.#110 r8   Kill   Keep  r8   |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
212.#111 r9   Kill   Keep  r9   |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
212.#112 r10  Kill   Keep  r10  |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
212.#113 r11  Kill   Keep  r11  |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
213.#114 V9   ExpU   Keep  NA   |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
213.#115 V11  ExpU   Keep  NA   |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
213.#116 V12  ExpU   Keep  NA   |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
--------------------------------+----+----+----+----+----+----+----+----+----+
Loc RP#  Name Type  Action Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------+----+----+----+----+----+----+----+----+----+
213.#117 BB10 PredBB9           |    |    |    |    |    |    |V1 a|    |    |
219.#118 V1   Use *  Keep  rdi  |    |    |    |    |    |    |V1 a|    |    |
220.#119 I28  Def    Alloc rax  |I28a|    |    |    |    |    |    |    |    |
221.#120 rax  Fixd   Keep  rax  |I28a|    |    |    |    |    |    |    |    |
221.#121 I28  Use *  Keep  rax  |I28a|    |    |    |    |    |    |    |    |
--------------------------------+----+----+----+----+----+----+----+----+----+
Loc RP#  Name Type  Action Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------+----+----+----+----+----+----+----+----+----+
223.#122 BB11 PredBB7           |    |    |    |    |    |    |    |    |    |
228.#123 rax  Kill   Keep  rax  |    |    |    |    |    |    |    |    |    |
228.#124 rcx  Kill   Keep  rcx  |    |    |    |    |    |    |    |    |    |
228.#125 rdx  Kill   Keep  rdx  |    |    |    |    |    |    |    |    |    |
228.#126 r8   Kill   Keep  r8   |    |    |    |    |    |    |    |    |    |
228.#127 r9   Kill   Keep  r9   |    |    |    |    |    |    |    |    |    |
228.#128 r10  Kill   Keep  r10  |    |    |    |    |    |    |    |    |    |
228.#129 r11  Kill   Keep  r11  |    |    |    |    |    |    |    |    |    |
--------------------------------+----+----+----+----+----+----+----+----+----+
Loc RP#  Name Type  Action Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------+----+----+----+----+----+----+----+----+----+
229.#130 BB12 PredBB11          |    |    |    |    |    |    |    |    |    |
232.#131 rax  Kill   Keep  rax  |    |    |    |    |    |    |    |    |    |
232.#132 rcx  Kill   Keep  rcx  |    |    |    |    |    |    |    |    |    |
232.#133 rdx  Kill   Keep  rdx  |    |    |    |    |    |    |    |    |    |
232.#134 r8   Kill   Keep  r8   |    |    |    |    |    |    |    |    |    |
232.#135 r9   Kill   Keep  r9   |    |    |    |    |    |    |    |    |    |
232.#136 r10  Kill   Keep  r10  |    |    |    |    |    |    |    |    |    |
232.#137 r11  Kill   Keep  r11  |    |    |    |    |    |    |    |    |    |

------------
REFPOSITIONS AFTER ALLOCATION: 
------------
<RefPosition #0   @0   RefTypeParamDef <Ivl:0 V00>  BB00 regmask=[rsi] minReg=1 regOptional>
<RefPosition #1   @1   RefTypeBB  BB01 regmask=[] minReg=1>
<RefPosition #2   @6   RefTypeDef <Ivl:12> CNS_INT BB01 regmask=[rcx] minReg=1>
<RefPosition #3   @7   RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #4   @7   RefTypeUse <Ivl:12>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #5   @8   RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #6   @8   RefTypeDef <Ivl:13> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #7   @9   RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #8   @9   RefTypeUse <Ivl:13>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #9   @10  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #10  @10  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #11  @10  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #12  @10  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #13  @10  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #14  @10  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #15  @10  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #16  @10  RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1>
<RefPosition #17  @10  RefTypeDef <Ivl:14> CALL BB01 regmask=[rax] minReg=1 fixed>
<RefPosition #18  @11  RefTypeUse <Ivl:14>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #19  @12  RefTypeDef <Ivl:2 V05> STORE_LCL_VAR BB01 regmask=[rdi] minReg=1>
<RefPosition #20  @15  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #21  @15  RefTypeUse <Ivl:2 V05> LCL_VAR BB01 regmask=[rcx] minReg=1 copy fixed>
<RefPosition #22  @16  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #23  @16  RefTypeDef <Ivl:15> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed>
<RefPosition #24  @17  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1>
<RefPosition #25  @17  RefTypeUse <Ivl:15>  BB01 regmask=[rcx] minReg=1 last fixed>
<RefPosition #26  @18  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last>
<RefPosition #27  @18  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last>
<RefPosition #28  @18  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last>
<RefPosition #29  @18  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last>
<RefPosition #30  @18  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last>
<RefPosition #31  @18  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last>
<RefPosition #32  @18  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last>
<RefPosition #33  @23  RefTypeUse <Ivl:2 V05> LCL_VAR BB01 regmask=[rdi] minReg=1 last>
<RefPosition #34  @24  RefTypeDef <Ivl:1 V01> STORE_LCL_VAR BB01 regmask=[rdi] minReg=1>
<RefPosition #35  @29  RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[rsi] minReg=1 last>
<RefPosition #36  @30  RefTypeDef <Ivl:9 V13> STORE_LCL_VAR BB01 regmask=[rsi] minReg=1>
<RefPosition #37  @39  RefTypeUse <Ivl:9 V13> LCL_VAR BB01 regmask=[rsi] minReg=1>
<RefPosition #38  @40  RefTypeDef <Ivl:16> IND BB01 regmask=[rbx] minReg=1>
<RefPosition #39  @41  RefTypeUse <Ivl:16>  BB01 regmask=[rbx] minReg=1 last>
<RefPosition #40  @42  RefTypeDef <Ivl:10 V16> STORE_LCL_VAR BB01 regmask=[rbx] minReg=1>
<RefPosition #41  @45  RefTypeUse <Ivl:9 V13> LCL_VAR BB01 regmask=[rsi] minReg=1 last>
<RefPosition #42  @46  RefTypeDef <Ivl:5 V09> STORE_LCL_VAR BB01 regmask=[rsi] minReg=1>
<RefPosition #43  @48  RefTypeDef <Ivl:17> CNS_INT BB01 regmask=[rbp] minReg=1>
<RefPosition #44  @49  RefTypeUse <Ivl:17>  BB01 regmask=[rbp] minReg=1 last>
<RefPosition #45  @50  RefTypeDef <Ivl:7 V11> STORE_LCL_VAR BB01 regmask=[rbp] minReg=1>
<RefPosition #46  @53  RefTypeUse <Ivl:10 V16> LCL_VAR BB01 regmask=[rbx] minReg=1 last>
<RefPosition #47  @54  RefTypeDef <Ivl:8 V12> STORE_LCL_VAR BB01 regmask=[rbx] minReg=1>
<RefPosition #48  @55  RefTypeBB  BB02 regmask=[] minReg=1>
<RefPosition #49  @57  RefTypeBB  BB04 regmask=[] minReg=1>
<RefPosition #50  @63  RefTypeUse <Ivl:5 V09> LCL_VAR BB04 regmask=[rsi] minReg=1>
<RefPosition #51  @64  RefTypeDef <Ivl:4 V08> STORE_LCL_VAR BB04 regmask=[rcx] minReg=1>
<RefPosition #52  @75  RefTypeUse <Ivl:8 V12> LCL_VAR BB04 regmask=[rbx] minReg=1>
<RefPosition #53  @75  RefTypeUse <Ivl:4 V08> LCL_VAR BB04 regmask=[rcx] minReg=1 last>
<RefPosition #54  @79  RefTypeBB  BB05 regmask=[] minReg=1>
<RefPosition #55  @91  RefTypeUse <Ivl:7 V11> LCL_VAR BB05 regmask=[rbp] minReg=1>
<RefPosition #56  @91  RefTypeUse <Ivl:5 V09> LCL_VAR BB05 regmask=[rsi] minReg=1>
<RefPosition #57  @95  RefTypeBB  BB06 regmask=[] minReg=1>
<RefPosition #58  @103 RefTypeUse <Ivl:5 V09> LCL_VAR BB06 regmask=[rsi] minReg=1>
<RefPosition #59  @104 RefTypeDef <Ivl:18> IND BB06 regmask=[rcx] minReg=1>
<RefPosition #60  @105 RefTypeUse <Ivl:18>  BB06 regmask=[rcx] minReg=1 last>
<RefPosition #61  @106 RefTypeDef <Ivl:11 V17> STORE_LCL_VAR BB06 regmask=[rcx] minReg=1>
<RefPosition #62  @115 RefTypeUse <Ivl:7 V11> LCL_VAR BB06 regmask=[rbp] minReg=1>
<RefPosition #63  @115 RefTypeUse <Ivl:11 V17> LCL_VAR BB06 regmask=[rcx] minReg=1>
<RefPosition #64  @121 RefTypeUse <Ivl:7 V11> LCL_VAR BB06 regmask=[rbp] minReg=1>
<RefPosition #65  @122 RefTypeDef <Ivl:19> CAST BB06 regmask=[rdx] minReg=1>
<RefPosition #66  @125 RefTypeUse <Ivl:11 V17> LCL_VAR BB06 regmask=[rcx] minReg=1 last>
<RefPosition #67  @125 RefTypeUse <Ivl:19>  BB06 regmask=[rdx] minReg=1 last>
<RefPosition #68  @126 RefTypeDef <Ivl:20> IND BB06 regmask=[rdx] minReg=1>
<RefPosition #69  @127 RefTypeUse <Ivl:20>  BB06 regmask=[rdx] minReg=1 last>
<RefPosition #70  @128 RefTypeDef <Ivl:6 V10> STORE_LCL_VAR BB06 regmask=[rdx] minReg=1>
<RefPosition #71  @135 RefTypeUse <Ivl:7 V11> LCL_VAR BB06 regmask=[rbp] minReg=1 last>
<RefPosition #72  @136 RefTypeDef <Ivl:21> ADD BB06 regmask=[rbp] minReg=1>
<RefPosition #73  @137 RefTypeUse <Ivl:21>  BB06 regmask=[rbp] minReg=1 last>
<RefPosition #74  @138 RefTypeDef <Ivl:7 V11> STORE_LCL_VAR BB06 regmask=[rbp] minReg=1>
<RefPosition #75  @144 RefTypeDef <Ivl:3 V07> STORE_LCL_VAR BB06 regmask=[rcx] minReg=1>
<RefPosition #76  @145 RefTypeBB  BB07 regmask=[] minReg=1>
<RefPosition #77  @157 RefTypeUse <Ivl:8 V12> LCL_VAR BB07 regmask=[rbx] minReg=1>
<RefPosition #78  @157 RefTypeUse <Ivl:5 V09> LCL_VAR BB07 regmask=[rsi] minReg=1>
<RefPosition #79  @161 RefTypeBB  BB08 regmask=[] minReg=1>
<RefPosition #80  @169 RefTypeUse <Ivl:5 V09> LCL_VAR BB08 regmask=[rsi] minReg=1>
<RefPosition #81  @170 RefTypeDef <Ivl:22> IND BB08 regmask=[rbp] minReg=1>
<RefPosition #82  @173 RefTypeUse <Ivl:22>  BB08 regmask=[rbp] minReg=1 last>
<RefPosition #83  @174 RefTypeDef <Ivl:23> ADD BB08 regmask=[rbp] minReg=1>
<RefPosition #84  @175 RefTypeUse <Ivl:23>  BB08 regmask=[rbp] minReg=1 last>
<RefPosition #85  @176 RefTypeDef <Ivl:7 V11> STORE_LCL_VAR BB08 regmask=[rbp] minReg=1>
<RefPosition #86  @180 RefTypeDef <Ivl:24> CNS_INT BB08 regmask=[rdx] minReg=1>
<RefPosition #87  @181 RefTypeUse <Ivl:24>  BB08 regmask=[rdx] minReg=1 last>
<RefPosition #88  @182 RefTypeDef <Ivl:6 V10> STORE_LCL_VAR BB08 regmask=[rdx] minReg=1>
<RefPosition #89  @186 RefTypeDef <Ivl:25> CNS_INT BB08 regmask=[rcx] minReg=1>
<RefPosition #90  @187 RefTypeUse <Ivl:25>  BB08 regmask=[rcx] minReg=1 last>
<RefPosition #91  @188 RefTypeDef <Ivl:3 V07> STORE_LCL_VAR BB08 regmask=[rcx] minReg=1>
<RefPosition #92  @189 RefTypeBB  BB09 regmask=[] minReg=1>
<RefPosition #93  @195 RefTypeUse <Ivl:3 V07> LCL_VAR BB09 regmask=[rcx] minReg=1 last>
<RefPosition #94  @199 RefTypeBB  BB03 regmask=[] minReg=1>
<RefPosition #95  @205 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1>
<RefPosition #96  @205 RefTypeUse <Ivl:1 V01> LCL_VAR BB03 regmask=[rcx] minReg=1 copy fixed>
<RefPosition #97  @206 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1>
<RefPosition #98  @206 RefTypeDef <Ivl:26> PUTARG_REG BB03 regmask=[rcx] minReg=1 fixed>
<RefPosition #99  @209 RefTypeFixedReg <Reg:rdx>  BB03 regmask=[rdx] minReg=1>
<RefPosition #100 @209 RefTypeUse <Ivl:6 V10> LCL_VAR BB03 regmask=[rdx] minReg=1 last fixed>
<RefPosition #101 @210 RefTypeFixedReg <Reg:rdx>  BB03 regmask=[rdx] minReg=1>
<RefPosition #102 @210 RefTypeDef <Ivl:27> PUTARG_REG BB03 regmask=[rdx] minReg=1 fixed>
<RefPosition #103 @211 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1>
<RefPosition #104 @211 RefTypeUse <Ivl:26>  BB03 regmask=[rcx] minReg=1 last fixed>
<RefPosition #105 @211 RefTypeFixedReg <Reg:rdx>  BB03 regmask=[rdx] minReg=1>
<RefPosition #106 @211 RefTypeUse <Ivl:27>  BB03 regmask=[rdx] minReg=1 last fixed>
<RefPosition #107 @212 RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 last>
<RefPosition #108 @212 RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 last>
<RefPosition #109 @212 RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 last>
<RefPosition #110 @212 RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 last>
<RefPosition #111 @212 RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 last>
<RefPosition #112 @212 RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 last>
<RefPosition #113 @212 RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 last>
<RefPosition #114 @213 RefTypeExpUse <Ivl:5 V09>  BB03 regmask=[allInt] minReg=1 regOptional>
<RefPosition #115 @213 RefTypeExpUse <Ivl:7 V11>  BB03 regmask=[allInt] minReg=1 regOptional>
<RefPosition #116 @213 RefTypeExpUse <Ivl:8 V12>  BB03 regmask=[allInt] minReg=1 regOptional>
<RefPosition #117 @213 RefTypeBB  BB10 regmask=[] minReg=1>
<RefPosition #118 @219 RefTypeUse <Ivl:1 V01> LCL_VAR BB10 regmask=[rdi] minReg=1 last>
<RefPosition #119 @220 RefTypeDef <Ivl:28> IND BB10 regmask=[rax] minReg=1>
<RefPosition #120 @221 RefTypeFixedReg <Reg:rax>  BB10 regmask=[rax] minReg=1>
<RefPosition #121 @221 RefTypeUse <Ivl:28>  BB10 regmask=[rax] minReg=1 last fixed>
<RefPosition #122 @223 RefTypeBB  BB11 regmask=[] minReg=1>
<RefPosition #123 @228 RefTypeKill <Reg:rax>  BB11 regmask=[rax] minReg=1 last>
<RefPosition #124 @228 RefTypeKill <Reg:rcx>  BB11 regmask=[rcx] minReg=1 last>
<RefPosition #125 @228 RefTypeKill <Reg:rdx>  BB11 regmask=[rdx] minReg=1 last>
<RefPosition #126 @228 RefTypeKill <Reg:r8 >  BB11 regmask=[r8] minReg=1 last>
<RefPosition #127 @228 RefTypeKill <Reg:r9 >  BB11 regmask=[r9] minReg=1 last>
<RefPosition #128 @228 RefTypeKill <Reg:r10>  BB11 regmask=[r10] minReg=1 last>
<RefPosition #129 @228 RefTypeKill <Reg:r11>  BB11 regmask=[r11] minReg=1 last>
<RefPosition #130 @229 RefTypeBB  BB12 regmask=[] minReg=1>
<RefPosition #131 @232 RefTypeKill <Reg:rax>  BB12 regmask=[rax] minReg=1 last>
<RefPosition #132 @232 RefTypeKill <Reg:rcx>  BB12 regmask=[rcx] minReg=1 last>
<RefPosition #133 @232 RefTypeKill <Reg:rdx>  BB12 regmask=[rdx] minReg=1 last>
<RefPosition #134 @232 RefTypeKill <Reg:r8 >  BB12 regmask=[r8] minReg=1 last>
<RefPosition #135 @232 RefTypeKill <Reg:r9 >  BB12 regmask=[r9] minReg=1 last>
<RefPosition #136 @232 RefTypeKill <Reg:r10>  BB12 regmask=[r10] minReg=1 last>
<RefPosition #137 @232 RefTypeKill <Reg:r11>  BB12 regmask=[r11] minReg=1 last>

VAR REFPOSITIONS AFTER ALLOCATION
--- V00  (Interval 0)
<RefPosition #0   @0   RefTypeParamDef <Ivl:0 V00>  BB00 regmask=[rsi] minReg=1 regOptional>
<RefPosition #35  @29  RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[rsi] minReg=1 last>
--- V01  (Interval 1)
<RefPosition #34  @24  RefTypeDef <Ivl:1 V01> STORE_LCL_VAR BB01 regmask=[rdi] minReg=1>
<RefPosition #96  @205 RefTypeUse <Ivl:1 V01> LCL_VAR BB03 regmask=[rcx] minReg=1 copy fixed>
<RefPosition #118 @219 RefTypeUse <Ivl:1 V01> LCL_VAR BB10 regmask=[rdi] minReg=1 last>
--- V02
--- V03
--- V04
--- V05  (Interval 2)
<RefPosition #19  @12  RefTypeDef <Ivl:2 V05> STORE_LCL_VAR BB01 regmask=[rdi] minReg=1>
<RefPosition #21  @15  RefTypeUse <Ivl:2 V05> LCL_VAR BB01 regmask=[rcx] minReg=1 copy fixed>
<RefPosition #33  @23  RefTypeUse <Ivl:2 V05> LCL_VAR BB01 regmask=[rdi] minReg=1 last>
--- V06
--- V07  (Interval 3)
<RefPosition #75  @144 RefTypeDef <Ivl:3 V07> STORE_LCL_VAR BB06 regmask=[rcx] minReg=1>
<RefPosition #91  @188 RefTypeDef <Ivl:3 V07> STORE_LCL_VAR BB08 regmask=[rcx] minReg=1>
<RefPosition #93  @195 RefTypeUse <Ivl:3 V07> LCL_VAR BB09 regmask=[rcx] minReg=1 last>
--- V08  (Interval 4)
<RefPosition #51  @64  RefTypeDef <Ivl:4 V08> STORE_LCL_VAR BB04 regmask=[rcx] minReg=1>
<RefPosition #53  @75  RefTypeUse <Ivl:4 V08> LCL_VAR BB04 regmask=[rcx] minReg=1 last>
--- V09  (Interval 5)
<RefPosition #42  @46  RefTypeDef <Ivl:5 V09> STORE_LCL_VAR BB01 regmask=[rsi] minReg=1>
<RefPosition #50  @63  RefTypeUse <Ivl:5 V09> LCL_VAR BB04 regmask=[rsi] minReg=1>
<RefPosition #56  @91  RefTypeUse <Ivl:5 V09> LCL_VAR BB05 regmask=[rsi] minReg=1>
<RefPosition #58  @103 RefTypeUse <Ivl:5 V09> LCL_VAR BB06 regmask=[rsi] minReg=1>
<RefPosition #78  @157 RefTypeUse <Ivl:5 V09> LCL_VAR BB07 regmask=[rsi] minReg=1>
<RefPosition #80  @169 RefTypeUse <Ivl:5 V09> LCL_VAR BB08 regmask=[rsi] minReg=1>
<RefPosition #114 @213 RefTypeExpUse <Ivl:5 V09>  BB03 regmask=[allInt] minReg=1 regOptional>
--- V10  (Interval 6)
<RefPosition #70  @128 RefTypeDef <Ivl:6 V10> STORE_LCL_VAR BB06 regmask=[rdx] minReg=1>
<RefPosition #88  @182 RefTypeDef <Ivl:6 V10> STORE_LCL_VAR BB08 regmask=[rdx] minReg=1>
<RefPosition #100 @209 RefTypeUse <Ivl:6 V10> LCL_VAR BB03 regmask=[rdx] minReg=1 last fixed>
--- V11  (Interval 7)
<RefPosition #45  @50  RefTypeDef <Ivl:7 V11> STORE_LCL_VAR BB01 regmask=[rbp] minReg=1>
<RefPosition #55  @91  RefTypeUse <Ivl:7 V11> LCL_VAR BB05 regmask=[rbp] minReg=1>
<RefPosition #62  @115 RefTypeUse <Ivl:7 V11> LCL_VAR BB06 regmask=[rbp] minReg=1>
<RefPosition #64  @121 RefTypeUse <Ivl:7 V11> LCL_VAR BB06 regmask=[rbp] minReg=1>
<RefPosition #71  @135 RefTypeUse <Ivl:7 V11> LCL_VAR BB06 regmask=[rbp] minReg=1 last>
<RefPosition #74  @138 RefTypeDef <Ivl:7 V11> STORE_LCL_VAR BB06 regmask=[rbp] minReg=1>
<RefPosition #85  @176 RefTypeDef <Ivl:7 V11> STORE_LCL_VAR BB08 regmask=[rbp] minReg=1>
<RefPosition #115 @213 RefTypeExpUse <Ivl:7 V11>  BB03 regmask=[allInt] minReg=1 regOptional>
--- V12  (Interval 8)
<RefPosition #47  @54  RefTypeDef <Ivl:8 V12> STORE_LCL_VAR BB01 regmask=[rbx] minReg=1>
<RefPosition #52  @75  RefTypeUse <Ivl:8 V12> LCL_VAR BB04 regmask=[rbx] minReg=1>
<RefPosition #77  @157 RefTypeUse <Ivl:8 V12> LCL_VAR BB07 regmask=[rbx] minReg=1>
<RefPosition #116 @213 RefTypeExpUse <Ivl:8 V12>  BB03 regmask=[allInt] minReg=1 regOptional>
--- V13  (Interval 9)
<RefPosition #36  @30  RefTypeDef <Ivl:9 V13> STORE_LCL_VAR BB01 regmask=[rsi] minReg=1>
<RefPosition #37  @39  RefTypeUse <Ivl:9 V13> LCL_VAR BB01 regmask=[rsi] minReg=1>
<RefPosition #41  @45  RefTypeUse <Ivl:9 V13> LCL_VAR BB01 regmask=[rsi] minReg=1 last>
--- V14
--- V15
--- V16  (Interval 10)
<RefPosition #40  @42  RefTypeDef <Ivl:10 V16> STORE_LCL_VAR BB01 regmask=[rbx] minReg=1>
<RefPosition #46  @53  RefTypeUse <Ivl:10 V16> LCL_VAR BB01 regmask=[rbx] minReg=1 last>
--- V17  (Interval 11)
<RefPosition #61  @106 RefTypeDef <Ivl:11 V17> STORE_LCL_VAR BB06 regmask=[rcx] minReg=1>
<RefPosition #63  @115 RefTypeUse <Ivl:11 V17> LCL_VAR BB06 regmask=[rcx] minReg=1>
<RefPosition #66  @125 RefTypeUse <Ivl:11 V17> LCL_VAR BB06 regmask=[rcx] minReg=1 last>

Active intervals at end of allocation:

-----------------------
RESOLVING BB BOUNDARIES
-----------------------
Resolution Candidates: {V00 V01 V07 V09 V10 V11 V12}
Has Critical Edges

Prior to Resolution

BB01
use def in out
{V00}
{V01 V05 V09 V11 V12 V13 V15 V16}
{V00}
{V01 V09 V11 V12}
Var=Reg beg of BB01: V00=rsi 
Var=Reg end of BB01: V09=rsi V11=rbp V12=rbx V01=rdi 

BB02
use def in out
{}
{}
{V01 V09 V11 V12}
{V01 V09 V11 V12}
Var=Reg beg of BB02: V09=rsi V11=rbp V12=rbx V01=rdi 
Var=Reg end of BB02: V09=rsi V11=rbp V12=rbx V01=rdi 

BB03
use def in out
{V01 V10}
{}
{V01 V09 V10 V11 V12}
{V01 V09 V11 V12}
Var=Reg beg of BB03: V09=rsi V11=rbp V12=rbx V10=rdx V01=rdi 
Var=Reg end of BB03: V09=rsi V11=rbp V12=rbx V01=rdi 

BB04
use def in out
{V09 V12}
{V08}
{V01 V09 V11 V12}
{V01 V09 V11 V12}
Var=Reg beg of BB04: V09=rsi V11=rbp V12=rbx V01=rdi 
Var=Reg end of BB04: V09=rsi V11=rbp V12=rbx V01=rdi 

BB05
use def in out
{V09 V11}
{}
{V01 V09 V11 V12}
{V01 V09 V11 V12}
Var=Reg beg of BB05: V09=rsi V11=rbp V12=rbx V01=rdi 
Var=Reg end of BB05: V09=rsi V11=rbp V12=rbx V01=rdi 

BB06
use def in out
{V09 V11}
{V07 V10 V11 V17}
{V01 V09 V11 V12}
{V01 V07 V09 V10 V11 V12}
Var=Reg beg of BB06: V09=rsi V11=rbp V12=rbx V01=rdi 
Var=Reg end of BB06: V09=rsi V11=rbp V07=rcx V12=rbx V10=rdx V01=rdi 

BB07
use def in out
{V09 V12}
{}
{V01 V09 V12}
{V01 V09 V12}
Var=Reg beg of BB07: V09=rsi V12=rbx V01=rdi 
Var=Reg end of BB07: V09=rsi V12=rbx V01=rdi 

BB08
use def in out
{V09}
{V07 V10 V11}
{V01 V09 V12}
{V01 V07 V09 V10 V11 V12}
Var=Reg beg of BB08: V09=rsi V12=rbx V01=rdi 
Var=Reg end of BB08: V09=rsi V11=rbp V07=rcx V12=rbx V10=rdx V01=rdi 

BB09
use def in out
{V07}
{}
{V01 V07 V09 V10 V11 V12}
{V01 V09 V10 V11 V12}
Var=Reg beg of BB09: V09=rsi V11=rbp V07=rcx V12=rbx V10=rdx V01=rdi 
Var=Reg end of BB09: V09=rsi V11=rbp V12=rbx V10=rdx V01=rdi 

BB10
use def in out
{V01}
{}
{V01}
{}
Var=Reg beg of BB10: V01=rdi 
Var=Reg end of BB10: none

BB11
use def in out
{}
{}
{}
{}
Var=Reg beg of BB11: none
Var=Reg end of BB11: none

BB12
use def in out
{}
{}
{}
{}
Var=Reg beg of BB12: none
Var=Reg end of BB12: none


RESOLVING EDGES
  Set V00 argument initial register to rsi
Trees after linear scan register allocator (LSRA)

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i label target hascall gcsafe newobj nullcheck LIR 
BB02 [0001]  1       BB01                  1       [00D..00F)-> BB04 (always)                     keep i label gcsafe LIR 
BB03 [0002]  1       BB09                  2     0 [00F..01E)                                     i Loop label target hascall gcsafe bwd bwd-target LIR 
BB04 [0003]  2       BB02,BB03             8     0 [01E..027)-> BB07 ( cond )                     i label target gcsafe bwd LIR 
BB05 [0013]  1       BB04                  1     0 [01E..01F)-> BB07 ( cond )                     i gcsafe bwd LIR 
BB06 [0014]  1       BB05                  2     0 [01E..01F)-> BB09 (always)                     i gcsafe idxlen bwd LIR 
BB07 [0015]  2       BB04,BB05             2     0 [01E..01F)-> BB11 ( cond )                     i label target gcsafe bwd LIR 
BB08 [0019]  1       BB07                  2     0 [01E..01F)                                     i label target gcsafe bwd LIR 
BB09 [0016]  2       BB06,BB08             8     0 [???..???)-> BB03 ( cond )                     internal label target gcsafe bwd LIR 
BB10 [0004]  1       BB09                  1       [027..03E)        (return)                     i gcsafe LIR 
BB11 [0018]  1       BB07                  0       [01E..01F)        (throw )                     i rare label target hascall gcsafe bwd LIR 
BB12 [0023]  0                             0       [???..???)        (throw )                     keep i internal rare label target LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..00D), preds={} succs={BB02}
N003 (???,???) [000239] ------------                 IL_OFFSET void   IL offset: 0x0 REG NA
N005 (  2, 10) [000000] H-----------         t0 =    CNS_INT(h) long   0xd1ffab1e method REG rcx $100
                                                  /--*  t0     long   
N007 (???,???) [000259] ------------       t259 = *  PUTARG_REG long   REG rcx
                                                  /--*  t259   long   arg0 in rcx
N009 ( 16, 16) [000001] --C---------         t1 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST REG rax $180
                                                  /--*  t1     ref    
N011 ( 16, 16) [000003] DA----------              *  STORE_LCL_VAR ref    V05 tmp1         d:2 rdi REG rdi
N013 (  1,  1) [000004] ------------         t4 =    LCL_VAR   ref    V05 tmp1         u:2 rdi REG rdi $180
                                                  /--*  t4     ref    
N015 (???,???) [000260] ------------       t260 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t260   ref    this in rcx
N017 ( 15,  8) [000005] --CXG-------              *  CALL      void   Batcher..ctor REG NA $VN.Void
N019 (???,???) [000240] ------------                 IL_OFFSET void   IL offset: 0x5 REG NA
N021 (  1,  1) [000006] ------------         t6 =    LCL_VAR   ref    V05 tmp1         u:2 rdi (last use) REG rdi $180
                                                  /--*  t6     ref    
N023 (  1,  3) [000008] DA----------              *  STORE_LCL_VAR ref    V01 loc0         d:2 rdi REG rdi
N025 (???,???) [000241] ------------                 IL_OFFSET void   IL offset: 0x6 REG NA
N027 (  1,  1) [000009] ------------         t9 =    LCL_VAR   ref    V00 arg0         u:1 rsi (last use) REG rsi $80
                                                  /--*  t9     ref    
N029 (  5,  4) [000055] DA----------              *  STORE_LCL_VAR ref    V13 tmp9         d:2 rsi REG rsi
N031 (???,???) [000242] ------------                 IL_OFFSET void   IL offset: 0x6 REG NA
N033 (???,???) [000243] ------------                 IL_OFFSET void   IL offset: 0x6 REG NA
N035 (  1,  1) [000063] ------------        t63 =    LCL_VAR   ref    V13 tmp9         u:2 rsi REG rsi $80
                                                  /--*  t63    ref    
N037 (  2,  2) [000171] -c----------       t171 = *  LEA(b+20) byref  REG NA
                                                  /--*  t171   byref  
N039 (  4,  4) [000064] ---XG-------        t64 = *  IND       int    REG rbx <l:$283, c:$282>
                                                  /--*  t64    int    
N041 (  8,  7) [000066] DA-XG-------              *  STORE_LCL_VAR int    V16 tmp12        d:2 rbx REG rbx
N043 (  3,  2) [000173] ------------       t173 =    LCL_VAR   ref    V13 tmp9         u:2 rsi (last use) REG rsi $80
                                                  /--*  t173   ref    
N045 (  3,  3) [000174] DA----------              *  STORE_LCL_VAR ref    V09 tmp5         d:2 rsi REG rsi
N047 (  1,  1) [000237] ------------       t237 =    CNS_INT   int    0 REG rbp $40
                                                  /--*  t237   int    
N049 (  1,  3) [000181] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:2 rbp REG rbp
N051 (  3,  2) [000184] ------------       t184 =    LCL_VAR   int    V16 tmp12        u:2 rbx (last use) REG rbx <l:$281, c:$1c1>
                                                  /--*  t184   int    
N053 (  3,  3) [000185] DA----------              *  STORE_LCL_VAR int    V12 tmp8         d:2 rbx REG rbx

------------ BB02 [00D..00F) -> BB04 (always), preds={BB01} succs={BB04}

------------ BB03 [00F..01E), preds={BB09} succs={BB04}
N201 (???,???) [000244] ------------                 IL_OFFSET void   IL offset: 0x17 REG NA
N203 (  1,  1) [000029] ------------        t29 =    LCL_VAR   ref    V01 loc0         u:2 rdi REG rdi $180
                                                  /--*  t29    ref    
N205 (???,???) [000261] ------------       t261 = *  PUTARG_REG ref    REG rcx
N207 (  1,  1) [000030] ------------        t30 =    LCL_VAR   ref    V10 tmp6         u:2 rdx (last use) REG rdx $480
                                                  /--*  t30    ref    
N209 (???,???) [000262] ------------       t262 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t261   ref    this in rcx
                                                  +--*  t262   ref    arg1 in rdx
N211 ( 16, 10) [000031] --CXG-------              *  CALL      void   Batcher.Push REG NA $VN.Void

------------ BB04 [01E..027) -> BB07 (cond), preds={BB02,BB03} succs={BB05,BB07}
N001 (  0,  0) [000230] ------------       t230 =    PHI_ARG   int    V11 tmp7         u:4 rbp
N002 (  0,  0) [000229] ------------       t229 =    PHI_ARG   int    V11 tmp7         u:2 rbp $40
                                                  /--*  t230   int    
                                                  +--*  t229   int    
N003 (  0,  0) [000221] ------------       t221 = *  PHI       int   
                                                  /--*  t221   int    
N005 (  0,  0) [000222] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:3 rbp
N059 (???,???) [000245] ------------                 IL_OFFSET void   IL offset: 0x1e REG NA
N061 (  1,  1) [000081] ------------        t81 =    LCL_VAR   ref    V09 tmp5         u:2 rsi REG rsi $80
                                                  /--*  t81    ref    
N063 (  1,  3) [000083] DA----------              *  STORE_LCL_VAR ref    V08 tmp4         d:2 rcx REG rcx
N065 (???,???) [000246] ------------                 IL_OFFSET void   IL offset: 0x1e REG NA
N067 (  1,  1) [000086] ------------        t86 =    LCL_VAR   int    V12 tmp8         u:2 rbx REG rbx <l:$281, c:$1c1>
N069 (  1,  1) [000087] ------------        t87 =    LCL_VAR   ref    V08 tmp4         u:2 rcx (last use) REG rcx $80
                                                  /--*  t87    ref    
N071 (  2,  2) [000190] -c----------       t190 = *  LEA(b+20) byref  REG NA
                                                  /--*  t190   byref  
N073 (  4,  4) [000088] nc--GO------        t88 = *  IND       int    REG NA <l:$288, c:$287>
                                                  /--*  t86    int    
                                                  +--*  t88    int    
N075 (  6,  6) [000089] N---GO-N-U--              *  NE        void   REG NA <l:$28c, c:$28b>
N077 (  8,  8) [000090] ----GO------              *  JTRUE     void   REG NA

------------ BB05 [01E..01F) -> BB07 (cond), preds={BB04} succs={BB06,BB07}
N081 (???,???) [000247] ------------                 IL_OFFSET void   IL offset: 0x1e REG NA
N083 (  1,  1) [000102] ------------       t102 =    LCL_VAR   int    V11 tmp7         u:3 rbp REG rbp $300
N085 (  1,  1) [000103] ------------       t103 =    LCL_VAR   ref    V09 tmp5         u:2 rsi REG rsi $80
                                                  /--*  t103   ref    
N087 (  2,  2) [000192] -c----------       t192 = *  LEA(b+16) byref  REG NA
                                                  /--*  t192   byref  
N089 (  4,  4) [000104] nc--GO------       t104 = *  IND       int    REG NA <l:$290, c:$28f>
                                                  /--*  t102   int    
                                                  +--*  t104   int    
N091 (  6,  6) [000105] N---GO-N-U--              *  GE        void   REG NA <l:$294, c:$293>
N093 (  8,  8) [000106] ----GO------              *  JTRUE     void   REG NA

------------ BB06 [01E..01F) -> BB09 (always), preds={BB05} succs={BB09}
N097 (???,???) [000248] ------------                 IL_OFFSET void   IL offset: 0x1e REG NA
N099 (  1,  1) [000109] ------------       t109 =    LCL_VAR   ref    V09 tmp5         u:2 rsi REG rsi $80
                                                  /--*  t109   ref    
N101 (  2,  2) [000209] -c----------       t209 = *  LEA(b+8)  byref  REG NA
                                                  /--*  t209   byref  
N103 (  4,  4) [000110] n---GO------       t110 = *  IND       ref    REG rcx <l:$185, c:$184>
                                                  /--*  t110   ref    
N105 (  4,  4) [000194] DA--GO------              *  STORE_LCL_VAR ref    V17 tmp13        d:2 rcx REG rcx
N107 (  1,  1) [000113] ------------       t113 =    LCL_VAR   int    V11 tmp7         u:3 rbp REG rbp $300
N109 (  1,  1) [000195] ------------       t195 =    LCL_VAR   ref    V17 tmp13        u:2 rcx REG rcx <l:$183, c:$343>
                                                  /--*  t195   ref    
N111 (???,???) [000257] -c----------       t257 = *  LEA(b+8)  ref    REG NA
                                                  /--*  t257   ref    
N113 (  3,  3) [000198] -c-X--------       t198 = *  IND       int    REG NA <l:$29e, c:$29d>
                                                  /--*  t113   int    
                                                  +--*  t198   int    
N115 (  8, 11) [000199] ---X--------              *  ARR_BOUNDS_CHECK_Rng void   REG NA <l:$191, c:$190>
N117 (  1,  1) [000196] ------------       t196 =    LCL_VAR   ref    V17 tmp13        u:2 rcx (last use) REG rcx <l:$183, c:$343>
N119 (  1,  1) [000197] ------------       t197 =    LCL_VAR   int    V11 tmp7         u:3 rbp REG rbp $300
                                                  /--*  t197   int    
N121 (  2,  3) [000200] ------------       t200 = *  CAST      long <- int REG rdx $400
                                                  /--*  t196   ref    
                                                  +--*  t200   long   
N123 (  5,  6) [000205] -c----------       t205 = *  LEA(b+(i*8)+16) byref  REG NA
                                                  /--*  t205   byref  
N125 (  6,  7) [000114] a---G-------       t114 = *  IND       ref    REG rdx <l:$194, c:$345>
                                                  /--*  t114   ref    
N127 ( 18, 22) [000116] DA-XGO------              *  STORE_LCL_VAR ref    V10 tmp6         d:4 rdx REG rdx
N129 (???,???) [000249] ------------                 IL_OFFSET void   IL offset: 0x1e REG NA
N131 (  1,  1) [000121] ------------       t121 =    LCL_VAR   int    V11 tmp7         u:3 rbp (last use) REG rbp $300
N133 (  1,  1) [000122] -c----------       t122 =    CNS_INT   int    1 REG NA $44
                                                  /--*  t121   int    
                                                  +--*  t122   int    
N135 (  3,  3) [000123] ------------       t123 = *  ADD       int    REG rbp $29f
                                                  /--*  t123   int    
N137 (  3,  3) [000125] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:6 rbp REG rbp
N139 (???,???) [000250] ------------                 IL_OFFSET void   IL offset: 0x1e REG NA
N141 (  1,  1) [000126] -c----------       t126 =    CNS_INT   int    1 REG NA $44
                                                  /--*  t126   int    
N143 (  1,  3) [000129] DA----------              *  STORE_LCL_VAR int    V07 tmp3         d:4 rcx REG rcx

------------ BB07 [01E..01F) -> BB11 (cond), preds={BB04,BB05} succs={BB08,BB11}
N147 (???,???) [000251] ------------                 IL_OFFSET void   IL offset: 0x1e REG NA
N149 (  1,  1) [000137] ------------       t137 =    LCL_VAR   int    V12 tmp8         u:2 rbx REG rbx <l:$281, c:$1c1>
N151 (  1,  1) [000140] ------------       t140 =    LCL_VAR   ref    V09 tmp5         u:2 rsi REG rsi $80
                                                  /--*  t140   ref    
N153 (  2,  2) [000211] -c----------       t211 = *  LEA(b+20) byref  REG NA
                                                  /--*  t211   byref  
N155 (  4,  4) [000141] nc--GO------       t141 = *  IND       int    REG NA <l:$288, c:$295>
                                                  /--*  t137   int    
                                                  +--*  t141   int    
N157 (  6,  6) [000142] J---GO-N----              *  NE        void   REG NA <l:$28c, c:$297>
N159 (  8,  8) [000143] ----GO------              *  JTRUE     void   REG NA

------------ BB08 [01E..01F), preds={BB07} succs={BB09}
N163 (???,???) [000252] ------------                 IL_OFFSET void   IL offset: 0x1e REG NA
N165 (  1,  1) [000148] ------------       t148 =    LCL_VAR   ref    V09 tmp5         u:2 rsi REG rsi $80
                                                  /--*  t148   ref    
N167 (  2,  2) [000213] -c----------       t213 = *  LEA(b+16) byref  REG NA
                                                  /--*  t213   byref  
N169 (  4,  4) [000149] n---GO------       t149 = *  IND       int    REG rbp <l:$290, c:$298>
N171 (  1,  1) [000150] -c----------       t150 =    CNS_INT   int    1 REG NA $44
                                                  /--*  t149   int    
                                                  +--*  t150   int    
N173 (  6,  6) [000151] ----GO------       t151 = *  ADD       int    REG rbp <l:$29c, c:$29b>
                                                  /--*  t151   int    
N175 (  6,  6) [000153] DA--GO------              *  STORE_LCL_VAR int    V11 tmp7         d:5 rbp REG rbp
N177 (???,???) [000253] ------------                 IL_OFFSET void   IL offset: 0x1e REG NA
N179 (  1,  1) [000158] ------------       t158 =    CNS_INT   ref    null REG rdx $VN.Null
                                                  /--*  t158   ref    
N181 (  1,  3) [000160] DA----------              *  STORE_LCL_VAR ref    V10 tmp6         d:3 rdx REG rdx
N183 (???,???) [000254] ------------                 IL_OFFSET void   IL offset: 0x1e REG NA
N185 (  1,  1) [000096] ------------        t96 =    CNS_INT   int    0 REG rcx $40
                                                  /--*  t96    int    
N187 (  1,  3) [000098] DA----------              *  STORE_LCL_VAR int    V07 tmp3         d:3 rcx REG rcx

------------ BB09 [???..???) -> BB03 (cond), preds={BB06,BB08} succs={BB10,BB03}
N001 (  0,  0) [000234] ------------       t234 =    PHI_ARG   ref    V10 tmp6         u:4 rdx <l:$194, c:$345>
N002 (  0,  0) [000231] ------------       t231 =    PHI_ARG   ref    V10 tmp6         u:3 rdx $VN.Null
                                                  /--*  t234   ref    
                                                  +--*  t231   ref    
N003 (  0,  0) [000227] ------------       t227 = *  PHI       ref   
                                                  /--*  t227   ref    
N005 (  0,  0) [000228] DA----------              *  STORE_LCL_VAR ref    V10 tmp6         d:2 rdx
N001 (  0,  0) [000235] ------------       t235 =    PHI_ARG   bool   V07 tmp3         u:4 rcx $44
N002 (  0,  0) [000232] ------------       t232 =    PHI_ARG   bool   V07 tmp3         u:3 rcx $40
                                                  /--*  t235   bool   
                                                  +--*  t232   bool   
N003 (  0,  0) [000224] ------------       t224 = *  PHI       bool  
                                                  /--*  t224   bool   
N005 (  0,  0) [000225] DA----------              *  STORE_LCL_VAR bool   V07 tmp3         d:2 rcx
N001 (  0,  0) [000236] ------------       t236 =    PHI_ARG   int    V11 tmp7         u:6 rbp $29f
N002 (  0,  0) [000233] ------------       t233 =    PHI_ARG   int    V11 tmp7         u:5 rbp <l:$29a, c:$299>
                                                  /--*  t236   int    
                                                  +--*  t233   int    
N003 (  0,  0) [000218] ------------       t218 = *  PHI       int   
                                                  /--*  t218   int    
N005 (  0,  0) [000219] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:4 rbp
N191 (  1,  1) [000130] ------------       t130 =    LCL_VAR   bool   V07 tmp3         u:2 rcx (last use) REG rcx $4c0
N193 (  1,  1) [000019] -c----------        t19 =    CNS_INT   int    0 REG NA $40
                                                  /--*  t130   bool   
                                                  +--*  t19    int    
N195 (  3,  3) [000020] J------N----              *  NE        void   REG NA $2a1
N197 (  5,  5) [000021] ------------              *  JTRUE     void   REG NA

------------ BB10 [027..03E) (return), preds={BB09} succs={}
N215 (  1,  1) [000032] ------------        t32 =    LCL_VAR   ref    V01 loc0         u:2 rdi (last use) REG rdi $180
                                                  /--*  t32    ref    
N217 (  2,  2) [000216] -c----------       t216 = *  LEA(b+8)  byref  REG NA
                                                  /--*  t216   byref  
N219 (  4,  4) [000166] n---GO------       t166 = *  IND       ref    REG rax <l:$1a0, c:$19f>
                                                  /--*  t166   ref    
N221 (  5,  5) [000035] ----GO------              *  RETURN    ref    REG NA $149

------------ BB11 [01E..01F) (throw), preds={BB07} succs={}
N225 (???,???) [000255] ------------                 IL_OFFSET void   IL offset: 0x1e REG NA
N227 ( 14,  5) [000163] --CXG-------                 CALL      void   System.ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion REG NA $VN.Void

------------ BB12 [???..???) (throw), preds={} succs={}
N231 ( 14,  5) [000258] --CXG-------                 CALL help void   HELPER.CORINFO_HELP_RNGCHKFAIL REG NA

-------------------------------------------------------------------------------------------------------------------

Final allocation
--------------------------------+----+----+----+----+----+----+----+----+----+
Loc RP#  Name Type  Action Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------+----+----+----+----+----+----+----+----+----+
  0.#0   V0   Parm   Alloc rsi  |    |    |    |    |    |V0 a|    |    |    |
  1.#1   BB1  PredBB0           |    |    |    |    |    |V0 a|    |    |    |
  6.#2   C12  Def    Alloc rcx  |    |C12a|    |    |    |V0 a|    |    |    |
  7.#3   rcx  Fixd   Keep  rcx  |    |C12a|    |    |    |V0 a|    |    |    |
  7.#4   C12  Use *  Keep  rcx  |    |C12i|    |    |    |V0 a|    |    |    |
  8.#5   rcx  Fixd   Keep  rcx  |    |    |    |    |    |V0 a|    |    |    |
  8.#6   I13  Def    Alloc rcx  |    |I13a|    |    |    |V0 a|    |    |    |
  9.#7   rcx  Fixd   Keep  rcx  |    |I13a|    |    |    |V0 a|    |    |    |
  9.#8   I13  Use *  Keep  rcx  |    |I13i|    |    |    |V0 a|    |    |    |
 10.#9   rax  Kill   Keep  rax  |    |    |    |    |    |V0 a|    |    |    |
 10.#10  rcx  Kill   Keep  rcx  |    |    |    |    |    |V0 a|    |    |    |
 10.#11  rdx  Kill   Keep  rdx  |    |    |    |    |    |V0 a|    |    |    |
 10.#12  r8   Kill   Keep  r8   |    |    |    |    |    |V0 a|    |    |    |
 10.#13  r9   Kill   Keep  r9   |    |    |    |    |    |V0 a|    |    |    |
 10.#14  r10  Kill   Keep  r10  |    |    |    |    |    |V0 a|    |    |    |
 10.#15  r11  Kill   Keep  r11  |    |    |    |    |    |V0 a|    |    |    |
 10.#16  rax  Fixd   Keep  rax  |    |    |    |    |    |V0 a|    |    |    |
 10.#17  I14  Def    Alloc rax  |I14a|    |    |    |    |V0 a|    |    |    |
 11.#18  I14  Use *  Keep  rax  |I14i|    |    |    |    |V0 a|    |    |    |
 12.#19  V5   Def    Alloc rdi  |    |    |    |    |    |V0 a|V5 a|    |    |
 15.#20  rcx  Fixd   Keep  rcx  |    |    |    |    |    |V0 a|V5 a|    |    |
 15.#21  V5   Use    Copy  rcx  |    |V5 a|    |    |    |V0 a|V5 a|    |    |
 16.#22  rcx  Fixd   Keep  rcx  |    |    |    |    |    |V0 a|V5 a|    |    |
 16.#23  I15  Def    Alloc rcx  |    |I15a|    |    |    |V0 a|V5 a|    |    |
 17.#24  rcx  Fixd   Keep  rcx  |    |I15a|    |    |    |V0 a|V5 a|    |    |
 17.#25  I15  Use *  Keep  rcx  |    |I15i|    |    |    |V0 a|V5 a|    |    |
 18.#26  rax  Kill   Keep  rax  |    |    |    |    |    |V0 a|V5 a|    |    |
 18.#27  rcx  Kill   Keep  rcx  |    |    |    |    |    |V0 a|V5 a|    |    |
 18.#28  rdx  Kill   Keep  rdx  |    |    |    |    |    |V0 a|V5 a|    |    |
 18.#29  r8   Kill   Keep  r8   |    |    |    |    |    |V0 a|V5 a|    |    |
 18.#30  r9   Kill   Keep  r9   |    |    |    |    |    |V0 a|V5 a|    |    |
 18.#31  r10  Kill   Keep  r10  |    |    |    |    |    |V0 a|V5 a|    |    |
 18.#32  r11  Kill   Keep  r11  |    |    |    |    |    |V0 a|V5 a|    |    |
 23.#33  V5   Use *  Keep  rdi  |    |    |    |    |    |V0 a|V5 i|    |    |
 24.#34  V1   Def    Alloc rdi  |    |    |    |    |    |V0 a|V1 a|    |    |
 29.#35  V0   Use *  Keep  rsi  |    |    |    |    |    |V0 i|V1 a|    |    |
 30.#36  V13  Def    Alloc rsi  |    |    |    |    |    |V13a|V1 a|    |    |
 39.#37  V13  Use    Keep  rsi  |    |    |    |    |    |V13a|V1 a|    |    |
 40.#38  I16  Def    Alloc rbx  |    |    |    |I16a|    |V13a|V1 a|    |    |
 41.#39  I16  Use *  Keep  rbx  |    |    |    |I16i|    |V13a|V1 a|    |    |
 42.#40  V16  Def    Alloc rbx  |    |    |    |V16a|    |V13a|V1 a|    |    |
 45.#41  V13  Use *  Keep  rsi  |    |    |    |V16a|    |V13i|V1 a|    |    |
 46.#42  V9   Def    Alloc rsi  |    |    |    |V16a|    |V9 a|V1 a|    |    |
 48.#43  C17  Def    Alloc rbp  |    |    |    |V16a|C17a|V9 a|V1 a|    |    |
 49.#44  C17  Use *  Keep  rbp  |    |    |    |V16a|C17i|V9 a|V1 a|    |    |
 50.#45  V11  Def    Alloc rbp  |    |    |    |V16a|V11a|V9 a|V1 a|    |    |
 53.#46  V16  Use *  Keep  rbx  |    |    |    |V16i|V11a|V9 a|V1 a|    |    |
 54.#47  V12  Def    Alloc rbx  |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
--------------------------------+----+----+----+----+----+----+----+----+----+
Loc RP#  Name Type  Action Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------+----+----+----+----+----+----+----+----+----+
 55.#48  BB2  PredBB1           |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
--------------------------------+----+----+----+----+----+----+----+----+----+
Loc RP#  Name Type  Action Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------+----+----+----+----+----+----+----+----+----+
 57.#49  BB4  PredBB2           |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
 63.#50  V9   Use    Keep  rsi  |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
 64.#51  V8   Def    Alloc rcx  |    |V8 a|    |V12a|V11a|V9 a|V1 a|    |    |
 75.#52  V12  Use    Keep  rbx  |    |V8 a|    |V12a|V11a|V9 a|V1 a|    |    |
 75.#53  V8   Use *  Keep  rcx  |    |V8 i|    |V12a|V11a|V9 a|V1 a|    |    |
--------------------------------+----+----+----+----+----+----+----+----+----+
Loc RP#  Name Type  Action Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------+----+----+----+----+----+----+----+----+----+
 79.#54  BB5  PredBB4           |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
 91.#55  V11  Use    Keep  rbp  |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
 91.#56  V9   Use    Keep  rsi  |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
--------------------------------+----+----+----+----+----+----+----+----+----+
Loc RP#  Name Type  Action Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------+----+----+----+----+----+----+----+----+----+
 95.#57  BB6  PredBB5           |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
103.#58  V9   Use    Keep  rsi  |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
104.#59  I18  Def    Alloc rcx  |    |I18a|    |V12a|V11a|V9 a|V1 a|    |    |
105.#60  I18  Use *  Keep  rcx  |    |I18i|    |V12a|V11a|V9 a|V1 a|    |    |
106.#61  V17  Def    Alloc rcx  |    |V17a|    |V12a|V11a|V9 a|V1 a|    |    |
115.#62  V11  Use    Keep  rbp  |    |V17a|    |V12a|V11a|V9 a|V1 a|    |    |
115.#63  V17  Use    Keep  rcx  |    |V17a|    |V12a|V11a|V9 a|V1 a|    |    |
121.#64  V11  Use    Keep  rbp  |    |V17a|    |V12a|V11a|V9 a|V1 a|    |    |
122.#65  I19  Def    Alloc rdx  |    |V17a|I19a|V12a|V11a|V9 a|V1 a|    |    |
125.#66  V17  Use *  Keep  rcx  |    |V17i|I19a|V12a|V11a|V9 a|V1 a|    |    |
125.#67  I19  Use *  Keep  rdx  |    |    |I19i|V12a|V11a|V9 a|V1 a|    |    |
126.#68  I20  Def    Alloc rdx  |    |    |I20a|V12a|V11a|V9 a|V1 a|    |    |
127.#69  I20  Use *  Keep  rdx  |    |    |I20i|V12a|V11a|V9 a|V1 a|    |    |
128.#70  V10  Def    Alloc rdx  |    |    |V10a|V12a|V11a|V9 a|V1 a|    |    |
135.#71  V11  Use *  Keep  rbp  |    |    |V10a|V12a|V11i|V9 a|V1 a|    |    |
136.#72  I21  Def    Alloc rbp  |    |    |V10a|V12a|I21a|V9 a|V1 a|    |    |
137.#73  I21  Use *  Keep  rbp  |    |    |V10a|V12a|I21i|V9 a|V1 a|    |    |
138.#74  V11  Def    Alloc rbp  |    |    |V10a|V12a|V11a|V9 a|V1 a|    |    |
144.#75  V7   Def    Alloc rcx  |    |V7 a|V10a|V12a|V11a|V9 a|V1 a|    |    |
--------------------------------+----+----+----+----+----+----+----+----+----+
Loc RP#  Name Type  Action Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------+----+----+----+----+----+----+----+----+----+
145.#76  BB7  PredBB4           |    |    |    |V12a|    |V9 a|V1 a|    |    |
157.#77  V12  Use    Keep  rbx  |    |    |    |V12a|    |V9 a|V1 a|    |    |
157.#78  V9   Use    Keep  rsi  |    |    |    |V12a|    |V9 a|V1 a|    |    |
--------------------------------+----+----+----+----+----+----+----+----+----+
Loc RP#  Name Type  Action Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------+----+----+----+----+----+----+----+----+----+
161.#79  BB8  PredBB7           |    |    |    |V12a|    |V9 a|V1 a|    |    |
169.#80  V9   Use    Keep  rsi  |    |    |    |V12a|    |V9 a|V1 a|    |    |
170.#81  I22  Def    Alloc rbp  |    |    |    |V12a|I22a|V9 a|V1 a|    |    |
173.#82  I22  Use *  Keep  rbp  |    |    |    |V12a|I22i|V9 a|V1 a|    |    |
174.#83  I23  Def    Alloc rbp  |    |    |    |V12a|I23a|V9 a|V1 a|    |    |
175.#84  I23  Use *  Keep  rbp  |    |    |    |V12a|I23i|V9 a|V1 a|    |    |
176.#85  V11  Def    Alloc rbp  |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
180.#86  C24  Def    Alloc rdx  |    |    |C24a|V12a|V11a|V9 a|V1 a|    |    |
181.#87  C24  Use *  Keep  rdx  |    |    |C24i|V12a|V11a|V9 a|V1 a|    |    |
182.#88  V10  Def    Alloc rdx  |    |    |V10a|V12a|V11a|V9 a|V1 a|    |    |
186.#89  C25  Def    Alloc rcx  |    |C25a|V10a|V12a|V11a|V9 a|V1 a|    |    |
187.#90  C25  Use *  Keep  rcx  |    |C25i|V10a|V12a|V11a|V9 a|V1 a|    |    |
188.#91  V7   Def    Alloc rcx  |    |V7 a|V10a|V12a|V11a|V9 a|V1 a|    |    |
--------------------------------+----+----+----+----+----+----+----+----+----+
Loc RP#  Name Type  Action Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------+----+----+----+----+----+----+----+----+----+
189.#92  BB9  PredBB6           |    |V7 a|V10a|V12a|V11a|V9 a|V1 a|    |    |
195.#93  V7   Use *  Keep  rcx  |    |V7 i|V10a|V12a|V11a|V9 a|V1 a|    |    |
--------------------------------+----+----+----+----+----+----+----+----+----+
Loc RP#  Name Type  Action Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------+----+----+----+----+----+----+----+----+----+
199.#94  BB3  PredBB9           |    |    |V10a|V12a|V11a|V9 a|V1 a|    |    |
205.#95  rcx  Fixd   Keep  rcx  |    |    |V10a|V12a|V11a|V9 a|V1 a|    |    |
205.#96  V1   Use    Copy  rcx  |    |V1 a|V10a|V12a|V11a|V9 a|V1 a|    |    |
206.#97  rcx  Fixd   Keep  rcx  |    |    |V10a|V12a|V11a|V9 a|V1 a|    |    |
206.#98  I26  Def    Alloc rcx  |    |I26a|V10a|V12a|V11a|V9 a|V1 a|    |    |
209.#99  rdx  Fixd   Keep  rdx  |    |I26a|V10a|V12a|V11a|V9 a|V1 a|    |    |
209.#100 V10  Use *  Keep  rdx  |    |I26a|V10i|V12a|V11a|V9 a|V1 a|    |    |
210.#101 rdx  Fixd   Keep  rdx  |    |I26a|    |V12a|V11a|V9 a|V1 a|    |    |
210.#102 I27  Def    Alloc rdx  |    |I26a|I27a|V12a|V11a|V9 a|V1 a|    |    |
211.#103 rcx  Fixd   Keep  rcx  |    |I26a|I27a|V12a|V11a|V9 a|V1 a|    |    |
211.#104 I26  Use *  Keep  rcx  |    |I26i|I27a|V12a|V11a|V9 a|V1 a|    |    |
211.#105 rdx  Fixd   Keep  rdx  |    |    |I27a|V12a|V11a|V9 a|V1 a|    |    |
211.#106 I27  Use *  Keep  rdx  |    |    |I27i|V12a|V11a|V9 a|V1 a|    |    |
212.#107 rax  Kill   Keep  rax  |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
212.#108 rcx  Kill   Keep  rcx  |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
212.#109 rdx  Kill   Keep  rdx  |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
212.#110 r8   Kill   Keep  r8   |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
212.#111 r9   Kill   Keep  r9   |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
212.#112 r10  Kill   Keep  r10  |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
212.#113 r11  Kill   Keep  r11  |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
213.#114 V9   ExpU              |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
213.#115 V11  ExpU              |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
213.#116 V12  ExpU              |    |    |    |V12a|V11a|V9 a|V1 a|    |    |
--------------------------------+----+----+----+----+----+----+----+----+----+
Loc RP#  Name Type  Action Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------+----+----+----+----+----+----+----+----+----+
213.#117 BB10 PredBB9           |    |    |    |    |    |    |V1 a|    |    |
219.#118 V1   Use *  Keep  rdi  |    |    |    |    |    |    |V1 i|    |    |
220.#119 I28  Def    Alloc rax  |I28a|    |    |    |    |    |    |    |    |
221.#120 rax  Fixd   Keep  rax  |I28a|    |    |    |    |    |    |    |    |
221.#121 I28  Use *  Keep  rax  |I28i|    |    |    |    |    |    |    |    |
--------------------------------+----+----+----+----+----+----+----+----+----+
Loc RP#  Name Type  Action Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------+----+----+----+----+----+----+----+----+----+
223.#122 BB11 PredBB7           |    |    |    |    |    |    |    |    |    |
228.#123 rax  Kill   Keep  rax  |    |    |    |    |    |    |    |    |    |
228.#124 rcx  Kill   Keep  rcx  |    |    |    |    |    |    |    |    |    |
228.#125 rdx  Kill   Keep  rdx  |    |    |    |    |    |    |    |    |    |
228.#126 r8   Kill   Keep  r8   |    |    |    |    |    |    |    |    |    |
228.#127 r9   Kill   Keep  r9   |    |    |    |    |    |    |    |    |    |
228.#128 r10  Kill   Keep  r10  |    |    |    |    |    |    |    |    |    |
228.#129 r11  Kill   Keep  r11  |    |    |    |    |    |    |    |    |    |
--------------------------------+----+----+----+----+----+----+----+----+----+
Loc RP#  Name Type  Action Reg  |rax |rcx |rdx |rbx |rbp |rsi |rdi |r8  |r9  |
--------------------------------+----+----+----+----+----+----+----+----+----+
229.#130 BB12 PredBB11          |    |    |    |    |    |    |    |    |    |
232.#131 rax  Kill   Keep  rax  |    |    |    |    |    |    |    |    |    |
232.#132 rcx  Kill   Keep  rcx  |    |    |    |    |    |    |    |    |    |
232.#133 rdx  Kill   Keep  rdx  |    |    |    |    |    |    |    |    |    |
232.#134 r8   Kill   Keep  r8   |    |    |    |    |    |    |    |    |    |
232.#135 r9   Kill   Keep  r9   |    |    |    |    |    |    |    |    |    |
232.#136 r10  Kill   Keep  r10  |    |    |    |    |    |    |    |    |    |
232.#137 r11  Kill   Keep  r11  |    |    |    |    |    |    |    |    |    |

Recording the maximum number of concurrent spills:

----------
LSRA Stats
----------
Total Tracked Vars:  13
Total Reg Cand Vars: 12
Total number of Intervals: 28
Total number of RefPositions: 137
Total Spill Count: 0    Weighted: 0.000000
Total CopyReg Count: 0   Weighted: 0.000000
Total ResolutionMov Count: 0    Weighted: 0.000000
Total number of split edges: 0
Total Number of spill temps created: 0

TUPLE STYLE DUMP WITH REGISTER ASSIGNMENTS
Incoming Parameters:  V00(rcx=>rsi)
BB01 [000..00D), preds={} succs={BB02}
=====
  N003.                    IL_OFFSET IL offset: 0x0
  N005. rcx             =  CNS_INT(h) 0xd1ffab1e method
  N007. rcx             =  PUTARG_REG; rcx
  N009. rax             =  CALL help; rcx
* N011.                    V05(rdi); rax
  N013.                    V05(rdi)
  N015. rcx             =  PUTARG_REG; rdi
  N017.                    CALL     ; rcx
  N019.                    IL_OFFSET IL offset: 0x5
  N021.                    V05(rdi*)
* N023.                    V01(rdi); rdi*
  N025.                    IL_OFFSET IL offset: 0x6
  N027.                    V00(rsi*)
* N029.                    V13(rsi); rsi*
  N031.                    IL_OFFSET IL offset: 0x6
  N033.                    IL_OFFSET IL offset: 0x6
  N035.                    V13(rsi)
  N037. STK             =  LEA(b+20); rsi
  N039. rbx             =  IND      ; STK
* N041.                    V16(rbx); rbx
  N043.                    V13(rsi*)
* N045.                    V09(rsi); rsi*
  N047. rbp             =  CNS_INT   0
* N049.                    V11(rbp); rbp
  N051.                    V16(rbx*)
* N053.                    V12(rbx); rbx*
Var=Reg end of BB01: V09=rsi V11=rbp V12=rbx V01=rdi 

BB02 [00D..00F) -> BB04 (always), preds={BB01} succs={BB04}
=====
Predecessor for variable locations: BB01
Var=Reg beg of BB02: V09=rsi V11=rbp V12=rbx V01=rdi 
Var=Reg end of BB02: V09=rsi V11=rbp V12=rbx V01=rdi 

BB04 [01E..027) -> BB07 (cond), preds={BB02,BB03} succs={BB05,BB07}
=====
Predecessor for variable locations: BB02
Var=Reg beg of BB04: V09=rsi V11=rbp V12=rbx V01=rdi 
  N059.                    IL_OFFSET IL offset: 0x1e
  N061.                    V09(rsi)
* N063.                    V08(rcx); rsi
  N065.                    IL_OFFSET IL offset: 0x1e
  N067.                    V12(rbx)
  N069.                    V08(rcx*)
  N071. STK             =  LEA(b+20); rcx*
  N073. STK             =  IND      ; STK
  N075.                    NE       ; rbx,STK
  N077.                    JTRUE    
Var=Reg end of BB04: V09=rsi V11=rbp V12=rbx V01=rdi 

BB05 [01E..01F) -> BB07 (cond), preds={BB04} succs={BB06,BB07}
=====
Predecessor for variable locations: BB04
Var=Reg beg of BB05: V09=rsi V11=rbp V12=rbx V01=rdi 
  N081.                    IL_OFFSET IL offset: 0x1e
  N083.                    V11(rbp)
  N085.                    V09(rsi)
  N087. STK             =  LEA(b+16); rsi
  N089. STK             =  IND      ; STK
  N091.                    GE       ; rbp,STK
  N093.                    JTRUE    
Var=Reg end of BB05: V09=rsi V11=rbp V12=rbx V01=rdi 

BB06 [01E..01F) -> BB09 (always), preds={BB05} succs={BB09}
=====
Predecessor for variable locations: BB05
Var=Reg beg of BB06: V09=rsi V11=rbp V12=rbx V01=rdi 
  N097.                    IL_OFFSET IL offset: 0x1e
  N099.                    V09(rsi)
  N101. STK             =  LEA(b+8) ; rsi
  N103. rcx             =  IND      ; STK
* N105.                    V17(rcx); rcx
  N107.                    V11(rbp)
  N109.                    V17(rcx)
  N111. STK             =  LEA(b+8) ; rcx
  N113. STK             =  IND      ; STK
  N115.                    ARR_BOUNDS_CHECK_Rng; rbp,STK
  N117.                    V17(rcx*)
  N119.                    V11(rbp)
  N121. rdx             =  CAST     ; rbp
  N123. STK             =  LEA(b+(i*8)+16); rcx*,rdx
  N125. rdx             =  IND      ; STK
* N127.                    V10(rdx); rdx
  N129.                    IL_OFFSET IL offset: 0x1e
  N131.                    V11(rbp*)
  N133.                    CNS_INT   1
  N135. rbp             =  ADD      ; rbp*
* N137.                    V11(rbp); rbp
  N139.                    IL_OFFSET IL offset: 0x1e
  N141.                    CNS_INT   1
* N143.                    V07(rcx)
Var=Reg end of BB06: V09=rsi V11=rbp V07=rcx V12=rbx V10=rdx V01=rdi 

BB07 [01E..01F) -> BB11 (cond), preds={BB04,BB05} succs={BB08,BB11}
=====
Predecessor for variable locations: BB04
Var=Reg beg of BB07: V09=rsi V12=rbx V01=rdi 
  N147.                    IL_OFFSET IL offset: 0x1e
  N149.                    V12(rbx)
  N151.                    V09(rsi)
  N153. STK             =  LEA(b+20); rsi
  N155. STK             =  IND      ; STK
  N157.                    NE       ; rbx,STK
  N159.                    JTRUE    
Var=Reg end of BB07: V09=rsi V12=rbx V01=rdi 

BB08 [01E..01F), preds={BB07} succs={BB09}
=====
Predecessor for variable locations: BB07
Var=Reg beg of BB08: V09=rsi V12=rbx V01=rdi 
  N163.                    IL_OFFSET IL offset: 0x1e
  N165.                    V09(rsi)
  N167. STK             =  LEA(b+16); rsi
  N169. rbp             =  IND      ; STK
  N171.                    CNS_INT   1
  N173. rbp             =  ADD      ; rbp
* N175.                    V11(rbp); rbp
  N177.                    IL_OFFSET IL offset: 0x1e
  N179. rdx             =  CNS_INT   null
* N181.                    V10(rdx); rdx
  N183.                    IL_OFFSET IL offset: 0x1e
  N185. rcx             =  CNS_INT   0
* N187.                    V07(rcx); rcx
Var=Reg end of BB08: V09=rsi V11=rbp V07=rcx V12=rbx V10=rdx V01=rdi 

BB09 [???..???) -> BB03 (cond), preds={BB06,BB08} succs={BB10,BB03}
=====
Predecessor for variable locations: BB06
Var=Reg beg of BB09: V09=rsi V11=rbp V07=rcx V12=rbx V10=rdx V01=rdi 
  N191.                    V07(rcx*)
  N193.                    CNS_INT   0
  N195.                    NE       ; rcx*
  N197.                    JTRUE    
Var=Reg end of BB09: V09=rsi V11=rbp V12=rbx V10=rdx V01=rdi 

BB03 [00F..01E), preds={BB09} succs={BB04}
=====
Predecessor for variable locations: BB09
Var=Reg beg of BB03: V09=rsi V11=rbp V12=rbx V10=rdx V01=rdi 
  N201.                    IL_OFFSET IL offset: 0x17
  N203.                    V01(rdi)
  N205. rcx             =  PUTARG_REG; rdi
  N207.                    V10(rdx*)
  N209. rdx             =  PUTARG_REG; rdx*
  N211.                    CALL     ; rcx,rdx
Var=Reg end of BB03: V09=rsi V11=rbp V12=rbx V01=rdi 

BB10 [027..03E) (return), preds={BB09} succs={}
=====
Predecessor for variable locations: BB09
Var=Reg beg of BB10: V01=rdi 
  N215.                    V01(rdi*)
  N217. STK             =  LEA(b+8) ; rdi*
  N219. rax             =  IND      ; STK
  N221.                    RETURN   ; rax
Var=Reg end of BB10: none

BB11 [01E..01F) (throw), preds={BB07} succs={}
=====
Predecessor for variable locations: BB07
Var=Reg beg of BB11: none
  N225.                    IL_OFFSET IL offset: 0x1e
  N227.                    CALL     
Var=Reg end of BB11: none

BB12 [???..???) (throw), preds={} succs={}
=====
Predecessor for variable locations: BB11
Var=Reg beg of BB12: none
  N231.                    CALL help
Var=Reg end of BB12: none




*************** Finishing PHASE Linear scan register alloc
*************** In genGenerateCode()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..00D)                                     i label target hascall gcsafe newobj nullcheck LIR 
BB02 [0001]  1       BB01                  1       [00D..00F)-> BB04 (always)                     keep i label gcsafe LIR 
BB03 [0002]  1       BB09                  2     0 [00F..01E)                                     i Loop label target hascall gcsafe bwd bwd-target LIR 
BB04 [0003]  2       BB02,BB03             8     0 [01E..027)-> BB07 ( cond )                     i label target gcsafe bwd LIR 
BB05 [0013]  1       BB04                  1     0 [01E..01F)-> BB07 ( cond )                     i gcsafe bwd LIR 
BB06 [0014]  1       BB05                  2     0 [01E..01F)-> BB09 (always)                     i gcsafe idxlen bwd LIR 
BB07 [0015]  2       BB04,BB05             2     0 [01E..01F)-> BB11 ( cond )                     i label target gcsafe bwd LIR 
BB08 [0019]  1       BB07                  2     0 [01E..01F)                                     i label target gcsafe bwd LIR 
BB09 [0016]  2       BB06,BB08             8     0 [???..???)-> BB03 ( cond )                     internal label target gcsafe bwd LIR 
BB10 [0004]  1       BB09                  1       [027..03E)        (return)                     i gcsafe LIR 
BB11 [0018]  1       BB07                  0       [01E..01F)        (throw )                     i rare label target hascall gcsafe bwd LIR 
BB12 [0023]  0                             0       [???..???)        (throw )                     keep i internal rare label target LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

*************** Starting PHASE Generate code
*************** In fgDebugCheckBBlist
Finalizing stack frame
Recording Var Locations at start of BB01
  V00(rsi)
Modified regs: [rax rcx rdx rbx rbp rsi rdi r8-r11]
Callee-saved registers pushed: 4 [rbx rbp rsi rdi]
*************** In lvaAssignFrameOffsets(FINAL_FRAME_LAYOUT)
Assign V04 OutArgs, size=32, stkOffs=-0x48
--- delta bump 8 for RA
--- delta bump 72 for RSP frame
--- virtual stack offset to actual stack offset delta is 80
-- V00 was 0, now 80
-- V04 was -72, now 8
; Final local variable assignments
;
;  V00 arg0         [V00,T08] (  3,  3   )     ref  ->  rsi         class-hnd
;  V01 loc0         [V01,T09] (  3,  4   )     ref  ->  rdi         class-hnd exact
;* V02 loc1         [V02    ] (  0,  0   )  struct (24) zero-ref    ld-addr-op
;* V03 loc2         [V03    ] (  0,  0   )     ref  ->  zero-ref    class-hnd
;  V04 OutArgs      [V04    ] (  1,  1   )  lclBlk (32) [rsp+0x00]   "OutgoingArgSpace"
;  V05 tmp1         [V05,T06] (  3,  6   )     ref  ->  rdi         class-hnd exact "NewObj constructor temp"
;* V06 tmp2         [V06    ] (  0,  0   )  struct (24) zero-ref    "NewObj constructor temp"
;  V07 tmp3         [V07,T04] (  3, 12   )    bool  ->  rcx         "Inline return value spill temp"
;  V08 tmp4         [V08,T01] (  2, 16   )     ref  ->  rcx         class-hnd "Inline stloc first use temp"
;  V09 tmp5         [V09,T00] (  6, 16   )     ref  ->  rsi         V02._list(offs=0x00) P-INDEP "field V02._list (fldOffset=0x0)"
;  V10 tmp6         [V10,T07] (  3,  6   )     ref  ->  rdx         V02._current(offs=0x08) P-INDEP "field V02._current (fldOffset=0x8)"
;  V11 tmp7         [V11,T02] (  7, 12   )     int  ->  rbp         V02._index(offs=0x10) P-INDEP "field V02._index (fldOffset=0x10)"
;  V12 tmp8         [V12,T05] (  3, 11   )     int  ->  rbx         V02._version(offs=0x14) P-INDEP "field V02._version (fldOffset=0x14)"
;  V13 tmp9         [V13,T10] (  3,  3   )     ref  ->  rsi         V06._list(offs=0x00) P-INDEP "field V06._list (fldOffset=0x0)"
;* V14 tmp10        [V14    ] (  0,  0   )     ref  ->  zero-ref    V06._current(offs=0x08) P-INDEP "field V06._current (fldOffset=0x8)"
;* V15 tmp11        [V15,T12] (  0,  0   )     int  ->  zero-ref    V06._index(offs=0x10) P-INDEP "field V06._index (fldOffset=0x10)"
;  V16 tmp12        [V16,T11] (  2,  2   )     int  ->  rbx         V06._version(offs=0x14) P-INDEP "field V06._version (fldOffset=0x14)"
;  V17 tmp13        [V17,T03] (  3, 12   )     ref  ->  rcx         "arr expr"
;
; Lcl frame size = 40
Setting stack level from -572662307 to 0

=============== Generating BB01 [000..00D), preds={} succs={BB02} flags=0x00000002.204b0420: i label target hascall gcsafe newobj nullcheck LIR 
BB01 IN (1)={            V00    } + ByrefExposed + GcHeap
     OUT(4)={V09 V11 V12     V01} + ByrefExposed + GcHeap

Recording Var Locations at start of BB01
  V00(rsi)
Change life 0000000000000000 {} -> 0000000000000100 {V00}
							V00 in reg rsi is becoming live  [------]
							Live regs: 00000000 {} => 00000040 {rsi}
							Live regs: (unchanged) 00000040 {rsi}
							GC regs: (unchanged) 00000040 {rsi}
							Byref regs: (unchanged) 00000000 {}

      L_M1591_BB01:
Label: IG02, GCvars=0000000000000000 {}, gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}

Scope info: begin block BB01, IL range [000..00D)
Scope info: open scopes =
   0 (V00 arg0) [000..03E)
Added IP mapping: 0x0000 STACK_EMPTY (G_M1591_IG02,ins#0,ofs#0) label
Generating: N003 (???,???) [000239] ------------                 IL_OFFSET void   IL offset: 0x0 REG NA
Generating: N005 (  2, 10) [000000] H-----------         t0 =    CNS_INT(h) long   0xd1ffab1e method REG rcx $100
IN0001:        mov      rcx, 0xD1FFAB1E
                                                              /--*  t0     long   
Generating: N007 (???,???) [000259] ------------       t259 = *  PUTARG_REG long   REG rcx
                                                              /--*  t259   long   arg0 in rcx
Generating: N009 ( 16, 16) [000001] --C---------         t1 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST REG rax $180
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}
IN0002:        call     CORINFO_HELP_NEWSFAST
							GC regs: 00000040 {rsi} => 00000041 {rax rsi}
                                                              /--*  t1     ref    
Generating: N011 ( 16, 16) [000003] DA----------              *  STORE_LCL_VAR ref    V05 tmp1         d:2 rdi REG rdi
							GC regs: 00000041 {rax rsi} => 00000040 {rsi}
IN0003:        mov      rdi, rax
							V05 in reg rdi is becoming live  [000003]
							Live regs: 00000040 {rsi} => 000000C0 {rsi rdi}
							Live vars: {V00} => {V00 V05}
							GC regs: 00000040 {rsi} => 000000C0 {rsi rdi}
Generating: N013 (  1,  1) [000004] ------------         t4 =    LCL_VAR   ref    V05 tmp1         u:2 rdi REG rdi $180
                                                              /--*  t4     ref    
Generating: N015 (???,???) [000260] ------------       t260 = *  PUTARG_REG ref    REG rcx
IN0004:        mov      rcx, rdi
							GC regs: 000000C0 {rsi rdi} => 000000C2 {rcx rsi rdi}
                                                              /--*  t260   ref    this in rcx
Generating: N017 ( 15,  8) [000005] --CXG-------              *  CALL      void   Batcher..ctor REG NA $VN.Void
							GC regs: 000000C2 {rcx rsi rdi} => 000000C0 {rsi rdi}
							Call: GCvars=0000000000000000 {}, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}
IN0005:        call     Batcher:.ctor():this
Added IP mapping: 0x0005 (G_M1591_IG02,ins#5,ofs#26)
Generating: N019 (???,???) [000240] ------------                 IL_OFFSET void   IL offset: 0x5 REG NA
Generating: N021 (  1,  1) [000006] ------------         t6 =    LCL_VAR   ref    V05 tmp1         u:2 rdi (last use) REG rdi $180
                                                              /--*  t6     ref    
Generating: N023 (  1,  3) [000008] DA----------              *  STORE_LCL_VAR ref    V01 loc0         d:2 rdi REG rdi
							V05 in reg rdi is becoming dead  [000006]
							Live regs: 000000C0 {rsi rdi} => 00000040 {rsi}
							Live vars: {V00 V05} => {V00}
							GC regs: 000000C0 {rsi rdi} => 00000040 {rsi}
							V01 in reg rdi is becoming live  [000008]
							Live regs: 00000040 {rsi} => 000000C0 {rsi rdi}
							Live vars: {V00} => {V00 V01}
							GC regs: 00000040 {rsi} => 000000C0 {rsi rdi}
Added IP mapping: 0x0006 STACK_EMPTY (G_M1591_IG02,ins#5,ofs#26)
Generating: N025 (???,???) [000241] ------------                 IL_OFFSET void   IL offset: 0x6 REG NA
Generating: N027 (  1,  1) [000009] ------------         t9 =    LCL_VAR   ref    V00 arg0         u:1 rsi (last use) REG rsi $80
                                                              /--*  t9     ref    
Generating: N029 (  5,  4) [000055] DA----------              *  STORE_LCL_VAR ref    V13 tmp9         d:2 rsi REG rsi
							V00 in reg rsi is becoming dead  [000009]
							Live regs: 000000C0 {rsi rdi} => 00000080 {rdi}
							Live vars: {V00 V01} => {V01}
							GC regs: 000000C0 {rsi rdi} => 00000080 {rdi}
							V13 in reg rsi is becoming live  [000055]
							Live regs: 00000080 {rdi} => 000000C0 {rsi rdi}
							Live vars: {V01} => {V01 V13}
							GC regs: 00000080 {rdi} => 000000C0 {rsi rdi}
genIPmappingAdd: ignoring duplicate IL offset 0x6
Generating: N031 (???,???) [000242] ------------                 IL_OFFSET void   IL offset: 0x6 REG NA
genIPmappingAdd: ignoring duplicate IL offset 0x6
Generating: N033 (???,???) [000243] ------------                 IL_OFFSET void   IL offset: 0x6 REG NA
Generating: N035 (  1,  1) [000063] ------------        t63 =    LCL_VAR   ref    V13 tmp9         u:2 rsi REG rsi $80
                                                              /--*  t63    ref    
Generating: N037 (  2,  2) [000171] -c----------       t171 = *  LEA(b+20) byref  REG NA
                                                              /--*  t171   byref  
Generating: N039 (  4,  4) [000064] ---XG-------        t64 = *  IND       int    REG rbx <l:$283, c:$282>
IN0006:        mov      ebx, dword ptr [rsi+20]
                                                              /--*  t64    int    
Generating: N041 (  8,  7) [000066] DA-XG-------              *  STORE_LCL_VAR int    V16 tmp12        d:2 rbx REG rbx
							V16 in reg rbx is becoming live  [000066]
							Live regs: 000000C0 {rsi rdi} => 000000C8 {rbx rsi rdi}
							Live vars: {V01 V13} => {V01 V13 V16}
Generating: N043 (  3,  2) [000173] ------------       t173 =    LCL_VAR   ref    V13 tmp9         u:2 rsi (last use) REG rsi $80
                                                              /--*  t173   ref    
Generating: N045 (  3,  3) [000174] DA----------              *  STORE_LCL_VAR ref    V09 tmp5         d:2 rsi REG rsi
							V13 in reg rsi is becoming dead  [000173]
							Live regs: 000000C8 {rbx rsi rdi} => 00000088 {rbx rdi}
							Live vars: {V01 V13 V16} => {V01 V16}
							GC regs: 000000C0 {rsi rdi} => 00000080 {rdi}
							V09 in reg rsi is becoming live  [000174]
							Live regs: 00000088 {rbx rdi} => 000000C8 {rbx rsi rdi}
							Live vars: {V01 V16} => {V01 V09 V16}
							GC regs: 00000080 {rdi} => 000000C0 {rsi rdi}
Generating: N047 (  1,  1) [000237] ------------       t237 =    CNS_INT   int    0 REG rbp $40
IN0007:        xor      ebp, ebp
                                                              /--*  t237   int    
Generating: N049 (  1,  3) [000181] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:2 rbp REG rbp
							V11 in reg rbp is becoming live  [000181]
							Live regs: 000000C8 {rbx rsi rdi} => 000000E8 {rbx rbp rsi rdi}
							Live vars: {V01 V09 V16} => {V01 V09 V11 V16}
Generating: N051 (  3,  2) [000184] ------------       t184 =    LCL_VAR   int    V16 tmp12        u:2 rbx (last use) REG rbx <l:$281, c:$1c1>
                                                              /--*  t184   int    
Generating: N053 (  3,  3) [000185] DA----------              *  STORE_LCL_VAR int    V12 tmp8         d:2 rbx REG rbx
							V16 in reg rbx is becoming dead  [000184]
							Live regs: 000000E8 {rbx rbp rsi rdi} => 000000E0 {rbp rsi rdi}
							Live vars: {V01 V09 V11 V16} => {V01 V09 V11}
							V12 in reg rbx is becoming live  [000185]
							Live regs: 000000E0 {rbp rsi rdi} => 000000E8 {rbx rbp rsi rdi}
							Live vars: {V01 V09 V11} => {V01 V09 V11 V12}

Scope info: end block BB01, IL range [000..00D)
Scope info: open scopes =
   <none>

=============== Generating BB02 [00D..00F) -> BB04 (always), preds={BB01} succs={BB04} flags=0x00000000.20090030: keep i label gcsafe LIR 
BB02 IN (4)={V09 V11 V12 V01} + ByrefExposed + GcHeap
     OUT(4)={V09 V11 V12 V01} + ByrefExposed + GcHeap

Recording Var Locations at start of BB02
  V09(rsi)  V11(rbp)  V12(rbx)  V01(rdi)
Liveness not changing: 0000000000000225 {V01 V09 V11 V12}
							Live regs: 00000000 {} => 000000E8 {rbx rbp rsi rdi}
							GC regs: 00000000 {} => 000000C0 {rsi rdi}
							Byref regs: (unchanged) 00000000 {}

      L_M1591_BB02:

      G_M1591_IG02:        ; offs=000000H, funclet=00, bbWeight=1   
Label: IG03, GCvars=0000000000000000 {}, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}

Scope info: begin block BB02, IL range [00D..00F)
Scope info: open scopes =
   1 (V01 loc0) [000..03E)

Scope info: end block BB02, IL range [00D..00F)
Scope info: open scopes =
   1 (V01 loc0) [000..03E)
IN0008:        jmp      L_M1591_BB04

=============== Generating BB03 [00F..01E), preds={BB09} succs={BB04} flags=0x0000000a.210b2020: i Loop label target hascall gcsafe bwd bwd-target LIR 
BB03 IN (5)={V09 V11 V12 V10 V01} + ByrefExposed + GcHeap
     OUT(4)={V09 V11 V12     V01} + ByrefExposed + GcHeap

Recording Var Locations at start of BB03
  V09(rsi)  V11(rbp)  V12(rbx)  V10(rdx)  V01(rdi)
Change life 0000000000000225 {V01 V09 V11 V12} -> 00000000000002A5 {V01 V09 V10 V11 V12}
							V10 in reg rdx is becoming live  [------]
							Live regs: 00000000 {} => 00000004 {rdx}
							Live regs: 00000004 {rdx} => 000000EC {rdx rbx rbp rsi rdi}
							GC regs: 00000004 {rdx} => 000000C4 {rdx rsi rdi}
							Byref regs: (unchanged) 00000000 {}

      L_M1591_BB03:

      G_M1591_IG03:        ; offs=00001FH, funclet=00, bbWeight=1   
Label: IG04, GCvars=0000000000000000 {}, gcrefRegs=000000C4 {rdx rsi rdi}, byrefRegs=00000000 {}

Scope info: begin block BB03, IL range [00F..01E)
Scope info: open scopes =
   1 (V01 loc0) [000..03E)
Added IP mapping: 0x0017 STACK_EMPTY (G_M1591_IG04,ins#0,ofs#0) label
Generating: N201 (???,???) [000244] ------------                 IL_OFFSET void   IL offset: 0x17 REG NA
Generating: N203 (  1,  1) [000029] ------------        t29 =    LCL_VAR   ref    V01 loc0         u:2 rdi REG rdi $180
                                                              /--*  t29    ref    
Generating: N205 (???,???) [000261] ------------       t261 = *  PUTARG_REG ref    REG rcx
IN0009:        mov      rcx, rdi
							GC regs: 000000C4 {rdx rsi rdi} => 000000C6 {rcx rdx rsi rdi}
Generating: N207 (  1,  1) [000030] ------------        t30 =    LCL_VAR   ref    V10 tmp6         u:2 rdx (last use) REG rdx $480
                                                              /--*  t30    ref    
Generating: N209 (???,???) [000262] ------------       t262 = *  PUTARG_REG ref    REG rdx
							V10 in reg rdx is becoming dead  [000030]
							Live regs: 000000EC {rdx rbx rbp rsi rdi} => 000000E8 {rbx rbp rsi rdi}
							Live vars: {V01 V09 V10 V11 V12} => {V01 V09 V11 V12}
							GC regs: 000000C6 {rcx rdx rsi rdi} => 000000C2 {rcx rsi rdi}
							GC regs: 000000C2 {rcx rsi rdi} => 000000C6 {rcx rdx rsi rdi}
                                                              /--*  t261   ref    this in rcx
                                                              +--*  t262   ref    arg1 in rdx
Generating: N211 ( 16, 10) [000031] --CXG-------              *  CALL      void   Batcher.Push REG NA $VN.Void
							GC regs: 000000C6 {rcx rdx rsi rdi} => 000000C4 {rdx rsi rdi}
							GC regs: 000000C4 {rdx rsi rdi} => 000000C0 {rsi rdi}
							Call: GCvars=0000000000000000 {}, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}
IN000a:        call     Batcher:Push(System.String):this

Scope info: end block BB03, IL range [00F..01E)
Scope info: open scopes =
   1 (V01 loc0) [000..03E)

=============== Generating BB04 [01E..027) -> BB07 (cond), preds={BB02,BB03} succs={BB05,BB07} flags=0x00000000.210b0020: i label target gcsafe bwd LIR 
BB04 IN (4)={V09 V11 V12 V01} + ByrefExposed + GcHeap
     OUT(4)={V09 V11 V12 V01} + ByrefExposed + GcHeap

Recording Var Locations at start of BB04
  V09(rsi)  V11(rbp)  V12(rbx)  V01(rdi)
Liveness not changing: 0000000000000225 {V01 V09 V11 V12}
							Live regs: 00000000 {} => 000000E8 {rbx rbp rsi rdi}
							GC regs: 00000000 {} => 000000C0 {rsi rdi}
							Byref regs: (unchanged) 00000000 {}

      L_M1591_BB04:

      G_M1591_IG04:        ; offs=000024H, funclet=00, bbWeight=2   
Label: IG05, GCvars=0000000000000000 {}, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}

Scope info: begin block BB04, IL range [01E..027)
Scope info: open scopes =
   1 (V01 loc0) [000..03E)
Added IP mapping: 0x001E STACK_EMPTY (G_M1591_IG05,ins#0,ofs#0) label
Generating: N059 (???,???) [000245] ------------                 IL_OFFSET void   IL offset: 0x1e REG NA
Generating: N061 (  1,  1) [000081] ------------        t81 =    LCL_VAR   ref    V09 tmp5         u:2 rsi REG rsi $80
                                                              /--*  t81    ref    
Generating: N063 (  1,  3) [000083] DA----------              *  STORE_LCL_VAR ref    V08 tmp4         d:2 rcx REG rcx
IN000b:        mov      rcx, rsi
							V08 in reg rcx is becoming live  [000083]
							Live regs: 000000E8 {rbx rbp rsi rdi} => 000000EA {rcx rbx rbp rsi rdi}
							Live vars: {V01 V09 V11 V12} => {V01 V08 V09 V11 V12}
							GC regs: 000000C0 {rsi rdi} => 000000C2 {rcx rsi rdi}
genIPmappingAdd: ignoring duplicate IL offset 0x1e
Generating: N065 (???,???) [000246] ------------                 IL_OFFSET void   IL offset: 0x1e REG NA
Generating: N067 (  1,  1) [000086] ------------        t86 =    LCL_VAR   int    V12 tmp8         u:2 rbx REG rbx <l:$281, c:$1c1>
Generating: N069 (  1,  1) [000087] ------------        t87 =    LCL_VAR   ref    V08 tmp4         u:2 rcx (last use) REG rcx $80
                                                              /--*  t87    ref    
Generating: N071 (  2,  2) [000190] -c----------       t190 = *  LEA(b+20) byref  REG NA
                                                              /--*  t190   byref  
Generating: N073 (  4,  4) [000088] nc--GO------        t88 = *  IND       int    REG NA <l:$288, c:$287>
                                                              /--*  t86    int    
                                                              +--*  t88    int    
Generating: N075 (  6,  6) [000089] N---GO-N-U--              *  NE        void   REG NA <l:$28c, c:$28b>
							V08 in reg rcx is becoming dead  [000087]
							Live regs: 000000EA {rcx rbx rbp rsi rdi} => 000000E8 {rbx rbp rsi rdi}
							Live vars: {V01 V08 V09 V11 V12} => {V01 V09 V11 V12}
							GC regs: 000000C2 {rcx rsi rdi} => 000000C0 {rsi rdi}
IN000c:        cmp      ebx, dword ptr [rcx+20]
Generating: N077 (  8,  8) [000090] ----GO------              *  JTRUE     void   REG NA
IN000d:        jne      L_M1591_BB07

Scope info: end block BB04, IL range [01E..027)
Scope info: open scopes =
   1 (V01 loc0) [000..03E)

=============== Generating BB05 [01E..01F) -> BB07 (cond), preds={BB04} succs={BB06,BB07} flags=0x00000000.21080020: i gcsafe bwd LIR 
BB05 IN (4)={V09 V11 V12 V01} + ByrefExposed + GcHeap
     OUT(4)={V09 V11 V12 V01} + ByrefExposed + GcHeap

Recording Var Locations at start of BB05
  V09(rsi)  V11(rbp)  V12(rbx)  V01(rdi)
Liveness not changing: 0000000000000225 {V01 V09 V11 V12}
							Live regs: 00000000 {} => 000000E8 {rbx rbp rsi rdi}
							GC regs: 00000000 {} => 000000C0 {rsi rdi}
							Byref regs: (unchanged) 00000000 {}

      L_M1591_BB05:

      G_M1591_IG05:        ; offs=00002CH, funclet=00, bbWeight=8   
Label: IG06, GCvars=0000000000000000 {}, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}

Scope info: begin block BB05, IL range [01E..01F)
Scope info: open scopes =
   1 (V01 loc0) [000..03E)
genIPmappingAdd: ignoring duplicate IL offset 0x1e
Generating: N081 (???,???) [000247] ------------                 IL_OFFSET void   IL offset: 0x1e REG NA
Generating: N083 (  1,  1) [000102] ------------       t102 =    LCL_VAR   int    V11 tmp7         u:3 rbp REG rbp $300
Generating: N085 (  1,  1) [000103] ------------       t103 =    LCL_VAR   ref    V09 tmp5         u:2 rsi REG rsi $80
                                                              /--*  t103   ref    
Generating: N087 (  2,  2) [000192] -c----------       t192 = *  LEA(b+16) byref  REG NA
                                                              /--*  t192   byref  
Generating: N089 (  4,  4) [000104] nc--GO------       t104 = *  IND       int    REG NA <l:$290, c:$28f>
                                                              /--*  t102   int    
                                                              +--*  t104   int    
Generating: N091 (  6,  6) [000105] N---GO-N-U--              *  GE        void   REG NA <l:$294, c:$293>
IN000e:        cmp      ebp, dword ptr [rsi+16]
Generating: N093 (  8,  8) [000106] ----GO------              *  JTRUE     void   REG NA
IN000f:        jae      L_M1591_BB07

Scope info: end block BB05, IL range [01E..01F)
Scope info: open scopes =
   1 (V01 loc0) [000..03E)

=============== Generating BB06 [01E..01F) -> BB09 (always), preds={BB05} succs={BB09} flags=0x00000000.21180020: i gcsafe idxlen bwd LIR 
BB06 IN (4)={V09 V11     V12     V01} + ByrefExposed + GcHeap
     OUT(6)={V09 V11 V07 V12 V10 V01} + ByrefExposed + GcHeap

Recording Var Locations at start of BB06
  V09(rsi)  V11(rbp)  V12(rbx)  V01(rdi)
Liveness not changing: 0000000000000225 {V01 V09 V11 V12}
							Live regs: 00000000 {} => 000000E8 {rbx rbp rsi rdi}
							GC regs: 00000000 {} => 000000C0 {rsi rdi}
							Byref regs: (unchanged) 00000000 {}

      L_M1591_BB06:

      G_M1591_IG06:        ; offs=000038H, funclet=00, bbWeight=1   
Label: IG07, GCvars=0000000000000000 {}, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}

Scope info: begin block BB06, IL range [01E..01F)
Scope info: open scopes =
   1 (V01 loc0) [000..03E)
genIPmappingAdd: ignoring duplicate IL offset 0x1e
Generating: N097 (???,???) [000248] ------------                 IL_OFFSET void   IL offset: 0x1e REG NA
Generating: N099 (  1,  1) [000109] ------------       t109 =    LCL_VAR   ref    V09 tmp5         u:2 rsi REG rsi $80
                                                              /--*  t109   ref    
Generating: N101 (  2,  2) [000209] -c----------       t209 = *  LEA(b+8)  byref  REG NA
                                                              /--*  t209   byref  
Generating: N103 (  4,  4) [000110] n---GO------       t110 = *  IND       ref    REG rcx <l:$185, c:$184>
IN0010:        mov      rcx, gword ptr [rsi+8]
							GC regs: 000000C0 {rsi rdi} => 000000C2 {rcx rsi rdi}
                                                              /--*  t110   ref    
Generating: N105 (  4,  4) [000194] DA--GO------              *  STORE_LCL_VAR ref    V17 tmp13        d:2 rcx REG rcx
							GC regs: 000000C2 {rcx rsi rdi} => 000000C0 {rsi rdi}
							V17 in reg rcx is becoming live  [000194]
							Live regs: 000000E8 {rbx rbp rsi rdi} => 000000EA {rcx rbx rbp rsi rdi}
							Live vars: {V01 V09 V11 V12} => {V01 V09 V11 V12 V17}
							GC regs: 000000C0 {rsi rdi} => 000000C2 {rcx rsi rdi}
Generating: N107 (  1,  1) [000113] ------------       t113 =    LCL_VAR   int    V11 tmp7         u:3 rbp REG rbp $300
Generating: N109 (  1,  1) [000195] ------------       t195 =    LCL_VAR   ref    V17 tmp13        u:2 rcx REG rcx <l:$183, c:$343>
                                                              /--*  t195   ref    
Generating: N111 (???,???) [000257] -c----------       t257 = *  LEA(b+8)  ref    REG NA
                                                              /--*  t257   ref    
Generating: N113 (  3,  3) [000198] -c-X--------       t198 = *  IND       int    REG NA <l:$29e, c:$29d>
                                                              /--*  t113   int    
                                                              +--*  t198   int    
Generating: N115 (  8, 11) [000199] ---X--------              *  ARR_BOUNDS_CHECK_Rng void   REG NA <l:$191, c:$190>
IN0011:        cmp      ebp, dword ptr [rcx+8]
IN0012:        jae      L_M1591_BB12
Generating: N117 (  1,  1) [000196] ------------       t196 =    LCL_VAR   ref    V17 tmp13        u:2 rcx (last use) REG rcx <l:$183, c:$343>
Generating: N119 (  1,  1) [000197] ------------       t197 =    LCL_VAR   int    V11 tmp7         u:3 rbp REG rbp $300
                                                              /--*  t197   int    
Generating: N121 (  2,  3) [000200] ------------       t200 = *  CAST      long <- int REG rdx $400
IN0013:        movsxd   rdx, ebp
                                                              /--*  t196   ref    
                                                              +--*  t200   long   
Generating: N123 (  5,  6) [000205] -c----------       t205 = *  LEA(b+(i*8)+16) byref  REG NA
                                                              /--*  t205   byref  
Generating: N125 (  6,  7) [000114] a---G-------       t114 = *  IND       ref    REG rdx <l:$194, c:$345>
							V17 in reg rcx is becoming dead  [000196]
							Live regs: 000000EA {rcx rbx rbp rsi rdi} => 000000E8 {rbx rbp rsi rdi}
							Live vars: {V01 V09 V11 V12 V17} => {V01 V09 V11 V12}
							GC regs: 000000C2 {rcx rsi rdi} => 000000C0 {rsi rdi}
IN0014:        mov      rdx, gword ptr [rcx+8*rdx+16]
							GC regs: 000000C0 {rsi rdi} => 000000C4 {rdx rsi rdi}
                                                              /--*  t114   ref    
Generating: N127 ( 18, 22) [000116] DA-XGO------              *  STORE_LCL_VAR ref    V10 tmp6         d:4 rdx REG rdx
							GC regs: 000000C4 {rdx rsi rdi} => 000000C0 {rsi rdi}
							V10 in reg rdx is becoming live  [000116]
							Live regs: 000000E8 {rbx rbp rsi rdi} => 000000EC {rdx rbx rbp rsi rdi}
							Live vars: {V01 V09 V11 V12} => {V01 V09 V10 V11 V12}
							GC regs: 000000C0 {rsi rdi} => 000000C4 {rdx rsi rdi}
genIPmappingAdd: ignoring duplicate IL offset 0x1e
Generating: N129 (???,???) [000249] ------------                 IL_OFFSET void   IL offset: 0x1e REG NA
Generating: N131 (  1,  1) [000121] ------------       t121 =    LCL_VAR   int    V11 tmp7         u:3 rbp (last use) REG rbp $300
Generating: N133 (  1,  1) [000122] -c----------       t122 =    CNS_INT   int    1 REG NA $44
                                                              /--*  t121   int    
                                                              +--*  t122   int    
Generating: N135 (  3,  3) [000123] ------------       t123 = *  ADD       int    REG rbp $29f
							V11 in reg rbp is becoming dead  [000121]
							Live regs: 000000EC {rdx rbx rbp rsi rdi} => 000000CC {rdx rbx rsi rdi}
							Live vars: {V01 V09 V10 V11 V12} => {V01 V09 V10 V12}
IN0015:        inc      ebp
                                                              /--*  t123   int    
Generating: N137 (  3,  3) [000125] DA----------              *  STORE_LCL_VAR int    V11 tmp7         d:6 rbp REG rbp
							V11 in reg rbp is becoming live  [000125]
							Live regs: 000000CC {rdx rbx rsi rdi} => 000000EC {rdx rbx rbp rsi rdi}
							Live vars: {V01 V09 V10 V12} => {V01 V09 V10 V11 V12}
genIPmappingAdd: ignoring duplicate IL offset 0x1e
Generating: N139 (???,???) [000250] ------------                 IL_OFFSET void   IL offset: 0x1e REG NA
Generating: N141 (  1,  1) [000126] -c----------       t126 =    CNS_INT   int    1 REG NA $44
                                                              /--*  t126   int    
Generating: N143 (  1,  3) [000129] DA----------              *  STORE_LCL_VAR int    V07 tmp3         d:4 rcx REG rcx
IN0016:        mov      ecx, 1
							V07 in reg rcx is becoming live  [000129]
							Live regs: 000000EC {rdx rbx rbp rsi rdi} => 000000EE {rcx rdx rbx rbp rsi rdi}
							Live vars: {V01 V09 V10 V11 V12} => {V01 V07 V09 V10 V11 V12}

Scope info: end block BB06, IL range [01E..01F)
Scope info: open scopes =
   1 (V01 loc0) [000..03E)
IN0017:        jmp      L_M1591_BB09

=============== Generating BB07 [01E..01F) -> BB11 (cond), preds={BB04,BB05} succs={BB08,BB11} flags=0x00000000.210b0020: i label target gcsafe bwd LIR 
BB07 IN (3)={V09 V12 V01} + ByrefExposed + GcHeap
     OUT(3)={V09 V12 V01} + ByrefExposed + GcHeap

Recording Var Locations at start of BB07
  V09(rsi)  V12(rbx)  V01(rdi)
Change life 00000000000002B5 {V01 V07 V09 V10 V11 V12} -> 0000000000000221 {V01 V09 V12}
							V11 in reg rbp is becoming dead  [------]
							Live regs: (unchanged) 00000000 {}
							V07 in reg rcx is becoming dead  [------]
							Live regs: (unchanged) 00000000 {}
							V10 in reg rdx is becoming dead  [------]
							Live regs: (unchanged) 00000000 {}
							Live regs: 00000000 {} => 000000C8 {rbx rsi rdi}
							GC regs: 00000000 {} => 000000C0 {rsi rdi}
							Byref regs: (unchanged) 00000000 {}

      L_M1591_BB07:

      G_M1591_IG07:        ; offs=000041H, funclet=00, bbWeight=2   
Label: IG08, GCvars=0000000000000000 {}, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}

Scope info: begin block BB07, IL range [01E..01F)
Scope info: open scopes =
   1 (V01 loc0) [000..03E)
genIPmappingAdd: ignoring duplicate IL offset 0x1e
Generating: N147 (???,???) [000251] ------------                 IL_OFFSET void   IL offset: 0x1e REG NA
Generating: N149 (  1,  1) [000137] ------------       t137 =    LCL_VAR   int    V12 tmp8         u:2 rbx REG rbx <l:$281, c:$1c1>
Generating: N151 (  1,  1) [000140] ------------       t140 =    LCL_VAR   ref    V09 tmp5         u:2 rsi REG rsi $80
                                                              /--*  t140   ref    
Generating: N153 (  2,  2) [000211] -c----------       t211 = *  LEA(b+20) byref  REG NA
                                                              /--*  t211   byref  
Generating: N155 (  4,  4) [000141] nc--GO------       t141 = *  IND       int    REG NA <l:$288, c:$295>
                                                              /--*  t137   int    
                                                              +--*  t141   int    
Generating: N157 (  6,  6) [000142] J---GO-N----              *  NE        void   REG NA <l:$28c, c:$297>
IN0018:        cmp      ebx, dword ptr [rsi+20]
Generating: N159 (  8,  8) [000143] ----GO------              *  JTRUE     void   REG NA
IN0019:        jne      L_M1591_BB11

Scope info: end block BB07, IL range [01E..01F)
Scope info: open scopes =
   1 (V01 loc0) [000..03E)

=============== Generating BB08 [01E..01F), preds={BB07} succs={BB09} flags=0x00000000.210b0020: i label target gcsafe bwd LIR 
BB08 IN (3)={V09         V12     V01} + ByrefExposed + GcHeap
     OUT(6)={V09 V11 V07 V12 V10 V01} + ByrefExposed + GcHeap

Recording Var Locations at start of BB08
  V09(rsi)  V12(rbx)  V01(rdi)
Liveness not changing: 0000000000000221 {V01 V09 V12}
							Live regs: 00000000 {} => 000000C8 {rbx rsi rdi}
							GC regs: 00000000 {} => 000000C0 {rsi rdi}
							Byref regs: (unchanged) 00000000 {}

      L_M1591_BB08:

      G_M1591_IG08:        ; offs=000062H, funclet=00, bbWeight=2   
Label: IG09, GCvars=0000000000000000 {}, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}

Scope info: begin block BB08, IL range [01E..01F)
Scope info: open scopes =
   1 (V01 loc0) [000..03E)
genIPmappingAdd: ignoring duplicate IL offset 0x1e
Generating: N163 (???,???) [000252] ------------                 IL_OFFSET void   IL offset: 0x1e REG NA
Generating: N165 (  1,  1) [000148] ------------       t148 =    LCL_VAR   ref    V09 tmp5         u:2 rsi REG rsi $80
                                                              /--*  t148   ref    
Generating: N167 (  2,  2) [000213] -c----------       t213 = *  LEA(b+16) byref  REG NA
                                                              /--*  t213   byref  
Generating: N169 (  4,  4) [000149] n---GO------       t149 = *  IND       int    REG rbp <l:$290, c:$298>
IN001a:        mov      ebp, dword ptr [rsi+16]
Generating: N171 (  1,  1) [000150] -c----------       t150 =    CNS_INT   int    1 REG NA $44
                                                              /--*  t149   int    
                                                              +--*  t150   int    
Generating: N173 (  6,  6) [000151] ----GO------       t151 = *  ADD       int    REG rbp <l:$29c, c:$29b>
IN001b:        inc      ebp
                                                              /--*  t151   int    
Generating: N175 (  6,  6) [000153] DA--GO------              *  STORE_LCL_VAR int    V11 tmp7         d:5 rbp REG rbp
							V11 in reg rbp is becoming live  [000153]
							Live regs: 000000C8 {rbx rsi rdi} => 000000E8 {rbx rbp rsi rdi}
							Live vars: {V01 V09 V12} => {V01 V09 V11 V12}
genIPmappingAdd: ignoring duplicate IL offset 0x1e
Generating: N177 (???,???) [000253] ------------                 IL_OFFSET void   IL offset: 0x1e REG NA
Generating: N179 (  1,  1) [000158] ------------       t158 =    CNS_INT   ref    null REG rdx $VN.Null
IN001c:        xor      rdx, rdx
							GC regs: 000000C0 {rsi rdi} => 000000C4 {rdx rsi rdi}
                                                              /--*  t158   ref    
Generating: N181 (  1,  3) [000160] DA----------              *  STORE_LCL_VAR ref    V10 tmp6         d:3 rdx REG rdx
							GC regs: 000000C4 {rdx rsi rdi} => 000000C0 {rsi rdi}
							V10 in reg rdx is becoming live  [000160]
							Live regs: 000000E8 {rbx rbp rsi rdi} => 000000EC {rdx rbx rbp rsi rdi}
							Live vars: {V01 V09 V11 V12} => {V01 V09 V10 V11 V12}
							GC regs: 000000C0 {rsi rdi} => 000000C4 {rdx rsi rdi}
genIPmappingAdd: ignoring duplicate IL offset 0x1e
Generating: N183 (???,???) [000254] ------------                 IL_OFFSET void   IL offset: 0x1e REG NA
Generating: N185 (  1,  1) [000096] ------------        t96 =    CNS_INT   int    0 REG rcx $40
IN001d:        xor      ecx, ecx
                                                              /--*  t96    int    
Generating: N187 (  1,  3) [000098] DA----------              *  STORE_LCL_VAR int    V07 tmp3         d:3 rcx REG rcx
							V07 in reg rcx is becoming live  [000098]
							Live regs: 000000EC {rdx rbx rbp rsi rdi} => 000000EE {rcx rdx rbx rbp rsi rdi}
							Live vars: {V01 V09 V10 V11 V12} => {V01 V07 V09 V10 V11 V12}

Scope info: end block BB08, IL range [01E..01F)
Scope info: open scopes =
   1 (V01 loc0) [000..03E)

=============== Generating BB09 [???..???) -> BB03 (cond), preds={BB06,BB08} succs={BB10,BB03} flags=0x00000000.210b0040: internal label target gcsafe bwd LIR 
BB09 IN (6)={V09 V11 V07 V12 V10 V01} + ByrefExposed + GcHeap
     OUT(5)={V09 V11     V12 V10 V01} + ByrefExposed + GcHeap

Recording Var Locations at start of BB09
  V09(rsi)  V11(rbp)  V07(rcx)  V12(rbx)  V10(rdx)  V01(rdi)
Liveness not changing: 00000000000002B5 {V01 V07 V09 V10 V11 V12}
							Live regs: 00000000 {} => 000000EE {rcx rdx rbx rbp rsi rdi}
							GC regs: 00000000 {} => 000000C4 {rdx rsi rdi}
							Byref regs: (unchanged) 00000000 {}

      L_M1591_BB09:

      G_M1591_IG09:        ; offs=00006BH, funclet=00, bbWeight=2   
Label: IG10, GCvars=0000000000000000 {}, gcrefRegs=000000C4 {rdx rsi rdi}, byrefRegs=00000000 {}

Scope info: begin block BB09, IL range [???..???)
Scope info: ignoring block beginning
Added IP mapping: NO_MAP STACK_EMPTY (G_M1591_IG10,ins#0,ofs#0) label
Generating: N191 (  1,  1) [000130] ------------       t130 =    LCL_VAR   bool   V07 tmp3         u:2 rcx (last use) REG rcx $4c0
Generating: N193 (  1,  1) [000019] -c----------        t19 =    CNS_INT   int    0 REG NA $40
                                                              /--*  t130   bool   
                                                              +--*  t19    int    
Generating: N195 (  3,  3) [000020] J------N----              *  NE        void   REG NA $2a1
							V07 in reg rcx is becoming dead  [000130]
							Live regs: 000000EE {rcx rdx rbx rbp rsi rdi} => 000000EC {rdx rbx rbp rsi rdi}
							Live vars: {V01 V07 V09 V10 V11 V12} => {V01 V09 V10 V11 V12}
IN001e:        test     ecx, ecx
Generating: N197 (  5,  5) [000021] ------------              *  JTRUE     void   REG NA
IN001f:        jne      SHORT L_M1591_BB03

Scope info: end block BB09, IL range [???..???)
Scope info: ignoring block end

=============== Generating BB10 [027..03E) (return), preds={BB09} succs={} flags=0x00000000.20080020: i gcsafe LIR 
BB10 IN (1)={V01} + ByrefExposed + GcHeap
     OUT(0)={   }

Recording Var Locations at start of BB10
  V01(rdi)
Change life 00000000000002A5 {V01 V09 V10 V11 V12} -> 0000000000000200 {V01}
							V09 in reg rsi is becoming dead  [------]
							Live regs: (unchanged) 00000000 {}
							V11 in reg rbp is becoming dead  [------]
							Live regs: (unchanged) 00000000 {}
							V12 in reg rbx is becoming dead  [------]
							Live regs: (unchanged) 00000000 {}
							V10 in reg rdx is becoming dead  [------]
							Live regs: (unchanged) 00000000 {}
							Live regs: 00000000 {} => 00000080 {rdi}
							GC regs: 00000000 {} => 00000080 {rdi}
							Byref regs: (unchanged) 00000000 {}

      L_M1591_BB10:

      G_M1591_IG10:        ; offs=000074H, funclet=00, bbWeight=8   
Label: IG11, GCvars=0000000000000000 {}, gcrefRegs=00000080 {rdi}, byrefRegs=00000000 {}

Scope info: begin block BB10, IL range [027..03E)
Scope info: open scopes =
   1 (V01 loc0) [000..03E)
Generating: N215 (  1,  1) [000032] ------------        t32 =    LCL_VAR   ref    V01 loc0         u:2 rdi (last use) REG rdi $180
                                                              /--*  t32    ref    
Generating: N217 (  2,  2) [000216] -c----------       t216 = *  LEA(b+8)  byref  REG NA
                                                              /--*  t216   byref  
Generating: N219 (  4,  4) [000166] n---GO------       t166 = *  IND       ref    REG rax <l:$1a0, c:$19f>
							V01 in reg rdi is becoming dead  [000032]
							Live regs: 00000080 {rdi} => 00000000 {}
							Live vars: {V01} => {}
							GC regs: 00000080 {rdi} => 00000000 {}
IN0020:        mov      rax, gword ptr [rdi+8]
							GC regs: 00000000 {} => 00000001 {rax}
                                                              /--*  t166   ref    
Generating: N221 (  5,  5) [000035] ----GO------              *  RETURN    ref    REG NA $149
							GC regs: 00000001 {rax} => 00000000 {}

Scope info: end block BB10, IL range [027..03E)
Scope info: ending scope, LVnum=0 [000..03E)
Scope info: ending scope, LVnum=1 [000..03E)
Scope info: ending scope, LVnum=2 [000..03E)
siEndScope: Failed to end scope for V02
Scope info: ending scope, LVnum=3 [000..03E)
siEndScope: Failed to end scope for V03
Scope info: open scopes =
   <none>
Added IP mapping: EPILOG STACK_EMPTY (G_M1591_IG11,ins#1,ofs#4) label
							GC regs: 00000000 {} => 00000001 {rax}
Extending return value GC liveness to epilog
Reserving epilog IG for block BB10

      G_M1591_IG11:        ; offs=000078H, funclet=00, bbWeight=1   
*************** After placeholder IG creation
G_M1591_IG01:        ; func=00, offs=000000H, size=0000H, gcrefRegs=00000000 {} <-- Prolog IG
G_M1591_IG02:        ; offs=000000H, size=001FH, gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref
G_M1591_IG03:        ; offs=00001FH, size=0005H, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref
G_M1591_IG04:        ; offs=000024H, size=0008H, gcrefRegs=000000C4 {rdx rsi rdi}, byrefRegs=00000000 {}, byref
G_M1591_IG05:        ; offs=00002CH, size=000CH, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref
G_M1591_IG06:        ; offs=000038H, size=0009H, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref
G_M1591_IG07:        ; offs=000041H, size=0021H, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref
G_M1591_IG08:        ; offs=000062H, size=0009H, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref
G_M1591_IG09:        ; offs=00006BH, size=0009H, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref
G_M1591_IG10:        ; offs=000074H, size=0004H, gcrefRegs=000000C4 {rdx rsi rdi}, byrefRegs=00000000 {}, byref
G_M1591_IG11:        ; offs=000078H, size=0004H, gcrefRegs=00000080 {rdi}, byrefRegs=00000000 {}, byref
G_M1591_IG12:        ; epilog placeholder, next placeholder=<END>, BB10 [0004], epilog, extend <-- First placeholder <-- Last placeholder
                     ;   PrevGCVars=0000000000000000 {}, PrevGCrefRegs=000000C4 {rdx rsi rdi}, PrevByrefRegs=00000000 {}
                     ;   InitGCVars=0000000000000000 {}, InitGCrefRegs=00000080 {rdi}, InitByrefRegs=00000000 {}
G_M1591_IG13:        ; offs=00017CH, size=0000H, gcrefRegs=00000000 {} <-- Current IG

=============== Generating BB11 [01E..01F) (throw), preds={BB07} succs={} flags=0x00000002.210b1020: i rare label target hascall gcsafe bwd LIR 
BB11 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={}

Recording Var Locations at start of BB11
  <none>

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M1591_BB11:
Label: IG13, GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB11, IL range [01E..01F)
Scope info: open scopes =
   <none>
Added IP mapping: 0x001E STACK_EMPTY (G_M1591_IG13,ins#0,ofs#0) label
Generating: N225 (???,???) [000255] ------------                 IL_OFFSET void   IL offset: 0x1e REG NA
Generating: N227 ( 14,  5) [000163] --CXG-------                 CALL      void   System.ThrowHelper.ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion REG NA $VN.Void
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN0021:        call     System.ThrowHelper:ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion()

Scope info: end block BB11, IL range [01E..01F)
Scope info: open scopes =
   <none>
IN0022:        int3     

=============== Generating BB12 [???..???) (throw), preds={} succs={} flags=0x00000000.20031070: keep i internal rare label target LIR 
BB12 IN (0)={}
     OUT(0)={}

Recording Var Locations at start of BB12
  <none>

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M1591_BB12:

      G_M1591_IG13:        ; offs=00017CH, funclet=00, bbWeight=0   
Label: IG14, GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB12, IL range [???..???)
Scope info: ignoring block beginning
Added IP mapping: NO_MAP STACK_EMPTY (G_M1591_IG14,ins#0,ofs#0) label
Generating: N231 ( 14,  5) [000258] --CXG-------                 CALL help void   HELPER.CORINFO_HELP_RNGCHKFAIL REG NA
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN0023:        call     CORINFO_HELP_RNGCHKFAIL

Scope info: end block BB12, IL range [???..???)
Scope info: ignoring block end
IN0024:        int3     
Liveness not changing: 0000000000000000 {}

# compCycleEstimate =    152, compSizeEstimate =   143 SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]
; Final local variable assignments
;
;  V00 arg0         [V00,T08] (  3,  3   )     ref  ->  rsi         class-hnd
;  V01 loc0         [V01,T09] (  3,  4   )     ref  ->  rdi         class-hnd exact
;* V02 loc1         [V02    ] (  0,  0   )  struct (24) zero-ref    ld-addr-op
;* V03 loc2         [V03    ] (  0,  0   )     ref  ->  zero-ref    class-hnd
;  V04 OutArgs      [V04    ] (  1,  1   )  lclBlk (32) [rsp+0x00]   "OutgoingArgSpace"
;  V05 tmp1         [V05,T06] (  3,  6   )     ref  ->  rdi         class-hnd exact "NewObj constructor temp"
;* V06 tmp2         [V06    ] (  0,  0   )  struct (24) zero-ref    "NewObj constructor temp"
;  V07 tmp3         [V07,T04] (  3, 12   )    bool  ->  rcx         "Inline return value spill temp"
;  V08 tmp4         [V08,T01] (  2, 16   )     ref  ->  rcx         class-hnd "Inline stloc first use temp"
;  V09 tmp5         [V09,T00] (  6, 16   )     ref  ->  rsi         V02._list(offs=0x00) P-INDEP "field V02._list (fldOffset=0x0)"
;  V10 tmp6         [V10,T07] (  3,  6   )     ref  ->  rdx         V02._current(offs=0x08) P-INDEP "field V02._current (fldOffset=0x8)"
;  V11 tmp7         [V11,T02] (  7, 12   )     int  ->  rbp         V02._index(offs=0x10) P-INDEP "field V02._index (fldOffset=0x10)"
;  V12 tmp8         [V12,T05] (  3, 11   )     int  ->  rbx         V02._version(offs=0x14) P-INDEP "field V02._version (fldOffset=0x14)"
;  V13 tmp9         [V13,T10] (  3,  3   )     ref  ->  rsi         V06._list(offs=0x00) P-INDEP "field V06._list (fldOffset=0x0)"
;* V14 tmp10        [V14    ] (  0,  0   )     ref  ->  zero-ref    V06._current(offs=0x08) P-INDEP "field V06._current (fldOffset=0x8)"
;* V15 tmp11        [V15,T12] (  0,  0   )     int  ->  zero-ref    V06._index(offs=0x10) P-INDEP "field V06._index (fldOffset=0x10)"
;  V16 tmp12        [V16,T11] (  2,  2   )     int  ->  rbx         V06._version(offs=0x14) P-INDEP "field V06._version (fldOffset=0x14)"
;  V17 tmp13        [V17,T03] (  3, 12   )     ref  ->  rcx         "arr expr"
;
; Lcl frame size = 40
*************** Before prolog / epilog generation
G_M1591_IG01:        ; func=00, offs=000000H, size=0000H, gcrefRegs=00000000 {} <-- Prolog IG
G_M1591_IG02:        ; offs=000000H, size=001FH, gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref
G_M1591_IG03:        ; offs=00001FH, size=0005H, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref
G_M1591_IG04:        ; offs=000024H, size=0008H, gcrefRegs=000000C4 {rdx rsi rdi}, byrefRegs=00000000 {}, byref
G_M1591_IG05:        ; offs=00002CH, size=000CH, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref
G_M1591_IG06:        ; offs=000038H, size=0009H, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref
G_M1591_IG07:        ; offs=000041H, size=0021H, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref
G_M1591_IG08:        ; offs=000062H, size=0009H, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref
G_M1591_IG09:        ; offs=00006BH, size=0009H, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref
G_M1591_IG10:        ; offs=000074H, size=0004H, gcrefRegs=000000C4 {rdx rsi rdi}, byrefRegs=00000000 {}, byref
G_M1591_IG11:        ; offs=000078H, size=0004H, gcrefRegs=00000080 {rdi}, byrefRegs=00000000 {}, byref
G_M1591_IG12:        ; epilog placeholder, next placeholder=<END>, BB10 [0004], epilog, extend <-- First placeholder <-- Last placeholder
                     ;   PrevGCVars=0000000000000000 {}, PrevGCrefRegs=000000C4 {rdx rsi rdi}, PrevByrefRegs=00000000 {}
                     ;   InitGCVars=0000000000000000 {}, InitGCrefRegs=00000080 {rdi}, InitByrefRegs=00000000 {}
G_M1591_IG13:        ; offs=00017CH, size=0006H, gcVars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, gcvars, byref
G_M1591_IG14:        ; offs=000182H, size=0000H, gcrefRegs=00000000 {} <-- Current IG
Recording Var Locations at start of BB01
  V00(rsi)

      G_M1591_IG14:        ; offs=000182H, funclet=00, bbWeight=0   
*************** In genFnProlog()
Added IP mapping to front: PROLOG STACK_EMPTY (G_M1591_IG01,ins#0,ofs#0) label

__prolog:
IN0025:        push     rdi
IN0026:        push     rsi
IN0027:        push     rbp
IN0028:        push     rbx
IN0029:        sub      rsp, 40
*************** In genFnPrologCalleeRegArgs() for int regs
IN002a:        mov      rsi, rcx
*************** In genEnregisterIncomingStackArgs()


      G_M1591_IG01:        ; offs=000000H, funclet=00, bbWeight=1   
*************** In genFnEpilog()

__epilog:
gcVarPtrSetCur=0000000000000000 {}, gcRegGCrefSetCur=00000080 {rdi}, gcRegByrefSetCur=00000000 {}
IN002b:        add      rsp, 40
IN002c:        pop      rbx
IN002d:        pop      rbp
IN002e:        pop      rsi
IN002f:        pop      rdi
IN0030:        ret      

      G_M1591_IG12:        ; offs=00007CH, funclet=00, bbWeight=1   
0 prologs, 1 epilogs, 0 funclet prologs, 0 funclet epilogs
*************** After prolog / epilog generation
G_M1591_IG01:        ; func=00, offs=000000H, size=000BH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref, nogc <-- Prolog IG
G_M1591_IG02:        ; offs=00000BH, size=001FH, gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref
G_M1591_IG03:        ; offs=00002AH, size=0005H, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref
G_M1591_IG04:        ; offs=00002FH, size=0008H, gcrefRegs=000000C4 {rdx rsi rdi}, byrefRegs=00000000 {}, byref
G_M1591_IG05:        ; offs=000037H, size=000CH, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref
G_M1591_IG06:        ; offs=000043H, size=0009H, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref
G_M1591_IG07:        ; offs=00004CH, size=0021H, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref
G_M1591_IG08:        ; offs=00006DH, size=0009H, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref
G_M1591_IG09:        ; offs=000076H, size=0009H, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref
G_M1591_IG10:        ; offs=00007FH, size=0004H, gcrefRegs=000000C4 {rdx rsi rdi}, byrefRegs=00000000 {}, byref
G_M1591_IG11:        ; offs=000083H, size=0004H, gcrefRegs=00000080 {rdi}, byrefRegs=00000000 {}, byref
G_M1591_IG12:        ; offs=000087H, size=0009H, epilog, nogc, extend
G_M1591_IG13:        ; offs=000090H, size=0006H, gcVars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, gcvars, byref
G_M1591_IG14:        ; offs=000096H, size=0006H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref
*************** In emitJumpDistBind()
Binding: IN0008: 000000 jmp      L_M1591_BB04
Binding L_M1591_BB04 to G_M1591_IG05
Estimate of fwd jump [D1FFAB1E/008]: 002A -> 0037 = 000B
Shrinking jump [D1FFAB1E/008]
Adjusted offset of BB04 from 002F to 002C
Adjusted offset of BB05 from 0037 to 0034
Binding: IN000d: 000000 jne      L_M1591_BB07
Binding L_M1591_BB07 to G_M1591_IG08
Estimate of fwd jump [D1FFAB1E/013]: 003A -> 006A = 002E
Shrinking jump [D1FFAB1E/013]
Adjusted offset of BB06 from 0043 to 003C
Binding: IN000f: 000000 jae      L_M1591_BB07
Binding L_M1591_BB07 to G_M1591_IG08
Estimate of fwd jump [D1FFAB1E/015]: 003F -> 0066 = 0025
Shrinking jump [D1FFAB1E/015]
Adjusted offset of BB07 from 004C to 0041
Binding: IN0012: 000000 jae      L_M1591_BB12
Binding L_M1591_BB12 to G_M1591_IG14
Estimate of fwd jump [D1FFAB1E/018]: 0048 -> 008B = 0041
Shrinking jump [D1FFAB1E/018]
Binding: IN0017: 000000 jmp      L_M1591_BB09
Binding L_M1591_BB09 to G_M1591_IG10
Estimate of fwd jump [D1FFAB1E/023]: 0059 -> 0070 = 0015
Shrinking jump [D1FFAB1E/023]
Adjusted offset of BB08 from 006D to 005B
Binding: IN0019: 000000 jne      L_M1591_BB11
Binding L_M1591_BB11 to G_M1591_IG13
Estimate of fwd jump [D1FFAB1E/025]: 005E -> 007E = 001E
Shrinking jump [D1FFAB1E/025]
Adjusted offset of BB09 from 0076 to 0060
Adjusted offset of BB10 from 007F to 0069
Binding: IN001f: 000000 jne      SHORT L_M1591_BB03
Binding L_M1591_BB03 to G_M1591_IG04
Estimate of bwd jump [D1FFAB1E/031]: 006B -> 002C = 0041
Shrinking jump [D1FFAB1E/031]
Adjusted offset of BB11 from 0083 to 006D
Adjusted offset of BB12 from 0087 to 0071
Adjusted offset of BB13 from 0090 to 007A
Adjusted offset of BB14 from 0096 to 0080
Total shrinkage =  22, min extra jump size = 4294967295

*************** Finishing PHASE Generate code

*************** Starting PHASE Emit code

Hot  code size = 0x86 bytes
Cold code size = 0x0 bytes
reserveUnwindInfo(isFunclet=FALSE, isColdCode=FALSE, unwindSize=0xe)
*************** In emitEndCodeGen()
Converting emitMaxStackDepth from bytes (0) to elements (0)

***************************************************************************
Instructions as they come out of the scheduler


G_M1591_IG01:        ; func=00, offs=000000H, size=000BH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref, nogc <-- Prolog IG
IN0025: 000000 push     rdi
IN0026: 000001 push     rsi
IN0027: 000002 push     rbp
IN0028: 000003 push     rbx
IN0029: 000004 sub      rsp, 40
IN002a: 000008 mov      rsi, rcx
       ; gcrRegs +[rsi]
						;; bbWeight=1    PerfScore 4.50
G_M1591_IG02:        ; func=00, offs=00000BH, size=001FH, gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref
IN0001: 00000B mov      rcx, 0xD1FFAB1E
IN0002: 000015 call     CORINFO_HELP_NEWSFAST
       ; gcrRegs +[rax]
       ; gcr arg pop 0
IN0003: 00001A mov      rdi, rax
       ; gcrRegs +[rdi]
IN0004: 00001D mov      rcx, rdi
       ; gcrRegs +[rcx]
IN0005: 000020 call     Batcher:.ctor():this
       ; gcrRegs -[rax rcx]
       ; gcr arg pop 0
IN0006: 000025 mov      ebx, dword ptr [rsi+20]
IN0007: 000028 xor      ebp, ebp
						;; bbWeight=1    PerfScore 5.00
G_M1591_IG03:        ; func=00, offs=00002AH, size=0002H, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref, isz
IN0008: 00002A jmp      SHORT G_M1591_IG05
						;; bbWeight=1    PerfScore 2.00
G_M1591_IG04:        ; func=00, offs=00002CH, size=0008H, gcrefRegs=000000C4 {rdx rsi rdi}, byrefRegs=00000000 {}, byref
       ; gcrRegs +[rdx]
IN0009: 00002C mov      rcx, rdi
       ; gcrRegs +[rcx]
IN000a: 00002F call     Batcher:Push(System.String):this
       ; gcrRegs -[rcx rdx]
       ; gcr arg pop 0
						;; bbWeight=2    PerfScore 2.50
G_M1591_IG05:        ; func=00, offs=000034H, size=0008H, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref, isz
IN000b: 000034 mov      rcx, rsi
       ; gcrRegs +[rcx]
IN000c: 000037 cmp      ebx, dword ptr [rcx+20]
IN000d: 00003A jne      SHORT G_M1591_IG08
						;; bbWeight=8    PerfScore 26.00
G_M1591_IG06:        ; func=00, offs=00003CH, size=0005H, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[rcx]
IN000e: 00003C cmp      ebp, dword ptr [rsi+16]
IN000f: 00003F jae      SHORT G_M1591_IG08
						;; bbWeight=1    PerfScore 3.00
G_M1591_IG07:        ; func=00, offs=000041H, size=001AH, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref, isz
IN0010: 000041 mov      rcx, gword ptr [rsi+8]
       ; gcrRegs +[rcx]
IN0011: 000045 cmp      ebp, dword ptr [rcx+8]
IN0012: 000048 jae      SHORT G_M1591_IG14
IN0013: 00004A movsxd   rdx, ebp
IN0014: 00004D mov      rdx, gword ptr [rcx+8*rdx+16]
       ; gcrRegs +[rdx]
IN0015: 000052 inc      ebp
IN0016: 000054 mov      ecx, 1
       ; gcrRegs -[rcx]
IN0017: 000059 jmp      SHORT G_M1591_IG10
						;; bbWeight=2    PerfScore 19.50
G_M1591_IG08:        ; func=00, offs=00005BH, size=0005H, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref, isz
       ; gcrRegs -[rdx]
IN0018: 00005B cmp      ebx, dword ptr [rsi+20]
IN0019: 00005E jne      SHORT G_M1591_IG13
						;; bbWeight=2    PerfScore 6.00
G_M1591_IG09:        ; func=00, offs=000060H, size=0009H, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref
IN001a: 000060 mov      ebp, dword ptr [rsi+16]
IN001b: 000063 inc      ebp
IN001c: 000065 xor      rdx, rdx
       ; gcrRegs +[rdx]
IN001d: 000067 xor      ecx, ecx
						;; bbWeight=2    PerfScore 5.50
G_M1591_IG10:        ; func=00, offs=000069H, size=0004H, gcrefRegs=000000C4 {rdx rsi rdi}, byrefRegs=00000000 {}, byref, isz
IN001e: 000069 test     ecx, ecx
IN001f: 00006B jne      SHORT G_M1591_IG04
						;; bbWeight=8    PerfScore 10.00
G_M1591_IG11:        ; func=00, offs=00006DH, size=0004H, gcrefRegs=00000080 {rdi}, byrefRegs=00000000 {}, byref
       ; gcrRegs -[rdx rsi]
IN0020: 00006D mov      rax, gword ptr [rdi+8]
       ; gcrRegs +[rax]
						;; bbWeight=1    PerfScore 2.00
G_M1591_IG12:        ; func=00, offs=000071H, size=0009H, epilog, nogc, extend
IN002b: 000071 add      rsp, 40
IN002c: 000075 pop      rbx
IN002d: 000076 pop      rbp
IN002e: 000077 pop      rsi
IN002f: 000078 pop      rdi
IN0030: 000079 ret      
						;; bbWeight=1    PerfScore 3.25
G_M1591_IG13:        ; func=00, offs=00007AH, size=0006H, gcVars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, gcvars, byref
       ; gcrRegs -[rax rdi]
IN0021: 00007A call     System.ThrowHelper:ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion()
       ; gcr arg pop 0
IN0022: 00007F int3     
						;; bbWeight=0    PerfScore 0.00
G_M1591_IG14:        ; func=00, offs=000080H, size=0006H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref
IN0023: 000080 call     CORINFO_HELP_RNGCHKFAIL
       ; gcr arg pop 0
IN0024: 000085 int3     
						;; bbWeight=0    PerfScore 0.00Allocated method code size =  134 , actual size =  134

; Total bytes of code 134, prolog size 8, PerfScore 102.65, instruction count 48 (MethodHash=41e2f9c8) for method SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]
; ============================================================

*************** After end code gen, before unwindEmit()
G_M1591_IG01:        ; func=00, offs=000000H, size=000BH, bbWeight=1    PerfScore 4.50, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref, nogc <-- Prolog IG

IN0025: 000000 push     rdi
IN0026: 000001 push     rsi
IN0027: 000002 push     rbp
IN0028: 000003 push     rbx
IN0029: 000004 sub      rsp, 40
IN002a: 000008 mov      rsi, rcx

G_M1591_IG02:        ; offs=00000BH, size=001FH, bbWeight=1    PerfScore 5.00, gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}, byref

IN0001: 00000B mov      rcx, 0xD1FFAB1E
IN0002: 000015 call     CORINFO_HELP_NEWSFAST
IN0003: 00001A mov      rdi, rax
IN0004: 00001D mov      rcx, rdi
IN0005: 000020 call     Batcher:.ctor():this
IN0006: 000025 mov      ebx, dword ptr [rsi+20]
IN0007: 000028 xor      ebp, ebp

G_M1591_IG03:        ; offs=00002AH, size=0002H, bbWeight=1    PerfScore 2.00, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref, isz

IN0008: 00002A jmp      SHORT G_M1591_IG05

G_M1591_IG04:        ; offs=00002CH, size=0008H, bbWeight=2    PerfScore 2.50, gcrefRegs=000000C4 {rdx rsi rdi}, byrefRegs=00000000 {}, byref

IN0009: 00002C mov      rcx, rdi
IN000a: 00002F call     Batcher:Push(System.String):this

G_M1591_IG05:        ; offs=000034H, size=0008H, bbWeight=8    PerfScore 26.00, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref, isz

IN000b: 000034 mov      rcx, rsi
IN000c: 000037 cmp      ebx, dword ptr [rcx+20]
IN000d: 00003A jne      SHORT G_M1591_IG08

G_M1591_IG06:        ; offs=00003CH, size=0005H, bbWeight=1    PerfScore 3.00, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref, isz

IN000e: 00003C cmp      ebp, dword ptr [rsi+16]
IN000f: 00003F jae      SHORT G_M1591_IG08

G_M1591_IG07:        ; offs=000041H, size=001AH, bbWeight=2    PerfScore 19.50, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref, isz

IN0010: 000041 mov      rcx, gword ptr [rsi+8]
IN0011: 000045 cmp      ebp, dword ptr [rcx+8]
IN0012: 000048 jae      SHORT G_M1591_IG14
IN0013: 00004A movsxd   rdx, ebp
IN0014: 00004D mov      rdx, gword ptr [rcx+8*rdx+16]
IN0015: 000052 inc      ebp
IN0016: 000054 mov      ecx, 1
IN0017: 000059 jmp      SHORT G_M1591_IG10

G_M1591_IG08:        ; offs=00005BH, size=0005H, bbWeight=2    PerfScore 6.00, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref, isz

IN0018: 00005B cmp      ebx, dword ptr [rsi+20]
IN0019: 00005E jne      SHORT G_M1591_IG13

G_M1591_IG09:        ; offs=000060H, size=0009H, bbWeight=2    PerfScore 5.50, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}, byref

IN001a: 000060 mov      ebp, dword ptr [rsi+16]
IN001b: 000063 inc      ebp
IN001c: 000065 xor      rdx, rdx
IN001d: 000067 xor      ecx, ecx

G_M1591_IG10:        ; offs=000069H, size=0004H, bbWeight=8    PerfScore 10.00, gcrefRegs=000000C4 {rdx rsi rdi}, byrefRegs=00000000 {}, byref, isz

IN001e: 000069 test     ecx, ecx
IN001f: 00006B jne      SHORT G_M1591_IG04

G_M1591_IG11:        ; offs=00006DH, size=0004H, bbWeight=1    PerfScore 2.00, gcrefRegs=00000080 {rdi}, byrefRegs=00000000 {}, byref

IN0020: 00006D mov      rax, gword ptr [rdi+8]

G_M1591_IG12:        ; offs=000071H, size=0009H, bbWeight=1    PerfScore 3.25, epilog, nogc, extend

IN002b: 000071 add      rsp, 40
IN002c: 000075 pop      rbx
IN002d: 000076 pop      rbp
IN002e: 000077 pop      rsi
IN002f: 000078 pop      rdi
IN0030: 000079 ret      

G_M1591_IG13:        ; offs=00007AH, size=0006H, bbWeight=0    PerfScore 0.00, gcVars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, gcvars, byref

IN0021: 00007A call     System.ThrowHelper:ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion()
IN0022: 00007F int3     

G_M1591_IG14:        ; offs=000080H, size=0006H, bbWeight=0    PerfScore 0.00, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref

IN0023: 000080 call     CORINFO_HELP_RNGCHKFAIL
IN0024: 000085 int3     


*************** Finishing PHASE Emit code

*************** Starting PHASE Emit GC+EH tables
Unwind Info:
  >> Start offset   : 0x000000 (not in unwind data)
  >>   End offset   : 0xd1ffab1e (not in unwind data)
  Version           : 1
  Flags             : 0x00
  SizeOfProlog      : 0x08
  CountOfUnwindCodes: 5
  FrameRegister     : none (0)
  FrameOffset       : N/A (no FrameRegister) (Value=0)
  UnwindCodes       :
    CodeOffset: 0x08 UnwindOp: UWOP_ALLOC_SMALL (2)     OpInfo: 4 * 8 + 8 = 40 = 0x28
    CodeOffset: 0x04 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbx (3)
    CodeOffset: 0x03 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbp (5)
    CodeOffset: 0x02 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rsi (6)
    CodeOffset: 0x01 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rdi (7)
allocUnwindInfo(pHotCode=0x00000000D1FFAB1E, pColdCode=0x0000000000000000, startOffset=0x0, endOffset=0x86, unwindSize=0xe, pUnwindBlock=0x00000000D1FFAB1E, funKind=0 (main function))
*************** In genIPmappingGen()
IP mapping count : 9
IL offs PROLOG : 0x00000000 ( STACK_EMPTY )
IL offs 0x0000 : 0x0000000B ( STACK_EMPTY )
IL offs 0x0006 : 0x00000025 ( STACK_EMPTY )
IL offs 0x0017 : 0x0000002C ( STACK_EMPTY )
IL offs 0x001E : 0x00000034 ( STACK_EMPTY )
IL offs NO_MAP : 0x00000069 ( STACK_EMPTY )
IL offs EPILOG : 0x00000071 ( STACK_EMPTY )
IL offs 0x001E : 0x0000007A ( STACK_EMPTY )
IL offs NO_MAP : 0x00000080 ( STACK_EMPTY )

*************** In genSetScopeInfo()
VarLocInfo count is 3
; Variable debug info: 3 live range(s), 2 var(s) for method SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]
  0(   UNKNOWN) : From 00000000h to 0000000Bh, in rcx
  0(   UNKNOWN) : From 0000000Bh to 00000025h, in rsi
  1(   UNKNOWN) : From 0000002Ah to 0000006Dh, in rdi
*************** In gcInfoBlockHdrSave()
Set code length to 134.
Set ReturnKind to Object.
Set Outgoing stack arg area size to 32.
Register slot id for reg rsi = 0.
Register slot id for reg rdi = 1.
Set state of slot 0 at instr offset 0x15 to Live.
Set state of slot 0 at instr offset 0x1a to Dead.
Set state of slot 0 at instr offset 0x20 to Live.
Set state of slot 1 at instr offset 0x20 to Live.
Set state of slot 0 at instr offset 0x25 to Dead.
Set state of slot 1 at instr offset 0x25 to Dead.
Set state of slot 0 at instr offset 0x2f to Live.
Set state of slot 1 at instr offset 0x2f to Live.
Set state of slot 0 at instr offset 0x34 to Dead.
Set state of slot 1 at instr offset 0x34 to Dead.
Defining 5 call sites:
    Offset 0x15, size 5.
    Offset 0x20, size 5.
    Offset 0x2f, size 5.
    Offset 0x7a, size 5.
    Offset 0x80, size 5.

*************** Finishing PHASE Emit GC+EH tables
Method code size: 134

Allocations for SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] (MethodHash=41e2f9c8)
count:       3155, size:     225734, max =       3072
allocateMemory:     262144, nraUsed:     233032

Alloc'd bytes by kind:
                  kind |       size |     pct
  ---------------------+------------+--------
         AssertionProp |       6460 |   2.86%
               ASTNode |      35848 |  15.88%
              InstDesc |       6052 |   2.68%
              ImpStack |        384 |   0.17%
            BasicBlock |       7768 |   3.44%
             fgArgInfo |        256 |   0.11%
       fgArgInfoPtrArr |         32 |   0.01%
              FlowList |        640 |   0.28%
     TreeStatementList |        128 |   0.06%
               SiScope |        304 |   0.13%
       DominatorMemory |        576 |   0.26%
                  LSRA |       4484 |   1.99%
         LSRA_Interval |       2320 |   1.03%
      LSRA_RefPosition |       8832 |   3.91%
          Reachability |         16 |   0.01%
                   SSA |       2912 |   1.29%
           ValueNumber |      19564 |   8.67%
              LvaTable |       4992 |   2.21%
            UnwindInfo |          0 |   0.00%
                hashBv |        440 |   0.19%
                bitset |        600 |   0.27%
          FixedBitVect |        104 |   0.05%
               Generic |       4902 |   2.17%
   LocalAddressVisitor |          0 |   0.00%
         FieldSeqStore |        368 |   0.16%
    ZeroOffsetFieldMap |        280 |   0.12%
          ArrayInfoMap |        192 |   0.09%
          MemoryPhiArg |         32 |   0.01%
                   CSE |       2288 |   1.01%
                    GC |       3285 |   1.46%
       CorTailCallInfo |          0 |   0.00%
              Inlining |       6432 |   2.85%
            ArrayStack |        512 |   0.23%
             DebugInfo |        480 |   0.21%
             DebugOnly |      92719 |  41.07%
               Codegen |       1176 |   0.52%
               LoopOpt |       2560 |   1.13%
             LoopHoist |          0 |   0.00%
               Unknown |       1060 |   0.47%
            RangeCheck |       3480 |   1.54%
              CopyProp |       2160 |   0.96%
           SideEffects |          0 |   0.00%
       ObjectAllocator |          0 |   0.00%
    VariableLiveRanges |          0 |   0.00%
           ClassLayout |        112 |   0.05%
       TailMergeThrows |          0 |   0.00%
             EarlyProp |         96 |   0.04%
              ZeroInit |        888 |   0.39%

****** DONE compiling SolutionAnalyzer.Results:BatchProjects(System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]):System.Collections.Generic.List`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]